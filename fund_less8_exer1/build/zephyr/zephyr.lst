
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	40 30 00 20 05 18 00 00 41 72 00 00 d9 17 00 00     @0. ....Ar......
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	d9 17 00 00 d9 17 00 00 d9 17 00 00 00 00 00 00     ................
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	41 14 00 00 d9 17 00 00 00 00 00 00 ed 13 00 00     A...............
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	d9 17 00 00                                         ....

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  60:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
				if (buf0 != NULL) {
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
  a0:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
			switch (*fmt) {
  c0:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
  d0:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
  e0:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................
  f0:	f1 14 00 00 f1 14 00 00 f1 14 00 00 f1 14 00 00     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
				align = VA_STACK_ALIGN(void *);
     120:	f000 f808 	bl	134 <__udivmoddi4>
			switch (*fmt) {
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     138:	4686      	mov	lr, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e08      	ldr	r6, [sp, #32]
     140:	4615      	mov	r5, r2
     142:	4674      	mov	r4, lr
		buf = (void *) ROUND_UP(buf, align);
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c2 	bne.w	2d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x163>
     14c:	4285      	cmp	r5, r0
     14e:	fab2 f282 	clz	r2, r2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     152:	d945      	bls.n	1e0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x73>
     154:	b14a      	cbz	r2, 16a <__data_size+0x26>
     156:	f1c2 0320 	rsb	r3, r2, #32
     15a:	fa00 fc02 	lsl.w	ip, r0, r2
     15e:	fa2e f303 	lsr.w	r3, lr, r3
		if (is_str_arg) {
     162:	4095      	lsls	r5, r2
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     164:	ea43 0c0c 	orr.w	ip, r3, ip
			int v = va_arg(ap, int);
     168:	4094      	lsls	r4, r2
     16a:	ea4f 4e15 	mov.w	lr, r5, lsr #16

			if (buf0 != NULL) {
				*(int *)buf = v;
			}
			buf += sizeof(int);
     16e:	b2a8      	uxth	r0, r5
     170:	fbbc f8fe 	udiv	r8, ip, lr
				arg_idx--;
     174:	0c23      	lsrs	r3, r4, #16
     176:	fb0e cc18 	mls	ip, lr, r8, ip
				parsing = false;
     17a:	fb08 f900 	mul.w	r9, r8, r0
				continue;
     17e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
				if (fmt[-1] == 'l') {
     182:	4599      	cmp	r9, r3
     184:	d928      	bls.n	1d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6b>
     186:	18eb      	adds	r3, r5, r3
					if (fmt[-2] == 'l') {
     188:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     18c:	d204      	bcs.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     18e:	4599      	cmp	r9, r3
				parsing = false;
     190:	d902      	bls.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
					if (fmt[-2] == 'l') {
     192:	f1a8 0702 	sub.w	r7, r8, #2
						align = VA_STACK_ALIGN(long long);
     196:	442b      	add	r3, r5
				size = sizeof(void *);
     198:	eba3 0309 	sub.w	r3, r3, r9
					v.ld = va_arg(ap, long double);
     19c:	b2a4      	uxth	r4, r4
     19e:	fbb3 fcfe 	udiv	ip, r3, lr
     1a2:	fb0e 331c 	mls	r3, lr, ip, r3
     1a6:	fb0c f000 	mul.w	r0, ip, r0
				buf = (void *) ROUND_UP(buf, align);
     1aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
				if (buf0 != NULL) {
     1ae:	42a0      	cmp	r0, r4
					if (BUF_OFFSET + size > len) {
     1b0:	d914      	bls.n	1dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6f>
     1b2:	192c      	adds	r4, r5, r4
     1b4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     1b8:	d204      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
						*(long double *)buf = v.ld;
     1ba:	42a0      	cmp	r0, r4
     1bc:	d902      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
				buf += size;
     1be:	f1ac 0302 	sub.w	r3, ip, #2
				parsing = false;
     1c2:	442c      	add	r4, r5
			switch (*fmt) {
     1c4:	1a24      	subs	r4, r4, r0
     1c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
			if (*++fmt == '\0') {
     1ca:	b11e      	cbz	r6, 1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     1cc:	40d4      	lsrs	r4, r2
     1ce:	2300      	movs	r3, #0
     1d0:	6034      	str	r4, [r6, #0]
			if (!parsing) {
     1d2:	6073      	str	r3, [r6, #4]
     1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d8:	4647      	mov	r7, r8
				if (*fmt == '%') {
     1da:	e7dd      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     1dc:	4663      	mov	r3, ip
					arg_idx++;
     1de:	e7f1      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e0:	bb92      	cbnz	r2, 248 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xdb>
     1e2:	1b43      	subs	r3, r0, r5
					parsing = true;
     1e4:	2101      	movs	r1, #1
     1e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
				align = VA_STACK_ALIGN(size_t);
     1ea:	b2af      	uxth	r7, r5
     1ec:	fbb3 fcfe 	udiv	ip, r3, lr
			switch (*fmt) {
     1f0:	0c20      	lsrs	r0, r4, #16
     1f2:	fb0e 331c 	mls	r3, lr, ip, r3
				parsing = false;
     1f6:	fb0c f807 	mul.w	r8, ip, r7

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
					return -EINVAL;
     1fe:	4598      	cmp	r8, r3
     200:	d962      	bls.n	2c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15b>
			long long v = va_arg(ap, long long);
     202:	18eb      	adds	r3, r5, r3
     204:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     208:	d204      	bcs.n	214 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xa7>
     20a:	4598      	cmp	r8, r3
     20c:	d902      	bls.n	214 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xa7>

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     20e:	f1ac 0002 	sub.w	r0, ip, #2
				}
			}
			buf += sizeof(long long);
     212:	442b      	add	r3, r5
     214:	eba3 0308 	sub.w	r3, r3, r8
		if (is_str_arg) {
     218:	b2a4      	uxth	r4, r4
		} else if (size == sizeof(int)) {
     21a:	fbb3 fcfe 	udiv	ip, r3, lr
			int v = va_arg(ap, int);
     21e:	fb0e 331c 	mls	r3, lr, ip, r3
			if (buf0 != NULL) {
     222:	fb0c f707 	mul.w	r7, ip, r7
		} else if (size == sizeof(long long)) {
     226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
			long long v = va_arg(ap, long long);
     22a:	42a7      	cmp	r7, r4
     22c:	d94e      	bls.n	2cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15f>
     22e:	192c      	adds	r4, r5, r4
     230:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
			if (buf0 != NULL) {
     234:	d204      	bcs.n	240 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd3>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     236:	42a7      	cmp	r7, r4
     238:	d902      	bls.n	240 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd3>
     23a:	f1ac 0302 	sub.w	r3, ip, #2
			s = va_arg(ap, char *);
     23e:	442c      	add	r4, r5
     240:	1be4      	subs	r4, r4, r7
     242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			if (is_ro && !do_ro) {
     246:	e7c0      	b.n	1ca <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5d>
     248:	f1c2 0320 	rsb	r3, r2, #32
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24c:	fa20 f103 	lsr.w	r1, r0, r3
     250:	4095      	lsls	r5, r2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     252:	4090      	lsls	r0, r2
     254:	fa2e f303 	lsr.w	r3, lr, r3
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     258:	4303      	orrs	r3, r0
     25a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25e:	b2af      	uxth	r7, r5
				if (buf0 != NULL) {
     260:	fbb1 fcfe 	udiv	ip, r1, lr
					str_ptr_pos[s_idx] = s_ptr_idx;
     264:	fb0e 101c 	mls	r0, lr, ip, r1
     268:	0c19      	lsrs	r1, r3, #16
     26a:	fb0c f807 	mul.w	r8, ip, r7
     26e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
					str_ptr_arg[s_idx] = arg_idx;
     272:	4588      	cmp	r8, r1
     274:	fa04 f402 	lsl.w	r4, r4, r2
					if (is_ro) {
     278:	d922      	bls.n	2c0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x153>
     27a:	1869      	adds	r1, r5, r1
     27c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     280:	d204      	bcs.n	28c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11f>
     282:	4588      	cmp	r8, r1
     284:	d902      	bls.n	28c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11f>
						s_ro_cnt++;
     286:	f1ac 0002 	sub.w	r0, ip, #2
				s_idx++;
     28a:	4429      	add	r1, r5
					if (BUF_OFFSET + size > len) {
     28c:	eba1 0108 	sub.w	r1, r1, r8
			buf += sizeof(char *);
     290:	b29b      	uxth	r3, r3
					if (BUF_OFFSET + size > len) {
     292:	fbb1 fcfe 	udiv	ip, r1, lr
			switch (*fmt) {
     296:	fb0e 111c 	mls	r1, lr, ip, r1
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     29a:	fb0c f707 	mul.w	r7, ip, r7
     29e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
				} else if (is_ro) {
     2a2:	429f      	cmp	r7, r3
     2a4:	d90e      	bls.n	2c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x157>
					len += 1;
     2a6:	18eb      	adds	r3, r5, r3
     2a8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
					len += 2;
     2ac:	d204      	bcs.n	2b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14b>
				} else if (rws_pos_en) {
     2ae:	429f      	cmp	r7, r3
     2b0:	d902      	bls.n	2b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14b>
					len += strlen(s) + 1 + 1;
     2b2:	f1ac 0102 	sub.w	r1, ip, #2
     2b6:	442b      	add	r3, r5
     2b8:	1bdb      	subs	r3, r3, r7
     2ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2be:	e792      	b.n	1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     2c0:	4660      	mov	r0, ip
     2c2:	e7e3      	b.n	28c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11f>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c4:	4661      	mov	r1, ip
     2c6:	e7f7      	b.n	2b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14b>
     2c8:	4660      	mov	r0, ip
     2ca:	e7a3      	b.n	214 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xa7>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     2cc:	4663      	mov	r3, ip
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2ce:	e7b7      	b.n	240 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd3>
     2d0:	4283      	cmp	r3, r0
     2d2:	d906      	bls.n	2e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x175>
     2d4:	b916      	cbnz	r6, 2dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x16f>
     2d6:	2100      	movs	r1, #0
     2d8:	4608      	mov	r0, r1
     2da:	e77b      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     2dc:	e9c6 e000 	strd	lr, r0, [r6]
	*(char **)buf0 = NULL;

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);

	if (rws_pos_en) {
     2e0:	e7f9      	b.n	2d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x169>
	*(char **)buf0 = NULL;
     2e2:	fab3 f783 	clz	r7, r3
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     2e6:	b98f      	cbnz	r7, 30c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19f>
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2e8:	4283      	cmp	r3, r0
     2ea:	d301      	bcc.n	2f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x183>
	if (rws_pos_en) {
     2ec:	4572      	cmp	r2, lr
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2ee:	d808      	bhi.n	302 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x195>
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2f0:	ebbe 0402 	subs.w	r4, lr, r2
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f4:	eb60 0303 	sbc.w	r3, r0, r3
     2f8:	2001      	movs	r0, #1
     2fa:	469c      	mov	ip, r3
		for (i = 0; i < s_idx; i++) {
     2fc:	b91e      	cbnz	r6, 306 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x199>
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     2fe:	2100      	movs	r1, #0
     300:	e768      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
		for (i = 0; i < s_idx; i++) {
     302:	4638      	mov	r0, r7
     304:	e7fa      	b.n	2fc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x18f>
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     306:	e9c6 4c00 	strd	r4, ip, [r6]
     30a:	e7f8      	b.n	2fe <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x191>
     30c:	f1c7 0c20 	rsb	ip, r7, #32
			*buf++ = str_ptr_arg[i];
     310:	40bb      	lsls	r3, r7
		if (BUF_OFFSET + 1 + size > len) {
     312:	fa22 f40c 	lsr.w	r4, r2, ip
			*buf++ = str_ptr_arg[i];
     316:	431c      	orrs	r4, r3
	for (i = 0; i < s_idx; i++) {
     318:	fa2e f10c 	lsr.w	r1, lr, ip
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     31c:	fa20 f30c 	lsr.w	r3, r0, ip
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     320:	40b8      	lsls	r0, r7
		pkg_hdr->desc.rw_str_cnt = 0;
     322:	4301      	orrs	r1, r0
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     324:	ea4f 4914 	mov.w	r9, r4, lsr #16
     328:	fa0e f507 	lsl.w	r5, lr, r7
			if (BUF_OFFSET + 1 > len) {
     32c:	fbb3 f8f9 	udiv	r8, r3, r9
     330:	fa1f fe84 	uxth.w	lr, r4
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     334:	fb09 3018 	mls	r0, r9, r8, r3
			if (BUF_OFFSET + 1 > len) {
     338:	0c0b      	lsrs	r3, r1, #16
			*buf++ = pos;
     33a:	fb08 fa0e 	mul.w	sl, r8, lr
		for (i = 0; i < s_idx; i++) {
     33e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     342:	459a      	cmp	sl, r3
     344:	fa02 f207 	lsl.w	r2, r2, r7
     348:	d940      	bls.n	3cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x25f>
     34a:	18e3      	adds	r3, r4, r3
     34c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
		if (rws_pos_en) {
     350:	d204      	bcs.n	35c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1ef>
     352:	459a      	cmp	sl, r3
			*buf++ = str_ptr_arg[i];
     354:	d902      	bls.n	35c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1ef>
     356:	f1a8 0002 	sub.w	r0, r8, #2
     35a:	4423      	add	r3, r4
			size = 0;
     35c:	eba3 030a 	sub.w	r3, r3, sl
		if (BUF_OFFSET + 1 + size > len) {
     360:	b289      	uxth	r1, r1
     362:	fbb3 f8f9 	udiv	r8, r3, r9
     366:	fb09 3318 	mls	r3, r9, r8, r3
		*buf++ = str_ptr_pos[i];
     36a:	fb08 fe0e 	mul.w	lr, r8, lr
     36e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
		memcpy(buf, s, size);
     372:	458e      	cmp	lr, r1
     374:	d92c      	bls.n	3d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x263>
     376:	1861      	adds	r1, r4, r1
     378:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
		buf += size;
     37c:	d204      	bcs.n	388 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x21b>
     37e:	458e      	cmp	lr, r1
	for (i = 0; i < s_idx; i++) {
     380:	d902      	bls.n	388 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x21b>
     382:	f1a8 0302 	sub.w	r3, r8, #2
     386:	4421      	add	r1, r4
     388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     38c:	fba0 9802 	umull	r9, r8, r0, r2
     390:	eba1 010e 	sub.w	r1, r1, lr
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     394:	4541      	cmp	r1, r8
     396:	46ce      	mov	lr, r9
     398:	4643      	mov	r3, r8
			size = strlen(s) + 1;
     39a:	d302      	bcc.n	3a2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x235>
     39c:	d106      	bne.n	3ac <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23f>
     39e:	454d      	cmp	r5, r9
     3a0:	d204      	bcs.n	3ac <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23f>
     3a2:	ebb9 0e02 	subs.w	lr, r9, r2
		return -EFAULT;
     3a6:	eb68 0304 	sbc.w	r3, r8, r4
     3aa:	3801      	subs	r0, #1
     3ac:	2e00      	cmp	r6, #0
     3ae:	d0a6      	beq.n	2fe <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x191>
     3b0:	ebb5 020e 	subs.w	r2, r5, lr
     3b4:	eb61 0103 	sbc.w	r1, r1, r3
     3b8:	fa01 fc0c 	lsl.w	ip, r1, ip
     3bc:	fa22 f307 	lsr.w	r3, r2, r7
     3c0:	ea4c 0303 	orr.w	r3, ip, r3
     3c4:	40f9      	lsrs	r1, r7
     3c6:	e9c6 3100 	strd	r3, r1, [r6]
     3ca:	e798      	b.n	2fe <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x191>
     3cc:	4640      	mov	r0, r8
     3ce:	e7c5      	b.n	35c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1ef>
     3d0:	4643      	mov	r3, r8
     3d2:	e7d9      	b.n	388 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x21b>

000003d4 <get_access>:
K_SEM_DEFINE(instance_monitor_sem, 10, 10);
/* STEP 3 - Initialize the available instances of this resource */
volatile uint32_t available_instance_count = 10;
// Function for getting access of resource
void get_access(void)
{
     3d4:	b508      	push	{r3, lr}
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
     3d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     3da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     3de:	4806      	ldr	r0, [pc, #24]	; (3f8 <get_access+0x24>)
     3e0:	f003 fca6 	bl	3d30 <z_impl_k_sem_take>
	/* STEP 10.1 - Get semaphore before access to the resource */
	k_sem_take(&instance_monitor_sem,K_FOREVER);
	/* STEP 6.1 - Decrement available resource */
	available_instance_count--;
     3e4:	4b05      	ldr	r3, [pc, #20]	; (3fc <get_access+0x28>)
	printk("Resource taken and available_instance_count = %d\n",  available_instance_count);
     3e6:	4806      	ldr	r0, [pc, #24]	; (400 <CONFIG_FLASH_SIZE>)
	available_instance_count--;
     3e8:	681a      	ldr	r2, [r3, #0]
     3ea:	3a01      	subs	r2, #1
     3ec:	601a      	str	r2, [r3, #0]
	printk("Resource taken and available_instance_count = %d\n",  available_instance_count);
     3ee:	6819      	ldr	r1, [r3, #0]
}
     3f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("Resource taken and available_instance_count = %d\n",  available_instance_count);
     3f4:	f006 bdc8 	b.w	6f88 <printk>
     3f8:	200001a0 	.word	0x200001a0
     3fc:	20000000 	.word	0x20000000
     400:	000080d8 	.word	0x000080d8

00000404 <consumer>:
	}
}

/* STEP 5 - Consumer thread obtaining access to instance */
void consumer(void)
{
     404:	b508      	push	{r3, lr}
	printk("Consumer thread started\n");
     406:	4807      	ldr	r0, [pc, #28]	; (424 <consumer+0x20>)
     408:	f006 fdbe 	bl	6f88 <printk>
	while (1) {
		get_access();
		// Assume the resource instance access is released at this point
		k_msleep(sys_rand32_get() % 10);
     40c:	240a      	movs	r4, #10
		get_access();
     40e:	f7ff ffe1 	bl	3d4 <get_access>
	if (z_syscall_trap()) {
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
     412:	f001 fb99 	bl	1b48 <z_impl_sys_rand32_get>
		k_msleep(sys_rand32_get() % 10);
     416:	fbb0 f3f4 	udiv	r3, r0, r4
     41a:	fb03 0014 	mls	r0, r3, r4, r0
     41e:	f006 fda1 	bl	6f64 <k_msleep.isra.0>
	while (1) {
     422:	e7f4      	b.n	40e <consumer+0xa>
     424:	0000810a 	.word	0x0000810a

00000428 <release_access>:
{
     428:	b508      	push	{r3, lr}
	available_instance_count++;
     42a:	4b06      	ldr	r3, [pc, #24]	; (444 <release_access+0x1c>)
	printk("Resource given and available_instance_count = %d\n", available_instance_count);
     42c:	4806      	ldr	r0, [pc, #24]	; (448 <release_access+0x20>)
	available_instance_count++;
     42e:	681a      	ldr	r2, [r3, #0]
     430:	3201      	adds	r2, #1
     432:	601a      	str	r2, [r3, #0]
	printk("Resource given and available_instance_count = %d\n", available_instance_count);
     434:	6819      	ldr	r1, [r3, #0]
     436:	f006 fda7 	bl	6f88 <printk>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     43a:	4804      	ldr	r0, [pc, #16]	; (44c <release_access+0x24>)
}
     43c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     440:	f003 bc56 	b.w	3cf0 <z_impl_k_sem_give>
     444:	20000000 	.word	0x20000000
     448:	00008123 	.word	0x00008123
     44c:	200001a0 	.word	0x200001a0

00000450 <producer>:
{
     450:	b508      	push	{r3, lr}
	printk("Producer thread started\n");
     452:	4808      	ldr	r0, [pc, #32]	; (474 <producer+0x24>)
     454:	f006 fd98 	bl	6f88 <printk>
		k_msleep(500 + sys_rand32_get() % 10);
     458:	240a      	movs	r4, #10
		release_access();
     45a:	f7ff ffe5 	bl	428 <release_access>
     45e:	f001 fb73 	bl	1b48 <z_impl_sys_rand32_get>
		k_msleep(500 + sys_rand32_get() % 10);
     462:	fbb0 f3f4 	udiv	r3, r0, r4
     466:	fb03 0014 	mls	r0, r3, r4, r0
     46a:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
     46e:	f006 fd79 	bl	6f64 <k_msleep.isra.0>
	while (1) {
     472:	e7f2      	b.n	45a <producer+0xa>
     474:	00008155 	.word	0x00008155

00000478 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
     478:	4b01      	ldr	r3, [pc, #4]	; (480 <char_out+0x8>)
     47a:	681b      	ldr	r3, [r3, #0]
     47c:	4718      	bx	r3
     47e:	bf00      	nop
     480:	20000004 	.word	0x20000004

00000484 <__printk_hook_install>:
	_char_out = fn;
     484:	4b01      	ldr	r3, [pc, #4]	; (48c <__printk_hook_install+0x8>)
     486:	6018      	str	r0, [r3, #0]
}
     488:	4770      	bx	lr
     48a:	bf00      	nop
     48c:	20000004 	.word	0x20000004

00000490 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     490:	b507      	push	{r0, r1, r2, lr}
     492:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     494:	2100      	movs	r1, #0
     496:	4602      	mov	r2, r0
     498:	9100      	str	r1, [sp, #0]
     49a:	4803      	ldr	r0, [pc, #12]	; (4a8 <vprintk+0x18>)
     49c:	f000 f914 	bl	6c8 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     4a0:	b003      	add	sp, #12
     4a2:	f85d fb04 	ldr.w	pc, [sp], #4
     4a6:	bf00      	nop
     4a8:	00000479 	.word	0x00000479

000004ac <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     4ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     4b0:	8b05      	ldrh	r5, [r0, #24]
{
     4b2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     4b4:	0728      	lsls	r0, r5, #28
{
     4b6:	4690      	mov	r8, r2
	if (processing) {
     4b8:	d411      	bmi.n	4de <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
     4ba:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     4bc:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     4c0:	f040 80cd 	bne.w	65e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x176>
			evt = process_recheck(mgr);
     4c4:	4620      	mov	r0, r4
     4c6:	f006 fd76 	bl	6fb6 <process_recheck>
		}

		if (evt == EVT_NOP) {
     4ca:	b178      	cbz	r0, 4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
     4cc:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     4ce:	8b21      	ldrh	r1, [r4, #24]
     4d0:	2804      	cmp	r0, #4
     4d2:	d811      	bhi.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4d4:	e8df f000 	tbb	[pc, r0]
     4d8:	856d10c3 	.word	0x856d10c3
     4dc:	95          	.byte	0x95
     4dd:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
     4de:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     4e0:	bf0c      	ite	eq
     4e2:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
     4e6:	f045 0520 	orrne.w	r5, r5, #32
     4ea:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     4ec:	f388 8811 	msr	BASEPRI, r8
     4f0:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     4f8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     4fc:	45aa      	cmp	sl, r5
     4fe:	f000 80a6 	beq.w	64e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x166>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
     502:	2700      	movs	r7, #0
     504:	46b9      	mov	r9, r7
     506:	463e      	mov	r6, r7
     508:	68a3      	ldr	r3, [r4, #8]
     50a:	2b00      	cmp	r3, #0
     50c:	f000 80bd 	beq.w	68a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     510:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     514:	8321      	strh	r1, [r4, #24]
     516:	f388 8811 	msr	BASEPRI, r8
     51a:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     51e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     520:	2900      	cmp	r1, #0
     522:	f000 80bb 	beq.w	69c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b4>
	return node->next;
     526:	680d      	ldr	r5, [r1, #0]
     528:	2900      	cmp	r1, #0
     52a:	f000 80b7 	beq.w	69c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b4>
		mon->callback(mgr, mon, state, res);
     52e:	f8d1 8004 	ldr.w	r8, [r1, #4]
     532:	4633      	mov	r3, r6
     534:	4652      	mov	r2, sl
     536:	4620      	mov	r0, r4
     538:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     53a:	2d00      	cmp	r5, #0
     53c:	d076      	beq.n	62c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x144>
     53e:	682b      	ldr	r3, [r5, #0]
     540:	4629      	mov	r1, r5
     542:	461d      	mov	r5, r3
     544:	e7f0      	b.n	528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>
     546:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     54a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     54c:	2a01      	cmp	r2, #1
     54e:	d81b      	bhi.n	588 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa0>
	list->head = NULL;
     550:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     552:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     556:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     558:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     55a:	b289      	uxth	r1, r1
	list->tail = NULL;
     55c:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     560:	d109      	bne.n	576 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8e>
     562:	463b      	mov	r3, r7
     564:	e003      	b.n	56e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x86>
				mgr->refs += 1U;
     566:	8b62      	ldrh	r2, [r4, #26]
     568:	3201      	adds	r2, #1
     56a:	8362      	strh	r2, [r4, #26]
	return node->next;
     56c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     56e:	2b00      	cmp	r3, #0
     570:	d1f9      	bne.n	566 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     572:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     576:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     578:	4620      	mov	r0, r4
     57a:	f006 fd1c 	bl	6fb6 <process_recheck>
     57e:	2800      	cmp	r0, #0
     580:	d07b      	beq.n	67a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x192>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     582:	f041 0120 	orr.w	r1, r1, #32
     586:	e077      	b.n	678 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x190>
	} else if (state == ONOFF_STATE_TO_OFF) {
     588:	2b04      	cmp	r3, #4
     58a:	d10a      	bne.n	5a2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     58c:	f021 0107 	bic.w	r1, r1, #7
     590:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     592:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     594:	4620      	mov	r0, r4
     596:	f006 fd0e 	bl	6fb6 <process_recheck>
     59a:	b110      	cbz	r0, 5a2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xba>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     59c:	f041 0120 	orr.w	r1, r1, #32
     5a0:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5a2:	8b21      	ldrh	r1, [r4, #24]
     5a4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     5a8:	45aa      	cmp	sl, r5
     5aa:	d050      	beq.n	64e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x166>
     5ac:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
     5ae:	46b9      	mov	r9, r7
     5b0:	e7aa      	b.n	508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>
			transit = mgr->transitions->start;
     5b2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5b4:	f021 0107 	bic.w	r1, r1, #7
     5b8:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
     5bc:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
     5be:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
     5c2:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     5c4:	d12d      	bne.n	622 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x13a>
		    || (transit != NULL)) {
     5c6:	f1b9 0f00 	cmp.w	r9, #0
     5ca:	d040      	beq.n	64e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x166>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     5cc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     5d0:	8321      	strh	r1, [r4, #24]
     5d2:	f388 8811 	msr	BASEPRI, r8
     5d6:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
     5da:	493a      	ldr	r1, [pc, #232]	; (6c4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1dc>)
     5dc:	4620      	mov	r0, r4
     5de:	47c8      	blx	r9
     5e0:	e029      	b.n	636 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5e2:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
     5e6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5e8:	f041 0104 	orr.w	r1, r1, #4
     5ec:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     5ee:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
     5f0:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
     5f4:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     5f6:	d0e6      	beq.n	5c6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xde>
     5f8:	2700      	movs	r7, #0
		res = 0;
     5fa:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5fc:	f04f 0a04 	mov.w	sl, #4
     600:	e782      	b.n	508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     602:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
     606:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     608:	f041 0105 	orr.w	r1, r1, #5
     60c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     60e:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
     610:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
     614:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     616:	d0d6      	beq.n	5c6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xde>
     618:	2700      	movs	r7, #0
		res = 0;
     61a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     61c:	f04f 0a05 	mov.w	sl, #5
     620:	e772      	b.n	508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>
				   && !sys_slist_is_empty(&mgr->monitors);
     622:	2700      	movs	r7, #0
		res = 0;
     624:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     626:	f04f 0a06 	mov.w	sl, #6
     62a:	e76d      	b.n	508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     62c:	462b      	mov	r3, r5
     62e:	e787      	b.n	540 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x58>
			if (transit != NULL) {
     630:	f1b9 0f00 	cmp.w	r9, #0
     634:	d1d1      	bne.n	5da <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf2>
	__asm__ volatile(
     636:	f04f 0320 	mov.w	r3, #32
     63a:	f3ef 8811 	mrs	r8, BASEPRI
     63e:	f383 8812 	msr	BASEPRI_MAX, r3
     642:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     646:	8b23      	ldrh	r3, [r4, #24]
     648:	f023 0308 	bic.w	r3, r3, #8
     64c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     64e:	8b25      	ldrh	r5, [r4, #24]
     650:	06ea      	lsls	r2, r5, #27
     652:	d52e      	bpl.n	6b2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ca>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     654:	f025 0310 	bic.w	r3, r5, #16
     658:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     65a:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
     65e:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     660:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     662:	2e00      	cmp	r6, #0
     664:	f6bf af6f 	bge.w	546 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5e>
	list->head = NULL;
     668:	2300      	movs	r3, #0
		*clients = mgr->clients;
     66a:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
     66c:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     670:	f021 0107 	bic.w	r1, r1, #7
     674:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
     678:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     67a:	8b21      	ldrh	r1, [r4, #24]
     67c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     680:	45aa      	cmp	sl, r5
     682:	f04f 0900 	mov.w	r9, #0
     686:	f47f af3f 	bne.w	508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>
		    || !sys_slist_is_empty(&clients)
     68a:	2f00      	cmp	r7, #0
     68c:	d09b      	beq.n	5c6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xde>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     68e:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     692:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
     694:	f388 8811 	msr	BASEPRI, r8
     698:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
     69c:	2f00      	cmp	r7, #0
     69e:	d0c7      	beq.n	630 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x148>
	return node->next;
     6a0:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
     6a2:	4639      	mov	r1, r7
     6a4:	4633      	mov	r3, r6
     6a6:	4652      	mov	r2, sl
     6a8:	4620      	mov	r0, r4
     6aa:	f006 fcb0 	bl	700e <notify_one>
	list->head = node;
     6ae:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
     6b0:	e7f4      	b.n	69c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b4>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     6b2:	06ab      	lsls	r3, r5, #26
     6b4:	f57f af1a 	bpl.w	4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     6b8:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     6bc:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     6be:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     6c2:	e6ff      	b.n	4c4 <process_event+0x18>
     6c4:	0000703b 	.word	0x0000703b

000006c8 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6cc:	4681      	mov	r9, r0
     6ce:	b095      	sub	sp, #84	; 0x54
     6d0:	468b      	mov	fp, r1
     6d2:	4617      	mov	r7, r2
     6d4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     6d6:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     6d8:	7838      	ldrb	r0, [r7, #0]
     6da:	b908      	cbnz	r0, 6e0 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
     6dc:	4628      	mov	r0, r5
     6de:	e358      	b.n	d92 <__z_interrupt_stack_SIZEOF+0x552>
			OUTC(*fp++);
     6e0:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
     6e2:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     6e4:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
     6e6:	d006      	beq.n	6f6 <z_cbvprintf_impl+0x2e>
			OUTC('%');
     6e8:	4659      	mov	r1, fp
     6ea:	47c8      	blx	r9
     6ec:	2800      	cmp	r0, #0
     6ee:	f2c0 8350 	blt.w	d92 <__z_interrupt_stack_SIZEOF+0x552>
     6f2:	3501      	adds	r5, #1
		if (bps == NULL) {
     6f4:	e1fb      	b.n	aee <__z_interrupt_stack_SIZEOF+0x2ae>
		} state = {
     6f6:	2218      	movs	r2, #24
     6f8:	2100      	movs	r1, #0
     6fa:	a80e      	add	r0, sp, #56	; 0x38
     6fc:	f006 fde3 	bl	72c6 <memset>
	if (*sp == '%') {
     700:	787b      	ldrb	r3, [r7, #1]
     702:	2b25      	cmp	r3, #37	; 0x25
     704:	d07d      	beq.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
     706:	2300      	movs	r3, #0
     708:	1c78      	adds	r0, r7, #1
     70a:	4698      	mov	r8, r3
     70c:	469e      	mov	lr, r3
     70e:	469c      	mov	ip, r3
     710:	461e      	mov	r6, r3
     712:	4601      	mov	r1, r0
		switch (*sp) {
     714:	f810 2b01 	ldrb.w	r2, [r0], #1
     718:	2a2b      	cmp	r2, #43	; 0x2b
     71a:	f000 80a1 	beq.w	860 <__z_interrupt_stack_SIZEOF+0x20>
     71e:	f200 8098 	bhi.w	852 <__z_interrupt_stack_SIZEOF+0x12>
     722:	2a20      	cmp	r2, #32
     724:	f000 809f 	beq.w	866 <__z_interrupt_stack_SIZEOF+0x26>
     728:	2a23      	cmp	r2, #35	; 0x23
     72a:	f000 809f 	beq.w	86c <__z_interrupt_stack_SIZEOF+0x2c>
     72e:	b12b      	cbz	r3, 73c <z_cbvprintf_impl+0x74>
     730:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     738:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     73c:	f1b8 0f00 	cmp.w	r8, #0
     740:	d005      	beq.n	74e <z_cbvprintf_impl+0x86>
     742:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     746:	f043 0320 	orr.w	r3, r3, #32
     74a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     74e:	f1be 0f00 	cmp.w	lr, #0
     752:	d005      	beq.n	760 <z_cbvprintf_impl+0x98>
     754:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     758:	f043 0310 	orr.w	r3, r3, #16
     75c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     760:	f1bc 0f00 	cmp.w	ip, #0
     764:	d005      	beq.n	772 <z_cbvprintf_impl+0xaa>
     766:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     76a:	f043 0308 	orr.w	r3, r3, #8
     76e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     772:	b12e      	cbz	r6, 780 <z_cbvprintf_impl+0xb8>
     774:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     778:	f043 0304 	orr.w	r3, r3, #4
     77c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
     780:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     784:	f003 0044 	and.w	r0, r3, #68	; 0x44
     788:	2844      	cmp	r0, #68	; 0x44
     78a:	d103      	bne.n	794 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
     78c:	f36f 1386 	bfc	r3, #6, #1
     790:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
     794:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     798:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
     79a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     79e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     7a2:	d17f      	bne.n	8a4 <__z_interrupt_stack_SIZEOF+0x64>
		conv->width_star = true;
     7a4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     7a8:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
     7ac:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     7ae:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
     7b2:	781a      	ldrb	r2, [r3, #0]
     7b4:	2a2e      	cmp	r2, #46	; 0x2e
     7b6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     7ba:	bf0c      	ite	eq
     7bc:	2101      	moveq	r1, #1
     7be:	2100      	movne	r1, #0
     7c0:	f361 0241 	bfi	r2, r1, #1, #1
     7c4:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
     7c8:	d178      	bne.n	8bc <__z_interrupt_stack_SIZEOF+0x7c>
	if (*sp == '*') {
     7ca:	785a      	ldrb	r2, [r3, #1]
     7cc:	2a2a      	cmp	r2, #42	; 0x2a
     7ce:	d06e      	beq.n	8ae <__z_interrupt_stack_SIZEOF+0x6e>
	++sp;
     7d0:	3301      	adds	r3, #1
	size_t val = 0;
     7d2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     7d4:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     7d8:	4619      	mov	r1, r3
     7da:	f811 0b01 	ldrb.w	r0, [r1], #1
     7de:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
     7e2:	2e09      	cmp	r6, #9
     7e4:	f240 8095 	bls.w	912 <__z_interrupt_stack_SIZEOF+0xd2>
	conv->unsupported |= ((conv->prec_value < 0)
     7e8:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
     7ec:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
     7ee:	f3c1 0040 	ubfx	r0, r1, #1, #1
     7f2:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
     7f6:	460a      	mov	r2, r1
     7f8:	f360 0241 	bfi	r2, r0, #1, #1
     7fc:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     800:	e05c      	b.n	8bc <__z_interrupt_stack_SIZEOF+0x7c>
		conv->specifier = *sp++;
     802:	1cba      	adds	r2, r7, #2
     804:	9203      	str	r2, [sp, #12]
     806:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
     80a:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     80e:	07da      	lsls	r2, r3, #31
     810:	f140 812e 	bpl.w	a70 <__z_interrupt_stack_SIZEOF+0x230>
			width = va_arg(ap, int);
     814:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
     818:	f1b8 0f00 	cmp.w	r8, #0
     81c:	da07      	bge.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
				conv->flag_dash = true;
     81e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     822:	f042 0204 	orr.w	r2, r2, #4
     826:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
     82a:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
     82e:	075e      	lsls	r6, r3, #29
     830:	f140 8127 	bpl.w	a82 <__z_interrupt_stack_SIZEOF+0x242>
			int arg = va_arg(ap, int);
     834:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
     838:	f1ba 0f00 	cmp.w	sl, #0
     83c:	f280 8126 	bge.w	a8c <__z_interrupt_stack_SIZEOF+0x24c>
				conv->prec_present = false;
     840:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     844:	f36f 0341 	bfc	r3, #1, #1
     848:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
     84c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
     850:	e11c      	b.n	a8c <__z_interrupt_stack_SIZEOF+0x24c>
		switch (*sp) {
     852:	2a2d      	cmp	r2, #45	; 0x2d
     854:	d00d      	beq.n	872 <__z_interrupt_stack_SIZEOF+0x32>
     856:	2a30      	cmp	r2, #48	; 0x30
     858:	f47f af69 	bne.w	72e <z_cbvprintf_impl+0x66>
     85c:	2301      	movs	r3, #1
	} while (loop);
     85e:	e758      	b.n	712 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
     860:	f04f 0c01 	mov.w	ip, #1
     864:	e755      	b.n	712 <z_cbvprintf_impl+0x4a>
     866:	f04f 0e01 	mov.w	lr, #1
     86a:	e752      	b.n	712 <z_cbvprintf_impl+0x4a>
     86c:	f04f 0801 	mov.w	r8, #1
     870:	e74f      	b.n	712 <z_cbvprintf_impl+0x4a>
     872:	2601      	movs	r6, #1
     874:	e74d      	b.n	712 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
     876:	fb0e 6202 	mla	r2, lr, r2, r6
     87a:	3a30      	subs	r2, #48	; 0x30
     87c:	4603      	mov	r3, r0
     87e:	4618      	mov	r0, r3
     880:	f810 6b01 	ldrb.w	r6, [r0], #1
     884:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
     888:	f1bc 0f09 	cmp.w	ip, #9
     88c:	d9f3      	bls.n	876 <__z_interrupt_stack_SIZEOF+0x36>
	if (sp != wp) {
     88e:	4299      	cmp	r1, r3
     890:	d08f      	beq.n	7b2 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     892:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
     896:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
     898:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     89a:	f362 0141 	bfi	r1, r2, #1, #1
     89e:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
     8a2:	e786      	b.n	7b2 <z_cbvprintf_impl+0xea>
     8a4:	460b      	mov	r3, r1
	size_t val = 0;
     8a6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     8a8:	f04f 0e0a 	mov.w	lr, #10
     8ac:	e7e7      	b.n	87e <__z_interrupt_stack_SIZEOF+0x3e>
		conv->prec_star = true;
     8ae:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     8b2:	f042 0204 	orr.w	r2, r2, #4
     8b6:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
     8ba:	3302      	adds	r3, #2
	switch (*sp) {
     8bc:	781a      	ldrb	r2, [r3, #0]
     8be:	2a6c      	cmp	r2, #108	; 0x6c
     8c0:	d047      	beq.n	952 <__z_interrupt_stack_SIZEOF+0x112>
     8c2:	d82b      	bhi.n	91c <__z_interrupt_stack_SIZEOF+0xdc>
     8c4:	2a68      	cmp	r2, #104	; 0x68
     8c6:	d031      	beq.n	92c <__z_interrupt_stack_SIZEOF+0xec>
     8c8:	2a6a      	cmp	r2, #106	; 0x6a
     8ca:	d04b      	beq.n	964 <__z_interrupt_stack_SIZEOF+0x124>
     8cc:	2a4c      	cmp	r2, #76	; 0x4c
     8ce:	d051      	beq.n	974 <__z_interrupt_stack_SIZEOF+0x134>
	conv->specifier = *sp++;
     8d0:	461a      	mov	r2, r3
     8d2:	f812 3b01 	ldrb.w	r3, [r2], #1
     8d6:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
     8d8:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
     8da:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
     8de:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
     8e2:	f200 80be 	bhi.w	a62 <__z_interrupt_stack_SIZEOF+0x222>
     8e6:	2b6d      	cmp	r3, #109	; 0x6d
     8e8:	d851      	bhi.n	98e <__z_interrupt_stack_SIZEOF+0x14e>
     8ea:	2b69      	cmp	r3, #105	; 0x69
     8ec:	f200 80b9 	bhi.w	a62 <__z_interrupt_stack_SIZEOF+0x222>
     8f0:	2b57      	cmp	r3, #87	; 0x57
     8f2:	d867      	bhi.n	9c4 <__z_interrupt_stack_SIZEOF+0x184>
     8f4:	2b41      	cmp	r3, #65	; 0x41
     8f6:	d003      	beq.n	900 <__z_interrupt_stack_SIZEOF+0xc0>
     8f8:	3b45      	subs	r3, #69	; 0x45
     8fa:	2b02      	cmp	r3, #2
     8fc:	f200 80b1 	bhi.w	a62 <__z_interrupt_stack_SIZEOF+0x222>
		conv->specifier_cat = SPECIFIER_FP;
     900:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     904:	2204      	movs	r2, #4
     906:	f362 0302 	bfi	r3, r2, #0, #3
     90a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
     90e:	2301      	movs	r3, #1
			break;
     910:	e073      	b.n	9fa <__z_interrupt_stack_SIZEOF+0x1ba>
		val = 10U * val + *sp++ - '0';
     912:	fb0c 0202 	mla	r2, ip, r2, r0
     916:	3a30      	subs	r2, #48	; 0x30
     918:	460b      	mov	r3, r1
     91a:	e75d      	b.n	7d8 <z_cbvprintf_impl+0x110>
	switch (*sp) {
     91c:	2a74      	cmp	r2, #116	; 0x74
     91e:	d025      	beq.n	96c <__z_interrupt_stack_SIZEOF+0x12c>
     920:	2a7a      	cmp	r2, #122	; 0x7a
     922:	d1d5      	bne.n	8d0 <__z_interrupt_stack_SIZEOF+0x90>
		conv->length_mod = LENGTH_Z;
     924:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     928:	2106      	movs	r1, #6
     92a:	e00c      	b.n	946 <__z_interrupt_stack_SIZEOF+0x106>
		if (*++sp == 'h') {
     92c:	785a      	ldrb	r2, [r3, #1]
     92e:	2a68      	cmp	r2, #104	; 0x68
     930:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     934:	d106      	bne.n	944 <__z_interrupt_stack_SIZEOF+0x104>
			conv->length_mod = LENGTH_HH;
     936:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     938:	f361 02c6 	bfi	r2, r1, #3, #4
     93c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
     940:	3302      	adds	r3, #2
     942:	e7c5      	b.n	8d0 <__z_interrupt_stack_SIZEOF+0x90>
			conv->length_mod = LENGTH_H;
     944:	2102      	movs	r1, #2
     946:	f361 02c6 	bfi	r2, r1, #3, #4
     94a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
     94e:	3301      	adds	r3, #1
     950:	e7be      	b.n	8d0 <__z_interrupt_stack_SIZEOF+0x90>
		if (*++sp == 'l') {
     952:	785a      	ldrb	r2, [r3, #1]
     954:	2a6c      	cmp	r2, #108	; 0x6c
     956:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     95a:	d101      	bne.n	960 <__z_interrupt_stack_SIZEOF+0x120>
			conv->length_mod = LENGTH_LL;
     95c:	2104      	movs	r1, #4
     95e:	e7eb      	b.n	938 <__z_interrupt_stack_SIZEOF+0xf8>
			conv->length_mod = LENGTH_L;
     960:	2103      	movs	r1, #3
     962:	e7f0      	b.n	946 <__z_interrupt_stack_SIZEOF+0x106>
		conv->length_mod = LENGTH_J;
     964:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     968:	2105      	movs	r1, #5
     96a:	e7ec      	b.n	946 <__z_interrupt_stack_SIZEOF+0x106>
		conv->length_mod = LENGTH_T;
     96c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     970:	2107      	movs	r1, #7
     972:	e7e8      	b.n	946 <__z_interrupt_stack_SIZEOF+0x106>
		conv->unsupported = true;
     974:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
     978:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
     97c:	f022 0202 	bic.w	r2, r2, #2
     980:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     984:	f042 0202 	orr.w	r2, r2, #2
     988:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
     98c:	e7df      	b.n	94e <__z_interrupt_stack_SIZEOF+0x10e>
	switch (conv->specifier) {
     98e:	3b6e      	subs	r3, #110	; 0x6e
     990:	b2d9      	uxtb	r1, r3
     992:	2301      	movs	r3, #1
     994:	408b      	lsls	r3, r1
     996:	f240 4182 	movw	r1, #1154	; 0x482
     99a:	420b      	tst	r3, r1
     99c:	d137      	bne.n	a0e <__z_interrupt_stack_SIZEOF+0x1ce>
     99e:	f013 0f24 	tst.w	r3, #36	; 0x24
     9a2:	d151      	bne.n	a48 <__z_interrupt_stack_SIZEOF+0x208>
     9a4:	07d8      	lsls	r0, r3, #31
     9a6:	d55c      	bpl.n	a62 <__z_interrupt_stack_SIZEOF+0x222>
		conv->specifier_cat = SPECIFIER_PTR;
     9a8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     9ac:	2103      	movs	r1, #3
     9ae:	f361 0302 	bfi	r3, r1, #0, #3
     9b2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     9b6:	f002 0378 	and.w	r3, r2, #120	; 0x78
     9ba:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
     9be:	424b      	negs	r3, r1
     9c0:	414b      	adcs	r3, r1
     9c2:	e01a      	b.n	9fa <__z_interrupt_stack_SIZEOF+0x1ba>
	switch (conv->specifier) {
     9c4:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
     9c8:	b2c9      	uxtb	r1, r1
     9ca:	2001      	movs	r0, #1
     9cc:	fa00 f101 	lsl.w	r1, r0, r1
     9d0:	f411 4f62 	tst.w	r1, #57856	; 0xe200
     9d4:	d194      	bne.n	900 <__z_interrupt_stack_SIZEOF+0xc0>
     9d6:	f640 0601 	movw	r6, #2049	; 0x801
     9da:	4231      	tst	r1, r6
     9dc:	d11d      	bne.n	a1a <__z_interrupt_stack_SIZEOF+0x1da>
     9de:	f411 3f04 	tst.w	r1, #135168	; 0x21000
     9e2:	d03e      	beq.n	a62 <__z_interrupt_stack_SIZEOF+0x222>
		conv->specifier_cat = SPECIFIER_SINT;
     9e4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     9e8:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     9ec:	f002 0278 	and.w	r2, r2, #120	; 0x78
     9f0:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
     9f2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     9f6:	d034      	beq.n	a62 <__z_interrupt_stack_SIZEOF+0x222>
	bool unsupported = false;
     9f8:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
     9fa:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     9fe:	f3c2 0140 	ubfx	r1, r2, #1, #1
     a02:	430b      	orrs	r3, r1
     a04:	f363 0241 	bfi	r2, r3, #1, #1
     a08:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     a0c:	e6fd      	b.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
		conv->specifier_cat = SPECIFIER_UINT;
     a0e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     a12:	2102      	movs	r1, #2
     a14:	f361 0302 	bfi	r3, r1, #0, #3
     a18:	e7e8      	b.n	9ec <__z_interrupt_stack_SIZEOF+0x1ac>
     a1a:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
     a1e:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
     a20:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     a24:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     a28:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     a2a:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
     a2e:	bf02      	ittt	eq
     a30:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
     a34:	f041 0101 	orreq.w	r1, r1, #1
     a38:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
     a3c:	2b63      	cmp	r3, #99	; 0x63
     a3e:	d1db      	bne.n	9f8 <__z_interrupt_stack_SIZEOF+0x1b8>
			unsupported = (conv->length_mod != LENGTH_NONE);
     a40:	1e13      	subs	r3, r2, #0
     a42:	bf18      	it	ne
     a44:	2301      	movne	r3, #1
     a46:	e7d8      	b.n	9fa <__z_interrupt_stack_SIZEOF+0x1ba>
		conv->specifier_cat = SPECIFIER_PTR;
     a48:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     a4c:	2103      	movs	r1, #3
     a4e:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
     a52:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     a56:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
     a5a:	bf14      	ite	ne
     a5c:	2301      	movne	r3, #1
     a5e:	2300      	moveq	r3, #0
     a60:	e7cb      	b.n	9fa <__z_interrupt_stack_SIZEOF+0x1ba>
		conv->invalid = true;
     a62:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     a66:	f043 0301 	orr.w	r3, r3, #1
     a6a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
     a6e:	e7c3      	b.n	9f8 <__z_interrupt_stack_SIZEOF+0x1b8>
		} else if (conv->width_present) {
     a70:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
     a74:	2a00      	cmp	r2, #0
			width = conv->width_value;
     a76:	bfb4      	ite	lt
     a78:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
     a7c:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
     a80:	e6d5      	b.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
		} else if (conv->prec_present) {
     a82:	0798      	lsls	r0, r3, #30
     a84:	f57f aee2 	bpl.w	84c <__z_interrupt_stack_SIZEOF+0xc>
			precision = conv->prec_value;
     a88:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
     a8c:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
     a90:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     a92:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
     a96:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
     a9a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     a9e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     aa0:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     aa4:	d133      	bne.n	b0e <__z_interrupt_stack_SIZEOF+0x2ce>
			switch (length_mod) {
     aa6:	1ecb      	subs	r3, r1, #3
     aa8:	2b04      	cmp	r3, #4
     aaa:	d804      	bhi.n	ab6 <__z_interrupt_stack_SIZEOF+0x276>
     aac:	e8df f003 	tbb	[pc, r3]
     ab0:	21464621 	.word	0x21464621
     ab4:	21          	.byte	0x21
     ab5:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     ab6:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
     ab8:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
     aba:	ea4f 72e3 	mov.w	r2, r3, asr #31
     abe:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
     ac2:	d11c      	bne.n	afe <__z_interrupt_stack_SIZEOF+0x2be>
				value->sint = (signed char)value->sint;
     ac4:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
     ac8:	17da      	asrs	r2, r3, #31
     aca:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
     ace:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
     ad0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     ad4:	f013 0603 	ands.w	r6, r3, #3
     ad8:	d050      	beq.n	b7c <__z_interrupt_stack_SIZEOF+0x33c>
			OUTS(sp, fp);
     ada:	9b03      	ldr	r3, [sp, #12]
     adc:	463a      	mov	r2, r7
     ade:	4659      	mov	r1, fp
     ae0:	4648      	mov	r0, r9
     ae2:	f006 fb87 	bl	71f4 <outs>
     ae6:	2800      	cmp	r0, #0
     ae8:	f2c0 8153 	blt.w	d92 <__z_interrupt_stack_SIZEOF+0x552>
     aec:	4405      	add	r5, r0
			continue;
     aee:	9f03      	ldr	r7, [sp, #12]
     af0:	e5f2      	b.n	6d8 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     af2:	f854 3b04 	ldr.w	r3, [r4], #4
     af6:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
     af8:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
     afc:	e7e8      	b.n	ad0 <__z_interrupt_stack_SIZEOF+0x290>
			} else if (length_mod == LENGTH_H) {
     afe:	2902      	cmp	r1, #2
     b00:	d1e5      	bne.n	ace <__z_interrupt_stack_SIZEOF+0x28e>
				value->sint = (short)value->sint;
     b02:	b21a      	sxth	r2, r3
     b04:	f343 33c0 	sbfx	r3, r3, #15, #1
     b08:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     b0c:	e7df      	b.n	ace <__z_interrupt_stack_SIZEOF+0x28e>
		} else if (specifier_cat == SPECIFIER_UINT) {
     b0e:	2b02      	cmp	r3, #2
     b10:	d124      	bne.n	b5c <__z_interrupt_stack_SIZEOF+0x31c>
			switch (length_mod) {
     b12:	1ecb      	subs	r3, r1, #3
     b14:	2b04      	cmp	r3, #4
     b16:	d804      	bhi.n	b22 <__z_interrupt_stack_SIZEOF+0x2e2>
     b18:	e8df f003 	tbb	[pc, r3]
     b1c:	18101018 	.word	0x18101018
     b20:	18          	.byte	0x18
     b21:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
     b22:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
     b24:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     b28:	f04f 0200 	mov.w	r2, #0
     b2c:	d014      	beq.n	b58 <__z_interrupt_stack_SIZEOF+0x318>
			} else if (length_mod == LENGTH_H) {
     b2e:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
     b30:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
     b34:	d1cc      	bne.n	ad0 <__z_interrupt_stack_SIZEOF+0x290>
				value->uint = (unsigned short)value->uint;
     b36:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
     b38:	930e      	str	r3, [sp, #56]	; 0x38
     b3a:	e7c9      	b.n	ad0 <__z_interrupt_stack_SIZEOF+0x290>
					(uint_value_type)va_arg(ap,
     b3c:	3407      	adds	r4, #7
     b3e:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
     b42:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     b46:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
     b4a:	e7c1      	b.n	ad0 <__z_interrupt_stack_SIZEOF+0x290>
					(uint_value_type)va_arg(ap, size_t);
     b4c:	f854 3b04 	ldr.w	r3, [r4], #4
     b50:	930e      	str	r3, [sp, #56]	; 0x38
     b52:	2300      	movs	r3, #0
     b54:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
     b56:	e7bb      	b.n	ad0 <__z_interrupt_stack_SIZEOF+0x290>
				value->uint = (unsigned char)value->uint;
     b58:	b2db      	uxtb	r3, r3
     b5a:	e7cd      	b.n	af8 <__z_interrupt_stack_SIZEOF+0x2b8>
		} else if (specifier_cat == SPECIFIER_FP) {
     b5c:	2b04      	cmp	r3, #4
     b5e:	d108      	bne.n	b72 <__z_interrupt_stack_SIZEOF+0x332>
					(sint_value_type)va_arg(ap, long long);
     b60:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
     b62:	f024 0407 	bic.w	r4, r4, #7
     b66:	e9d4 2300 	ldrd	r2, r3, [r4]
     b6a:	3408      	adds	r4, #8
     b6c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     b70:	e7ae      	b.n	ad0 <__z_interrupt_stack_SIZEOF+0x290>
		} else if (specifier_cat == SPECIFIER_PTR) {
     b72:	2b03      	cmp	r3, #3
     b74:	d1ac      	bne.n	ad0 <__z_interrupt_stack_SIZEOF+0x290>
			value->ptr = va_arg(ap, void *);
     b76:	f854 3b04 	ldr.w	r3, [r4], #4
     b7a:	e7dd      	b.n	b38 <__z_interrupt_stack_SIZEOF+0x2f8>
		switch (conv->specifier) {
     b7c:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
     b80:	2878      	cmp	r0, #120	; 0x78
     b82:	d8b4      	bhi.n	aee <__z_interrupt_stack_SIZEOF+0x2ae>
     b84:	2862      	cmp	r0, #98	; 0x62
     b86:	d81c      	bhi.n	bc2 <__z_interrupt_stack_SIZEOF+0x382>
     b88:	2825      	cmp	r0, #37	; 0x25
     b8a:	f43f adad 	beq.w	6e8 <z_cbvprintf_impl+0x20>
     b8e:	2858      	cmp	r0, #88	; 0x58
     b90:	d1ad      	bne.n	aee <__z_interrupt_stack_SIZEOF+0x2ae>
			bps = encode_uint(value->uint, conv, buf, bpe);
     b92:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     b96:	9300      	str	r3, [sp, #0]
     b98:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
     b9c:	ab08      	add	r3, sp, #32
     b9e:	aa10      	add	r2, sp, #64	; 0x40
     ba0:	f006 fae2 	bl	7168 <encode_uint>
			if (precision >= 0) {
     ba4:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
     ba8:	4607      	mov	r7, r0
			if (precision >= 0) {
     baa:	f280 809a 	bge.w	ce2 <__z_interrupt_stack_SIZEOF+0x4a2>
		if (bps == NULL) {
     bae:	2f00      	cmp	r7, #0
     bb0:	d09d      	beq.n	aee <__z_interrupt_stack_SIZEOF+0x2ae>
		size_t nj_len = (bpe - bps);
     bb2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     bb6:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
     bb8:	2e00      	cmp	r6, #0
     bba:	f000 80c1 	beq.w	d40 <__z_interrupt_stack_SIZEOF+0x500>
			nj_len += 1U;
     bbe:	3001      	adds	r0, #1
     bc0:	e0be      	b.n	d40 <__z_interrupt_stack_SIZEOF+0x500>
		switch (conv->specifier) {
     bc2:	3863      	subs	r0, #99	; 0x63
     bc4:	2815      	cmp	r0, #21
     bc6:	d892      	bhi.n	aee <__z_interrupt_stack_SIZEOF+0x2ae>
     bc8:	a201      	add	r2, pc, #4	; (adr r2, bd0 <__z_interrupt_stack_SIZEOF+0x390>)
     bca:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     bce:	bf00      	nop
     bd0:	00000ca5 	.word	0x00000ca5
     bd4:	00000cb7 	.word	0x00000cb7
     bd8:	00000aef 	.word	0x00000aef
     bdc:	00000aef 	.word	0x00000aef
     be0:	00000aef 	.word	0x00000aef
     be4:	00000aef 	.word	0x00000aef
     be8:	00000cb7 	.word	0x00000cb7
     bec:	00000aef 	.word	0x00000aef
     bf0:	00000aef 	.word	0x00000aef
     bf4:	00000aef 	.word	0x00000aef
     bf8:	00000aef 	.word	0x00000aef
     bfc:	00000d45 	.word	0x00000d45
     c00:	00000cdd 	.word	0x00000cdd
     c04:	00000d03 	.word	0x00000d03
     c08:	00000aef 	.word	0x00000aef
     c0c:	00000aef 	.word	0x00000aef
     c10:	00000c29 	.word	0x00000c29
     c14:	00000aef 	.word	0x00000aef
     c18:	00000cdd 	.word	0x00000cdd
     c1c:	00000aef 	.word	0x00000aef
     c20:	00000aef 	.word	0x00000aef
     c24:	00000cdd 	.word	0x00000cdd
			if (precision >= 0) {
     c28:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
     c2c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
     c2e:	db35      	blt.n	c9c <__z_interrupt_stack_SIZEOF+0x45c>
				len = strnlen(bps, precision);
     c30:	4651      	mov	r1, sl
     c32:	4638      	mov	r0, r7
     c34:	f006 fb1c 	bl	7270 <strnlen>
			bpe = bps + len;
     c38:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
     c3c:	2f00      	cmp	r7, #0
     c3e:	f43f af56 	beq.w	aee <__z_interrupt_stack_SIZEOF+0x2ae>
		char sign = 0;
     c42:	2600      	movs	r6, #0
		if (conv->altform_0c) {
     c44:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     c48:	f013 0210 	ands.w	r2, r3, #16
     c4c:	9205      	str	r2, [sp, #20]
     c4e:	f000 8093 	beq.w	d78 <__z_interrupt_stack_SIZEOF+0x538>
			nj_len += 2U;
     c52:	3002      	adds	r0, #2
		if (conv->pad_fp) {
     c54:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
     c56:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
     c58:	bf48      	it	mi
     c5a:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
     c5c:	9204      	str	r2, [sp, #16]
     c5e:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
     c60:	bf48      	it	mi
     c62:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
     c64:	f1b8 0f00 	cmp.w	r8, #0
     c68:	f340 80a0 	ble.w	dac <__z_interrupt_stack_SIZEOF+0x56c>
			if (!conv->flag_dash) {
     c6c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
     c70:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
     c74:	f3c2 0380 	ubfx	r3, r2, #2, #1
     c78:	0750      	lsls	r0, r2, #29
     c7a:	9306      	str	r3, [sp, #24]
     c7c:	f100 8096 	bmi.w	dac <__z_interrupt_stack_SIZEOF+0x56c>
				if (conv->flag_zero) {
     c80:	0651      	lsls	r1, r2, #25
     c82:	f140 8089 	bpl.w	d98 <__z_interrupt_stack_SIZEOF+0x558>
					if (sign != 0) {
     c86:	b13e      	cbz	r6, c98 <__z_interrupt_stack_SIZEOF+0x458>
						OUTC(sign);
     c88:	4659      	mov	r1, fp
     c8a:	4630      	mov	r0, r6
     c8c:	47c8      	blx	r9
     c8e:	2800      	cmp	r0, #0
     c90:	db7f      	blt.n	d92 <__z_interrupt_stack_SIZEOF+0x552>
     c92:	9b06      	ldr	r3, [sp, #24]
     c94:	3501      	adds	r5, #1
     c96:	461e      	mov	r6, r3
					pad = '0';
     c98:	2230      	movs	r2, #48	; 0x30
     c9a:	e07e      	b.n	d9a <__z_interrupt_stack_SIZEOF+0x55a>
				len = strlen(bps);
     c9c:	4638      	mov	r0, r7
     c9e:	f006 fae0 	bl	7262 <strlen>
     ca2:	e7c9      	b.n	c38 <__z_interrupt_stack_SIZEOF+0x3f8>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     ca4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     ca6:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
     caa:	2600      	movs	r6, #0
			bps = buf;
     cac:	af08      	add	r7, sp, #32
			bpe = buf + 1;
     cae:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
     cb2:	2001      	movs	r0, #1
     cb4:	e7c6      	b.n	c44 <__z_interrupt_stack_SIZEOF+0x404>
			if (conv->flag_plus) {
     cb6:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
     cb8:	bf5c      	itt	pl
     cba:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
     cbe:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
     cc0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
     cc4:	bf48      	it	mi
     cc6:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
     cc8:	2b00      	cmp	r3, #0
     cca:	f6bf af62 	bge.w	b92 <__z_interrupt_stack_SIZEOF+0x352>
				value->uint = (uint_value_type)-sint;
     cce:	4252      	negs	r2, r2
     cd0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     cd4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
     cd8:	262d      	movs	r6, #45	; 0x2d
     cda:	e75a      	b.n	b92 <__z_interrupt_stack_SIZEOF+0x352>
		switch (conv->specifier) {
     cdc:	2600      	movs	r6, #0
     cde:	e758      	b.n	b92 <__z_interrupt_stack_SIZEOF+0x352>
		char sign = 0;
     ce0:	2600      	movs	r6, #0
				conv->flag_zero = false;
     ce2:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
     ce6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     cea:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
     cec:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     cf0:	459a      	cmp	sl, r3
				conv->flag_zero = false;
     cf2:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
     cf6:	f67f af5a 	bls.w	bae <__z_interrupt_stack_SIZEOF+0x36e>
					conv->pad0_value = precision - (int)len;
     cfa:	ebaa 0303 	sub.w	r3, sl, r3
     cfe:	9311      	str	r3, [sp, #68]	; 0x44
     d00:	e755      	b.n	bae <__z_interrupt_stack_SIZEOF+0x36e>
			if (value->ptr != NULL) {
     d02:	980e      	ldr	r0, [sp, #56]	; 0x38
     d04:	b390      	cbz	r0, d6c <__z_interrupt_stack_SIZEOF+0x52c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     d06:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     d0a:	9300      	str	r3, [sp, #0]
     d0c:	aa10      	add	r2, sp, #64	; 0x40
     d0e:	ab08      	add	r3, sp, #32
     d10:	2100      	movs	r1, #0
     d12:	f006 fa29 	bl	7168 <encode_uint>
				conv->altform_0c = true;
     d16:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
     d1a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     d1e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     d22:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
     d26:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
     d2a:	4607      	mov	r7, r0
				conv->altform_0c = true;
     d2c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
     d30:	dad6      	bge.n	ce0 <__z_interrupt_stack_SIZEOF+0x4a0>
		if (bps == NULL) {
     d32:	2800      	cmp	r0, #0
     d34:	f43f aedb 	beq.w	aee <__z_interrupt_stack_SIZEOF+0x2ae>
		size_t nj_len = (bpe - bps);
     d38:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     d3c:	1a18      	subs	r0, r3, r0
		char sign = 0;
     d3e:	2600      	movs	r6, #0
     d40:	469a      	mov	sl, r3
     d42:	e77f      	b.n	c44 <__z_interrupt_stack_SIZEOF+0x404>
				store_count(conv, value->ptr, count);
     d44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
     d46:	2907      	cmp	r1, #7
     d48:	f63f aed1 	bhi.w	aee <__z_interrupt_stack_SIZEOF+0x2ae>
     d4c:	e8df f001 	tbb	[pc, r1]
     d50:	0c06040c 	.word	0x0c06040c
     d54:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
     d58:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
     d5a:	e6c8      	b.n	aee <__z_interrupt_stack_SIZEOF+0x2ae>
		*(short *)dp = (short)count;
     d5c:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
     d5e:	e6c6      	b.n	aee <__z_interrupt_stack_SIZEOF+0x2ae>
		*(intmax_t *)dp = (intmax_t)count;
     d60:	17ea      	asrs	r2, r5, #31
     d62:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
     d66:	e6c2      	b.n	aee <__z_interrupt_stack_SIZEOF+0x2ae>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     d68:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
     d6a:	e6c0      	b.n	aee <__z_interrupt_stack_SIZEOF+0x2ae>
     d6c:	4f2e      	ldr	r7, [pc, #184]	; (e28 <__z_interrupt_stack_SIZEOF+0x5e8>)
		char sign = 0;
     d6e:	4606      	mov	r6, r0
			bpe = bps + 5;
     d70:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
     d74:	2005      	movs	r0, #5
     d76:	e765      	b.n	c44 <__z_interrupt_stack_SIZEOF+0x404>
		} else if (conv->altform_0) {
     d78:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
     d7a:	bf48      	it	mi
     d7c:	3001      	addmi	r0, #1
     d7e:	e769      	b.n	c54 <__z_interrupt_stack_SIZEOF+0x414>
     d80:	9307      	str	r3, [sp, #28]
					OUTC(pad);
     d82:	4610      	mov	r0, r2
     d84:	9206      	str	r2, [sp, #24]
     d86:	4659      	mov	r1, fp
     d88:	47c8      	blx	r9
     d8a:	2800      	cmp	r0, #0
     d8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
     d90:	da04      	bge.n	d9c <__z_interrupt_stack_SIZEOF+0x55c>
#undef OUTS
#undef OUTC
}
     d92:	b015      	add	sp, #84	; 0x54
     d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     d98:	2220      	movs	r2, #32
					pad = '0';
     d9a:	4643      	mov	r3, r8
				while (width-- > 0) {
     d9c:	4619      	mov	r1, r3
     d9e:	2900      	cmp	r1, #0
     da0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
     da4:	dcec      	bgt.n	d80 <__z_interrupt_stack_SIZEOF+0x540>
     da6:	4445      	add	r5, r8
     da8:	1a6d      	subs	r5, r5, r1
     daa:	4698      	mov	r8, r3
		if (sign != 0) {
     dac:	b12e      	cbz	r6, dba <__z_interrupt_stack_SIZEOF+0x57a>
			OUTC(sign);
     dae:	4659      	mov	r1, fp
     db0:	4630      	mov	r0, r6
     db2:	47c8      	blx	r9
     db4:	2800      	cmp	r0, #0
     db6:	dbec      	blt.n	d92 <__z_interrupt_stack_SIZEOF+0x552>
     db8:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     dba:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     dbe:	06da      	lsls	r2, r3, #27
     dc0:	d401      	bmi.n	dc6 <__z_interrupt_stack_SIZEOF+0x586>
     dc2:	071b      	lsls	r3, r3, #28
     dc4:	d505      	bpl.n	dd2 <__z_interrupt_stack_SIZEOF+0x592>
				OUTC('0');
     dc6:	4659      	mov	r1, fp
     dc8:	2030      	movs	r0, #48	; 0x30
     dca:	47c8      	blx	r9
     dcc:	2800      	cmp	r0, #0
     dce:	dbe0      	blt.n	d92 <__z_interrupt_stack_SIZEOF+0x552>
     dd0:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     dd2:	9b05      	ldr	r3, [sp, #20]
     dd4:	b133      	cbz	r3, de4 <__z_interrupt_stack_SIZEOF+0x5a4>
				OUTC(conv->specifier);
     dd6:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
     dda:	4659      	mov	r1, fp
     ddc:	47c8      	blx	r9
     dde:	2800      	cmp	r0, #0
     de0:	dbd7      	blt.n	d92 <__z_interrupt_stack_SIZEOF+0x552>
     de2:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     de4:	9e04      	ldr	r6, [sp, #16]
     de6:	442e      	add	r6, r5
     de8:	e005      	b.n	df6 <__z_interrupt_stack_SIZEOF+0x5b6>
				OUTC('0');
     dea:	4659      	mov	r1, fp
     dec:	2030      	movs	r0, #48	; 0x30
     dee:	47c8      	blx	r9
     df0:	2800      	cmp	r0, #0
     df2:	dbce      	blt.n	d92 <__z_interrupt_stack_SIZEOF+0x552>
     df4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     df6:	1b73      	subs	r3, r6, r5
     df8:	2b00      	cmp	r3, #0
     dfa:	dcf6      	bgt.n	dea <__z_interrupt_stack_SIZEOF+0x5aa>
			OUTS(bps, bpe);
     dfc:	4653      	mov	r3, sl
     dfe:	463a      	mov	r2, r7
     e00:	4659      	mov	r1, fp
     e02:	4648      	mov	r0, r9
     e04:	f006 f9f6 	bl	71f4 <outs>
     e08:	2800      	cmp	r0, #0
     e0a:	dbc2      	blt.n	d92 <__z_interrupt_stack_SIZEOF+0x552>
     e0c:	4405      	add	r5, r0
		while (width > 0) {
     e0e:	44a8      	add	r8, r5
     e10:	eba8 0305 	sub.w	r3, r8, r5
     e14:	2b00      	cmp	r3, #0
     e16:	f77f ae6a 	ble.w	aee <__z_interrupt_stack_SIZEOF+0x2ae>
			OUTC(' ');
     e1a:	4659      	mov	r1, fp
     e1c:	2020      	movs	r0, #32
     e1e:	47c8      	blx	r9
     e20:	2800      	cmp	r0, #0
     e22:	dbb6      	blt.n	d92 <__z_interrupt_stack_SIZEOF+0x552>
     e24:	3501      	adds	r5, #1
			--width;
     e26:	e7f3      	b.n	e10 <__z_interrupt_stack_SIZEOF+0x5d0>
     e28:	00008197 	.word	0x00008197

00000e2c <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
     e2c:	b508      	push	{r3, lr}
     e2e:	4604      	mov	r4, r0
	__asm__ volatile(
     e30:	f04f 0220 	mov.w	r2, #32
     e34:	f3ef 8311 	mrs	r3, BASEPRI
     e38:	f382 8812 	msr	BASEPRI_MAX, r2
     e3c:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
     e40:	f001 ff2a 	bl	2c98 <sys_clock_disable>
	}

	sys_arch_reboot(type);
     e44:	4620      	mov	r0, r4
     e46:	f000 fe5f 	bl	1b08 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     e4a:	4803      	ldr	r0, [pc, #12]	; (e58 <sys_reboot+0x2c>)
     e4c:	f006 f89c 	bl	6f88 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     e50:	f000 fa30 	bl	12b4 <arch_cpu_idle>
     e54:	e7fc      	b.n	e50 <sys_reboot+0x24>
     e56:	bf00      	nop
     e58:	0000819d 	.word	0x0000819d

00000e5c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
     e5c:	f001 bf4e 	b.w	2cfc <SystemInit>

00000e60 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     e64:	4605      	mov	r5, r0
     e66:	f04f 0320 	mov.w	r3, #32
     e6a:	f3ef 8611 	mrs	r6, BASEPRI
     e6e:	f383 8812 	msr	BASEPRI_MAX, r3
     e72:	f3bf 8f6f 	isb	sy
	return list->head;
     e76:	4b0e      	ldr	r3, [pc, #56]	; (eb0 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
     e78:	4f0e      	ldr	r7, [pc, #56]	; (eb4 <pm_state_notify+0x54>)
     e7a:	681c      	ldr	r4, [r3, #0]
     e7c:	f8df 8038 	ldr.w	r8, [pc, #56]	; eb8 <pm_state_notify+0x58>
     e80:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     e84:	b92c      	cbnz	r4, e92 <pm_state_notify+0x32>
	__asm__ volatile(
     e86:	f386 8811 	msr	BASEPRI, r6
     e8a:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
     e92:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
     e96:	2d00      	cmp	r5, #0
     e98:	bf18      	it	ne
     e9a:	4613      	movne	r3, r2
		if (callback) {
     e9c:	b12b      	cbz	r3, eaa <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
     e9e:	f898 2010 	ldrb.w	r2, [r8, #16]
     ea2:	fb09 f202 	mul.w	r2, r9, r2
     ea6:	5cb8      	ldrb	r0, [r7, r2]
     ea8:	4798      	blx	r3
	return node->next;
     eaa:	6824      	ldr	r4, [r4, #0]
     eac:	e7ea      	b.n	e84 <pm_state_notify+0x24>
     eae:	bf00      	nop
     eb0:	20000408 	.word	0x20000408
     eb4:	200003fc 	.word	0x200003fc
     eb8:	20000abc 	.word	0x20000abc

00000ebc <pm_system_resume>:

void pm_system_resume(void)
{
     ebc:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
     ebe:	4b19      	ldr	r3, [pc, #100]	; (f24 <pm_system_resume+0x68>)
     ec0:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     ec2:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     ec6:	f004 031f 	and.w	r3, r4, #31
     eca:	2201      	movs	r2, #1
     ecc:	409a      	lsls	r2, r3
     ece:	4b16      	ldr	r3, [pc, #88]	; (f28 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     ed0:	0961      	lsrs	r1, r4, #5
     ed2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     ed6:	43d0      	mvns	r0, r2
     ed8:	e853 1f00 	ldrex	r1, [r3]
     edc:	ea01 0500 	and.w	r5, r1, r0
     ee0:	e843 5600 	strex	r6, r5, [r3]
     ee4:	2e00      	cmp	r6, #0
     ee6:	d1f7      	bne.n	ed8 <pm_system_resume+0x1c>
     ee8:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     eec:	420a      	tst	r2, r1
     eee:	d013      	beq.n	f18 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
     ef0:	4b0e      	ldr	r3, [pc, #56]	; (f2c <pm_system_resume+0x70>)
     ef2:	4d0f      	ldr	r5, [pc, #60]	; (f30 <pm_system_resume+0x74>)
     ef4:	b18b      	cbz	r3, f1a <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
     ef6:	230c      	movs	r3, #12
     ef8:	4363      	muls	r3, r4
     efa:	18ea      	adds	r2, r5, r3
     efc:	5ce8      	ldrb	r0, [r5, r3]
     efe:	7851      	ldrb	r1, [r2, #1]
     f00:	f006 f9f9 	bl	72f6 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
     f04:	2000      	movs	r0, #0
     f06:	f7ff ffab 	bl	e60 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
     f0a:	230c      	movs	r3, #12
     f0c:	435c      	muls	r4, r3
     f0e:	192a      	adds	r2, r5, r4
     f10:	2300      	movs	r3, #0
     f12:	512b      	str	r3, [r5, r4]
     f14:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
     f18:	bd70      	pop	{r4, r5, r6, pc}
     f1a:	f383 8811 	msr	BASEPRI, r3
     f1e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
     f22:	e7ef      	b.n	f04 <pm_system_resume+0x48>
     f24:	20000abc 	.word	0x20000abc
     f28:	20000410 	.word	0x20000410
     f2c:	000072f7 	.word	0x000072f7
     f30:	200003fc 	.word	0x200003fc

00000f34 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
     f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
     f38:	4b35      	ldr	r3, [pc, #212]	; (1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>)
{
     f3a:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
     f3c:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
     f3e:	f04f 0320 	mov.w	r3, #32
     f42:	f3ef 8811 	mrs	r8, BASEPRI
     f46:	f383 8812 	msr	BASEPRI_MAX, r3
     f4a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
     f4e:	240c      	movs	r4, #12
     f50:	4b30      	ldr	r3, [pc, #192]	; (1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>)
     f52:	4e31      	ldr	r6, [pc, #196]	; (1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>)
     f54:	436c      	muls	r4, r5
     f56:	191a      	adds	r2, r3, r4
     f58:	5d19      	ldrb	r1, [r3, r4]
     f5a:	2900      	cmp	r1, #0
     f5c:	d04c      	beq.n	ff8 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
     f5e:	ca07      	ldmia	r2, {r0, r1, r2}
     f60:	eb06 0c04 	add.w	ip, r6, r4
     f64:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
     f68:	2200      	movs	r2, #0
     f6a:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
     f6c:	f388 8811 	msr	BASEPRI, r8
     f70:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
     f74:	230c      	movs	r3, #12
     f76:	436b      	muls	r3, r5
     f78:	18f2      	adds	r2, r6, r3
     f7a:	5cf0      	ldrb	r0, [r6, r3]
     f7c:	2800      	cmp	r0, #0
     f7e:	d039      	beq.n	ff4 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
     f80:	1c7b      	adds	r3, r7, #1
     f82:	d010      	beq.n	fa6 <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
     f84:	f8d2 c008 	ldr.w	ip, [r2, #8]
     f88:	4c24      	ldr	r4, [pc, #144]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
     f8a:	4a25      	ldr	r2, [pc, #148]	; (1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>)
     f8c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     f90:	2100      	movs	r1, #0
     f92:	fbec 4100 	umlal	r4, r1, ip, r0
     f96:	2300      	movs	r3, #0
     f98:	4620      	mov	r0, r4
     f9a:	f7ff f8b1 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
     f9e:	2101      	movs	r1, #1
     fa0:	1a38      	subs	r0, r7, r0
     fa2:	f001 fe3d 	bl	2c20 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
     fa6:	f003 f8f3 	bl	4190 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
     faa:	2001      	movs	r0, #1
     fac:	f7ff ff58 	bl	e60 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
     fb0:	f3bf 8f5b 	dmb	ish
     fb4:	4b1b      	ldr	r3, [pc, #108]	; (1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
     fb6:	096a      	lsrs	r2, r5, #5
     fb8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
     fbc:	f005 011f 	and.w	r1, r5, #31
     fc0:	2201      	movs	r2, #1
     fc2:	408a      	lsls	r2, r1
     fc4:	e853 0f00 	ldrex	r0, [r3]
     fc8:	4310      	orrs	r0, r2
     fca:	e843 0100 	strex	r1, r0, [r3]
     fce:	2900      	cmp	r1, #0
     fd0:	d1f8      	bne.n	fc4 <pm_system_suspend+0x90>
     fd2:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
     fd6:	4b14      	ldr	r3, [pc, #80]	; (1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>)
     fd8:	b13b      	cbz	r3, fea <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
     fda:	230c      	movs	r3, #12
     fdc:	fb03 f005 	mul.w	r0, r3, r5
     fe0:	1833      	adds	r3, r6, r0
     fe2:	5c30      	ldrb	r0, [r6, r0]
     fe4:	7859      	ldrb	r1, [r3, #1]
     fe6:	f006 f97a 	bl	72de <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
     fea:	f7ff ff67 	bl	ebc <pm_system_resume>
	k_sched_unlock();
     fee:	f003 f8e3 	bl	41b8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
     ff2:	2001      	movs	r0, #1
}
     ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
     ff8:	4601      	mov	r1, r0
     ffa:	4628      	mov	r0, r5
     ffc:	f000 f816 	bl	102c <pm_policy_next_state>
		if (info != NULL) {
    1000:	2800      	cmp	r0, #0
    1002:	d0b3      	beq.n	f6c <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    1004:	c807      	ldmia	r0, {r0, r1, r2}
    1006:	4434      	add	r4, r6
    1008:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    100c:	e7ae      	b.n	f6c <pm_system_suspend+0x38>
    100e:	bf00      	nop
    1010:	20000abc 	.word	0x20000abc
    1014:	200003f0 	.word	0x200003f0
    1018:	200003fc 	.word	0x200003fc
    101c:	000f423f 	.word	0x000f423f
    1020:	000f4240 	.word	0x000f4240
    1024:	20000410 	.word	0x20000410
    1028:	000072df 	.word	0x000072df

0000102c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    102c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1030:	b085      	sub	sp, #20
    1032:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1034:	a903      	add	r1, sp, #12
    1036:	f000 f843 	bl	10c0 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    103a:	4b1e      	ldr	r3, [pc, #120]	; (10b4 <pm_policy_next_state+0x88>)
    103c:	9d03      	ldr	r5, [sp, #12]
    103e:	f8d3 a000 	ldr.w	sl, [r3]
    1042:	f8df 8074 	ldr.w	r8, [pc, #116]	; 10b8 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1046:	1e43      	subs	r3, r0, #1
    1048:	b21b      	sxth	r3, r3
    104a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    104e:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1050:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    1054:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    1058:	f04f 0b00 	mov.w	fp, #0
    105c:	b924      	cbnz	r4, 1068 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    105e:	46a1      	mov	r9, r4
}
    1060:	4648      	mov	r0, r9
    1062:	b005      	add	sp, #20
    1064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1068:	6868      	ldr	r0, [r5, #4]
    106a:	4a14      	ldr	r2, [pc, #80]	; (10bc <pm_policy_next_state+0x90>)
    106c:	46c4      	mov	ip, r8
    106e:	4659      	mov	r1, fp
    1070:	fbe0 c107 	umlal	ip, r1, r0, r7
    1074:	2300      	movs	r3, #0
    1076:	4660      	mov	r0, ip
    1078:	f7ff f842 	bl	100 <__aeabi_uldivmod>
    107c:	9001      	str	r0, [sp, #4]
    107e:	68a8      	ldr	r0, [r5, #8]
    1080:	4a0e      	ldr	r2, [pc, #56]	; (10bc <pm_policy_next_state+0x90>)
    1082:	46c4      	mov	ip, r8
    1084:	4659      	mov	r1, fp
    1086:	fbe0 c107 	umlal	ip, r1, r0, r7
    108a:	2300      	movs	r3, #0
    108c:	4660      	mov	r0, ip
    108e:	f7ff f837 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1092:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
    1096:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1098:	d001      	beq.n	109e <pm_policy_next_state+0x72>
    109a:	4582      	cmp	sl, r0
    109c:	d905      	bls.n	10aa <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    109e:	1c73      	adds	r3, r6, #1
    10a0:	d0de      	beq.n	1060 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    10a2:	9b01      	ldr	r3, [sp, #4]
    10a4:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    10a6:	42b0      	cmp	r0, r6
    10a8:	d9da      	bls.n	1060 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    10aa:	3c01      	subs	r4, #1
    10ac:	b2a4      	uxth	r4, r4
    10ae:	3d0c      	subs	r5, #12
    10b0:	e7d4      	b.n	105c <pm_policy_next_state+0x30>
    10b2:	bf00      	nop
    10b4:	20000008 	.word	0x20000008
    10b8:	000f423f 	.word	0x000f423f
    10bc:	000f4240 	.word	0x000f4240

000010c0 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    10c0:	b908      	cbnz	r0, 10c6 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    10c2:	4b02      	ldr	r3, [pc, #8]	; (10cc <pm_state_cpu_get_all+0xc>)
    10c4:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    10c6:	2000      	movs	r0, #0
    10c8:	4770      	bx	lr
    10ca:	bf00      	nop
    10cc:	00007e08 	.word	0x00007e08

000010d0 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    10d0:	4801      	ldr	r0, [pc, #4]	; (10d8 <nrf_cc3xx_platform_abort_init+0x8>)
    10d2:	f003 bb45 	b.w	4760 <nrf_cc3xx_platform_set_abort>
    10d6:	bf00      	nop
    10d8:	00007e08 	.word	0x00007e08

000010dc <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    10dc:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    10de:	4604      	mov	r4, r0
    10e0:	b918      	cbnz	r0, 10ea <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    10e2:	4b0f      	ldr	r3, [pc, #60]	; (1120 <mutex_free_platform+0x44>)
    10e4:	480f      	ldr	r0, [pc, #60]	; (1124 <mutex_free_platform+0x48>)
    10e6:	685b      	ldr	r3, [r3, #4]
    10e8:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    10ea:	6861      	ldr	r1, [r4, #4]
    10ec:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    10f0:	d00f      	beq.n	1112 <mutex_free_platform+0x36>
    10f2:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    10f6:	d00c      	beq.n	1112 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    10f8:	4d0b      	ldr	r5, [pc, #44]	; (1128 <mutex_free_platform+0x4c>)
    10fa:	42a9      	cmp	r1, r5
    10fc:	d009      	beq.n	1112 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    10fe:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    1102:	d007      	beq.n	1114 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1104:	4809      	ldr	r0, [pc, #36]	; (112c <mutex_free_platform+0x50>)
    1106:	4621      	mov	r1, r4
    1108:	f006 fba9 	bl	785e <k_mem_slab_free>
        mutex->mutex = NULL;
    110c:	2300      	movs	r3, #0
    110e:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1110:	6065      	str	r5, [r4, #4]
}
    1112:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1114:	6820      	ldr	r0, [r4, #0]
    1116:	2214      	movs	r2, #20
    1118:	f006 f8d5 	bl	72c6 <memset>
    111c:	e7f8      	b.n	1110 <mutex_free_platform+0x34>
    111e:	bf00      	nop
    1120:	200000d4 	.word	0x200000d4
    1124:	000081c9 	.word	0x000081c9
    1128:	a95c5f2c 	.word	0xa95c5f2c
    112c:	20000914 	.word	0x20000914

00001130 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1130:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1132:	b320      	cbz	r0, 117e <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    1134:	6843      	ldr	r3, [r0, #4]
    1136:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    113a:	d110      	bne.n	115e <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    113c:	2201      	movs	r2, #1
    113e:	6803      	ldr	r3, [r0, #0]
    1140:	f3bf 8f5b 	dmb	ish
    1144:	e853 1f00 	ldrex	r1, [r3]
    1148:	2900      	cmp	r1, #0
    114a:	d103      	bne.n	1154 <mutex_lock_platform+0x24>
    114c:	e843 2000 	strex	r0, r2, [r3]
    1150:	2800      	cmp	r0, #0
    1152:	d1f7      	bne.n	1144 <mutex_lock_platform+0x14>
    1154:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1158:	d10d      	bne.n	1176 <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    115a:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    115c:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    115e:	4a09      	ldr	r2, [pc, #36]	; (1184 <mutex_lock_platform+0x54>)
    1160:	4293      	cmp	r3, r2
    1162:	d00a      	beq.n	117a <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1164:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    1166:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    116a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    116e:	f002 fd09 	bl	3b84 <z_impl_k_mutex_lock>
        if (ret == 0) {
    1172:	2800      	cmp	r0, #0
    1174:	d0f1      	beq.n	115a <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1176:	4804      	ldr	r0, [pc, #16]	; (1188 <mutex_lock_platform+0x58>)
    1178:	e7f0      	b.n	115c <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    117a:	4804      	ldr	r0, [pc, #16]	; (118c <mutex_lock_platform+0x5c>)
    117c:	e7ee      	b.n	115c <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    117e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1182:	e7eb      	b.n	115c <mutex_lock_platform+0x2c>
    1184:	a95c5f2c 	.word	0xa95c5f2c
    1188:	ffff8fe9 	.word	0xffff8fe9
    118c:	ffff8fea 	.word	0xffff8fea

00001190 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1190:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1192:	b1d8      	cbz	r0, 11cc <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1194:	6843      	ldr	r3, [r0, #4]
    1196:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    119a:	d110      	bne.n	11be <mutex_unlock_platform+0x2e>
    119c:	2200      	movs	r2, #0
    119e:	6803      	ldr	r3, [r0, #0]
    11a0:	f3bf 8f5b 	dmb	ish
    11a4:	e853 1f00 	ldrex	r1, [r3]
    11a8:	2901      	cmp	r1, #1
    11aa:	d103      	bne.n	11b4 <mutex_unlock_platform+0x24>
    11ac:	e843 2000 	strex	r0, r2, [r3]
    11b0:	2800      	cmp	r0, #0
    11b2:	d1f7      	bne.n	11a4 <mutex_unlock_platform+0x14>
    11b4:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    11b8:	d10b      	bne.n	11d2 <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    11ba:	2000      	movs	r0, #0
    }
}
    11bc:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    11be:	4a07      	ldr	r2, [pc, #28]	; (11dc <mutex_unlock_platform+0x4c>)
    11c0:	4293      	cmp	r3, r2
    11c2:	d008      	beq.n	11d6 <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
    11c4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    11c6:	f002 fd57 	bl	3c78 <z_impl_k_mutex_unlock>
    11ca:	e7f6      	b.n	11ba <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    11cc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    11d0:	e7f4      	b.n	11bc <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    11d2:	4803      	ldr	r0, [pc, #12]	; (11e0 <mutex_unlock_platform+0x50>)
    11d4:	e7f2      	b.n	11bc <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    11d6:	4803      	ldr	r0, [pc, #12]	; (11e4 <mutex_unlock_platform+0x54>)
    11d8:	e7f0      	b.n	11bc <mutex_unlock_platform+0x2c>
    11da:	bf00      	nop
    11dc:	a95c5f2c 	.word	0xa95c5f2c
    11e0:	ffff8fe9 	.word	0xffff8fe9
    11e4:	ffff8fea 	.word	0xffff8fea

000011e8 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    11e8:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    11ea:	4604      	mov	r4, r0
    11ec:	b918      	cbnz	r0, 11f6 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    11ee:	4b1d      	ldr	r3, [pc, #116]	; (1264 <mutex_init_platform+0x7c>)
    11f0:	481d      	ldr	r0, [pc, #116]	; (1268 <mutex_init_platform+0x80>)
    11f2:	685b      	ldr	r3, [r3, #4]
    11f4:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    11f6:	6863      	ldr	r3, [r4, #4]
    11f8:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    11fc:	d02f      	beq.n	125e <mutex_init_platform+0x76>
    11fe:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    1202:	d02c      	beq.n	125e <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    1204:	4a19      	ldr	r2, [pc, #100]	; (126c <mutex_init_platform+0x84>)
    1206:	4293      	cmp	r3, r2
    1208:	d119      	bne.n	123e <mutex_init_platform+0x56>
    120a:	6823      	ldr	r3, [r4, #0]
    120c:	bb03      	cbnz	r3, 1250 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    120e:	4818      	ldr	r0, [pc, #96]	; (1270 <mutex_init_platform+0x88>)
    1210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1218:	4621      	mov	r1, r4
    121a:	f002 fbdb 	bl	39d4 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    121e:	b908      	cbnz	r0, 1224 <mutex_init_platform+0x3c>
    1220:	6823      	ldr	r3, [r4, #0]
    1222:	b91b      	cbnz	r3, 122c <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    1224:	4b0f      	ldr	r3, [pc, #60]	; (1264 <mutex_init_platform+0x7c>)
    1226:	4813      	ldr	r0, [pc, #76]	; (1274 <mutex_init_platform+0x8c>)
    1228:	685b      	ldr	r3, [r3, #4]
    122a:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    122c:	6820      	ldr	r0, [r4, #0]
    122e:	2214      	movs	r2, #20
    1230:	2100      	movs	r1, #0
    1232:	f006 f848 	bl	72c6 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1236:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    123a:	6063      	str	r3, [r4, #4]
    123c:	e008      	b.n	1250 <mutex_init_platform+0x68>
    switch(flags){
    123e:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    1242:	d80d      	bhi.n	1260 <mutex_init_platform+0x78>
    1244:	2b3a      	cmp	r3, #58	; 0x3a
    1246:	d003      	beq.n	1250 <mutex_init_platform+0x68>
    1248:	f640 62ba 	movw	r2, #3770	; 0xeba
    124c:	4293      	cmp	r3, r2
    124e:	d1de      	bne.n	120e <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    1250:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1252:	f006 fb42 	bl	78da <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1256:	6863      	ldr	r3, [r4, #4]
    1258:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    125c:	6063      	str	r3, [r4, #4]
}
    125e:	bd10      	pop	{r4, pc}
    switch(flags){
    1260:	4a05      	ldr	r2, [pc, #20]	; (1278 <mutex_init_platform+0x90>)
    1262:	e7f3      	b.n	124c <mutex_init_platform+0x64>
    1264:	200000d4 	.word	0x200000d4
    1268:	000081c9 	.word	0x000081c9
    126c:	a95c5f2c 	.word	0xa95c5f2c
    1270:	20000914 	.word	0x20000914
    1274:	000081ef 	.word	0x000081ef
    1278:	3a00003a 	.word	0x3a00003a

0000127c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    127c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    127e:	4906      	ldr	r1, [pc, #24]	; (1298 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1280:	4806      	ldr	r0, [pc, #24]	; (129c <nrf_cc3xx_platform_mutex_init+0x20>)
    1282:	2340      	movs	r3, #64	; 0x40
    1284:	2214      	movs	r2, #20
    1286:	f006 fadc 	bl	7842 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    128a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    128e:	4904      	ldr	r1, [pc, #16]	; (12a0 <nrf_cc3xx_platform_mutex_init+0x24>)
    1290:	4804      	ldr	r0, [pc, #16]	; (12a4 <nrf_cc3xx_platform_mutex_init+0x28>)
    1292:	f003 bb29 	b.w	48e8 <nrf_cc3xx_platform_set_mutexes>
    1296:	bf00      	nop
    1298:	20000414 	.word	0x20000414
    129c:	20000914 	.word	0x20000914
    12a0:	00007e10 	.word	0x00007e10
    12a4:	00007e24 	.word	0x00007e24

000012a8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    12a8:	4901      	ldr	r1, [pc, #4]	; (12b0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    12aa:	2210      	movs	r2, #16
	str	r2, [r1]
    12ac:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    12ae:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    12b0:	e000ed10 	.word	0xe000ed10

000012b4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    12b4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    12b6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    12b8:	f380 8811 	msr	BASEPRI, r0
	isb
    12bc:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    12c0:	f3bf 8f4f 	dsb	sy
    12c4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    12c6:	b662      	cpsie	i
	isb
    12c8:	f3bf 8f6f 	isb	sy

	bx	lr
    12cc:	4770      	bx	lr
    12ce:	bf00      	nop

000012d0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    12d0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    12d2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    12d4:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    12d8:	f3bf 8f4f 	dsb	sy
    12dc:	bf20      	wfe

	msr	BASEPRI, r0
    12de:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    12e2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    12e4:	4770      	bx	lr
    12e6:	bf00      	nop

000012e8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    12e8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    12ea:	2800      	cmp	r0, #0
    12ec:	db07      	blt.n	12fe <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12ee:	4a04      	ldr	r2, [pc, #16]	; (1300 <arch_irq_enable+0x18>)
    12f0:	0941      	lsrs	r1, r0, #5
    12f2:	2301      	movs	r3, #1
    12f4:	f000 001f 	and.w	r0, r0, #31
    12f8:	4083      	lsls	r3, r0
    12fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    12fe:	4770      	bx	lr
    1300:	e000e100 	.word	0xe000e100

00001304 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1304:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1306:	2800      	cmp	r0, #0
    1308:	db0c      	blt.n	1324 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    130a:	0943      	lsrs	r3, r0, #5
    130c:	4906      	ldr	r1, [pc, #24]	; (1328 <arch_irq_disable+0x24>)
    130e:	f000 001f 	and.w	r0, r0, #31
    1312:	3320      	adds	r3, #32
    1314:	2201      	movs	r2, #1
    1316:	4082      	lsls	r2, r0
    1318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    131c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1320:	f3bf 8f6f 	isb	sy
}
    1324:	4770      	bx	lr
    1326:	bf00      	nop
    1328:	e000e100 	.word	0xe000e100

0000132c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    132c:	4b05      	ldr	r3, [pc, #20]	; (1344 <arch_irq_is_enabled+0x18>)
    132e:	0942      	lsrs	r2, r0, #5
    1330:	f000 001f 	and.w	r0, r0, #31
    1334:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1338:	2301      	movs	r3, #1
    133a:	fa03 f000 	lsl.w	r0, r3, r0
}
    133e:	4010      	ands	r0, r2
    1340:	4770      	bx	lr
    1342:	bf00      	nop
    1344:	e000e100 	.word	0xe000e100

00001348 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1348:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    134a:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    134c:	bfa8      	it	ge
    134e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    1352:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1356:	bfb8      	it	lt
    1358:	4b06      	ldrlt	r3, [pc, #24]	; (1374 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    135a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    135e:	bfac      	ite	ge
    1360:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1364:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1368:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    136a:	bfb4      	ite	lt
    136c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    136e:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    1372:	4770      	bx	lr
    1374:	e000ed14 	.word	0xe000ed14

00001378 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1378:	bf30      	wfi
    b z_SysNmiOnReset
    137a:	f7ff bffd 	b.w	1378 <z_SysNmiOnReset>
    137e:	bf00      	nop

00001380 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1380:	4a0b      	ldr	r2, [pc, #44]	; (13b0 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1382:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1384:	4b0b      	ldr	r3, [pc, #44]	; (13b4 <z_arm_prep_c+0x34>)
    1386:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    138a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    138c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1390:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1394:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1398:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    139c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    13a0:	f002 fa54 	bl	384c <z_bss_zero>
	z_data_copy();
    13a4:	f003 f82e 	bl	4404 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    13a8:	f000 fa20 	bl	17ec <z_arm_interrupt_init>
	z_cstart();
    13ac:	f002 fa92 	bl	38d4 <z_cstart>
    13b0:	00000000 	.word	0x00000000
    13b4:	e000ed00 	.word	0xe000ed00

000013b8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    13b8:	4a09      	ldr	r2, [pc, #36]	; (13e0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    13ba:	490a      	ldr	r1, [pc, #40]	; (13e4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    13bc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    13be:	6809      	ldr	r1, [r1, #0]
    13c0:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    13c2:	4909      	ldr	r1, [pc, #36]	; (13e8 <arch_swap+0x30>)
	_current->arch.basepri = key;
    13c4:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    13c6:	684b      	ldr	r3, [r1, #4]
    13c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    13cc:	604b      	str	r3, [r1, #4]
    13ce:	2300      	movs	r3, #0
    13d0:	f383 8811 	msr	BASEPRI, r3
    13d4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    13d8:	6893      	ldr	r3, [r2, #8]
}
    13da:	6f98      	ldr	r0, [r3, #120]	; 0x78
    13dc:	4770      	bx	lr
    13de:	bf00      	nop
    13e0:	20000abc 	.word	0x20000abc
    13e4:	00007f34 	.word	0x00007f34
    13e8:	e000ed00 	.word	0xe000ed00

000013ec <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    13ec:	4912      	ldr	r1, [pc, #72]	; (1438 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    13ee:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    13f0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    13f4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    13f6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    13fa:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    13fe:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1400:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1404:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1408:	4f0c      	ldr	r7, [pc, #48]	; (143c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    140a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    140e:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    1410:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1412:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1414:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1416:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1418:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    141a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    141e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1420:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1422:	f000 fa7f 	bl	1924 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1426:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    142a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    142e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1432:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1436:	4770      	bx	lr
    ldr r1, =_kernel
    1438:	20000abc 	.word	0x20000abc
    ldr v4, =_SCS_ICSR
    143c:	e000ed04 	.word	0xe000ed04

00001440 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1440:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1444:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1446:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    144a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    144e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1450:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1454:	2902      	cmp	r1, #2
    beq _oops
    1456:	d0ff      	beq.n	1458 <_oops>

00001458 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1458:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    145a:	f005 fee9 	bl	7230 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    145e:	bd01      	pop	{r0, pc}

00001460 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1460:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1464:	9b00      	ldr	r3, [sp, #0]
    1466:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    146a:	490a      	ldr	r1, [pc, #40]	; (1494 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    146c:	9b01      	ldr	r3, [sp, #4]
    146e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1472:	9b02      	ldr	r3, [sp, #8]
    1474:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1478:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    147c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1480:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1484:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1488:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    148a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    148c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    148e:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1490:	4770      	bx	lr
    1492:	bf00      	nop
    1494:	00006fa3 	.word	0x00006fa3

00001498 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1498:	4a09      	ldr	r2, [pc, #36]	; (14c0 <z_check_thread_stack_fail+0x28>)
{
    149a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    149c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    149e:	b170      	cbz	r0, 14be <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    14a0:	f113 0f16 	cmn.w	r3, #22
    14a4:	6e40      	ldr	r0, [r0, #100]	; 0x64
    14a6:	d005      	beq.n	14b4 <z_check_thread_stack_fail+0x1c>
    14a8:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    14ac:	429a      	cmp	r2, r3
    14ae:	d805      	bhi.n	14bc <z_check_thread_stack_fail+0x24>
    14b0:	4283      	cmp	r3, r0
    14b2:	d203      	bcs.n	14bc <z_check_thread_stack_fail+0x24>
		return 0;
    14b4:	4281      	cmp	r1, r0
    14b6:	bf28      	it	cs
    14b8:	2000      	movcs	r0, #0
    14ba:	4770      	bx	lr
    14bc:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    14be:	4770      	bx	lr
    14c0:	20000abc 	.word	0x20000abc

000014c4 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    14c4:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    14c6:	4b09      	ldr	r3, [pc, #36]	; (14ec <arch_switch_to_main_thread+0x28>)
{
    14c8:	460d      	mov	r5, r1
    14ca:	4614      	mov	r4, r2
	_current = main_thread;
    14cc:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    14ce:	f000 fa29 	bl	1924 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    14d2:	4620      	mov	r0, r4
    14d4:	f385 8809 	msr	PSP, r5
    14d8:	2100      	movs	r1, #0
    14da:	b663      	cpsie	if
    14dc:	f381 8811 	msr	BASEPRI, r1
    14e0:	f3bf 8f6f 	isb	sy
    14e4:	2200      	movs	r2, #0
    14e6:	2300      	movs	r3, #0
    14e8:	f005 fd5b 	bl	6fa2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    14ec:	20000abc 	.word	0x20000abc

000014f0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    14f0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    14f2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    14f4:	4a0b      	ldr	r2, [pc, #44]	; (1524 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    14f6:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    14f8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    14fa:	bf1e      	ittt	ne
	movne	r1, #0
    14fc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    14fe:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    1500:	f006 f9dc 	blne	78bc <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1504:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1506:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    150a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    150e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1512:	4905      	ldr	r1, [pc, #20]	; (1528 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1514:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1516:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1518:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    151a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    151e:	4903      	ldr	r1, [pc, #12]	; (152c <_isr_wrapper+0x3c>)
	bx r1
    1520:	4708      	bx	r1
    1522:	0000      	.short	0x0000
	ldr r2, =_kernel
    1524:	20000abc 	.word	0x20000abc
	ldr r1, =_sw_isr_table
    1528:	00007ba8 	.word	0x00007ba8
	ldr r1, =z_arm_int_exit
    152c:	00001531 	.word	0x00001531

00001530 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1530:	4b04      	ldr	r3, [pc, #16]	; (1544 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1532:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1534:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    1536:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1538:	d003      	beq.n	1542 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    153a:	4903      	ldr	r1, [pc, #12]	; (1548 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    153c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1540:	600a      	str	r2, [r1, #0]

00001542 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1542:	4770      	bx	lr
	ldr r3, =_kernel
    1544:	20000abc 	.word	0x20000abc
	ldr r1, =_SCS_ICSR
    1548:	e000ed04 	.word	0xe000ed04

0000154c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    154c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    154e:	4b26      	ldr	r3, [pc, #152]	; (15e8 <mem_manage_fault+0x9c>)
{
    1550:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1552:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    1554:	f012 0f10 	tst.w	r2, #16
		reason = K_ERR_ARM_MEM_STACKING;
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    155a:	bf14      	ite	ne
    155c:	2411      	movne	r4, #17
    155e:	2410      	moveq	r4, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
    1560:	f012 0f08 	tst.w	r2, #8
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
    1566:	bf18      	it	ne
    1568:	2412      	movne	r4, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    156a:	0792      	lsls	r2, r2, #30
{
    156c:	4606      	mov	r6, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    156e:	d50a      	bpl.n	1586 <mem_manage_fault+0x3a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1570:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1572:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1574:	0614      	lsls	r4, r2, #24
    1576:	d534      	bpl.n	15e2 <mem_manage_fault+0x96>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    1578:	b119      	cbz	r1, 1582 <mem_manage_fault+0x36>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    157a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    157c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1580:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    1582:	2413      	movs	r4, #19
    1584:	e001      	b.n	158a <mem_manage_fault+0x3e>
	uint32_t mmfar = -EINVAL;
    1586:	f06f 0015 	mvn.w	r0, #21
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    158a:	4b17      	ldr	r3, [pc, #92]	; (15e8 <mem_manage_fault+0x9c>)
    158c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    158e:	f012 0f01 	tst.w	r2, #1
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1592:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    1594:	bf18      	it	ne
    1596:	2414      	movne	r4, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    1598:	f012 0f20 	tst.w	r2, #32
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    159c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    159e:	bf18      	it	ne
    15a0:	2415      	movne	r4, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    15a2:	06d2      	lsls	r2, r2, #27
    15a4:	d402      	bmi.n	15ac <mem_manage_fault+0x60>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    15a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    15a8:	079b      	lsls	r3, r3, #30
    15aa:	d50a      	bpl.n	15c2 <mem_manage_fault+0x76>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    15ac:	4b0e      	ldr	r3, [pc, #56]	; (15e8 <mem_manage_fault+0x9c>)
    15ae:	685b      	ldr	r3, [r3, #4]
    15b0:	0519      	lsls	r1, r3, #20
    15b2:	d506      	bpl.n	15c2 <mem_manage_fault+0x76>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    15b4:	4631      	mov	r1, r6
    15b6:	f7ff ff6f 	bl	1498 <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
    15ba:	b110      	cbz	r0, 15c2 <mem_manage_fault+0x76>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    15bc:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
    15c0:	2402      	movs	r4, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    15c2:	4b09      	ldr	r3, [pc, #36]	; (15e8 <mem_manage_fault+0x9c>)
    15c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    15c6:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    15c8:	bf42      	ittt	mi
    15ca:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    15cc:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    15d0:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    15d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    15d4:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    15d8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    15da:	2300      	movs	r3, #0
    15dc:	702b      	strb	r3, [r5, #0]

	return reason;
}
    15de:	4620      	mov	r0, r4
    15e0:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    15e2:	f06f 0015 	mvn.w	r0, #21
    15e6:	e7cc      	b.n	1582 <mem_manage_fault+0x36>
    15e8:	e000ed00 	.word	0xe000ed00

000015ec <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    15ec:	4b13      	ldr	r3, [pc, #76]	; (163c <usage_fault.constprop.0+0x50>)
    15ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    15f0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    15f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    15f6:	bf14      	ite	ne
    15f8:	201e      	movne	r0, #30
    15fa:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    15fc:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    1602:	bf18      	it	ne
    1604:	201f      	movne	r0, #31
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    1606:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    160a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    160c:	bf18      	it	ne
    160e:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    1610:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    1616:	bf18      	it	ne
    1618:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    161a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    161e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    1620:	bf18      	it	ne
    1622:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    1624:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    162a:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    162e:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1632:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    1634:	bf18      	it	ne
    1636:	2024      	movne	r0, #36	; 0x24
    1638:	4770      	bx	lr
    163a:	bf00      	nop
    163c:	e000ed00 	.word	0xe000ed00

00001640 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1640:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1642:	4b19      	ldr	r3, [pc, #100]	; (16a8 <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1644:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1646:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1648:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    164a:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    164e:	bf14      	ite	ne
    1650:	2017      	movne	r0, #23
    1652:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
    1654:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1658:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
    165a:	bf18      	it	ne
    165c:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    165e:	05a4      	lsls	r4, r4, #22
    1660:	d509      	bpl.n	1676 <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
    1662:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1664:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1666:	0400      	lsls	r0, r0, #16
    1668:	d504      	bpl.n	1674 <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    166a:	b11a      	cbz	r2, 1674 <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    166c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    166e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1672:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    1674:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1676:	4b0c      	ldr	r3, [pc, #48]	; (16a8 <bus_fault.constprop.0+0x68>)
    1678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    167a:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    167e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    1680:	bf18      	it	ne
    1682:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1684:	05d2      	lsls	r2, r2, #23
    1686:	d40c      	bmi.n	16a2 <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    168a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    168e:	bf18      	it	ne
    1690:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1692:	4a05      	ldr	r2, [pc, #20]	; (16a8 <bus_fault.constprop.0+0x68>)
    1694:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1696:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    169a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    169c:	2300      	movs	r3, #0
    169e:	700b      	strb	r3, [r1, #0]
}
    16a0:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    16a2:	201b      	movs	r0, #27
    16a4:	e7f5      	b.n	1692 <bus_fault.constprop.0+0x52>
    16a6:	bf00      	nop
    16a8:	e000ed00 	.word	0xe000ed00

000016ac <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    16ac:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    16ae:	4b45      	ldr	r3, [pc, #276]	; (17c4 <z_arm_fault+0x118>)
    16b0:	685b      	ldr	r3, [r3, #4]
{
    16b2:	b08a      	sub	sp, #40	; 0x28
    16b4:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    16b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    16ba:	2600      	movs	r6, #0
    16bc:	f386 8811 	msr	BASEPRI, r6
    16c0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    16c4:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    16c8:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    16cc:	d111      	bne.n	16f2 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    16ce:	f002 000c 	and.w	r0, r2, #12
    16d2:	2808      	cmp	r0, #8
    16d4:	d00d      	beq.n	16f2 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    16d6:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    16d8:	bf4c      	ite	mi
    16da:	460d      	movmi	r5, r1
			*nested_exc = true;
    16dc:	2601      	movpl	r6, #1
	*recoverable = false;
    16de:	2200      	movs	r2, #0
	switch (fault) {
    16e0:	3b03      	subs	r3, #3
	*recoverable = false;
    16e2:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    16e6:	2b03      	cmp	r3, #3
    16e8:	d805      	bhi.n	16f6 <z_arm_fault+0x4a>
    16ea:	e8df f003 	tbb	[pc, r3]
    16ee:	5d1e      	.short	0x5d1e
    16f0:	5a61      	.short	0x5a61
		return NULL;
    16f2:	4635      	mov	r5, r6
    16f4:	e7f3      	b.n	16de <z_arm_fault+0x32>
    16f6:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    16f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    16fc:	b99b      	cbnz	r3, 1726 <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    16fe:	2220      	movs	r2, #32
    1700:	4629      	mov	r1, r5
    1702:	a802      	add	r0, sp, #8
    1704:	f005 fdd4 	bl	72b0 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1708:	9b09      	ldr	r3, [sp, #36]	; 0x24
    170a:	2e00      	cmp	r6, #0
    170c:	d054      	beq.n	17b8 <z_arm_fault+0x10c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    170e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1712:	b922      	cbnz	r2, 171e <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1714:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1718:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    171c:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    171e:	a902      	add	r1, sp, #8
    1720:	4620      	mov	r0, r4
    1722:	f005 fd83 	bl	722c <z_arm_fatal_error>
}
    1726:	b00a      	add	sp, #40	; 0x28
    1728:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    172a:	4b26      	ldr	r3, [pc, #152]	; (17c4 <z_arm_fault+0x118>)
    172c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    172e:	0791      	lsls	r1, r2, #30
    1730:	d4e1      	bmi.n	16f6 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1734:	2a00      	cmp	r2, #0
    1736:	dbde      	blt.n	16f6 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    173a:	0052      	lsls	r2, r2, #1
    173c:	d5db      	bpl.n	16f6 <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    173e:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    1740:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    1742:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1746:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1748:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    174c:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    1750:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    1752:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    1756:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    175a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    175c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1760:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1764:	f64d 7202 	movw	r2, #57090	; 0xdf02
    1768:	4291      	cmp	r1, r2
    176a:	d00a      	beq.n	1782 <z_arm_fault+0xd6>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    176c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    176e:	b2d2      	uxtb	r2, r2
    1770:	b14a      	cbz	r2, 1786 <z_arm_fault+0xda>
			reason = mem_manage_fault(esf, 1, recoverable);
    1772:	f10d 0207 	add.w	r2, sp, #7
    1776:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1778:	4628      	mov	r0, r5
    177a:	f7ff fee7 	bl	154c <mem_manage_fault>
		reason = usage_fault(esf);
    177e:	4604      	mov	r4, r0
		break;
    1780:	e7ba      	b.n	16f8 <z_arm_fault+0x4c>
			reason = esf->basic.r0;
    1782:	682c      	ldr	r4, [r5, #0]
    1784:	e7b8      	b.n	16f8 <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    1786:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1788:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    178c:	d005      	beq.n	179a <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    178e:	f10d 0107 	add.w	r1, sp, #7
    1792:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    1794:	f7ff ff54 	bl	1640 <bus_fault.constprop.0>
    1798:	e7f1      	b.n	177e <z_arm_fault+0xd2>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    179c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    17a0:	d3a9      	bcc.n	16f6 <z_arm_fault+0x4a>
		reason = usage_fault(esf);
    17a2:	f7ff ff23 	bl	15ec <usage_fault.constprop.0>
    17a6:	e7ea      	b.n	177e <z_arm_fault+0xd2>
		reason = mem_manage_fault(esf, 0, recoverable);
    17a8:	f10d 0207 	add.w	r2, sp, #7
    17ac:	2100      	movs	r1, #0
    17ae:	e7e3      	b.n	1778 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
    17b0:	f10d 0107 	add.w	r1, sp, #7
    17b4:	2000      	movs	r0, #0
    17b6:	e7ed      	b.n	1794 <z_arm_fault+0xe8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    17b8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    17bc:	f023 0301 	bic.w	r3, r3, #1
    17c0:	e7ac      	b.n	171c <z_arm_fault+0x70>
    17c2:	bf00      	nop
    17c4:	e000ed00 	.word	0xe000ed00

000017c8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    17c8:	4a02      	ldr	r2, [pc, #8]	; (17d4 <z_arm_fault_init+0xc>)
    17ca:	6953      	ldr	r3, [r2, #20]
    17cc:	f043 0310 	orr.w	r3, r3, #16
    17d0:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    17d2:	4770      	bx	lr
    17d4:	e000ed00 	.word	0xe000ed00

000017d8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    17d8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    17dc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    17e0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    17e2:	4672      	mov	r2, lr
	bl z_arm_fault
    17e4:	f7ff ff62 	bl	16ac <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    17e8:	bd01      	pop	{r0, pc}
    17ea:	bf00      	nop

000017ec <z_arm_interrupt_init>:
    17ec:	4804      	ldr	r0, [pc, #16]	; (1800 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    17ee:	2300      	movs	r3, #0
    17f0:	2120      	movs	r1, #32
    17f2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    17f4:	3301      	adds	r3, #1
    17f6:	2b30      	cmp	r3, #48	; 0x30
    17f8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    17fc:	d1f9      	bne.n	17f2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    17fe:	4770      	bx	lr
    1800:	e000e100 	.word	0xe000e100

00001804 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1804:	2000      	movs	r0, #0
    msr CONTROL, r0
    1806:	f380 8814 	msr	CONTROL, r0
    isb
    180a:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    180e:	f7ff fb25 	bl	e5c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1812:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1814:	490d      	ldr	r1, [pc, #52]	; (184c <__start+0x48>)
    str r0, [r1]
    1816:	6008      	str	r0, [r1, #0]
    dsb
    1818:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    181c:	480c      	ldr	r0, [pc, #48]	; (1850 <__start+0x4c>)
    msr msp, r0
    181e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1822:	f000 f82b 	bl	187c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1826:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1828:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    182c:	4809      	ldr	r0, [pc, #36]	; (1854 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    182e:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    1832:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1834:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1838:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    183c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    183e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1840:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1844:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1848:	f7ff fd9a 	bl	1380 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    184c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1850:	20003040 	.word	0x20003040
    ldr r0, =z_interrupt_stacks
    1854:	20001e80 	.word	0x20001e80

00001858 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1858:	4907      	ldr	r1, [pc, #28]	; (1878 <z_arm_clear_arm_mpu_config+0x20>)
    185a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    185e:	2300      	movs	r3, #0
	int num_regions =
    1860:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    1864:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    1866:	4293      	cmp	r3, r2
    1868:	db00      	blt.n	186c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    186a:	4770      	bx	lr
  MPU->RNR = rnr;
    186c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    1870:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    1874:	3301      	adds	r3, #1
    1876:	e7f6      	b.n	1866 <z_arm_clear_arm_mpu_config+0xe>
    1878:	e000ed00 	.word	0xe000ed00

0000187c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    187c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    187e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1880:	2300      	movs	r3, #0
    1882:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1886:	f7ff ffe7 	bl	1858 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    188a:	4b14      	ldr	r3, [pc, #80]	; (18dc <z_arm_init_arch_hw_at_boot+0x60>)
    188c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    1894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    189c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    18a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    18a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    18a8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    18ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    18b0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    18b4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    18b8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    18bc:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    18c0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    18c4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    18c8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    18cc:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    18d0:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    18d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18d6:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    18da:	bd08      	pop	{r3, pc}
    18dc:	e000e100 	.word	0xe000e100

000018e0 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    18e0:	4b08      	ldr	r3, [pc, #32]	; (1904 <z_impl_k_thread_abort+0x24>)
    18e2:	689b      	ldr	r3, [r3, #8]
    18e4:	4283      	cmp	r3, r0
    18e6:	d10b      	bne.n	1900 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    18e8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    18ec:	b143      	cbz	r3, 1900 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    18ee:	4b06      	ldr	r3, [pc, #24]	; (1908 <z_impl_k_thread_abort+0x28>)
    18f0:	685a      	ldr	r2, [r3, #4]
    18f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    18f6:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    18f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    18fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    18fe:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    1900:	f002 bd20 	b.w	4344 <z_thread_abort>
    1904:	20000abc 	.word	0x20000abc
    1908:	e000ed00 	.word	0xe000ed00

0000190c <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    190c:	4b02      	ldr	r3, [pc, #8]	; (1918 <z_arm_configure_static_mpu_regions+0xc>)
    190e:	4a03      	ldr	r2, [pc, #12]	; (191c <z_arm_configure_static_mpu_regions+0x10>)
    1910:	4803      	ldr	r0, [pc, #12]	; (1920 <z_arm_configure_static_mpu_regions+0x14>)
    1912:	2101      	movs	r1, #1
    1914:	f000 b870 	b.w	19f8 <arm_core_mpu_configure_static_mpu_regions>
    1918:	20040000 	.word	0x20040000
    191c:	20000000 	.word	0x20000000
    1920:	00007e34 	.word	0x00007e34

00001924 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    1924:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    1926:	4b05      	ldr	r3, [pc, #20]	; (193c <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    1928:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    192a:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    192c:	4a04      	ldr	r2, [pc, #16]	; (1940 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    192e:	2140      	movs	r1, #64	; 0x40
    1930:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    1934:	4618      	mov	r0, r3
    1936:	2101      	movs	r1, #1
    1938:	f000 b868 	b.w	1a0c <arm_core_mpu_configure_dynamic_mpu_regions>
    193c:	20000930 	.word	0x20000930
    1940:	150b0000 	.word	0x150b0000

00001944 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1944:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    1946:	4e20      	ldr	r6, [pc, #128]	; (19c8 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1948:	2500      	movs	r5, #0
    194a:	428d      	cmp	r5, r1
    194c:	da39      	bge.n	19c2 <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
    194e:	6844      	ldr	r4, [r0, #4]
    1950:	b374      	cbz	r4, 19b0 <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    1952:	b153      	cbz	r3, 196a <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    1954:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1958:	ea14 0f0c 	tst.w	r4, ip
    195c:	d12f      	bne.n	19be <mpu_configure_regions+0x7a>
		&&
    195e:	2c1f      	cmp	r4, #31
    1960:	d92d      	bls.n	19be <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
    1962:	6807      	ldr	r7, [r0, #0]
		&&
    1964:	ea1c 0f07 	tst.w	ip, r7
    1968:	d129      	bne.n	19be <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    196a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    196c:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    196e:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    1972:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    1976:	d91e      	bls.n	19b6 <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
    1978:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    197c:	d81d      	bhi.n	19ba <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    197e:	3c01      	subs	r4, #1
    1980:	fab4 f484 	clz	r4, r4
    1984:	f1c4 041f 	rsb	r4, r4, #31
    1988:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    198a:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    198e:	ea4c 0c04 	orr.w	ip, ip, r4
    1992:	d814      	bhi.n	19be <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1994:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    1998:	4314      	orrs	r4, r2
    199a:	f044 0410 	orr.w	r4, r4, #16
    199e:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    19a2:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    19a6:	f04c 0401 	orr.w	r4, ip, #1
    19aa:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    19ae:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    19b0:	3501      	adds	r5, #1
    19b2:	300c      	adds	r0, #12
    19b4:	e7c9      	b.n	194a <mpu_configure_regions+0x6>
		return REGION_32B;
    19b6:	2408      	movs	r4, #8
    19b8:	e7e7      	b.n	198a <mpu_configure_regions+0x46>
		return REGION_4G;
    19ba:	243e      	movs	r4, #62	; 0x3e
    19bc:	e7e5      	b.n	198a <mpu_configure_regions+0x46>
			return -EINVAL;
    19be:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
    19c2:	4610      	mov	r0, r2
    19c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19c6:	bf00      	nop
    19c8:	e000ed00 	.word	0xe000ed00

000019cc <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    19cc:	4b04      	ldr	r3, [pc, #16]	; (19e0 <arm_core_mpu_enable+0x14>)
    19ce:	2205      	movs	r2, #5
    19d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    19d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    19d8:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    19dc:	4770      	bx	lr
    19de:	bf00      	nop
    19e0:	e000ed00 	.word	0xe000ed00

000019e4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    19e4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    19e8:	4b02      	ldr	r3, [pc, #8]	; (19f4 <arm_core_mpu_disable+0x10>)
    19ea:	2200      	movs	r2, #0
    19ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    19f0:	4770      	bx	lr
    19f2:	bf00      	nop
    19f4:	e000ed00 	.word	0xe000ed00

000019f8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    19f8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    19fa:	4c03      	ldr	r4, [pc, #12]	; (1a08 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    19fc:	2301      	movs	r3, #1
    19fe:	7822      	ldrb	r2, [r4, #0]
    1a00:	f7ff ffa0 	bl	1944 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1a04:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    1a06:	bd10      	pop	{r4, pc}
    1a08:	200015b8 	.word	0x200015b8

00001a0c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    1a0c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1a0e:	4a09      	ldr	r2, [pc, #36]	; (1a34 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    1a10:	2300      	movs	r3, #0
    1a12:	7812      	ldrb	r2, [r2, #0]
    1a14:	f7ff ff96 	bl	1944 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1a18:	f110 0f16 	cmn.w	r0, #22
    1a1c:	d002      	beq.n	1a24 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
    1a1e:	4a06      	ldr	r2, [pc, #24]	; (1a38 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    1a20:	2807      	cmp	r0, #7
    1a22:	dd00      	ble.n	1a26 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    1a24:	bd08      	pop	{r3, pc}
    1a26:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    1a2a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    1a2e:	3001      	adds	r0, #1
    1a30:	e7f6      	b.n	1a20 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    1a32:	bf00      	nop
    1a34:	200015b8 	.word	0x200015b8
    1a38:	e000ed00 	.word	0xe000ed00

00001a3c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1a3c:	4914      	ldr	r1, [pc, #80]	; (1a90 <z_arm_mpu_init+0x54>)
    1a3e:	6808      	ldr	r0, [r1, #0]
    1a40:	2808      	cmp	r0, #8
{
    1a42:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    1a44:	d821      	bhi.n	1a8a <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1a46:	f7ff ffcd 	bl	19e4 <arm_core_mpu_disable>
    1a4a:	4c12      	ldr	r4, [pc, #72]	; (1a94 <z_arm_mpu_init+0x58>)
    1a4c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1a4e:	2200      	movs	r2, #0
    1a50:	4290      	cmp	r0, r2
    1a52:	f101 010c 	add.w	r1, r1, #12
    1a56:	d105      	bne.n	1a64 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1a58:	4b0f      	ldr	r3, [pc, #60]	; (1a98 <z_arm_mpu_init+0x5c>)
    1a5a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    1a5c:	f7ff ffb6 	bl	19cc <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1a60:	2000      	movs	r0, #0
}
    1a62:	bd10      	pop	{r4, pc}
    1a64:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1a68:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    1a6c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1a70:	4313      	orrs	r3, r2
    1a72:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1a76:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1a7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1a7e:	f043 0301 	orr.w	r3, r3, #1
    1a82:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1a86:	3201      	adds	r2, #1
    1a88:	e7e2      	b.n	1a50 <z_arm_mpu_init+0x14>
		return -1;
    1a8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1a8e:	e7e8      	b.n	1a62 <z_arm_mpu_init+0x26>
    1a90:	00007e40 	.word	0x00007e40
    1a94:	e000ed00 	.word	0xe000ed00
    1a98:	200015b8 	.word	0x200015b8

00001a9c <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    1a9c:	4b01      	ldr	r3, [pc, #4]	; (1aa4 <__stdout_hook_install+0x8>)
    1a9e:	6018      	str	r0, [r3, #0]
}
    1aa0:	4770      	bx	lr
    1aa2:	bf00      	nop
    1aa4:	2000002c 	.word	0x2000002c

00001aa8 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(void)
{
    1aa8:	b510      	push	{r4, lr}
	__asm__ volatile(
    1aaa:	f04f 0320 	mov.w	r3, #32
    1aae:	f3ef 8011 	mrs	r0, BASEPRI
    1ab2:	f383 8812 	msr	BASEPRI_MAX, r3
    1ab6:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1aba:	4a11      	ldr	r2, [pc, #68]	; (1b00 <nordicsemi_nrf52_init+0x58>)
    1abc:	2301      	movs	r3, #1
    1abe:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    1ac2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    1ac6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    1aca:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    1ace:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    1ad2:	2c08      	cmp	r4, #8
    1ad4:	d108      	bne.n	1ae8 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    1ad6:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    1ada:	2905      	cmp	r1, #5
    1adc:	d804      	bhi.n	1ae8 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    1ade:	4c09      	ldr	r4, [pc, #36]	; (1b04 <nordicsemi_nrf52_init+0x5c>)
    1ae0:	5c61      	ldrb	r1, [r4, r1]
    1ae2:	b109      	cbz	r1, 1ae8 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    1ae4:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    1ae8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1aec:	2201      	movs	r2, #1
    1aee:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    1af2:	f380 8811 	msr	BASEPRI, r0
    1af6:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1afa:	2000      	movs	r0, #0
    1afc:	bd10      	pop	{r4, pc}
    1afe:	bf00      	nop
    1b00:	4001e000 	.word	0x4001e000
    1b04:	0000822f 	.word	0x0000822f

00001b08 <sys_arch_reboot>:
    *p_gpregret = val;
    1b08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1b0c:	b2c0      	uxtb	r0, r0
    1b0e:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    1b12:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1b16:	4905      	ldr	r1, [pc, #20]	; (1b2c <sys_arch_reboot+0x24>)
    1b18:	4b05      	ldr	r3, [pc, #20]	; (1b30 <sys_arch_reboot+0x28>)
    1b1a:	68ca      	ldr	r2, [r1, #12]
    1b1c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1b20:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1b22:	60cb      	str	r3, [r1, #12]
    1b24:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1b28:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1b2a:	e7fd      	b.n	1b28 <sys_arch_reboot+0x20>
    1b2c:	e000ed00 	.word	0xe000ed00
    1b30:	05fa0004 	.word	0x05fa0004

00001b34 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1b34:	b120      	cbz	r0, 1b40 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1b36:	4b03      	ldr	r3, [pc, #12]	; (1b44 <arch_busy_wait+0x10>)
    1b38:	0180      	lsls	r0, r0, #6
    1b3a:	f043 0301 	orr.w	r3, r3, #1
    1b3e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1b40:	4770      	bx	lr
    1b42:	bf00      	nop
    1b44:	00007e00 	.word	0x00007e00

00001b48 <z_impl_sys_rand32_get>:
static const struct device *const entropy_dev =
	DEVICE_DT_GET(DT_CHOSEN(zephyr_entropy));

#if defined(CONFIG_ENTROPY_DEVICE_RANDOM_GENERATOR)
uint32_t z_impl_sys_rand32_get(void)
{
    1b48:	b507      	push	{r0, r1, r2, lr}
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    1b4a:	4808      	ldr	r0, [pc, #32]	; (1b6c <z_impl_sys_rand32_get+0x24>)
    1b4c:	6883      	ldr	r3, [r0, #8]
    1b4e:	2204      	movs	r2, #4
    1b50:	681b      	ldr	r3, [r3, #0]
    1b52:	eb0d 0102 	add.w	r1, sp, r2
    1b56:	4798      	blx	r3
	__ASSERT(device_is_ready(entropy_dev), "Entropy device %s not ready",
		 entropy_dev->name);

	ret = entropy_get_entropy(entropy_dev, (uint8_t *)&random_num,
				  sizeof(random_num));
	if (unlikely(ret < 0)) {
    1b58:	2800      	cmp	r0, #0
    1b5a:	da02      	bge.n	1b62 <z_impl_sys_rand32_get+0x1a>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    1b5c:	f005 fd70 	bl	7640 <sys_clock_cycle_get_32>
		 * 32-bit of data.  There's not much that can be done in this
		 * situation.  An __ASSERT() isn't used here as the HWRNG might
		 * still be gathering entropy during early boot situations.
		 */

		random_num = k_cycle_get_32();
    1b60:	9001      	str	r0, [sp, #4]
	}

	return random_num;
}
    1b62:	9801      	ldr	r0, [sp, #4]
    1b64:	b003      	add	sp, #12
    1b66:	f85d fb04 	ldr.w	pc, [sp], #4
    1b6a:	bf00      	nop
    1b6c:	00007b78 	.word	0x00007b78

00001b70 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1b70:	4b08      	ldr	r3, [pc, #32]	; (1b94 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1b72:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1b74:	1ac3      	subs	r3, r0, r3
{
    1b76:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1b78:	4907      	ldr	r1, [pc, #28]	; (1b98 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    1b7a:	109b      	asrs	r3, r3, #2
{
    1b7c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1b7e:	4359      	muls	r1, r3
    1b80:	4806      	ldr	r0, [pc, #24]	; (1b9c <onoff_stop+0x2c>)
    1b82:	2240      	movs	r2, #64	; 0x40
    1b84:	f005 fbd9 	bl	733a <stop>
	notify(mgr, res);
    1b88:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1b8a:	4601      	mov	r1, r0
	notify(mgr, res);
    1b8c:	4620      	mov	r0, r4
}
    1b8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1b92:	4718      	bx	r3
    1b94:	20000950 	.word	0x20000950
    1b98:	b6db6db7 	.word	0xb6db6db7
    1b9c:	00007b18 	.word	0x00007b18

00001ba0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1ba0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1ba2:	4c0c      	ldr	r4, [pc, #48]	; (1bd4 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1ba4:	4a0c      	ldr	r2, [pc, #48]	; (1bd8 <onoff_start+0x38>)
    1ba6:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    1ba8:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1baa:	9300      	str	r3, [sp, #0]
{
    1bac:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1bae:	460b      	mov	r3, r1
    1bb0:	490a      	ldr	r1, [pc, #40]	; (1bdc <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    1bb2:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1bb4:	4361      	muls	r1, r4
{
    1bb6:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1bb8:	4809      	ldr	r0, [pc, #36]	; (1be0 <onoff_start+0x40>)
    1bba:	f005 fbeb 	bl	7394 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1bbe:	1e01      	subs	r1, r0, #0
    1bc0:	da05      	bge.n	1bce <onoff_start+0x2e>
		notify(mgr, err);
    1bc2:	4630      	mov	r0, r6
    1bc4:	462b      	mov	r3, r5
	}
}
    1bc6:	b002      	add	sp, #8
    1bc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    1bcc:	4718      	bx	r3
}
    1bce:	b002      	add	sp, #8
    1bd0:	bd70      	pop	{r4, r5, r6, pc}
    1bd2:	bf00      	nop
    1bd4:	20000950 	.word	0x20000950
    1bd8:	00007401 	.word	0x00007401
    1bdc:	b6db6db7 	.word	0xb6db6db7
    1be0:	00007b18 	.word	0x00007b18

00001be4 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1be4:	2200      	movs	r2, #0
{
    1be6:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1be8:	2101      	movs	r1, #1
{
    1bea:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1bec:	4610      	mov	r0, r2
    1bee:	f7ff fbab 	bl	1348 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1bf2:	480f      	ldr	r0, [pc, #60]	; (1c30 <clk_init+0x4c>)
    1bf4:	f001 fa04 	bl	3000 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1bf8:	4b0e      	ldr	r3, [pc, #56]	; (1c34 <clk_init+0x50>)
    1bfa:	4298      	cmp	r0, r3
    1bfc:	d115      	bne.n	1c2a <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1bfe:	f005 fd35 	bl	766c <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    1c02:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1c04:	490c      	ldr	r1, [pc, #48]	; (1c38 <clk_init+0x54>)
    1c06:	4630      	mov	r0, r6
    1c08:	f005 fa25 	bl	7056 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1c0c:	2800      	cmp	r0, #0
    1c0e:	db0b      	blt.n	1c28 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1c10:	2501      	movs	r5, #1
    1c12:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    1c14:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1c16:	4908      	ldr	r1, [pc, #32]	; (1c38 <clk_init+0x54>)
    1c18:	f104 001c 	add.w	r0, r4, #28
    1c1c:	f005 fa1b 	bl	7056 <onoff_manager_init>
		if (err < 0) {
    1c20:	2800      	cmp	r0, #0
    1c22:	db01      	blt.n	1c28 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1c24:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    1c26:	2000      	movs	r0, #0
}
    1c28:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1c2a:	f06f 0004 	mvn.w	r0, #4
    1c2e:	e7fb      	b.n	1c28 <clk_init+0x44>
    1c30:	00001c71 	.word	0x00001c71
    1c34:	0bad0000 	.word	0x0bad0000
    1c38:	00007e60 	.word	0x00007e60

00001c3c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1c3c:	b570      	push	{r4, r5, r6, lr}
    1c3e:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1c40:	230c      	movs	r3, #12
    1c42:	4809      	ldr	r0, [pc, #36]	; (1c68 <clkstarted_handle.constprop.0+0x2c>)
    1c44:	434b      	muls	r3, r1
    1c46:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    1c48:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    1c4c:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    1c4e:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    1c50:	4418      	add	r0, r3
	sub_data->cb = NULL;
    1c52:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    1c54:	f005 fb5e 	bl	7314 <set_on_state>
	if (callback) {
    1c58:	b12d      	cbz	r5, 1c66 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1c5a:	4632      	mov	r2, r6
    1c5c:	462b      	mov	r3, r5
    1c5e:	4803      	ldr	r0, [pc, #12]	; (1c6c <clkstarted_handle.constprop.0+0x30>)
}
    1c60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1c64:	4718      	bx	r3
}
    1c66:	bd70      	pop	{r4, r5, r6, pc}
    1c68:	20000950 	.word	0x20000950
    1c6c:	00007b18 	.word	0x00007b18

00001c70 <clock_event_handler>:
	switch (event) {
    1c70:	b110      	cbz	r0, 1c78 <clock_event_handler+0x8>
    1c72:	2801      	cmp	r0, #1
    1c74:	d004      	beq.n	1c80 <clock_event_handler+0x10>
    1c76:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1c78:	4b03      	ldr	r3, [pc, #12]	; (1c88 <clock_event_handler+0x18>)
    1c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1c7c:	075b      	lsls	r3, r3, #29
    1c7e:	d101      	bne.n	1c84 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1c80:	f7ff bfdc 	b.w	1c3c <clkstarted_handle.constprop.0>
}
    1c84:	4770      	bx	lr
    1c86:	bf00      	nop
    1c88:	20000950 	.word	0x20000950

00001c8c <generic_hfclk_start>:
{
    1c8c:	b508      	push	{r3, lr}
	__asm__ volatile(
    1c8e:	f04f 0320 	mov.w	r3, #32
    1c92:	f3ef 8111 	mrs	r1, BASEPRI
    1c96:	f383 8812 	msr	BASEPRI_MAX, r3
    1c9a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1c9e:	4a12      	ldr	r2, [pc, #72]	; (1ce8 <generic_hfclk_start+0x5c>)
    1ca0:	6813      	ldr	r3, [r2, #0]
    1ca2:	f043 0002 	orr.w	r0, r3, #2
    1ca6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1ca8:	07da      	lsls	r2, r3, #31
    1caa:	d408      	bmi.n	1cbe <generic_hfclk_start+0x32>
	__asm__ volatile(
    1cac:	f381 8811 	msr	BASEPRI, r1
    1cb0:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1cb4:	2001      	movs	r0, #1
}
    1cb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    1cba:	f005 bce4 	b.w	7686 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1cbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1cc2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1cc6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1cca:	07d3      	lsls	r3, r2, #31
    1ccc:	d5ee      	bpl.n	1cac <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    1cce:	4807      	ldr	r0, [pc, #28]	; (1cec <generic_hfclk_start+0x60>)
    1cd0:	f005 fb20 	bl	7314 <set_on_state>
    1cd4:	f381 8811 	msr	BASEPRI, r1
    1cd8:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    1cdc:	2000      	movs	r0, #0
}
    1cde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    1ce2:	f7ff bfab 	b.w	1c3c <clkstarted_handle.constprop.0>
    1ce6:	bf00      	nop
    1ce8:	200009a0 	.word	0x200009a0
    1cec:	20000990 	.word	0x20000990

00001cf0 <api_blocking_start>:
{
    1cf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1cf2:	2200      	movs	r2, #0
    1cf4:	2301      	movs	r3, #1
    1cf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1cfa:	4a09      	ldr	r2, [pc, #36]	; (1d20 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1cfc:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1d00:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1d02:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1d06:	f005 fb74 	bl	73f2 <api_start>
	if (err < 0) {
    1d0a:	2800      	cmp	r0, #0
    1d0c:	db05      	blt.n	1d1a <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    1d0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1d12:	2300      	movs	r3, #0
    1d14:	4668      	mov	r0, sp
    1d16:	f002 f80b 	bl	3d30 <z_impl_k_sem_take>
}
    1d1a:	b005      	add	sp, #20
    1d1c:	f85d fb04 	ldr.w	pc, [sp], #4
    1d20:	0000741f 	.word	0x0000741f

00001d24 <generic_hfclk_stop>:
{
    1d24:	b510      	push	{r4, lr}
	__asm__ volatile(
    1d26:	f04f 0320 	mov.w	r3, #32
    1d2a:	f3ef 8411 	mrs	r4, BASEPRI
    1d2e:	f383 8812 	msr	BASEPRI_MAX, r3
    1d32:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    1d36:	4a07      	ldr	r2, [pc, #28]	; (1d54 <generic_hfclk_stop+0x30>)
    1d38:	6813      	ldr	r3, [r2, #0]
    1d3a:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    1d3e:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    1d40:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    1d42:	d402      	bmi.n	1d4a <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1d44:	2001      	movs	r0, #1
    1d46:	f005 fcda 	bl	76fe <nrfx_clock_stop>
	__asm__ volatile(
    1d4a:	f384 8811 	msr	BASEPRI, r4
    1d4e:	f3bf 8f6f 	isb	sy
}
    1d52:	bd10      	pop	{r4, pc}
    1d54:	200009a0 	.word	0x200009a0

00001d58 <z_nrf_clock_control_lf_on>:
{
    1d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1d5c:	4938      	ldr	r1, [pc, #224]	; (1e40 <z_nrf_clock_control_lf_on+0xe8>)
    1d5e:	f3bf 8f5b 	dmb	ish
    1d62:	4607      	mov	r7, r0
    1d64:	2201      	movs	r2, #1
    1d66:	e851 3f00 	ldrex	r3, [r1]
    1d6a:	e841 2000 	strex	r0, r2, [r1]
    1d6e:	2800      	cmp	r0, #0
    1d70:	d1f9      	bne.n	1d66 <z_nrf_clock_control_lf_on+0xe>
    1d72:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    1d76:	b933      	cbnz	r3, 1d86 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1d78:	4932      	ldr	r1, [pc, #200]	; (1e44 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    1d7a:	4833      	ldr	r0, [pc, #204]	; (1e48 <z_nrf_clock_control_lf_on+0xf0>)
    1d7c:	604b      	str	r3, [r1, #4]
    1d7e:	60cb      	str	r3, [r1, #12]
    1d80:	608a      	str	r2, [r1, #8]
    1d82:	f005 f97b 	bl	707c <onoff_request>
	switch (start_mode) {
    1d86:	1e7b      	subs	r3, r7, #1
    1d88:	2b01      	cmp	r3, #1
    1d8a:	d82b      	bhi.n	1de4 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1d8c:	2f01      	cmp	r7, #1
    1d8e:	d107      	bne.n	1da0 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1d90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1d94:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1d98:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1d9c:	2b01      	cmp	r3, #1
    1d9e:	d021      	beq.n	1de4 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1da0:	f005 fd86 	bl	78b0 <k_is_in_isr>
    1da4:	4605      	mov	r5, r0
    1da6:	b9f8      	cbnz	r0, 1de8 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
    1da8:	4b28      	ldr	r3, [pc, #160]	; (1e4c <z_nrf_clock_control_lf_on+0xf4>)
    1daa:	781b      	ldrb	r3, [r3, #0]
    1dac:	b1e3      	cbz	r3, 1de8 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    1dae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1db2:	2202      	movs	r2, #2
    1db4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    1db8:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1dba:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1e50 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1dbe:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    1dc2:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1dc6:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    1dca:	03d2      	lsls	r2, r2, #15
    1dcc:	d516      	bpl.n	1dfc <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1dce:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1dd2:	2b01      	cmp	r3, #1
    1dd4:	d001      	beq.n	1dda <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1dd6:	2f01      	cmp	r7, #1
    1dd8:	d110      	bne.n	1dfc <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    1dda:	b35d      	cbz	r5, 1e34 <z_nrf_clock_control_lf_on+0xdc>
    1ddc:	f386 8811 	msr	BASEPRI, r6
    1de0:	f3bf 8f6f 	isb	sy
}
    1de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    1de8:	f04f 0320 	mov.w	r3, #32
    1dec:	f3ef 8611 	mrs	r6, BASEPRI
    1df0:	f383 8812 	msr	BASEPRI_MAX, r3
    1df4:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1df8:	2501      	movs	r5, #1
    1dfa:	e7de      	b.n	1dba <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1dfc:	b1ad      	cbz	r5, 1e2a <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1dfe:	4630      	mov	r0, r6
    1e00:	f7ff fa66 	bl	12d0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1e04:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1e08:	2b00      	cmp	r3, #0
    1e0a:	d1da      	bne.n	1dc2 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1e0c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    1e10:	2a00      	cmp	r2, #0
    1e12:	d0d6      	beq.n	1dc2 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1e14:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1e18:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    1e1c:	2301      	movs	r3, #1
    1e1e:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    1e22:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1e26:	60a3      	str	r3, [r4, #8]
}
    1e28:	e7cb      	b.n	1dc2 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    1e2a:	2100      	movs	r1, #0
    1e2c:	2021      	movs	r0, #33	; 0x21
    1e2e:	f002 fa69 	bl	4304 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1e32:	e7e7      	b.n	1e04 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    1e34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1e38:	2202      	movs	r2, #2
    1e3a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1e3e:	e7d1      	b.n	1de4 <z_nrf_clock_control_lf_on+0x8c>
    1e40:	2000094c 	.word	0x2000094c
    1e44:	2000093c 	.word	0x2000093c
    1e48:	2000096c 	.word	0x2000096c
    1e4c:	200019cb 	.word	0x200019cb
    1e50:	e000e100 	.word	0xe000e100

00001e54 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    1e54:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    1e56:	4807      	ldr	r0, [pc, #28]	; (1e74 <uart_console_init+0x20>)
    1e58:	f005 fcb3 	bl	77c2 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    1e5c:	b138      	cbz	r0, 1e6e <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    1e5e:	4806      	ldr	r0, [pc, #24]	; (1e78 <uart_console_init+0x24>)
    1e60:	f7ff fe1c 	bl	1a9c <__stdout_hook_install>
	__printk_hook_install(console_out);
    1e64:	4804      	ldr	r0, [pc, #16]	; (1e78 <uart_console_init+0x24>)
    1e66:	f7fe fb0d 	bl	484 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    1e6a:	2000      	movs	r0, #0
}
    1e6c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    1e6e:	f06f 0012 	mvn.w	r0, #18
    1e72:	e7fb      	b.n	1e6c <uart_console_init+0x18>
    1e74:	00007b90 	.word	0x00007b90
    1e78:	00001e7d 	.word	0x00001e7d

00001e7c <console_out>:
	if ('\n' == c) {
    1e7c:	280a      	cmp	r0, #10
{
    1e7e:	b538      	push	{r3, r4, r5, lr}
    1e80:	4d07      	ldr	r5, [pc, #28]	; (1ea0 <console_out+0x24>)
    1e82:	4604      	mov	r4, r0
	if ('\n' == c) {
    1e84:	d104      	bne.n	1e90 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1e86:	68ab      	ldr	r3, [r5, #8]
    1e88:	210d      	movs	r1, #13
    1e8a:	685b      	ldr	r3, [r3, #4]
    1e8c:	4628      	mov	r0, r5
    1e8e:	4798      	blx	r3
    1e90:	68ab      	ldr	r3, [r5, #8]
    1e92:	4803      	ldr	r0, [pc, #12]	; (1ea0 <console_out+0x24>)
    1e94:	685b      	ldr	r3, [r3, #4]
    1e96:	b2e1      	uxtb	r1, r4
    1e98:	4798      	blx	r3
}
    1e9a:	4620      	mov	r0, r4
    1e9c:	bd38      	pop	{r3, r4, r5, pc}
    1e9e:	bf00      	nop
    1ea0:	00007b90 	.word	0x00007b90

00001ea4 <random_byte_get>:
    1ea4:	f04f 0320 	mov.w	r3, #32
    1ea8:	f3ef 8211 	mrs	r2, BASEPRI
    1eac:	f383 8812 	msr	BASEPRI_MAX, r3
    1eb0:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    1eb4:	4b09      	ldr	r3, [pc, #36]	; (1edc <random_byte_get+0x38>)
    1eb6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
    1eba:	b161      	cbz	r1, 1ed6 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    1ebc:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
    1ebe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    1ec2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    1ec6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
    1eca:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
    1ecc:	f382 8811 	msr	BASEPRI, r2
    1ed0:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
    1ed4:	4770      	bx	lr
	int retval = -EAGAIN;
    1ed6:	f06f 000a 	mvn.w	r0, #10
    1eda:	e7f7      	b.n	1ecc <random_byte_get+0x28>
    1edc:	4000d000 	.word	0x4000d000

00001ee0 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
    1ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ee2:	4603      	mov	r3, r0
    1ee4:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
    1ee6:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
    1ee8:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
    1eec:	f04f 0520 	mov.w	r5, #32
    1ef0:	f3ef 8211 	mrs	r2, BASEPRI
    1ef4:	f385 8812 	msr	BASEPRI_MAX, r5
    1ef8:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
    1efc:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
    1efe:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
    1f02:	1be4      	subs	r4, r4, r7
    1f04:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
    1f08:	42a0      	cmp	r0, r4
		len = available;
    1f0a:	bf88      	it	hi
    1f0c:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
    1f0e:	183e      	adds	r6, r7, r0
    1f10:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
    1f14:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
    1f16:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
    1f18:	f382 8811 	msr	BASEPRI, r2
    1f1c:	f3bf 8f6f 	isb	sy
    1f20:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
    1f22:	428a      	cmp	r2, r1
    1f24:	d117      	bne.n	1f56 <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
    1f26:	4577      	cmp	r7, lr
    1f28:	d10d      	bne.n	1f46 <rng_pool_get+0x66>
	__asm__ volatile(
    1f2a:	f04f 0120 	mov.w	r1, #32
    1f2e:	f3ef 8211 	mrs	r2, BASEPRI
    1f32:	f381 8812 	msr	BASEPRI_MAX, r1
    1f36:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
    1f3a:	7819      	ldrb	r1, [r3, #0]
    1f3c:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
    1f3e:	f382 8811 	msr	BASEPRI, r2
    1f42:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
    1f46:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
    1f48:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
    1f4a:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    1f4c:	bf22      	ittt	cs
    1f4e:	4b06      	ldrcs	r3, [pc, #24]	; (1f68 <rng_pool_get+0x88>)
    1f50:	2201      	movcs	r2, #1
    1f52:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
    1f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
    1f56:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
    1f58:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
    1f5a:	7976      	ldrb	r6, [r6, #5]
    1f5c:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
    1f60:	ea05 050c 	and.w	r5, r5, ip
    1f64:	e7dd      	b.n	1f22 <rng_pool_get+0x42>
    1f66:	bf00      	nop
    1f68:	4000d000 	.word	0x4000d000

00001f6c <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    1f6c:	43db      	mvns	r3, r3
{
    1f6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    1f72:	f013 0501 	ands.w	r5, r3, #1
{
    1f76:	460e      	mov	r6, r1
    1f78:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
    1f7a:	d004      	beq.n	1f86 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
    1f7c:	4823      	ldr	r0, [pc, #140]	; (200c <entropy_nrf5_get_entropy_isr+0xa0>)
    1f7e:	f7ff ffaf 	bl	1ee0 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
    1f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
    1f86:	b3a2      	cbz	r2, 1ff2 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
    1f88:	f04f 0320 	mov.w	r3, #32
    1f8c:	f3ef 8811 	mrs	r8, BASEPRI
    1f90:	f383 8812 	msr	BASEPRI_MAX, r3
    1f94:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
    1f98:	200d      	movs	r0, #13
    1f9a:	f7ff f9c7 	bl	132c <arch_irq_is_enabled>
    1f9e:	4607      	mov	r7, r0
		irq_disable(IRQN);
    1fa0:	200d      	movs	r0, #13
    1fa2:	f7ff f9af 	bl	1304 <arch_irq_disable>
	__asm__ volatile(
    1fa6:	f388 8811 	msr	BASEPRI, r8
    1faa:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    1fae:	f8df a060 	ldr.w	sl, [pc, #96]	; 2010 <entropy_nrf5_get_entropy_isr+0xa4>
    1fb2:	f8df 8060 	ldr.w	r8, [pc, #96]	; 2014 <entropy_nrf5_get_entropy_isr+0xa8>
    1fb6:	f8ca 5100 	str.w	r5, [sl, #256]	; 0x100
    1fba:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
    1fbe:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    1fc2:	2301      	movs	r3, #1
    1fc4:	f8ca 3000 	str.w	r3, [sl]
    1fc8:	4625      	mov	r5, r4
    1fca:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
    1fce:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
    1fd2:	b183      	cbz	r3, 1ff6 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
    1fd4:	f7ff ff66 	bl	1ea4 <random_byte_get>
			if (byte < 0) {
    1fd8:	1e03      	subs	r3, r0, #0
    1fda:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    1fde:	dbf6      	blt.n	1fce <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
    1fe0:	3d01      	subs	r5, #1
    1fe2:	b2ad      	uxth	r5, r5
    1fe4:	5573      	strb	r3, [r6, r5]
		} while (len);
    1fe6:	2d00      	cmp	r5, #0
    1fe8:	d1f1      	bne.n	1fce <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
    1fea:	b117      	cbz	r7, 1ff2 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
    1fec:	200d      	movs	r0, #13
    1fee:	f7ff f97b 	bl	12e8 <arch_irq_enable>
	return cnt;
    1ff2:	4620      	mov	r0, r4
    1ff4:	e7c5      	b.n	1f82 <entropy_nrf5_get_entropy_isr+0x16>
	__asm__ volatile(
    1ff6:	f04f 0320 	mov.w	r3, #32
    1ffa:	f3ef 8011 	mrs	r0, BASEPRI
    1ffe:	f383 8812 	msr	BASEPRI_MAX, r3
    2002:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
    2006:	f7ff f963 	bl	12d0 <arch_cpu_atomic_idle>
}
    200a:	e7e0      	b.n	1fce <entropy_nrf5_get_entropy_isr+0x62>
    200c:	200009c4 	.word	0x200009c4
    2010:	4000d000 	.word	0x4000d000
    2014:	e000e100 	.word	0xe000e100

00002018 <entropy_nrf5_get_entropy>:
{
    2018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    201c:	4f12      	ldr	r7, [pc, #72]	; (2068 <entropy_nrf5_get_entropy+0x50>)
    201e:	460d      	mov	r5, r1
    2020:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    2022:	f107 0835 	add.w	r8, r7, #53	; 0x35
	while (len) {
    2026:	b914      	cbnz	r4, 202e <entropy_nrf5_get_entropy+0x16>
}
    2028:	4620      	mov	r0, r4
    202a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    202e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2032:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2036:	4638      	mov	r0, r7
    2038:	f001 fe7a 	bl	3d30 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
    203c:	4622      	mov	r2, r4
    203e:	4629      	mov	r1, r5
    2040:	4640      	mov	r0, r8
    2042:	f7ff ff4d 	bl	1ee0 <rng_pool_get>
    2046:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
    2048:	4638      	mov	r0, r7
    204a:	f001 fe51 	bl	3cf0 <z_impl_k_sem_give>
		if (bytes == 0U) {
    204e:	b93e      	cbnz	r6, 2060 <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
    2050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2058:	4804      	ldr	r0, [pc, #16]	; (206c <entropy_nrf5_get_entropy+0x54>)
    205a:	f001 fe69 	bl	3d30 <z_impl_k_sem_take>
	while (len) {
    205e:	e7e6      	b.n	202e <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
    2060:	1ba4      	subs	r4, r4, r6
    2062:	b2a4      	uxth	r4, r4
		buf += bytes;
    2064:	4435      	add	r5, r6
    2066:	e7de      	b.n	2026 <entropy_nrf5_get_entropy+0xe>
    2068:	200009a4 	.word	0x200009a4
    206c:	200009b4 	.word	0x200009b4

00002070 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
    2070:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    2072:	4c18      	ldr	r4, [pc, #96]	; (20d4 <entropy_nrf5_init+0x64>)
    2074:	2201      	movs	r2, #1
    2076:	4611      	mov	r1, r2
    2078:	4620      	mov	r0, r4
    207a:	f005 fc35 	bl	78e8 <z_impl_k_sem_init>
    207e:	2201      	movs	r2, #1
    2080:	2100      	movs	r1, #0
    2082:	f104 0010 	add.w	r0, r4, #16
    2086:	f005 fc2f 	bl	78e8 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
    208a:	f240 4307 	movw	r3, #1031	; 0x407
    208e:	8723      	strh	r3, [r4, #56]	; 0x38
	rngp->first_alloc = 0U;
    2090:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2094:	6223      	str	r3, [r4, #32]
	rngp->threshold	  = threshold;
    2096:	230c      	movs	r3, #12
    2098:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rngp->first_alloc = 0U;
    209c:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
    209e:	4b0e      	ldr	r3, [pc, #56]	; (20d8 <entropy_nrf5_init+0x68>)
    20a0:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
	rngp->first_read  = 0U;
    20a4:	86e5      	strh	r5, [r4, #54]	; 0x36
    20a6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    20aa:	f022 0201 	bic.w	r2, r2, #1
    20ae:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
    20b2:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
    20b4:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
    20b8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    20bc:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
    20c0:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
    20c2:	6019      	str	r1, [r3, #0]
    20c4:	200d      	movs	r0, #13
    20c6:	f7ff f93f 	bl	1348 <z_arm_irq_priority_set>
	irq_enable(IRQN);
    20ca:	200d      	movs	r0, #13
    20cc:	f7ff f90c 	bl	12e8 <arch_irq_enable>

	return 0;
}
    20d0:	4628      	mov	r0, r5
    20d2:	bd38      	pop	{r3, r4, r5, pc}
    20d4:	200009a4 	.word	0x200009a4
    20d8:	4000d000 	.word	0x4000d000

000020dc <isr>:
{
    20dc:	b510      	push	{r4, lr}
	byte = random_byte_get();
    20de:	f7ff fee1 	bl	1ea4 <random_byte_get>
	if (byte < 0) {
    20e2:	2800      	cmp	r0, #0
    20e4:	db20      	blt.n	2128 <isr+0x4c>
	uint8_t last  = rngp->last;
    20e6:	4b17      	ldr	r3, [pc, #92]	; (2144 <isr+0x68>)
    20e8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
	if (((last - first) & mask) == mask) {
    20ec:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
	uint8_t mask  = rngp->mask;
    20f0:	f893 1023 	ldrb.w	r1, [r3, #35]	; 0x23
	if (((last - first) & mask) == mask) {
    20f4:	1b14      	subs	r4, r2, r4
    20f6:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
    20fa:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
    20fc:	d10d      	bne.n	211a <isr+0x3e>
	uint8_t last  = rngp->last;
    20fe:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
	if (((last - first) & mask) == mask) {
    2102:	f893 4036 	ldrb.w	r4, [r3, #54]	; 0x36
	uint8_t mask  = rngp->mask;
    2106:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
	if (((last - first) & mask) == mask) {
    210a:	1b14      	subs	r4, r2, r4
    210c:	ea31 0404 	bics.w	r4, r1, r4
    2110:	d10b      	bne.n	212a <isr+0x4e>
    2112:	4b0d      	ldr	r3, [pc, #52]	; (2148 <isr+0x6c>)
    2114:	2201      	movs	r2, #1
    2116:	605a      	str	r2, [r3, #4]
}
    2118:	e00e      	b.n	2138 <isr+0x5c>
	rngp->buffer[last] = byte;
    211a:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
    211c:	3201      	adds	r2, #1
    211e:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
    2120:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
	rngp->last = (last + 1) & mask;
    2124:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
}
    2128:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
    212a:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
    212c:	3201      	adds	r2, #1
    212e:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
    2130:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
	rngp->last = (last + 1) & mask;
    2134:	f883 1037 	strb.w	r1, [r3, #55]	; 0x37
	z_impl_k_sem_give(sem);
    2138:	4804      	ldr	r0, [pc, #16]	; (214c <isr+0x70>)
}
    213a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    213e:	f001 bdd7 	b.w	3cf0 <z_impl_k_sem_give>
    2142:	bf00      	nop
    2144:	200009a4 	.word	0x200009a4
    2148:	4000d000 	.word	0x4000d000
    214c:	200009b4 	.word	0x200009b4

00002150 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    2150:	b530      	push	{r4, r5, lr}
	return port->config;
    2152:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2154:	7b05      	ldrb	r5, [r0, #12]
    2156:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    215a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    215e:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2160:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    2164:	d105      	bne.n	2172 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    2166:	4620      	mov	r0, r4
    2168:	f001 f9cc 	bl	3504 <nrfx_gpiote_trigger_disable>

		return 0;
    216c:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    216e:	b005      	add	sp, #20
    2170:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    2172:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    2174:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2178:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    217c:	d114      	bne.n	21a8 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    217e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2182:	bf0c      	ite	eq
    2184:	2304      	moveq	r3, #4
    2186:	2305      	movne	r3, #5
    2188:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    218c:	2300      	movs	r3, #0
    218e:	4619      	mov	r1, r3
    2190:	aa02      	add	r2, sp, #8
    2192:	4620      	mov	r0, r4
    2194:	f000 fff4 	bl	3180 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2198:	4b1f      	ldr	r3, [pc, #124]	; (2218 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    219a:	4298      	cmp	r0, r3
    219c:	d139      	bne.n	2212 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    219e:	2101      	movs	r1, #1
    21a0:	4620      	mov	r0, r4
    21a2:	f001 f967 	bl	3474 <nrfx_gpiote_trigger_enable>
	return 0;
    21a6:	e7e1      	b.n	216c <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    21a8:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    21ac:	d026      	beq.n	21fc <gpio_nrfx_pin_interrupt_configure+0xac>
    21ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    21b2:	bf14      	ite	ne
    21b4:	2301      	movne	r3, #1
    21b6:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    21b8:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    21bc:	6883      	ldr	r3, [r0, #8]
    21be:	40cb      	lsrs	r3, r1
    21c0:	07d9      	lsls	r1, r3, #31
    21c2:	d4e3      	bmi.n	218c <gpio_nrfx_pin_interrupt_configure+0x3c>
    21c4:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    21c8:	d1e0      	bne.n	218c <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    21ca:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
    21cc:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    21ce:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
    21d2:	4a12      	ldr	r2, [pc, #72]	; (221c <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    21d4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    21d8:	bf18      	it	ne
    21da:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    21de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    21e2:	07db      	lsls	r3, r3, #31
    21e4:	d4d2      	bmi.n	218c <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    21e6:	f10d 0507 	add.w	r5, sp, #7
    21ea:	4629      	mov	r1, r5
    21ec:	4620      	mov	r0, r4
    21ee:	f001 f8ed 	bl	33cc <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    21f2:	4b0b      	ldr	r3, [pc, #44]	; (2220 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    21f4:	4298      	cmp	r0, r3
    21f6:	d003      	beq.n	2200 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
    21f8:	9503      	str	r5, [sp, #12]
    21fa:	e7c7      	b.n	218c <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    21fc:	2303      	movs	r3, #3
    21fe:	e7db      	b.n	21b8 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    2200:	4628      	mov	r0, r5
    2202:	f001 f931 	bl	3468 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2206:	4b04      	ldr	r3, [pc, #16]	; (2218 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    2208:	4298      	cmp	r0, r3
    220a:	d0f5      	beq.n	21f8 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
    220c:	f06f 000b 	mvn.w	r0, #11
    2210:	e7ad      	b.n	216e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    2212:	f06f 0015 	mvn.w	r0, #21
    2216:	e7aa      	b.n	216e <gpio_nrfx_pin_interrupt_configure+0x1e>
    2218:	0bad0000 	.word	0x0bad0000
    221c:	50000300 	.word	0x50000300
    2220:	0bad0004 	.word	0x0bad0004

00002224 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2224:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2226:	f001 f90f 	bl	3448 <nrfx_gpiote_is_init>
    222a:	4604      	mov	r4, r0
    222c:	b968      	cbnz	r0, 224a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    222e:	f001 f8e3 	bl	33f8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2232:	4b08      	ldr	r3, [pc, #32]	; (2254 <gpio_nrfx_init+0x30>)
    2234:	4298      	cmp	r0, r3
    2236:	d10a      	bne.n	224e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2238:	4807      	ldr	r0, [pc, #28]	; (2258 <gpio_nrfx_init+0x34>)
    223a:	4621      	mov	r1, r4
    223c:	f001 f8c0 	bl	33c0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2240:	4622      	mov	r2, r4
    2242:	2105      	movs	r1, #5
    2244:	2006      	movs	r0, #6
    2246:	f7ff f87f 	bl	1348 <z_arm_irq_priority_set>
		return 0;
    224a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    224c:	bd10      	pop	{r4, pc}
		return -EIO;
    224e:	f06f 0004 	mvn.w	r0, #4
    2252:	e7fb      	b.n	224c <gpio_nrfx_init+0x28>
    2254:	0bad0000 	.word	0x0bad0000
    2258:	0000225d 	.word	0x0000225d

0000225c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    225c:	0942      	lsrs	r2, r0, #5
{
    225e:	b570      	push	{r4, r5, r6, lr}
    2260:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2262:	d002      	beq.n	226a <nrfx_gpio_handler+0xe>
    2264:	2a01      	cmp	r2, #1
    2266:	d017      	beq.n	2298 <nrfx_gpio_handler+0x3c>
}
    2268:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    226a:	4e0d      	ldr	r6, [pc, #52]	; (22a0 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    226c:	6932      	ldr	r2, [r6, #16]
    226e:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2270:	2900      	cmp	r1, #0
    2272:	d0f9      	beq.n	2268 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    2274:	f003 031f 	and.w	r3, r3, #31
    2278:	2501      	movs	r5, #1
    227a:	680c      	ldr	r4, [r1, #0]
    227c:	409d      	lsls	r5, r3
    227e:	2900      	cmp	r1, #0
    2280:	d0f2      	beq.n	2268 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    2282:	688a      	ldr	r2, [r1, #8]
    2284:	402a      	ands	r2, r5
    2286:	d002      	beq.n	228e <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2288:	684b      	ldr	r3, [r1, #4]
    228a:	4630      	mov	r0, r6
    228c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    228e:	b12c      	cbz	r4, 229c <nrfx_gpio_handler+0x40>
    2290:	6823      	ldr	r3, [r4, #0]
    2292:	4621      	mov	r1, r4
    2294:	461c      	mov	r4, r3
    2296:	e7f2      	b.n	227e <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2298:	4e02      	ldr	r6, [pc, #8]	; (22a4 <nrfx_gpio_handler+0x48>)
    229a:	e7e7      	b.n	226c <nrfx_gpio_handler+0x10>
    229c:	4623      	mov	r3, r4
    229e:	e7f8      	b.n	2292 <nrfx_gpio_handler+0x36>
    22a0:	00007b48 	.word	0x00007b48
    22a4:	00007b30 	.word	0x00007b30

000022a8 <gpio_nrfx_pin_configure>:
{
    22a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    22ac:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    22ae:	7b3b      	ldrb	r3, [r7, #12]
    22b0:	f001 051f 	and.w	r5, r1, #31
    22b4:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    22b8:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    22ba:	4628      	mov	r0, r5
    22bc:	f10d 0103 	add.w	r1, sp, #3
{
    22c0:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    22c2:	f001 f883 	bl	33cc <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    22c6:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    22ca:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    22cc:	d10b      	bne.n	22e6 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    22ce:	4628      	mov	r0, r5
    22d0:	f001 f940 	bl	3554 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    22d4:	4b3d      	ldr	r3, [pc, #244]	; (23cc <gpio_nrfx_pin_configure+0x124>)
    22d6:	4598      	cmp	r8, r3
    22d8:	d103      	bne.n	22e2 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    22da:	f89d 0003 	ldrb.w	r0, [sp, #3]
    22de:	f001 f8bd 	bl	345c <nrfx_gpiote_channel_free>
		return 0;
    22e2:	2000      	movs	r0, #0
    22e4:	e00c      	b.n	2300 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    22e6:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    22e8:	4619      	mov	r1, r3
    22ea:	aa02      	add	r2, sp, #8
    22ec:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    22ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    22f2:	f000 ff45 	bl	3180 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    22f6:	4b35      	ldr	r3, [pc, #212]	; (23cc <gpio_nrfx_pin_configure+0x124>)
    22f8:	4298      	cmp	r0, r3
    22fa:	d004      	beq.n	2306 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    22fc:	f06f 0015 	mvn.w	r0, #21
}
    2300:	b004      	add	sp, #16
    2302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    2306:	4580      	cmp	r8, r0
    2308:	d103      	bne.n	2312 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    230a:	f89d 0003 	ldrb.w	r0, [sp, #3]
    230e:	f001 f8a5 	bl	345c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    2312:	03a3      	lsls	r3, r4, #14
    2314:	d54b      	bpl.n	23ae <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2316:	f240 3306 	movw	r3, #774	; 0x306
    231a:	4023      	ands	r3, r4
    231c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    2320:	d019      	beq.n	2356 <gpio_nrfx_pin_configure+0xae>
    2322:	d80c      	bhi.n	233e <gpio_nrfx_pin_configure+0x96>
    2324:	2b06      	cmp	r3, #6
    2326:	d017      	beq.n	2358 <gpio_nrfx_pin_configure+0xb0>
    2328:	d804      	bhi.n	2334 <gpio_nrfx_pin_configure+0x8c>
    232a:	b1ab      	cbz	r3, 2358 <gpio_nrfx_pin_configure+0xb0>
    232c:	2b02      	cmp	r3, #2
    232e:	d1e5      	bne.n	22fc <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    2330:	2304      	movs	r3, #4
    2332:	e011      	b.n	2358 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    2338:	d1e0      	bne.n	22fc <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    233a:	2301      	movs	r3, #1
    233c:	e00c      	b.n	2358 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    233e:	f240 2202 	movw	r2, #514	; 0x202
    2342:	4293      	cmp	r3, r2
    2344:	d027      	beq.n	2396 <gpio_nrfx_pin_configure+0xee>
    2346:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    234a:	d026      	beq.n	239a <gpio_nrfx_pin_configure+0xf2>
    234c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2350:	d1d4      	bne.n	22fc <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    2352:	2302      	movs	r3, #2
    2354:	e000      	b.n	2358 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    2356:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    2358:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    235c:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    2360:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    2364:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2366:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    236a:	bf54      	ite	pl
    236c:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2370:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2372:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    2374:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2378:	d511      	bpl.n	239e <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    237a:	687a      	ldr	r2, [r7, #4]
    237c:	2301      	movs	r3, #1
    237e:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    2380:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2384:	2200      	movs	r2, #0
    2386:	a901      	add	r1, sp, #4
    2388:	4628      	mov	r0, r5
    238a:	f000 ffa7 	bl	32dc <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    238e:	4b0f      	ldr	r3, [pc, #60]	; (23cc <gpio_nrfx_pin_configure+0x124>)
    2390:	4298      	cmp	r0, r3
    2392:	d0a6      	beq.n	22e2 <gpio_nrfx_pin_configure+0x3a>
    2394:	e7b2      	b.n	22fc <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    2396:	2305      	movs	r3, #5
    2398:	e7de      	b.n	2358 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    239a:	2303      	movs	r3, #3
    239c:	e7dc      	b.n	2358 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    239e:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    23a0:	bf41      	itttt	mi
    23a2:	2301      	movmi	r3, #1
    23a4:	687a      	ldrmi	r2, [r7, #4]
    23a6:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    23a8:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    23ac:	e7ea      	b.n	2384 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    23ae:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    23b0:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    23b4:	bf54      	ite	pl
    23b6:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    23ba:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    23bc:	461a      	mov	r2, r3
    23be:	a901      	add	r1, sp, #4
    23c0:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    23c2:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    23c6:	f000 fedb 	bl	3180 <nrfx_gpiote_input_configure>
    23ca:	e7e0      	b.n	238e <gpio_nrfx_pin_configure+0xe6>
    23cc:	0bad0000 	.word	0x0bad0000

000023d0 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    23d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        case 1: return NRF_P1;
    23d4:	4e5a      	ldr	r6, [pc, #360]	; (2540 <pinctrl_configure_pins+0x170>)
    23d6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    23da:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    23dc:	4281      	cmp	r1, r0
    23de:	d102      	bne.n	23e6 <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    23e0:	2000      	movs	r0, #0
}
    23e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    23e6:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    23e8:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    23ec:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
    23f0:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    23f2:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
    23f6:	bf08      	it	eq
    23f8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
    23fc:	2c22      	cmp	r4, #34	; 0x22
    23fe:	f200 809b 	bhi.w	2538 <pinctrl_configure_pins+0x168>
    2402:	e8df f004 	tbb	[pc, r4]
    2406:	2412      	.short	0x2412
    2408:	402c4429 	.word	0x402c4429
    240c:	99999944 	.word	0x99999944
    2410:	99704799 	.word	0x99704799
    2414:	99999999 	.word	0x99999999
    2418:	99999999 	.word	0x99999999
    241c:	817e7b73 	.word	0x817e7b73
    2420:	84999999 	.word	0x84999999
    2424:	93908d8a 	.word	0x93908d8a
    2428:	96          	.byte	0x96
    2429:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
    242a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
    242e:	ea4f 1c53 	mov.w	ip, r3, lsr #5
        case 1: return NRF_P1;
    2432:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
    2436:	f003 041f 	and.w	r4, r3, #31
        case 1: return NRF_P1;
    243a:	bf14      	ite	ne
    243c:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
    2440:	46b4      	moveq	ip, r6
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2442:	fa07 f404 	lsl.w	r4, r7, r4
    p_reg->OUTSET = set_mask;
    2446:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    244a:	2401      	movs	r4, #1
    244c:	e002      	b.n	2454 <pinctrl_configure_pins+0x84>
			NRF_PSEL_UART(reg, RXD) = pin;
    244e:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2452:	2400      	movs	r4, #0
    2454:	46a6      	mov	lr, r4
    2456:	e024      	b.n	24a2 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
    2458:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    245c:	e7e7      	b.n	242e <pinctrl_configure_pins+0x5e>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    245e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2462:	2400      	movs	r4, #0
    return pin_number >> 5;
    2464:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
    2468:	f1be 0f01 	cmp.w	lr, #1
    246c:	bf14      	ite	ne
    246e:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
    2472:	46b6      	moveq	lr, r6
    *p_pin = pin_number & 0x1F;
    2474:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2478:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    247c:	f8ce c50c 	str.w	ip, [lr, #1292]	; 0x50c
    2480:	f04f 0e01 	mov.w	lr, #1
    2484:	e00d      	b.n	24a2 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    2486:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    248a:	2401      	movs	r4, #1
    248c:	e7ea      	b.n	2464 <pinctrl_configure_pins+0x94>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    248e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    2492:	e7de      	b.n	2452 <pinctrl_configure_pins+0x82>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    2494:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    2498:	2d00      	cmp	r5, #0
    249a:	d1da      	bne.n	2452 <pinctrl_configure_pins+0x82>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    249c:	2400      	movs	r4, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    249e:	46a6      	mov	lr, r4
				drive = NRF_DRIVE_S0D1;
    24a0:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    24a2:	f850 cb04 	ldr.w	ip, [r0], #4
    24a6:	f40c 5800 	and.w	r8, ip, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    24aa:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    24ae:	ea4f 2505 	mov.w	r5, r5, lsl #8
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    24b2:	f3cc 18c1 	ubfx	r8, ip, #7, #2
    *p_pin = pin_number & 0x1F;
    24b6:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
    24ba:	ea4f 1353 	mov.w	r3, r3, lsr #5
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    24be:	bf1c      	itt	ne
    24c0:	2401      	movne	r4, #1
    24c2:	f04f 0e00 	movne.w	lr, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    24c6:	ea45 0588 	orr.w	r5, r5, r8, lsl #2
        case 0: return NRF_P0;
    24ca:	2b01      	cmp	r3, #1
    24cc:	bf0c      	ite	eq
    24ce:	4633      	moveq	r3, r6
    24d0:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    24d4:	ea45 050e 	orr.w	r5, r5, lr
    reg->PIN_CNF[pin_number] = cnf;
    24d8:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    24dc:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    24e0:	f843 502c 	str.w	r5, [r3, ip, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    24e4:	e77a      	b.n	23dc <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    24e6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    24ea:	e7d5      	b.n	2498 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    24ec:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    24f0:	6804      	ldr	r4, [r0, #0]
    24f2:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
    24f6:	2c00      	cmp	r4, #0
    24f8:	d0c7      	beq.n	248a <pinctrl_configure_pins+0xba>
    24fa:	e798      	b.n	242e <pinctrl_configure_pins+0x5e>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    24fc:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    2500:	e7f6      	b.n	24f0 <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    2502:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    2506:	e7f3      	b.n	24f0 <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    2508:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    250c:	e7f0      	b.n	24f0 <pinctrl_configure_pins+0x120>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    250e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2512:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2514:	f04f 0e00 	mov.w	lr, #0
    2518:	e7c3      	b.n	24a2 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    251a:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    251e:	e786      	b.n	242e <pinctrl_configure_pins+0x5e>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    2520:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
    2524:	e7f5      	b.n	2512 <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    2526:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
    252a:	e7f2      	b.n	2512 <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    252c:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
    2530:	e7ef      	b.n	2512 <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    2532:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
    2536:	e7ec      	b.n	2512 <pinctrl_configure_pins+0x142>
		switch (NRF_GET_FUN(pins[i])) {
    2538:	f06f 0085 	mvn.w	r0, #133	; 0x85
    253c:	e751      	b.n	23e2 <pinctrl_configure_pins+0x12>
    253e:	bf00      	nop
    2540:	50000300 	.word	0x50000300

00002544 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2544:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2546:	794b      	ldrb	r3, [r1, #5]
    2548:	2b01      	cmp	r3, #1
    254a:	d026      	beq.n	259a <uarte_nrfx_configure+0x56>
    254c:	2b03      	cmp	r3, #3
    254e:	d121      	bne.n	2594 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2550:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2552:	798b      	ldrb	r3, [r1, #6]
    2554:	2b03      	cmp	r3, #3
    2556:	d11d      	bne.n	2594 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2558:	79ce      	ldrb	r6, [r1, #7]
    255a:	b10e      	cbz	r6, 2560 <uarte_nrfx_configure+0x1c>
    255c:	2e01      	cmp	r6, #1
    255e:	d119      	bne.n	2594 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2560:	790a      	ldrb	r2, [r1, #4]
    2562:	b112      	cbz	r2, 256a <uarte_nrfx_configure+0x26>
    2564:	2a02      	cmp	r2, #2
    2566:	d115      	bne.n	2594 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2568:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    256a:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    256c:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    256e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2572:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
    2574:	d067      	beq.n	2646 <uarte_nrfx_configure+0x102>
    2576:	d82d      	bhi.n	25d4 <uarte_nrfx_configure+0x90>
    2578:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    257c:	d066      	beq.n	264c <uarte_nrfx_configure+0x108>
    257e:	d816      	bhi.n	25ae <uarte_nrfx_configure+0x6a>
    2580:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2584:	d064      	beq.n	2650 <uarte_nrfx_configure+0x10c>
    2586:	d80a      	bhi.n	259e <uarte_nrfx_configure+0x5a>
    2588:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    258c:	d063      	beq.n	2656 <uarte_nrfx_configure+0x112>
    258e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2592:	d063      	beq.n	265c <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
    2594:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2598:	e054      	b.n	2644 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    259a:	2500      	movs	r5, #0
    259c:	e7d9      	b.n	2552 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    259e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    25a2:	d05e      	beq.n	2662 <uarte_nrfx_configure+0x11e>
    25a4:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    25a8:	d1f4      	bne.n	2594 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    25aa:	4b38      	ldr	r3, [pc, #224]	; (268c <uarte_nrfx_configure+0x148>)
    25ac:	e03c      	b.n	2628 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    25ae:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    25b2:	d059      	beq.n	2668 <uarte_nrfx_configure+0x124>
    25b4:	d807      	bhi.n	25c6 <uarte_nrfx_configure+0x82>
    25b6:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    25ba:	d057      	beq.n	266c <uarte_nrfx_configure+0x128>
    25bc:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    25c0:	d1e8      	bne.n	2594 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    25c2:	4b33      	ldr	r3, [pc, #204]	; (2690 <uarte_nrfx_configure+0x14c>)
    25c4:	e030      	b.n	2628 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    25c6:	f647 2412 	movw	r4, #31250	; 0x7a12
    25ca:	42a3      	cmp	r3, r4
    25cc:	d1e2      	bne.n	2594 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    25ce:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    25d2:	e029      	b.n	2628 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    25d4:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    25d8:	d04a      	beq.n	2670 <uarte_nrfx_configure+0x12c>
    25da:	d813      	bhi.n	2604 <uarte_nrfx_configure+0xc0>
    25dc:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    25e0:	d049      	beq.n	2676 <uarte_nrfx_configure+0x132>
    25e2:	d809      	bhi.n	25f8 <uarte_nrfx_configure+0xb4>
    25e4:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    25e8:	42a3      	cmp	r3, r4
    25ea:	d046      	beq.n	267a <uarte_nrfx_configure+0x136>
    25ec:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    25f0:	d1d0      	bne.n	2594 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    25f2:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    25f6:	e017      	b.n	2628 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    25f8:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    25fc:	d1ca      	bne.n	2594 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    25fe:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2602:	e011      	b.n	2628 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2604:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2608:	d03a      	beq.n	2680 <uarte_nrfx_configure+0x13c>
    260a:	d808      	bhi.n	261e <uarte_nrfx_configure+0xda>
    260c:	4c21      	ldr	r4, [pc, #132]	; (2694 <uarte_nrfx_configure+0x150>)
    260e:	42a3      	cmp	r3, r4
    2610:	d039      	beq.n	2686 <uarte_nrfx_configure+0x142>
    2612:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2616:	d1bd      	bne.n	2594 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2618:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    261c:	e004      	b.n	2628 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    261e:	4c1e      	ldr	r4, [pc, #120]	; (2698 <uarte_nrfx_configure+0x154>)
    2620:	42a3      	cmp	r3, r4
    2622:	d1b7      	bne.n	2594 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2624:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    2628:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    262a:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
    262e:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
    2630:	4335      	orrs	r5, r6
    2632:	681b      	ldr	r3, [r3, #0]
    2634:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2636:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    263a:	c903      	ldmia	r1, {r0, r1}
    263c:	1d23      	adds	r3, r4, #4
    263e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2642:	2000      	movs	r0, #0
}
    2644:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2646:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    264a:	e7ed      	b.n	2628 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    264c:	4b13      	ldr	r3, [pc, #76]	; (269c <uarte_nrfx_configure+0x158>)
    264e:	e7eb      	b.n	2628 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2650:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2654:	e7e8      	b.n	2628 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    2656:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    265a:	e7e5      	b.n	2628 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    265c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2660:	e7e2      	b.n	2628 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2662:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2666:	e7df      	b.n	2628 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2668:	4b0d      	ldr	r3, [pc, #52]	; (26a0 <uarte_nrfx_configure+0x15c>)
    266a:	e7dd      	b.n	2628 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    266c:	4b0d      	ldr	r3, [pc, #52]	; (26a4 <uarte_nrfx_configure+0x160>)
    266e:	e7db      	b.n	2628 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2670:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2674:	e7d8      	b.n	2628 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2676:	4b0c      	ldr	r3, [pc, #48]	; (26a8 <uarte_nrfx_configure+0x164>)
    2678:	e7d6      	b.n	2628 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    267a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    267e:	e7d3      	b.n	2628 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2680:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2684:	e7d0      	b.n	2628 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2686:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    268a:	e7cd      	b.n	2628 <uarte_nrfx_configure+0xe4>
    268c:	0013b000 	.word	0x0013b000
    2690:	004ea000 	.word	0x004ea000
    2694:	0003d090 	.word	0x0003d090
    2698:	000f4240 	.word	0x000f4240
    269c:	00275000 	.word	0x00275000
    26a0:	0075c000 	.word	0x0075c000
    26a4:	003af000 	.word	0x003af000
    26a8:	013a9000 	.word	0x013a9000

000026ac <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    26ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    26b0:	4680      	mov	r8, r0
    26b2:	2200      	movs	r2, #0
    26b4:	2101      	movs	r1, #1
    26b6:	2002      	movs	r0, #2
    26b8:	f7fe fe46 	bl	1348 <z_arm_irq_priority_set>
    26bc:	2002      	movs	r0, #2
    26be:	f7fe fe13 	bl	12e8 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
    26c2:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    26c6:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    26ca:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    26cc:	2100      	movs	r1, #0
    26ce:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    26d2:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    26d6:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    26da:	aa01      	add	r2, sp, #4
    26dc:	4648      	mov	r0, r9
    26de:	f004 ff23 	bl	7528 <pinctrl_lookup_state>
	if (ret < 0) {
    26e2:	1e05      	subs	r5, r0, #0
    26e4:	db54      	blt.n	2790 <uarte_0_init+0xe4>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    26e6:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    26e8:	f8d9 2000 	ldr.w	r2, [r9]
    26ec:	7919      	ldrb	r1, [r3, #4]
    26ee:	6818      	ldr	r0, [r3, #0]
    26f0:	f7ff fe6e 	bl	23d0 <pinctrl_configure_pins>
	if (err < 0) {
    26f4:	1e05      	subs	r5, r0, #0
    26f6:	db4b      	blt.n	2790 <uarte_0_init+0xe4>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    26f8:	1d31      	adds	r1, r6, #4
    26fa:	4640      	mov	r0, r8
    26fc:	f7ff ff22 	bl	2544 <uarte_nrfx_configure>
	if (err) {
    2700:	4605      	mov	r5, r0
    2702:	2800      	cmp	r0, #0
    2704:	d144      	bne.n	2790 <uarte_0_init+0xe4>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    2706:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    2708:	0799      	lsls	r1, r3, #30
    270a:	d51a      	bpl.n	2742 <uarte_0_init+0x96>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    270c:	f106 0018 	add.w	r0, r6, #24
    2710:	f001 f822 	bl	3758 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2714:	4b22      	ldr	r3, [pc, #136]	; (27a0 <uarte_0_init+0xf4>)
    2716:	4298      	cmp	r0, r3
    2718:	d13e      	bne.n	2798 <uarte_0_init+0xec>
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    271a:	7e33      	ldrb	r3, [r6, #24]
    271c:	00db      	lsls	r3, r3, #3
    271e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2722:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    2726:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    272a:	f504 7190 	add.w	r1, r4, #288	; 0x120
    272e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    2732:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2736:	7e32      	ldrb	r2, [r6, #24]
    2738:	2301      	movs	r3, #1
    273a:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
    273c:	4a19      	ldr	r2, [pc, #100]	; (27a4 <uarte_0_init+0xf8>)
    273e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2742:	2308      	movs	r3, #8
    2744:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    2748:	7a3b      	ldrb	r3, [r7, #8]
    274a:	b953      	cbnz	r3, 2762 <uarte_0_init+0xb6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    274c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2750:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2754:	6973      	ldr	r3, [r6, #20]
    2756:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    275a:	2301      	movs	r3, #1
    275c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2760:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    2762:	687b      	ldr	r3, [r7, #4]
    2764:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    2766:	bf5c      	itt	pl
    2768:	f44f 7380 	movpl.w	r3, #256	; 0x100
    276c:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2770:	687b      	ldr	r3, [r7, #4]
    2772:	06db      	lsls	r3, r3, #27
    2774:	bf44      	itt	mi
    2776:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    277a:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    277e:	6933      	ldr	r3, [r6, #16]
    2780:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2784:	2300      	movs	r3, #0
    2786:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    278a:	2301      	movs	r3, #1
    278c:	60a3      	str	r3, [r4, #8]
    278e:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    2790:	4628      	mov	r0, r5
    2792:	b003      	add	sp, #12
    2794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    2798:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    279c:	e7f8      	b.n	2790 <uarte_0_init+0xe4>
    279e:	bf00      	nop
    27a0:	0bad0000 	.word	0x0bad0000
    27a4:	4001f000 	.word	0x4001f000

000027a8 <uarte_nrfx_poll_out>:
{
    27a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27aa:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    27ac:	6907      	ldr	r7, [r0, #16]
{
    27ae:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    27b0:	f005 f87e 	bl	78b0 <k_is_in_isr>
    27b4:	b9b0      	cbnz	r0, 27e4 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    27b6:	4b2e      	ldr	r3, [pc, #184]	; (2870 <uarte_nrfx_poll_out+0xc8>)
    27b8:	781b      	ldrb	r3, [r3, #0]
    27ba:	b19b      	cbz	r3, 27e4 <uarte_nrfx_poll_out+0x3c>
{
    27bc:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    27be:	6860      	ldr	r0, [r4, #4]
    27c0:	f004 fee8 	bl	7594 <is_tx_ready.isra.0>
    27c4:	bb00      	cbnz	r0, 2808 <uarte_nrfx_poll_out+0x60>
    27c6:	2001      	movs	r0, #1
    27c8:	f004 ff4e 	bl	7668 <nrfx_busy_wait>
    27cc:	3e01      	subs	r6, #1
    27ce:	d1f6      	bne.n	27be <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
    27d0:	2100      	movs	r1, #0
    27d2:	2021      	movs	r0, #33	; 0x21
    27d4:	f001 fd96 	bl	4304 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    27d8:	e7f0      	b.n	27bc <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    27da:	f386 8811 	msr	BASEPRI, r6
    27de:	f3bf 8f6f 	isb	sy
}
    27e2:	e7f5      	b.n	27d0 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    27e4:	f04f 0320 	mov.w	r3, #32
    27e8:	f3ef 8611 	mrs	r6, BASEPRI
    27ec:	f383 8812 	msr	BASEPRI_MAX, r3
    27f0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    27f4:	6860      	ldr	r0, [r4, #4]
    27f6:	4631      	mov	r1, r6
    27f8:	f004 fecc 	bl	7594 <is_tx_ready.isra.0>
    27fc:	b990      	cbnz	r0, 2824 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    27fe:	f386 8811 	msr	BASEPRI, r6
    2802:	f3bf 8f6f 	isb	sy
}
    2806:	e7ed      	b.n	27e4 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    2808:	f04f 0320 	mov.w	r3, #32
    280c:	f3ef 8611 	mrs	r6, BASEPRI
    2810:	f383 8812 	msr	BASEPRI_MAX, r3
    2814:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2818:	6860      	ldr	r0, [r4, #4]
    281a:	4631      	mov	r1, r6
    281c:	f004 feba 	bl	7594 <is_tx_ready.isra.0>
    2820:	2800      	cmp	r0, #0
    2822:	d0da      	beq.n	27da <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    2824:	693b      	ldr	r3, [r7, #16]
    2826:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    2828:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    282a:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    282c:	6813      	ldr	r3, [r2, #0]
    282e:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2832:	2001      	movs	r0, #1
    2834:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2838:	2000      	movs	r0, #0
    283a:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    283e:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    2842:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2846:	6852      	ldr	r2, [r2, #4]
    2848:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    284c:	06d2      	lsls	r2, r2, #27
    284e:	d508      	bpl.n	2862 <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
    2850:	6862      	ldr	r2, [r4, #4]
    2852:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2854:	2008      	movs	r0, #8
    2856:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    285a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    285e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2862:	2201      	movs	r2, #1
    2864:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    2866:	f381 8811 	msr	BASEPRI, r1
    286a:	f3bf 8f6f 	isb	sy
}
    286e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2870:	200019cb 	.word	0x200019cb

00002874 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    2874:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2876:	2301      	movs	r3, #1
    2878:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    287a:	4a0e      	ldr	r2, [pc, #56]	; (28b4 <compare_int_lock+0x40>)
    287c:	f3bf 8f5b 	dmb	ish
    2880:	43dc      	mvns	r4, r3
    2882:	e852 1f00 	ldrex	r1, [r2]
    2886:	ea01 0504 	and.w	r5, r1, r4
    288a:	e842 5600 	strex	r6, r5, [r2]
    288e:	2e00      	cmp	r6, #0
    2890:	d1f7      	bne.n	2882 <compare_int_lock+0xe>
    2892:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2896:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    289a:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    289c:	4806      	ldr	r0, [pc, #24]	; (28b8 <compare_int_lock+0x44>)
    289e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    28a2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    28a6:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    28aa:	420b      	tst	r3, r1
}
    28ac:	bf14      	ite	ne
    28ae:	2001      	movne	r0, #1
    28b0:	2000      	moveq	r0, #0
    28b2:	bd70      	pop	{r4, r5, r6, pc}
    28b4:	20000a04 	.word	0x20000a04
    28b8:	40011000 	.word	0x40011000

000028bc <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    28bc:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    28be:	490e      	ldr	r1, [pc, #56]	; (28f8 <sys_clock_timeout_handler+0x3c>)
    28c0:	e9d1 3400 	ldrd	r3, r4, [r1]
    28c4:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    28c6:	18c3      	adds	r3, r0, r3
    28c8:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    28cc:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    28d0:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    28d4:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    28d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    28dc:	d209      	bcs.n	28f2 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    28de:	4b07      	ldr	r3, [pc, #28]	; (28fc <sys_clock_timeout_handler+0x40>)
    28e0:	681b      	ldr	r3, [r3, #0]
    28e2:	0a1a      	lsrs	r2, r3, #8
    28e4:	061b      	lsls	r3, r3, #24
    28e6:	199c      	adds	r4, r3, r6
    28e8:	4b05      	ldr	r3, [pc, #20]	; (2900 <sys_clock_timeout_handler+0x44>)
    28ea:	f142 0500 	adc.w	r5, r2, #0
    28ee:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    28f2:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    28f4:	f001 be5c 	b.w	45b0 <sys_clock_announce>
    28f8:	200002c0 	.word	0x200002c0
    28fc:	20000a08 	.word	0x20000a08
    2900:	200002c8 	.word	0x200002c8

00002904 <compare_int_unlock>:
	if (key) {
    2904:	b311      	cbz	r1, 294c <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2906:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    290a:	2301      	movs	r3, #1
    290c:	4a10      	ldr	r2, [pc, #64]	; (2950 <compare_int_unlock+0x4c>)
    290e:	4083      	lsls	r3, r0
    2910:	e852 cf00 	ldrex	ip, [r2]
    2914:	ea4c 0c03 	orr.w	ip, ip, r3
    2918:	e842 c100 	strex	r1, ip, [r2]
    291c:	2900      	cmp	r1, #0
    291e:	d1f7      	bne.n	2910 <compare_int_unlock+0xc>
    2920:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    2924:	4a0b      	ldr	r2, [pc, #44]	; (2954 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2926:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    292a:	4083      	lsls	r3, r0
    292c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2930:	4b09      	ldr	r3, [pc, #36]	; (2958 <compare_int_unlock+0x54>)
    2932:	f3bf 8f5b 	dmb	ish
    2936:	681b      	ldr	r3, [r3, #0]
    2938:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    293c:	40c3      	lsrs	r3, r0
    293e:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2940:	bf42      	ittt	mi
    2942:	4b06      	ldrmi	r3, [pc, #24]	; (295c <compare_int_unlock+0x58>)
    2944:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    2948:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    294c:	4770      	bx	lr
    294e:	bf00      	nop
    2950:	20000a04 	.word	0x20000a04
    2954:	40011000 	.word	0x40011000
    2958:	20000a00 	.word	0x20000a00
    295c:	e000e100 	.word	0xe000e100

00002960 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    2960:	4b0d      	ldr	r3, [pc, #52]	; (2998 <z_nrf_rtc_timer_read+0x38>)
    2962:	6818      	ldr	r0, [r3, #0]
    2964:	0a01      	lsrs	r1, r0, #8
    2966:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    2968:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    296c:	4b0b      	ldr	r3, [pc, #44]	; (299c <z_nrf_rtc_timer_read+0x3c>)
    296e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    2972:	1818      	adds	r0, r3, r0
    2974:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    2978:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    297c:	d20a      	bcs.n	2994 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    297e:	4b08      	ldr	r3, [pc, #32]	; (29a0 <z_nrf_rtc_timer_read+0x40>)
    2980:	e9d3 2300 	ldrd	r2, r3, [r3]
    2984:	4290      	cmp	r0, r2
    2986:	eb71 0303 	sbcs.w	r3, r1, r3
    298a:	d203      	bcs.n	2994 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    298c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    2990:	f141 0100 	adc.w	r1, r1, #0
}
    2994:	4770      	bx	lr
    2996:	bf00      	nop
    2998:	20000a08 	.word	0x20000a08
    299c:	40011000 	.word	0x40011000
    29a0:	200002c8 	.word	0x200002c8

000029a4 <compare_set>:
{
    29a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29a8:	4616      	mov	r6, r2
    29aa:	461f      	mov	r7, r3
    29ac:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    29ae:	f7ff ff61 	bl	2874 <compare_int_lock>
    29b2:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    29b4:	f7ff ffd4 	bl	2960 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    29b8:	42b0      	cmp	r0, r6
    29ba:	eb71 0307 	sbcs.w	r3, r1, r7
    29be:	d251      	bcs.n	2a64 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    29c0:	4b3a      	ldr	r3, [pc, #232]	; (2aac <compare_set+0x108>)
    29c2:	1a30      	subs	r0, r6, r0
    29c4:	eb67 0101 	sbc.w	r1, r7, r1
    29c8:	4298      	cmp	r0, r3
    29ca:	f171 0100 	sbcs.w	r1, r1, #0
    29ce:	d26a      	bcs.n	2aa6 <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    29d0:	4b37      	ldr	r3, [pc, #220]	; (2ab0 <compare_set+0x10c>)
    29d2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    29d6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    29da:	429f      	cmp	r7, r3
    29dc:	bf08      	it	eq
    29de:	4296      	cmpeq	r6, r2
    29e0:	d04e      	beq.n	2a80 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    29e2:	4934      	ldr	r1, [pc, #208]	; (2ab4 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    29e4:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    29e8:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    29ec:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    29f0:	00ad      	lsls	r5, r5, #2
    29f2:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    29f6:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    29f8:	b2ad      	uxth	r5, r5
    29fa:	f004 fe15 	bl	7628 <event_clear>
	return absolute_time & COUNTER_MAX;
    29fe:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    2a02:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    2a06:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    2a0a:	4a2b      	ldr	r2, [pc, #172]	; (2ab8 <compare_set+0x114>)
    2a0c:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2a0e:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    2a12:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    2a14:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    2a18:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2a1a:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    2a1e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    2a22:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    2a26:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2a2a:	f06f 0002 	mvn.w	r0, #2
    2a2e:	eba0 0008 	sub.w	r0, r0, r8
    2a32:	4460      	add	r0, ip
    2a34:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    2a38:	4290      	cmp	r0, r2
    2a3a:	d921      	bls.n	2a80 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2a3c:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    2a3e:	b160      	cbz	r0, 2a5a <compare_set+0xb6>
     return p_reg->COUNTER;
    2a40:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2a44:	eba8 000b 	sub.w	r0, r8, fp
    2a48:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    2a4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2a50:	d916      	bls.n	2a80 <compare_set+0xdc>
					event_clear(chan);
    2a52:	4620      	mov	r0, r4
    2a54:	f004 fde8 	bl	7628 <event_clear>
    2a58:	4a17      	ldr	r2, [pc, #92]	; (2ab8 <compare_set+0x114>)
			cc_val = now + cc_inc;
    2a5a:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    2a5e:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    2a62:	e7d9      	b.n	2a18 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    2a64:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2a66:	4a15      	ldr	r2, [pc, #84]	; (2abc <compare_set+0x118>)
    2a68:	f3bf 8f5b 	dmb	ish
    2a6c:	40a3      	lsls	r3, r4
    2a6e:	e852 0f00 	ldrex	r0, [r2]
    2a72:	4318      	orrs	r0, r3
    2a74:	e842 0100 	strex	r1, r0, [r2]
    2a78:	2900      	cmp	r1, #0
    2a7a:	d1f8      	bne.n	2a6e <compare_set+0xca>
    2a7c:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    2a80:	490b      	ldr	r1, [pc, #44]	; (2ab0 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    2a82:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    2a84:	0123      	lsls	r3, r4, #4
    2a86:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    2a8a:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    2a8e:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    2a90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2a92:	6053      	str	r3, [r2, #4]
	return ret;
    2a94:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    2a96:	4620      	mov	r0, r4
    2a98:	9900      	ldr	r1, [sp, #0]
    2a9a:	f7ff ff33 	bl	2904 <compare_int_unlock>
}
    2a9e:	4628      	mov	r0, r5
    2aa0:	b003      	add	sp, #12
    2aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    2aa6:	f06f 0515 	mvn.w	r5, #21
    2aaa:	e7f4      	b.n	2a96 <compare_set+0xf2>
    2aac:	00800001 	.word	0x00800001
    2ab0:	200002b0 	.word	0x200002b0
    2ab4:	40011000 	.word	0x40011000
    2ab8:	007ffffd 	.word	0x007ffffd
    2abc:	20000a00 	.word	0x20000a00

00002ac0 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    2ac0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
    2ac2:	4c1b      	ldr	r4, [pc, #108]	; (2b30 <sys_clock_driver_init+0x70>)
    2ac4:	4b1b      	ldr	r3, [pc, #108]	; (2b34 <sys_clock_driver_init+0x74>)
    2ac6:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    2aca:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    2ace:	4b1a      	ldr	r3, [pc, #104]	; (2b38 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    2ad0:	2500      	movs	r5, #0
    2ad2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2ad6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2ada:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    2ade:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    2ae2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2ae6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2aea:	4b14      	ldr	r3, [pc, #80]	; (2b3c <sys_clock_driver_init+0x7c>)
    2aec:	2602      	movs	r6, #2
    2aee:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2af2:	2101      	movs	r1, #1
    2af4:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    2af8:	2011      	movs	r0, #17
    2afa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2afe:	462a      	mov	r2, r5
    2b00:	f7fe fc22 	bl	1348 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2b04:	2011      	movs	r0, #17
    2b06:	f7fe fbef 	bl	12e8 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    2b0a:	4a0d      	ldr	r2, [pc, #52]	; (2b40 <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2b0c:	2301      	movs	r3, #1
    2b0e:	60a3      	str	r3, [r4, #8]
    2b10:	6023      	str	r3, [r4, #0]
    2b12:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    2b14:	4b0b      	ldr	r3, [pc, #44]	; (2b44 <sys_clock_driver_init+0x84>)
    2b16:	4a0c      	ldr	r2, [pc, #48]	; (2b48 <sys_clock_driver_init+0x88>)
    2b18:	9300      	str	r3, [sp, #0]
    2b1a:	9501      	str	r5, [sp, #4]
    2b1c:	2300      	movs	r3, #0
    2b1e:	4628      	mov	r0, r5
    2b20:	f7ff ff40 	bl	29a4 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    2b24:	4630      	mov	r0, r6
    2b26:	f7ff f917 	bl	1d58 <z_nrf_clock_control_lf_on>

	return 0;
}
    2b2a:	4628      	mov	r0, r5
    2b2c:	b002      	add	sp, #8
    2b2e:	bd70      	pop	{r4, r5, r6, pc}
    2b30:	40011000 	.word	0x40011000
    2b34:	000f0003 	.word	0x000f0003
    2b38:	200002b0 	.word	0x200002b0
    2b3c:	e000e100 	.word	0xe000e100
    2b40:	20000a04 	.word	0x20000a04
    2b44:	000028bd 	.word	0x000028bd
    2b48:	007fffff 	.word	0x007fffff

00002b4c <rtc_nrf_isr>:
{
    2b4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    2b50:	4c2f      	ldr	r4, [pc, #188]	; (2c10 <rtc_nrf_isr+0xc4>)
    2b52:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    2b56:	0799      	lsls	r1, r3, #30
    2b58:	d50b      	bpl.n	2b72 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2b5a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    2b5e:	b143      	cbz	r3, 2b72 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    2b60:	4a2c      	ldr	r2, [pc, #176]	; (2c14 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2b62:	2300      	movs	r3, #0
    2b64:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    2b68:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    2b6c:	6813      	ldr	r3, [r2, #0]
    2b6e:	3301      	adds	r3, #1
    2b70:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    2b72:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    2b76:	03da      	lsls	r2, r3, #15
    2b78:	d52a      	bpl.n	2bd0 <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2b7a:	f3bf 8f5b 	dmb	ish
    2b7e:	4b26      	ldr	r3, [pc, #152]	; (2c18 <rtc_nrf_isr+0xcc>)
    2b80:	e853 2f00 	ldrex	r2, [r3]
    2b84:	f022 0101 	bic.w	r1, r2, #1
    2b88:	e843 1000 	strex	r0, r1, [r3]
    2b8c:	2800      	cmp	r0, #0
    2b8e:	d1f7      	bne.n	2b80 <rtc_nrf_isr+0x34>
    2b90:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    2b94:	07d3      	lsls	r3, r2, #31
    2b96:	d402      	bmi.n	2b9e <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2b98:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2b9c:	b1c3      	cbz	r3, 2bd0 <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2b9e:	2500      	movs	r5, #0
    2ba0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2ba4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    2ba8:	f7ff feda 	bl	2960 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    2bac:	f04f 0320 	mov.w	r3, #32
    2bb0:	f3ef 8211 	mrs	r2, BASEPRI
    2bb4:	f383 8812 	msr	BASEPRI_MAX, r3
    2bb8:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    2bbc:	4b17      	ldr	r3, [pc, #92]	; (2c1c <rtc_nrf_isr+0xd0>)
    2bbe:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    2bc2:	42b0      	cmp	r0, r6
    2bc4:	41b9      	sbcs	r1, r7
    2bc6:	d206      	bcs.n	2bd6 <rtc_nrf_isr+0x8a>
	__asm__ volatile(
    2bc8:	f382 8811 	msr	BASEPRI, r2
    2bcc:	f3bf 8f6f 	isb	sy
}
    2bd0:	b003      	add	sp, #12
    2bd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2bd6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2bda:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    2bde:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    2be2:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    2be6:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    2be8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2bec:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2bf0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2bf4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2bf8:	f382 8811 	msr	BASEPRI, r2
    2bfc:	f3bf 8f6f 	isb	sy
		if (handler) {
    2c00:	2900      	cmp	r1, #0
    2c02:	d0e5      	beq.n	2bd0 <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
    2c04:	9000      	str	r0, [sp, #0]
    2c06:	4632      	mov	r2, r6
    2c08:	463b      	mov	r3, r7
    2c0a:	4628      	mov	r0, r5
    2c0c:	4788      	blx	r1
    2c0e:	e7df      	b.n	2bd0 <rtc_nrf_isr+0x84>
    2c10:	40011000 	.word	0x40011000
    2c14:	20000a08 	.word	0x20000a08
    2c18:	20000a00 	.word	0x20000a00
    2c1c:	200002b0 	.word	0x200002b0

00002c20 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    2c20:	1c43      	adds	r3, r0, #1
{
    2c22:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    2c24:	d022      	beq.n	2c6c <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    2c26:	2801      	cmp	r0, #1
    2c28:	dd22      	ble.n	2c70 <sys_clock_set_timeout+0x50>
    2c2a:	4a12      	ldr	r2, [pc, #72]	; (2c74 <sys_clock_set_timeout+0x54>)
    2c2c:	4b12      	ldr	r3, [pc, #72]	; (2c78 <sys_clock_set_timeout+0x58>)
    2c2e:	4290      	cmp	r0, r2
    2c30:	bfd4      	ite	le
    2c32:	4604      	movle	r4, r0
    2c34:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2c36:	f7ff fe93 	bl	2960 <z_nrf_rtc_timer_read>
    2c3a:	4b10      	ldr	r3, [pc, #64]	; (2c7c <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    2c3c:	490e      	ldr	r1, [pc, #56]	; (2c78 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2c42:	1a80      	subs	r0, r0, r2
		cyc = 0;
    2c44:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2c48:	bf28      	it	cs
    2c4a:	2400      	movcs	r4, #0
	cyc += unannounced;
    2c4c:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    2c4e:	428c      	cmp	r4, r1
    2c50:	bf28      	it	cs
    2c52:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    2c54:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2c56:	490a      	ldr	r1, [pc, #40]	; (2c80 <sys_clock_set_timeout+0x60>)
    2c58:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    2c5a:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2c5e:	9001      	str	r0, [sp, #4]
    2c60:	f143 0300 	adc.w	r3, r3, #0
    2c64:	f7ff fe9e 	bl	29a4 <compare_set>
}
    2c68:	b002      	add	sp, #8
    2c6a:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    2c6c:	4c02      	ldr	r4, [pc, #8]	; (2c78 <sys_clock_set_timeout+0x58>)
    2c6e:	e7e2      	b.n	2c36 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    2c70:	2401      	movs	r4, #1
    2c72:	e7e0      	b.n	2c36 <sys_clock_set_timeout+0x16>
    2c74:	007ffffe 	.word	0x007ffffe
    2c78:	007fffff 	.word	0x007fffff
    2c7c:	200002c0 	.word	0x200002c0
    2c80:	000028bd 	.word	0x000028bd

00002c84 <sys_clock_elapsed>:
{
    2c84:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    2c86:	f7ff fe6b 	bl	2960 <z_nrf_rtc_timer_read>
    2c8a:	4b02      	ldr	r3, [pc, #8]	; (2c94 <sys_clock_elapsed+0x10>)
    2c8c:	681b      	ldr	r3, [r3, #0]
}
    2c8e:	1ac0      	subs	r0, r0, r3
    2c90:	bd08      	pop	{r3, pc}
    2c92:	bf00      	nop
    2c94:	200002c0 	.word	0x200002c0

00002c98 <sys_clock_disable>:
{
    2c98:	b510      	push	{r4, lr}
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2c9a:	4c08      	ldr	r4, [pc, #32]	; (2cbc <sys_clock_disable+0x24>)
    2c9c:	2301      	movs	r3, #1
    2c9e:	6063      	str	r3, [r4, #4]
	irq_disable(RTC_IRQn);
    2ca0:	2011      	movs	r0, #17
    2ca2:	f7fe fb2f 	bl	1304 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    2ca6:	4b06      	ldr	r3, [pc, #24]	; (2cc0 <sys_clock_disable+0x28>)
    2ca8:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    2cac:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    2cb0:	4b04      	ldr	r3, [pc, #16]	; (2cc4 <sys_clock_disable+0x2c>)
    2cb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2cb6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    2cba:	bd10      	pop	{r4, pc}
    2cbc:	40011000 	.word	0x40011000
    2cc0:	000f0003 	.word	0x000f0003
    2cc4:	e000e100 	.word	0xe000e100

00002cc8 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2cc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    2ccc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2cd0:	2a08      	cmp	r2, #8
    2cd2:	d106      	bne.n	2ce2 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2cd4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    2cd8:	2b05      	cmp	r3, #5
    2cda:	d802      	bhi.n	2ce2 <nrf52_errata_103+0x1a>
    2cdc:	4a02      	ldr	r2, [pc, #8]	; (2ce8 <nrf52_errata_103+0x20>)
    2cde:	5cd0      	ldrb	r0, [r2, r3]
    2ce0:	4770      	bx	lr
                        return false;
    2ce2:	2000      	movs	r0, #0
}
    2ce4:	4770      	bx	lr
    2ce6:	bf00      	nop
    2ce8:	000082c2 	.word	0x000082c2

00002cec <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    2cec:	4a02      	ldr	r2, [pc, #8]	; (2cf8 <nvmc_wait+0xc>)
    2cee:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    2cf2:	2b00      	cmp	r3, #0
    2cf4:	d0fb      	beq.n	2cee <nvmc_wait+0x2>
}
    2cf6:	4770      	bx	lr
    2cf8:	4001e000 	.word	0x4001e000

00002cfc <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    2cfc:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2cfe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    2d02:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2d06:	2a08      	cmp	r2, #8
    2d08:	d14e      	bne.n	2da8 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    2d0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2d0e:	2100      	movs	r1, #0
    2d10:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    2d14:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    2d18:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    2d1c:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    2d20:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    2d24:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    2d28:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    2d2c:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    2d30:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    2d34:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    2d38:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    2d3c:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    2d40:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    2d44:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    2d48:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    2d4c:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    2d50:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    2d54:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    2d58:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    2d5c:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    2d60:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    2d64:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    2d68:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    2d6c:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    2d70:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    2d74:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    2d78:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    2d7c:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    2d80:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    2d84:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    2d88:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    2d8c:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    2d90:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    2d94:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    2d98:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    2d9c:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    2da0:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    2da4:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    2da8:	f7ff ff8e 	bl	2cc8 <nrf52_errata_103>
    2dac:	b118      	cbz	r0, 2db6 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    2dae:	4b3a      	ldr	r3, [pc, #232]	; (2e98 <SystemInit+0x19c>)
    2db0:	4a3a      	ldr	r2, [pc, #232]	; (2e9c <SystemInit+0x1a0>)
    2db2:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    2db6:	f7ff ff87 	bl	2cc8 <nrf52_errata_103>
    2dba:	b118      	cbz	r0, 2dc4 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    2dbc:	4b38      	ldr	r3, [pc, #224]	; (2ea0 <SystemInit+0x1a4>)
    2dbe:	22fb      	movs	r2, #251	; 0xfb
    2dc0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    2dc4:	f7ff ff80 	bl	2cc8 <nrf52_errata_103>
    2dc8:	b170      	cbz	r0, 2de8 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    2dca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2dce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2dd2:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    2dd6:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    2dda:	f022 020f 	bic.w	r2, r2, #15
    2dde:	f003 030f 	and.w	r3, r3, #15
    2de2:	4313      	orrs	r3, r2
    2de4:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    2de8:	f7ff ff6e 	bl	2cc8 <nrf52_errata_103>
    2dec:	b120      	cbz	r0, 2df8 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    2dee:	4b2d      	ldr	r3, [pc, #180]	; (2ea4 <SystemInit+0x1a8>)
    2df0:	f44f 7200 	mov.w	r2, #512	; 0x200
    2df4:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2df8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    2dfc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    2e00:	2b08      	cmp	r3, #8
    2e02:	d11a      	bne.n	2e3a <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    2e04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e08:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2e0c:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    2e0e:	bf44      	itt	mi
    2e10:	f06f 0201 	mvnmi.w	r2, #1
    2e14:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2e18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2e1c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    2e20:	2b05      	cmp	r3, #5
    2e22:	d802      	bhi.n	2e2a <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    2e24:	4a20      	ldr	r2, [pc, #128]	; (2ea8 <SystemInit+0x1ac>)
    2e26:	5cd3      	ldrb	r3, [r2, r3]
    2e28:	b13b      	cbz	r3, 2e3a <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    2e2a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2e2e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    2e32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e36:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2e3a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2e3e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2e42:	2a00      	cmp	r2, #0
    2e44:	db03      	blt.n	2e4e <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    2e46:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2e4a:	2b00      	cmp	r3, #0
    2e4c:	da22      	bge.n	2e94 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2e4e:	4917      	ldr	r1, [pc, #92]	; (2eac <SystemInit+0x1b0>)
    2e50:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2e52:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2e56:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2e5a:	2412      	movs	r4, #18
    nvmc_wait();
    2e5c:	f7ff ff46 	bl	2cec <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2e60:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    2e64:	f7ff ff42 	bl	2cec <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    2e68:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    2e6c:	f7ff ff3e 	bl	2cec <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2e70:	2300      	movs	r3, #0
    2e72:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    2e76:	f7ff ff39 	bl	2cec <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    2e7a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2e7e:	490c      	ldr	r1, [pc, #48]	; (2eb0 <SystemInit+0x1b4>)
    2e80:	4b0c      	ldr	r3, [pc, #48]	; (2eb4 <SystemInit+0x1b8>)
    2e82:	68ca      	ldr	r2, [r1, #12]
    2e84:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2e88:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2e8a:	60cb      	str	r3, [r1, #12]
    2e8c:	f3bf 8f4f 	dsb	sy
    __NOP();
    2e90:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2e92:	e7fd      	b.n	2e90 <SystemInit+0x194>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    2e94:	bd10      	pop	{r4, pc}
    2e96:	bf00      	nop
    2e98:	40005000 	.word	0x40005000
    2e9c:	00038148 	.word	0x00038148
    2ea0:	4000f000 	.word	0x4000f000
    2ea4:	40029000 	.word	0x40029000
    2ea8:	000082bc 	.word	0x000082bc
    2eac:	4001e000 	.word	0x4001e000
    2eb0:	e000ed00 	.word	0xe000ed00
    2eb4:	05fa0004 	.word	0x05fa0004

00002eb8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2eb8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    2eba:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    2ebc:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2ebe:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    2ec2:	fab2 f382 	clz	r3, r2
    2ec6:	f1c3 031f 	rsb	r3, r3, #31
    2eca:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    2ecc:	fa05 f403 	lsl.w	r4, r5, r3
    2ed0:	ea22 0404 	bic.w	r4, r2, r4
    2ed4:	e850 6f00 	ldrex	r6, [r0]
    2ed8:	4296      	cmp	r6, r2
    2eda:	d104      	bne.n	2ee6 <nrfx_flag32_alloc+0x2e>
    2edc:	e840 4c00 	strex	ip, r4, [r0]
    2ee0:	f1bc 0f00 	cmp.w	ip, #0
    2ee4:	d1f6      	bne.n	2ed4 <nrfx_flag32_alloc+0x1c>
    2ee6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2eea:	d1e7      	bne.n	2ebc <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    2eec:	4801      	ldr	r0, [pc, #4]	; (2ef4 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    2eee:	700b      	strb	r3, [r1, #0]
}
    2ef0:	bd70      	pop	{r4, r5, r6, pc}
    2ef2:	bf00      	nop
    2ef4:	0bad0000 	.word	0x0bad0000

00002ef8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    2ef8:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    2efa:	6803      	ldr	r3, [r0, #0]
    2efc:	40cb      	lsrs	r3, r1
    2efe:	07db      	lsls	r3, r3, #31
    2f00:	d414      	bmi.n	2f2c <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    2f02:	2301      	movs	r3, #1
    2f04:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    2f06:	6802      	ldr	r2, [r0, #0]
    2f08:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    2f0c:	ea43 0102 	orr.w	r1, r3, r2
    2f10:	e850 4f00 	ldrex	r4, [r0]
    2f14:	4294      	cmp	r4, r2
    2f16:	d104      	bne.n	2f22 <nrfx_flag32_free+0x2a>
    2f18:	e840 1c00 	strex	ip, r1, [r0]
    2f1c:	f1bc 0f00 	cmp.w	ip, #0
    2f20:	d1f6      	bne.n	2f10 <nrfx_flag32_free+0x18>
    2f22:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2f26:	d1ee      	bne.n	2f06 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    2f28:	4801      	ldr	r0, [pc, #4]	; (2f30 <nrfx_flag32_free+0x38>)
}
    2f2a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2f2c:	4801      	ldr	r0, [pc, #4]	; (2f34 <nrfx_flag32_free+0x3c>)
    2f2e:	e7fc      	b.n	2f2a <nrfx_flag32_free+0x32>
    2f30:	0bad0000 	.word	0x0bad0000
    2f34:	0bad0004 	.word	0x0bad0004

00002f38 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    2f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    2f3a:	4604      	mov	r4, r0
    2f3c:	b118      	cbz	r0, 2f46 <clock_stop+0xe>
    2f3e:	2801      	cmp	r0, #1
    2f40:	d022      	beq.n	2f88 <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    2f42:	b003      	add	sp, #12
    2f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    2f46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2f4a:	2202      	movs	r2, #2
    2f4c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f50:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    2f54:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2f58:	2201      	movs	r2, #1
    2f5a:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    2f5c:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    2f5e:	2301      	movs	r3, #1
    2f60:	f88d 3007 	strb.w	r3, [sp, #7]
    2f64:	f242 7510 	movw	r5, #10000	; 0x2710
    2f68:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    2f6c:	b1cc      	cbz	r4, 2fa2 <clock_stop+0x6a>
    2f6e:	2c01      	cmp	r4, #1
    2f70:	d1e7      	bne.n	2f42 <clock_stop+0xa>
            if (p_clk_src != NULL)
    2f72:	b3c7      	cbz	r7, 2fe6 <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2f74:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    2f78:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    2f7c:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2f7e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    2f82:	03da      	lsls	r2, r3, #15
    2f84:	d521      	bpl.n	2fca <clock_stop+0x92>
    2f86:	e016      	b.n	2fb6 <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
    2f88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f8c:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    2f8e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f92:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2f96:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2f9a:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    2f9c:	f10d 0707 	add.w	r7, sp, #7
    2fa0:	e7dd      	b.n	2f5e <clock_stop+0x26>
            if (p_clk_src != NULL)
    2fa2:	b1b7      	cbz	r7, 2fd2 <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2fa4:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2fa8:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    2fac:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2fae:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    2fb2:	03d8      	lsls	r0, r3, #15
    2fb4:	d5c5      	bpl.n	2f42 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    2fb6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    2fba:	2801      	cmp	r0, #1
    2fbc:	d103      	bne.n	2fc6 <clock_stop+0x8e>
    2fbe:	f004 fb53 	bl	7668 <nrfx_busy_wait>
    2fc2:	3d01      	subs	r5, #1
    2fc4:	d1d2      	bne.n	2f6c <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    2fc6:	2c01      	cmp	r4, #1
    2fc8:	d1bb      	bne.n	2f42 <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    2fca:	4b0c      	ldr	r3, [pc, #48]	; (2ffc <clock_stop+0xc4>)
    2fcc:	2200      	movs	r2, #0
    2fce:	715a      	strb	r2, [r3, #5]
    2fd0:	e7b7      	b.n	2f42 <clock_stop+0xa>
    2fd2:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    2fd6:	03d9      	lsls	r1, r3, #15
    2fd8:	d5b3      	bpl.n	2f42 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    2fda:	2001      	movs	r0, #1
    2fdc:	f004 fb44 	bl	7668 <nrfx_busy_wait>
    2fe0:	3d01      	subs	r5, #1
    2fe2:	d1f6      	bne.n	2fd2 <clock_stop+0x9a>
    2fe4:	e7ad      	b.n	2f42 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2fe6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    2fea:	03db      	lsls	r3, r3, #15
    2fec:	d5ed      	bpl.n	2fca <clock_stop+0x92>
    2fee:	2001      	movs	r0, #1
    2ff0:	f004 fb3a 	bl	7668 <nrfx_busy_wait>
    2ff4:	3d01      	subs	r5, #1
    2ff6:	d1f6      	bne.n	2fe6 <clock_stop+0xae>
    2ff8:	e7e7      	b.n	2fca <clock_stop+0x92>
    2ffa:	bf00      	nop
    2ffc:	20000a0c 	.word	0x20000a0c

00003000 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3000:	4b04      	ldr	r3, [pc, #16]	; (3014 <nrfx_clock_init+0x14>)
    3002:	791a      	ldrb	r2, [r3, #4]
    3004:	b922      	cbnz	r2, 3010 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    3006:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    3008:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    300a:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    300c:	4802      	ldr	r0, [pc, #8]	; (3018 <nrfx_clock_init+0x18>)
    300e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3010:	4802      	ldr	r0, [pc, #8]	; (301c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3012:	4770      	bx	lr
    3014:	20000a0c 	.word	0x20000a0c
    3018:	0bad0000 	.word	0x0bad0000
    301c:	0bad000c 	.word	0x0bad000c

00003020 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3020:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3022:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3026:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    302a:	b16a      	cbz	r2, 3048 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    302c:	2200      	movs	r2, #0
    302e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3032:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    3036:	2201      	movs	r2, #1
    3038:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    303c:	4b11      	ldr	r3, [pc, #68]	; (3084 <nrfx_power_clock_irq_handler+0x64>)
    303e:	7958      	ldrb	r0, [r3, #5]
    3040:	b910      	cbnz	r0, 3048 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    3042:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3044:	681b      	ldr	r3, [r3, #0]
    3046:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3048:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    304c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3050:	b172      	cbz	r2, 3070 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3052:	2200      	movs	r2, #0
    3054:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3058:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    305c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3060:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3064:	0792      	lsls	r2, r2, #30
    3066:	d104      	bne.n	3072 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3068:	2201      	movs	r2, #1
    306a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    306e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3070:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    3072:	2202      	movs	r2, #2
    3074:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3078:	4b02      	ldr	r3, [pc, #8]	; (3084 <nrfx_power_clock_irq_handler+0x64>)
}
    307a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    307e:	681b      	ldr	r3, [r3, #0]
    3080:	2001      	movs	r0, #1
    3082:	4718      	bx	r3
    3084:	20000a0c 	.word	0x20000a0c

00003088 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    3088:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    308a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    308e:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    3090:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    3092:	6002      	str	r2, [r0, #0]
}
    3094:	4802      	ldr	r0, [pc, #8]	; (30a0 <nrf_gpio_pin_port_decode+0x18>)
    3096:	bf18      	it	ne
    3098:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    309c:	4770      	bx	lr
    309e:	bf00      	nop
    30a0:	50000300 	.word	0x50000300

000030a4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    30a4:	4b03      	ldr	r3, [pc, #12]	; (30b4 <pin_in_use_by_te+0x10>)
    30a6:	3008      	adds	r0, #8
    30a8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    30ac:	f3c0 1040 	ubfx	r0, r0, #5, #1
    30b0:	4770      	bx	lr
    30b2:	bf00      	nop
    30b4:	2000004c 	.word	0x2000004c

000030b8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    30b8:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    30ba:	f100 0308 	add.w	r3, r0, #8
    30be:	4c0c      	ldr	r4, [pc, #48]	; (30f0 <call_handler+0x38>)
    30c0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    30c4:	05da      	lsls	r2, r3, #23
{
    30c6:	4605      	mov	r5, r0
    30c8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    30ca:	d507      	bpl.n	30dc <call_handler+0x24>
    30cc:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    30d0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    30d4:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    30d8:	6852      	ldr	r2, [r2, #4]
    30da:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    30dc:	68a3      	ldr	r3, [r4, #8]
    30de:	b12b      	cbz	r3, 30ec <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    30e0:	68e2      	ldr	r2, [r4, #12]
    30e2:	4631      	mov	r1, r6
    30e4:	4628      	mov	r0, r5
    }
}
    30e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    30ea:	4718      	bx	r3
}
    30ec:	bd70      	pop	{r4, r5, r6, pc}
    30ee:	bf00      	nop
    30f0:	2000004c 	.word	0x2000004c

000030f4 <release_handler>:
{
    30f4:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    30f6:	4a12      	ldr	r2, [pc, #72]	; (3140 <release_handler+0x4c>)
    30f8:	3008      	adds	r0, #8
    30fa:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    30fe:	05d9      	lsls	r1, r3, #23
    3100:	d51b      	bpl.n	313a <release_handler+0x46>
    3102:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    3106:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    310a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    310e:	f102 040e 	add.w	r4, r2, #14
    3112:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3114:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    3118:	f413 7f80 	tst.w	r3, #256	; 0x100
    311c:	d003      	beq.n	3126 <release_handler+0x32>
    311e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    3122:	4299      	cmp	r1, r3
    3124:	d009      	beq.n	313a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3126:	3001      	adds	r0, #1
    3128:	2830      	cmp	r0, #48	; 0x30
    312a:	d1f3      	bne.n	3114 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    312c:	2300      	movs	r3, #0
    312e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3132:	4804      	ldr	r0, [pc, #16]	; (3144 <release_handler+0x50>)
}
    3134:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3136:	f7ff bedf 	b.w	2ef8 <nrfx_flag32_free>
}
    313a:	bc10      	pop	{r4}
    313c:	4770      	bx	lr
    313e:	bf00      	nop
    3140:	2000004c 	.word	0x2000004c
    3144:	200000c0 	.word	0x200000c0

00003148 <pin_handler_trigger_uninit>:
{
    3148:	b538      	push	{r3, r4, r5, lr}
    314a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    314c:	f7ff ffaa 	bl	30a4 <pin_in_use_by_te>
    3150:	4c09      	ldr	r4, [pc, #36]	; (3178 <pin_handler_trigger_uninit+0x30>)
    3152:	f102 0508 	add.w	r5, r2, #8
    3156:	b140      	cbz	r0, 316a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3158:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    315c:	4907      	ldr	r1, [pc, #28]	; (317c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    315e:	0b5b      	lsrs	r3, r3, #13
    3160:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3164:	2000      	movs	r0, #0
    3166:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    316a:	4610      	mov	r0, r2
    316c:	f7ff ffc2 	bl	30f4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    3170:	2300      	movs	r3, #0
    3172:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    3176:	bd38      	pop	{r3, r4, r5, pc}
    3178:	2000004c 	.word	0x2000004c
    317c:	40006000 	.word	0x40006000

00003180 <nrfx_gpiote_input_configure>:
{
    3180:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    3184:	4604      	mov	r4, r0
    3186:	4616      	mov	r6, r2
    3188:	461d      	mov	r5, r3
    if (p_input_config)
    318a:	b301      	cbz	r1, 31ce <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    318c:	4f4e      	ldr	r7, [pc, #312]	; (32c8 <nrfx_gpiote_input_configure+0x148>)
    318e:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    3192:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    3196:	079b      	lsls	r3, r3, #30
    3198:	d502      	bpl.n	31a0 <nrfx_gpiote_input_configure+0x20>
    319a:	f7ff ff83 	bl	30a4 <pin_in_use_by_te>
    319e:	bb10      	cbnz	r0, 31e6 <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    31a0:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    31a2:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    31a6:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    31aa:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    31ae:	f10d 020f 	add.w	r2, sp, #15
    31b2:	460b      	mov	r3, r1
    31b4:	4620      	mov	r0, r4
    31b6:	f10d 010e 	add.w	r1, sp, #14
    31ba:	f004 faa2 	bl	7702 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    31be:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    31c2:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    31c6:	f043 0301 	orr.w	r3, r3, #1
    31ca:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
    31ce:	b346      	cbz	r6, 3222 <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    31d0:	4b3d      	ldr	r3, [pc, #244]	; (32c8 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    31d2:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    31d6:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    31d8:	f104 0708 	add.w	r7, r4, #8
    31dc:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
    31e0:	0788      	lsls	r0, r1, #30
    31e2:	d502      	bpl.n	31ea <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
    31e4:	b1aa      	cbz	r2, 3212 <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
    31e6:	4839      	ldr	r0, [pc, #228]	; (32cc <nrfx_gpiote_input_configure+0x14c>)
    31e8:	e01d      	b.n	3226 <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    31ea:	f021 0120 	bic.w	r1, r1, #32
    31ee:	04c9      	lsls	r1, r1, #19
    31f0:	0cc9      	lsrs	r1, r1, #19
    31f2:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
    31f6:	b162      	cbz	r2, 3212 <nrfx_gpiote_input_configure+0x92>
                if (!edge)
    31f8:	f1bc 0f03 	cmp.w	ip, #3
    31fc:	d8f3      	bhi.n	31e6 <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
    31fe:	6872      	ldr	r2, [r6, #4]
    3200:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3202:	f1bc 0f00 	cmp.w	ip, #0
    3206:	d111      	bne.n	322c <nrfx_gpiote_input_configure+0xac>
    3208:	4a31      	ldr	r2, [pc, #196]	; (32d0 <nrfx_gpiote_input_configure+0x150>)
    320a:	f506 76a2 	add.w	r6, r6, #324	; 0x144
    320e:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3212:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
    3216:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    321a:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
    321e:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
    3222:	bb45      	cbnz	r5, 3276 <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
    3224:	482b      	ldr	r0, [pc, #172]	; (32d4 <nrfx_gpiote_input_configure+0x154>)
}
    3226:	b004      	add	sp, #16
    3228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    322c:	00b2      	lsls	r2, r6, #2
    322e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3232:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3236:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
    323a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    323e:	f020 0003 	bic.w	r0, r0, #3
    3242:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3246:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    324a:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    324e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    3252:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3256:	0220      	lsls	r0, r4, #8
    3258:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    325c:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    3260:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    3264:	ea40 000e 	orr.w	r0, r0, lr
    3268:	f041 0120 	orr.w	r1, r1, #32
    326c:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
    3270:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    3274:	e7cd      	b.n	3212 <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3276:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    327a:	4620      	mov	r0, r4
    327c:	f7ff ff3a 	bl	30f4 <release_handler>
    if (!handler)
    3280:	2e00      	cmp	r6, #0
    3282:	d0cf      	beq.n	3224 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3284:	4d10      	ldr	r5, [pc, #64]	; (32c8 <nrfx_gpiote_input_configure+0x148>)
    3286:	e9d5 2300 	ldrd	r2, r3, [r5]
    328a:	4296      	cmp	r6, r2
    328c:	d101      	bne.n	3292 <nrfx_gpiote_input_configure+0x112>
    328e:	429f      	cmp	r7, r3
    3290:	d018      	beq.n	32c4 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3292:	4811      	ldr	r0, [pc, #68]	; (32d8 <nrfx_gpiote_input_configure+0x158>)
    3294:	f10d 010f 	add.w	r1, sp, #15
    3298:	f7ff fe0e 	bl	2eb8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    329c:	4b0d      	ldr	r3, [pc, #52]	; (32d4 <nrfx_gpiote_input_configure+0x154>)
    329e:	4298      	cmp	r0, r3
    32a0:	d1c1      	bne.n	3226 <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
    32a2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    32a6:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    32aa:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    32ae:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    32b0:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    32b2:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    32b6:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    32ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    32be:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    32c2:	e7af      	b.n	3224 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    32c4:	2200      	movs	r2, #0
    32c6:	e7ee      	b.n	32a6 <nrfx_gpiote_input_configure+0x126>
    32c8:	2000004c 	.word	0x2000004c
    32cc:	0bad0004 	.word	0x0bad0004
    32d0:	40006000 	.word	0x40006000
    32d4:	0bad0000 	.word	0x0bad0000
    32d8:	200000c0 	.word	0x200000c0

000032dc <nrfx_gpiote_output_configure>:
{
    32dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    32de:	4604      	mov	r4, r0
    32e0:	b085      	sub	sp, #20
    32e2:	4615      	mov	r5, r2
    if (p_config)
    32e4:	b319      	cbz	r1, 332e <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    32e6:	4e33      	ldr	r6, [pc, #204]	; (33b4 <nrfx_gpiote_output_configure+0xd8>)
    32e8:	f100 0708 	add.w	r7, r0, #8
    32ec:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    32f0:	0793      	lsls	r3, r2, #30
    32f2:	d403      	bmi.n	32fc <nrfx_gpiote_output_configure+0x20>
    32f4:	f7ff fed6 	bl	30a4 <pin_in_use_by_te>
    32f8:	2800      	cmp	r0, #0
    32fa:	d158      	bne.n	33ae <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    32fc:	f012 0f1c 	tst.w	r2, #28
    3300:	d002      	beq.n	3308 <nrfx_gpiote_output_configure+0x2c>
    3302:	784b      	ldrb	r3, [r1, #1]
    3304:	2b01      	cmp	r3, #1
    3306:	d052      	beq.n	33ae <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    3308:	2301      	movs	r3, #1
    330a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    330e:	2300      	movs	r3, #0
    3310:	e9cd 1300 	strd	r1, r3, [sp]
    3314:	1c4a      	adds	r2, r1, #1
    3316:	1c8b      	adds	r3, r1, #2
    3318:	4620      	mov	r0, r4
    331a:	f10d 010f 	add.w	r1, sp, #15
    331e:	f004 f9f0 	bl	7702 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3322:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    3326:	f043 0303 	orr.w	r3, r3, #3
    332a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    332e:	b915      	cbnz	r5, 3336 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    3330:	4821      	ldr	r0, [pc, #132]	; (33b8 <nrfx_gpiote_output_configure+0xdc>)
}
    3332:	b005      	add	sp, #20
    3334:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3336:	4e1f      	ldr	r6, [pc, #124]	; (33b4 <nrfx_gpiote_output_configure+0xd8>)
    3338:	f104 0708 	add.w	r7, r4, #8
    333c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    3340:	0783      	lsls	r3, r0, #30
    3342:	d534      	bpl.n	33ae <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    3344:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    3348:	4661      	mov	r1, ip
    334a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    334c:	f020 0020 	bic.w	r0, r0, #32
    3350:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3354:	04c0      	lsls	r0, r0, #19
    3356:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    335a:	0cc0      	lsrs	r0, r0, #19
    335c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3360:	2300      	movs	r3, #0
    3362:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3366:	786a      	ldrb	r2, [r5, #1]
    3368:	2a00      	cmp	r2, #0
    336a:	d0e1      	beq.n	3330 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    336c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    3370:	78ad      	ldrb	r5, [r5, #2]
    3372:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    3376:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    337a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    337e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    3382:	0223      	lsls	r3, r4, #8
    3384:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3388:	0412      	lsls	r2, r2, #16
    338a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    338e:	ea43 030e 	orr.w	r3, r3, lr
    3392:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3394:	052a      	lsls	r2, r5, #20
    3396:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    339a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    339e:	4313      	orrs	r3, r2
    33a0:	f040 0020 	orr.w	r0, r0, #32
    33a4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    33a8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    33ac:	e7c0      	b.n	3330 <nrfx_gpiote_output_configure+0x54>
{
    33ae:	4803      	ldr	r0, [pc, #12]	; (33bc <nrfx_gpiote_output_configure+0xe0>)
    33b0:	e7bf      	b.n	3332 <nrfx_gpiote_output_configure+0x56>
    33b2:	bf00      	nop
    33b4:	2000004c 	.word	0x2000004c
    33b8:	0bad0000 	.word	0x0bad0000
    33bc:	0bad0004 	.word	0x0bad0004

000033c0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    33c0:	4b01      	ldr	r3, [pc, #4]	; (33c8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    33c2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    33c6:	4770      	bx	lr
    33c8:	2000004c 	.word	0x2000004c

000033cc <nrfx_gpiote_channel_get>:
{
    33cc:	b508      	push	{r3, lr}
    33ce:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    33d0:	f7ff fe68 	bl	30a4 <pin_in_use_by_te>
    33d4:	b138      	cbz	r0, 33e6 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    33d6:	4b05      	ldr	r3, [pc, #20]	; (33ec <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    33d8:	4805      	ldr	r0, [pc, #20]	; (33f0 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    33da:	3208      	adds	r2, #8
    33dc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    33e0:	0b5b      	lsrs	r3, r3, #13
    33e2:	700b      	strb	r3, [r1, #0]
}
    33e4:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    33e6:	4803      	ldr	r0, [pc, #12]	; (33f4 <nrfx_gpiote_channel_get+0x28>)
    33e8:	e7fc      	b.n	33e4 <nrfx_gpiote_channel_get+0x18>
    33ea:	bf00      	nop
    33ec:	2000004c 	.word	0x2000004c
    33f0:	0bad0000 	.word	0x0bad0000
    33f4:	0bad0004 	.word	0x0bad0004

000033f8 <nrfx_gpiote_init>:
{
    33f8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    33fa:	4c0f      	ldr	r4, [pc, #60]	; (3438 <nrfx_gpiote_init+0x40>)
    33fc:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    3400:	b9bd      	cbnz	r5, 3432 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3402:	2260      	movs	r2, #96	; 0x60
    3404:	4629      	mov	r1, r5
    3406:	f104 0010 	add.w	r0, r4, #16
    340a:	f003 ff5c 	bl	72c6 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    340e:	2006      	movs	r0, #6
    3410:	f7fd ff6a 	bl	12e8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3414:	4b09      	ldr	r3, [pc, #36]	; (343c <nrfx_gpiote_init+0x44>)
    return err_code;
    3416:	480a      	ldr	r0, [pc, #40]	; (3440 <nrfx_gpiote_init+0x48>)
    3418:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    341c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    3420:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3424:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3428:	2301      	movs	r3, #1
    342a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    342e:	6763      	str	r3, [r4, #116]	; 0x74
}
    3430:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    3432:	4804      	ldr	r0, [pc, #16]	; (3444 <nrfx_gpiote_init+0x4c>)
    3434:	e7fc      	b.n	3430 <nrfx_gpiote_init+0x38>
    3436:	bf00      	nop
    3438:	2000004c 	.word	0x2000004c
    343c:	40006000 	.word	0x40006000
    3440:	0bad0000 	.word	0x0bad0000
    3444:	0bad0005 	.word	0x0bad0005

00003448 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3448:	4b03      	ldr	r3, [pc, #12]	; (3458 <nrfx_gpiote_is_init+0x10>)
    344a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    344e:	3800      	subs	r0, #0
    3450:	bf18      	it	ne
    3452:	2001      	movne	r0, #1
    3454:	4770      	bx	lr
    3456:	bf00      	nop
    3458:	2000004c 	.word	0x2000004c

0000345c <nrfx_gpiote_channel_free>:
{
    345c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    345e:	4801      	ldr	r0, [pc, #4]	; (3464 <nrfx_gpiote_channel_free+0x8>)
    3460:	f7ff bd4a 	b.w	2ef8 <nrfx_flag32_free>
    3464:	200000bc 	.word	0x200000bc

00003468 <nrfx_gpiote_channel_alloc>:
{
    3468:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    346a:	4801      	ldr	r0, [pc, #4]	; (3470 <nrfx_gpiote_channel_alloc+0x8>)
    346c:	f7ff bd24 	b.w	2eb8 <nrfx_flag32_alloc>
    3470:	200000bc 	.word	0x200000bc

00003474 <nrfx_gpiote_trigger_enable>:
{
    3474:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3476:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3478:	f7ff fe14 	bl	30a4 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    347c:	f104 0208 	add.w	r2, r4, #8
    3480:	4b1e      	ldr	r3, [pc, #120]	; (34fc <nrfx_gpiote_trigger_enable+0x88>)
    3482:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3486:	b1e8      	cbz	r0, 34c4 <nrfx_gpiote_trigger_enable+0x50>
    3488:	f013 0502 	ands.w	r5, r3, #2
    348c:	d11a      	bne.n	34c4 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    348e:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3490:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    3492:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    3496:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    349a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    349e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    34a2:	6005      	str	r5, [r0, #0]
    34a4:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    34a6:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    34aa:	f040 0001 	orr.w	r0, r0, #1
    34ae:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    34b2:	b129      	cbz	r1, 34c0 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    34b4:	2201      	movs	r2, #1
    34b6:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    34ba:	4a11      	ldr	r2, [pc, #68]	; (3500 <nrfx_gpiote_trigger_enable+0x8c>)
    34bc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    34c0:	b003      	add	sp, #12
    34c2:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    34c4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    34c8:	2b04      	cmp	r3, #4
    34ca:	d012      	beq.n	34f2 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    34cc:	2b05      	cmp	r3, #5
    34ce:	d012      	beq.n	34f6 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    34d0:	a801      	add	r0, sp, #4
    34d2:	9401      	str	r4, [sp, #4]
    34d4:	f7ff fdd8 	bl	3088 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    34d8:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    34da:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    34de:	40d9      	lsrs	r1, r3
    34e0:	f001 0101 	and.w	r1, r1, #1
    34e4:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    34e6:	4620      	mov	r0, r4
}
    34e8:	b003      	add	sp, #12
    34ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    34ee:	f004 b951 	b.w	7794 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    34f2:	2103      	movs	r1, #3
    34f4:	e7f7      	b.n	34e6 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    34f6:	2102      	movs	r1, #2
    34f8:	e7f5      	b.n	34e6 <nrfx_gpiote_trigger_enable+0x72>
    34fa:	bf00      	nop
    34fc:	2000004c 	.word	0x2000004c
    3500:	40006000 	.word	0x40006000

00003504 <nrfx_gpiote_trigger_disable>:
{
    3504:	b508      	push	{r3, lr}
    3506:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3508:	f7ff fdcc 	bl	30a4 <pin_in_use_by_te>
    350c:	b1c0      	cbz	r0, 3540 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    350e:	f102 0108 	add.w	r1, r2, #8
    3512:	4b0e      	ldr	r3, [pc, #56]	; (354c <nrfx_gpiote_trigger_disable+0x48>)
    3514:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3518:	0799      	lsls	r1, r3, #30
    351a:	d411      	bmi.n	3540 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    351c:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    351e:	2201      	movs	r2, #1
    3520:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    3522:	009b      	lsls	r3, r3, #2
    3524:	490a      	ldr	r1, [pc, #40]	; (3550 <nrfx_gpiote_trigger_disable+0x4c>)
    3526:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    352a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    352e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3532:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3536:	f022 0203 	bic.w	r2, r2, #3
    353a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    353e:	bd08      	pop	{r3, pc}
    3540:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3544:	2100      	movs	r1, #0
    3546:	4610      	mov	r0, r2
    3548:	f004 b924 	b.w	7794 <nrf_gpio_cfg_sense_set>
    354c:	2000004c 	.word	0x2000004c
    3550:	40006000 	.word	0x40006000

00003554 <nrfx_gpiote_pin_uninit>:
{
    3554:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3556:	4b0e      	ldr	r3, [pc, #56]	; (3590 <nrfx_gpiote_pin_uninit+0x3c>)
    3558:	f100 0208 	add.w	r2, r0, #8
{
    355c:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    355e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    3562:	07db      	lsls	r3, r3, #31
    3564:	d511      	bpl.n	358a <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    3566:	f7ff ffcd 	bl	3504 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    356a:	4620      	mov	r0, r4
    356c:	f7ff fdec 	bl	3148 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3570:	a801      	add	r0, sp, #4
    3572:	9401      	str	r4, [sp, #4]
    3574:	f7ff fd88 	bl	3088 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3578:	9b01      	ldr	r3, [sp, #4]
    357a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    357e:	2202      	movs	r2, #2
    3580:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    3584:	4803      	ldr	r0, [pc, #12]	; (3594 <nrfx_gpiote_pin_uninit+0x40>)
}
    3586:	b002      	add	sp, #8
    3588:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    358a:	4803      	ldr	r0, [pc, #12]	; (3598 <nrfx_gpiote_pin_uninit+0x44>)
    358c:	e7fb      	b.n	3586 <nrfx_gpiote_pin_uninit+0x32>
    358e:	bf00      	nop
    3590:	2000004c 	.word	0x2000004c
    3594:	0bad0000 	.word	0x0bad0000
    3598:	0bad0004 	.word	0x0bad0004

0000359c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    359c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    35a0:	4b68      	ldr	r3, [pc, #416]	; (3744 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
    35a2:	4869      	ldr	r0, [pc, #420]	; (3748 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    35a4:	4969      	ldr	r1, [pc, #420]	; (374c <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
    35a6:	2600      	movs	r6, #0
{
    35a8:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    35aa:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    35ac:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    35ae:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    35b0:	b135      	cbz	r5, 35c0 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    35b2:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    35b6:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    35b8:	bf1e      	ittt	ne
    35ba:	601c      	strne	r4, [r3, #0]
    35bc:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    35be:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    35c0:	3304      	adds	r3, #4
    35c2:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    35c4:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    35c8:	d1f1      	bne.n	35ae <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    35ca:	f8df 917c 	ldr.w	r9, [pc, #380]	; 3748 <nrfx_gpiote_irq_handler+0x1ac>
    35ce:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    35d2:	2b00      	cmp	r3, #0
    35d4:	f000 8099 	beq.w	370a <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
    35d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    35dc:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    35e0:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    35e2:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    35e6:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    35ea:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    35ec:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    35f0:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    35f4:	f10d 0a10 	add.w	sl, sp, #16
    35f8:	ea4f 1348 	mov.w	r3, r8, lsl #5
    35fc:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    35fe:	f04f 0b01 	mov.w	fp, #1
    3602:	e049      	b.n	3698 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    3604:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3606:	4a52      	ldr	r2, [pc, #328]	; (3750 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    3608:	fa94 f4a4 	rbit	r4, r4
    360c:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    3610:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    3612:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3614:	f104 0308 	add.w	r3, r4, #8
    3618:	9403      	str	r4, [sp, #12]
    361a:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    361e:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
    3622:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3626:	fa0b f202 	lsl.w	r2, fp, r2
    362a:	ea23 0302 	bic.w	r3, r3, r2
    362e:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3632:	a803      	add	r0, sp, #12
    3634:	f7ff fd28 	bl	3088 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3638:	9b03      	ldr	r3, [sp, #12]
    363a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    363e:	08b9      	lsrs	r1, r7, #2
    3640:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3644:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    3648:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    364a:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    364c:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    3650:	d52c      	bpl.n	36ac <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
    3652:	4620      	mov	r0, r4
    3654:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3656:	b2dd      	uxtb	r5, r3
    3658:	f7ff fd2e 	bl	30b8 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    365c:	a803      	add	r0, sp, #12
    365e:	9403      	str	r4, [sp, #12]
    3660:	f7ff fd12 	bl	3088 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3664:	9b03      	ldr	r3, [sp, #12]
    3666:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    366a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    366e:	f3c3 4301 	ubfx	r3, r3, #16, #2
    3672:	429d      	cmp	r5, r3
    3674:	d107      	bne.n	3686 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3676:	2100      	movs	r1, #0
    3678:	4620      	mov	r0, r4
    367a:	f004 f88b 	bl	7794 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    367e:	4629      	mov	r1, r5
    3680:	4620      	mov	r0, r4
    3682:	f004 f887 	bl	7794 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3686:	a803      	add	r0, sp, #12
    3688:	9403      	str	r4, [sp, #12]
    368a:	f7ff fcfd 	bl	3088 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    368e:	9b03      	ldr	r3, [sp, #12]
    3690:	fa0b f303 	lsl.w	r3, fp, r3
    3694:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    3698:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    369c:	2c00      	cmp	r4, #0
    369e:	d1b1      	bne.n	3604 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    36a0:	f1b8 0f00 	cmp.w	r8, #0
    36a4:	d11d      	bne.n	36e2 <nrfx_gpiote_irq_handler+0x146>
    36a6:	f04f 0801 	mov.w	r8, #1
    36aa:	e7a5      	b.n	35f8 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    36ac:	2b02      	cmp	r3, #2
    36ae:	d10c      	bne.n	36ca <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    36b0:	2103      	movs	r1, #3
    36b2:	4620      	mov	r0, r4
    36b4:	f004 f86e 	bl	7794 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    36b8:	f005 0305 	and.w	r3, r5, #5
    36bc:	2b01      	cmp	r3, #1
    36be:	d1e2      	bne.n	3686 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    36c0:	4639      	mov	r1, r7
    36c2:	4620      	mov	r0, r4
    36c4:	f7ff fcf8 	bl	30b8 <call_handler>
    36c8:	e7dd      	b.n	3686 <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    36ca:	2102      	movs	r1, #2
    36cc:	4620      	mov	r0, r4
    36ce:	9301      	str	r3, [sp, #4]
    36d0:	f004 f860 	bl	7794 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    36d4:	2d03      	cmp	r5, #3
    36d6:	d0f3      	beq.n	36c0 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    36d8:	9b01      	ldr	r3, [sp, #4]
    36da:	2b03      	cmp	r3, #3
    36dc:	d1d3      	bne.n	3686 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    36de:	2d02      	cmp	r5, #2
    36e0:	e7ed      	b.n	36be <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
    36e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    36e6:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    36ea:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    36ee:	4919      	ldr	r1, [pc, #100]	; (3754 <nrfx_gpiote_irq_handler+0x1b8>)
    36f0:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    36f4:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    36f6:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    36fa:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    36fe:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    3700:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    3702:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    3706:	f47f af73 	bne.w	35f0 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    370a:	2401      	movs	r4, #1
    while (mask)
    370c:	b916      	cbnz	r6, 3714 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    370e:	b007      	add	sp, #28
    3710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    3714:	fa96 f3a6 	rbit	r3, r6
    3718:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    371c:	fa04 f203 	lsl.w	r2, r4, r3
    3720:	009b      	lsls	r3, r3, #2
    3722:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3726:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    372a:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    372e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    3732:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3736:	f3c0 2005 	ubfx	r0, r0, #8, #6
    373a:	f3c1 4101 	ubfx	r1, r1, #16, #2
    373e:	f7ff fcbb 	bl	30b8 <call_handler>
    3742:	e7e3      	b.n	370c <nrfx_gpiote_irq_handler+0x170>
    3744:	40006100 	.word	0x40006100
    3748:	40006000 	.word	0x40006000
    374c:	40006120 	.word	0x40006120
    3750:	2000004c 	.word	0x2000004c
    3754:	50000300 	.word	0x50000300

00003758 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    3758:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    375a:	4801      	ldr	r0, [pc, #4]	; (3760 <nrfx_ppi_channel_alloc+0x8>)
    375c:	f7ff bbac 	b.w	2eb8 <nrfx_flag32_alloc>
    3760:	200000c8 	.word	0x200000c8

00003764 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    3764:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    3766:	4c14      	ldr	r4, [pc, #80]	; (37b8 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    3768:	4a14      	ldr	r2, [pc, #80]	; (37bc <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    376a:	4915      	ldr	r1, [pc, #84]	; (37c0 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    376c:	2303      	movs	r3, #3
    376e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    3770:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    3772:	4b14      	ldr	r3, [pc, #80]	; (37c4 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    3774:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    3776:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    3778:	f44f 6380 	mov.w	r3, #1024	; 0x400
    377c:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    377e:	2300      	movs	r3, #0
    3780:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    3782:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    3784:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    3786:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    3788:	4a0f      	ldr	r2, [pc, #60]	; (37c8 <_DoInit+0x64>)
    378a:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    378c:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    378e:	2210      	movs	r2, #16
    3790:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    3792:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    3794:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    3796:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    3798:	f003 fd59 	bl	724e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    379c:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    37a0:	490a      	ldr	r1, [pc, #40]	; (37cc <_DoInit+0x68>)
    37a2:	4620      	mov	r0, r4
    37a4:	f003 fd53 	bl	724e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    37a8:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    37ac:	2320      	movs	r3, #32
    37ae:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    37b0:	f3bf 8f5f 	dmb	sy
}
    37b4:	bd10      	pop	{r4, pc}
    37b6:	bf00      	nop
    37b8:	20000a14 	.word	0x20000a14
    37bc:	000082e8 	.word	0x000082e8
    37c0:	000082f1 	.word	0x000082f1
    37c4:	200015cb 	.word	0x200015cb
    37c8:	200015bb 	.word	0x200015bb
    37cc:	000082f5 	.word	0x000082f5

000037d0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    37d0:	4b10      	ldr	r3, [pc, #64]	; (3814 <z_sys_init_run_level+0x44>)
{
    37d2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    37d4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    37d8:	3001      	adds	r0, #1
    37da:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    37de:	42a6      	cmp	r6, r4
    37e0:	d800      	bhi.n	37e4 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    37e2:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    37e4:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    37e8:	b18d      	cbz	r5, 380e <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    37ea:	4628      	mov	r0, r5
    37ec:	4798      	blx	r3
			if (rc != 0) {
    37ee:	b138      	cbz	r0, 3800 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    37f0:	2800      	cmp	r0, #0
    37f2:	bfb8      	it	lt
    37f4:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    37f6:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    37f8:	28ff      	cmp	r0, #255	; 0xff
    37fa:	bfa8      	it	ge
    37fc:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    37fe:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    3800:	68ea      	ldr	r2, [r5, #12]
    3802:	7853      	ldrb	r3, [r2, #1]
    3804:	f043 0301 	orr.w	r3, r3, #1
    3808:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    380a:	3408      	adds	r4, #8
    380c:	e7e7      	b.n	37de <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    380e:	4798      	blx	r3
    3810:	e7fb      	b.n	380a <z_sys_init_run_level+0x3a>
    3812:	bf00      	nop
    3814:	00007f38 	.word	0x00007f38

00003818 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    3818:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    381a:	4b0a      	ldr	r3, [pc, #40]	; (3844 <bg_thread_main+0x2c>)
    381c:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    381e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    3820:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    3822:	f7ff ffd5 	bl	37d0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    3826:	f000 ff47 	bl	46b8 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    382a:	2004      	movs	r0, #4
    382c:	f7ff ffd0 	bl	37d0 <z_sys_init_run_level>

	z_init_static_threads();
    3830:	f000 f930 	bl	3a94 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    3834:	f004 f934 	bl	7aa0 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3838:	4a03      	ldr	r2, [pc, #12]	; (3848 <bg_thread_main+0x30>)
    383a:	7b13      	ldrb	r3, [r2, #12]
    383c:	f023 0301 	bic.w	r3, r3, #1
    3840:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3842:	bd08      	pop	{r3, pc}
    3844:	200019cb 	.word	0x200019cb
    3848:	20000350 	.word	0x20000350

0000384c <z_bss_zero>:
{
    384c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    384e:	4803      	ldr	r0, [pc, #12]	; (385c <z_bss_zero+0x10>)
    3850:	4a03      	ldr	r2, [pc, #12]	; (3860 <z_bss_zero+0x14>)
    3852:	2100      	movs	r1, #0
    3854:	1a12      	subs	r2, r2, r0
    3856:	f003 ffda 	bl	780e <z_early_memset>
}
    385a:	bd08      	pop	{r3, pc}
    385c:	200001b0 	.word	0x200001b0
    3860:	200019d0 	.word	0x200019d0

00003864 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    3864:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    3866:	2300      	movs	r3, #0
{
    3868:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    386a:	2201      	movs	r2, #1
    386c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    3870:	4e13      	ldr	r6, [pc, #76]	; (38c0 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3872:	4d14      	ldr	r5, [pc, #80]	; (38c4 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    3874:	9301      	str	r3, [sp, #4]
    3876:	220f      	movs	r2, #15
    3878:	e9cd 3202 	strd	r3, r2, [sp, #8]
    387c:	4912      	ldr	r1, [pc, #72]	; (38c8 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    387e:	2314      	movs	r3, #20
    3880:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    3884:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    3888:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    388a:	f44f 70c0 	mov.w	r0, #384	; 0x180
    388e:	fb00 1104 	mla	r1, r0, r4, r1
    3892:	4b0e      	ldr	r3, [pc, #56]	; (38cc <z_init_cpu+0x68>)
    3894:	9500      	str	r5, [sp, #0]
    3896:	f44f 72a0 	mov.w	r2, #320	; 0x140
    389a:	4630      	mov	r0, r6
    389c:	f000 f8c8 	bl	3a30 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    38a0:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    38a2:	4a0b      	ldr	r2, [pc, #44]	; (38d0 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    38a4:	60ee      	str	r6, [r5, #12]
    38a6:	f023 0304 	bic.w	r3, r3, #4
    38aa:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    38ac:	f44f 6304 	mov.w	r3, #2112	; 0x840
    38b0:	fb04 3303 	mla	r3, r4, r3, r3
    38b4:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    38b6:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
    38b8:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    38ba:	b006      	add	sp, #24
    38bc:	bd70      	pop	{r4, r5, r6, pc}
    38be:	bf00      	nop
    38c0:	200002d0 	.word	0x200002d0
    38c4:	20000abc 	.word	0x20000abc
    38c8:	200026c0 	.word	0x200026c0
    38cc:	00003b4d 	.word	0x00003b4d
    38d0:	20001e80 	.word	0x20001e80

000038d4 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    38d4:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    38d6:	2000      	movs	r0, #0
{
    38d8:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    38da:	f7ff ff79 	bl	37d0 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    38de:	4b2d      	ldr	r3, [pc, #180]	; (3994 <z_cstart+0xc0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    38e0:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    38e4:	4d2c      	ldr	r5, [pc, #176]	; (3998 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    38e6:	4e2d      	ldr	r6, [pc, #180]	; (399c <z_cstart+0xc8>)
    38e8:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    38ea:	4f2d      	ldr	r7, [pc, #180]	; (39a0 <z_cstart+0xcc>)
    38ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    38f0:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    38f2:	2400      	movs	r4, #0
    38f4:	23e0      	movs	r3, #224	; 0xe0
    38f6:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    38fa:	77ec      	strb	r4, [r5, #31]
    38fc:	762c      	strb	r4, [r5, #24]
    38fe:	766c      	strb	r4, [r5, #25]
    3900:	76ac      	strb	r4, [r5, #26]
    3902:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3906:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3908:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    390c:	626b      	str	r3, [r5, #36]	; 0x24
    390e:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3912:	f7fd ff59 	bl	17c8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3916:	f7fd fcc7 	bl	12a8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    391a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    391e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3920:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3922:	f7fe f88b 	bl	1a3c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3926:	f7fd fff1 	bl	190c <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    392a:	f240 1301 	movw	r3, #257	; 0x101
    392e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    3932:	ab06      	add	r3, sp, #24
    3934:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    3936:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    393a:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    393c:	f003 ff40 	bl	77c0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    3940:	2001      	movs	r0, #1
    3942:	f7ff ff45 	bl	37d0 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    3946:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    3948:	4d16      	ldr	r5, [pc, #88]	; (39a4 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    394a:	f7ff ff41 	bl	37d0 <z_sys_init_run_level>
	z_sched_init();
    394e:	f000 fc4f 	bl	41f0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3952:	4b15      	ldr	r3, [pc, #84]	; (39a8 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    3954:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3956:	9305      	str	r3, [sp, #20]
    3958:	2301      	movs	r3, #1
    395a:	4914      	ldr	r1, [pc, #80]	; (39ac <z_cstart+0xd8>)
    395c:	9400      	str	r4, [sp, #0]
    395e:	e9cd 4303 	strd	r4, r3, [sp, #12]
    3962:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3966:	463b      	mov	r3, r7
    3968:	e9cd 4401 	strd	r4, r4, [sp, #4]
    396c:	4628      	mov	r0, r5
    396e:	f000 f85f 	bl	3a30 <z_setup_new_thread>
    3972:	7b6a      	ldrb	r2, [r5, #13]
    3974:	4606      	mov	r6, r0
    3976:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    397a:	4628      	mov	r0, r5
    397c:	736a      	strb	r2, [r5, #13]
    397e:	f003 fff9 	bl	7974 <z_ready_thread>
	z_init_cpu(0);
    3982:	4620      	mov	r0, r4
    3984:	f7ff ff6e 	bl	3864 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3988:	463a      	mov	r2, r7
    398a:	4631      	mov	r1, r6
    398c:	4628      	mov	r0, r5
    398e:	f7fd fd99 	bl	14c4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3992:	bf00      	nop
    3994:	200026c0 	.word	0x200026c0
    3998:	e000ed00 	.word	0xe000ed00
    399c:	20000abc 	.word	0x20000abc
    39a0:	00003819 	.word	0x00003819
    39a4:	20000350 	.word	0x20000350
    39a8:	000082fc 	.word	0x000082fc
    39ac:	20002840 	.word	0x20002840

000039b0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
    39b0:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    39b2:	4c06      	ldr	r4, [pc, #24]	; (39cc <init_mem_slab_module+0x1c>)
    39b4:	4d06      	ldr	r5, [pc, #24]	; (39d0 <init_mem_slab_module+0x20>)
	int rc = 0;
    39b6:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    39b8:	42ac      	cmp	r4, r5
    39ba:	d300      	bcc.n	39be <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    39bc:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    39be:	4620      	mov	r0, r4
    39c0:	f003 ff29 	bl	7816 <create_free_list>
		if (rc < 0) {
    39c4:	2800      	cmp	r0, #0
    39c6:	dbf9      	blt.n	39bc <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    39c8:	341c      	adds	r4, #28
    39ca:	e7f5      	b.n	39b8 <init_mem_slab_module+0x8>
    39cc:	20000150 	.word	0x20000150
    39d0:	20000150 	.word	0x20000150

000039d4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    39d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    39d6:	460c      	mov	r4, r1
	__asm__ volatile(
    39d8:	f04f 0520 	mov.w	r5, #32
    39dc:	f3ef 8111 	mrs	r1, BASEPRI
    39e0:	f385 8812 	msr	BASEPRI_MAX, r5
    39e4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    39e8:	6945      	ldr	r5, [r0, #20]
    39ea:	b15d      	cbz	r5, 3a04 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    39ec:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    39ee:	682b      	ldr	r3, [r5, #0]
    39f0:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    39f2:	6983      	ldr	r3, [r0, #24]
    39f4:	3301      	adds	r3, #1
    39f6:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    39f8:	2000      	movs	r0, #0
	__asm__ volatile(
    39fa:	f381 8811 	msr	BASEPRI, r1
    39fe:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    3a02:	e011      	b.n	3a28 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    3a04:	ea52 0603 	orrs.w	r6, r2, r3
    3a08:	d103      	bne.n	3a12 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    3a0a:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    3a0c:	f06f 000b 	mvn.w	r0, #11
    3a10:	e7f3      	b.n	39fa <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    3a12:	e9cd 2300 	strd	r2, r3, [sp]
    3a16:	4602      	mov	r2, r0
    3a18:	3008      	adds	r0, #8
    3a1a:	f000 faf3 	bl	4004 <z_pend_curr>
		if (result == 0) {
    3a1e:	b918      	cbnz	r0, 3a28 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    3a20:	4b02      	ldr	r3, [pc, #8]	; (3a2c <k_mem_slab_alloc+0x58>)
    3a22:	689b      	ldr	r3, [r3, #8]
    3a24:	695b      	ldr	r3, [r3, #20]
    3a26:	6023      	str	r3, [r4, #0]
}
    3a28:	b002      	add	sp, #8
    3a2a:	bd70      	pop	{r4, r5, r6, pc}
    3a2c:	20000abc 	.word	0x20000abc

00003a30 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3a30:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    3a34:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    3a36:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    3a38:	2604      	movs	r6, #4
    3a3a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    3a3c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    3a3e:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    3a40:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    3a44:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3a46:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    3a48:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3a4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    3a4e:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3a50:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    3a54:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    3a56:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    3a5a:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    3a5e:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    3a60:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    3a62:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3a64:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3a68:	9202      	str	r2, [sp, #8]
    3a6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3a6c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    3a6e:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3a70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3a72:	9200      	str	r2, [sp, #0]
    3a74:	4642      	mov	r2, r8
{
    3a76:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3a78:	f7fd fcf2 	bl	1460 <arch_new_thread>
	if (!_current) {
    3a7c:	4b04      	ldr	r3, [pc, #16]	; (3a90 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    3a7e:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    3a80:	689b      	ldr	r3, [r3, #8]
    3a82:	b103      	cbz	r3, 3a86 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    3a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    3a86:	6723      	str	r3, [r4, #112]	; 0x70
}
    3a88:	4640      	mov	r0, r8
    3a8a:	b004      	add	sp, #16
    3a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a90:	20000abc 	.word	0x20000abc

00003a94 <z_init_static_threads>:
{
    3a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3a98:	4c29      	ldr	r4, [pc, #164]	; (3b40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa8>)
	_FOREACH_STATIC_THREAD(thread_data) {
    3a9a:	4d2a      	ldr	r5, [pc, #168]	; (3b44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xac>)
{
    3a9c:	b087      	sub	sp, #28
    3a9e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    3aa0:	42ae      	cmp	r6, r5
    3aa2:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    3aa6:	d30f      	bcc.n	3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>
	k_sched_lock();
    3aa8:	f000 fb72 	bl	4190 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3aac:	4c24      	ldr	r4, [pc, #144]	; (3b40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa8>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3aae:	f8df 9098 	ldr.w	r9, [pc, #152]	; 3b48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb0>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    3ab2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    3ab6:	f240 37e7 	movw	r7, #999	; 0x3e7
    3aba:	42ac      	cmp	r4, r5
    3abc:	d320      	bcc.n	3b00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x68>
}
    3abe:	b007      	add	sp, #28
    3ac0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    3ac4:	f000 bb78 	b.w	41b8 <k_sched_unlock>
		z_setup_new_thread(
    3ac8:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3acc:	9305      	str	r3, [sp, #20]
    3ace:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    3ad2:	9304      	str	r3, [sp, #16]
    3ad4:	f854 3c10 	ldr.w	r3, [r4, #-16]
    3ad8:	9303      	str	r3, [sp, #12]
    3ada:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3ade:	9302      	str	r3, [sp, #8]
    3ae0:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3ae4:	9301      	str	r3, [sp, #4]
    3ae6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3aea:	9300      	str	r3, [sp, #0]
    3aec:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    3af0:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    3af4:	f7ff ff9c 	bl	3a30 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3af8:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    3afc:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    3afe:	e7ce      	b.n	3a9e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3b00:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3b02:	1c5a      	adds	r2, r3, #1
    3b04:	d00d      	beq.n	3b22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8a>
					    K_MSEC(thread_data->init_delay));
    3b06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3b0a:	2100      	movs	r1, #0
    3b0c:	4638      	mov	r0, r7
    3b0e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3b12:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    3b16:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3b1a:	d104      	bne.n	3b26 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8e>
	z_sched_start(thread);
    3b1c:	4640      	mov	r0, r8
    3b1e:	f000 fae7 	bl	40f0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    3b22:	342c      	adds	r4, #44	; 0x2c
    3b24:	e7c9      	b.n	3aba <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x22>
    3b26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3b2a:	2300      	movs	r3, #0
    3b2c:	f7fc fae8 	bl	100 <__aeabi_uldivmod>
    3b30:	4602      	mov	r2, r0
    3b32:	460b      	mov	r3, r1
    3b34:	f108 0018 	add.w	r0, r8, #24
    3b38:	4649      	mov	r1, r9
    3b3a:	f000 fcc3 	bl	44c4 <z_add_timeout>
    3b3e:	e7f0      	b.n	3b22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8a>
    3b40:	00007d28 	.word	0x00007d28
    3b44:	00007d80 	.word	0x00007d80
    3b48:	000079d9 	.word	0x000079d9

00003b4c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    3b4c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    3b4e:	4c0b      	ldr	r4, [pc, #44]	; (3b7c <idle+0x30>)
	return !z_sys_post_kernel;
    3b50:	4d0b      	ldr	r5, [pc, #44]	; (3b80 <idle+0x34>)
	__asm__ volatile(
    3b52:	f04f 0220 	mov.w	r2, #32
    3b56:	f3ef 8311 	mrs	r3, BASEPRI
    3b5a:	f382 8812 	msr	BASEPRI_MAX, r2
    3b5e:	f3bf 8f6f 	isb	sy
    3b62:	f003 ff85 	bl	7a70 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    3b66:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    3b68:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    3b6a:	b913      	cbnz	r3, 3b72 <idle+0x26>
	arch_cpu_idle();
    3b6c:	f7fd fba2 	bl	12b4 <arch_cpu_idle>
}
    3b70:	e7ef      	b.n	3b52 <idle+0x6>
    3b72:	f7fd f9df 	bl	f34 <pm_system_suspend>
    3b76:	2800      	cmp	r0, #0
    3b78:	d1eb      	bne.n	3b52 <idle+0x6>
    3b7a:	e7f7      	b.n	3b6c <idle+0x20>
    3b7c:	20000abc 	.word	0x20000abc
    3b80:	200019cb 	.word	0x200019cb

00003b84 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    3b84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3b88:	4604      	mov	r4, r0
    3b8a:	4617      	mov	r7, r2
    3b8c:	461e      	mov	r6, r3
    3b8e:	f04f 0320 	mov.w	r3, #32
    3b92:	f3ef 8811 	mrs	r8, BASEPRI
    3b96:	f383 8812 	msr	BASEPRI_MAX, r3
    3b9a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3b9e:	68c3      	ldr	r3, [r0, #12]
    3ba0:	4a33      	ldr	r2, [pc, #204]	; (3c70 <z_impl_k_mutex_lock+0xec>)
    3ba2:	b17b      	cbz	r3, 3bc4 <z_impl_k_mutex_lock+0x40>
    3ba4:	6880      	ldr	r0, [r0, #8]
    3ba6:	6891      	ldr	r1, [r2, #8]
    3ba8:	4288      	cmp	r0, r1
    3baa:	d019      	beq.n	3be0 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    3bac:	ea57 0306 	orrs.w	r3, r7, r6
    3bb0:	d118      	bne.n	3be4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    3bb2:	f388 8811 	msr	BASEPRI, r8
    3bb6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    3bba:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    3bbe:	b002      	add	sp, #8
    3bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    3bc4:	6891      	ldr	r1, [r2, #8]
    3bc6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    3bca:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    3bcc:	3301      	adds	r3, #1
    3bce:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    3bd0:	6893      	ldr	r3, [r2, #8]
    3bd2:	60a3      	str	r3, [r4, #8]
    3bd4:	f388 8811 	msr	BASEPRI, r8
    3bd8:	f3bf 8f6f 	isb	sy
		return 0;
    3bdc:	2000      	movs	r0, #0
    3bde:	e7ee      	b.n	3bbe <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    3be0:	6921      	ldr	r1, [r4, #16]
    3be2:	e7f2      	b.n	3bca <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    3be4:	f991 100e 	ldrsb.w	r1, [r1, #14]
    3be8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    3bec:	4299      	cmp	r1, r3
    3bee:	bfa8      	it	ge
    3bf0:	4619      	movge	r1, r3
    3bf2:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    3bf6:	4291      	cmp	r1, r2
    3bf8:	bfb8      	it	lt
    3bfa:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3bfc:	428b      	cmp	r3, r1
    3bfe:	dd2e      	ble.n	3c5e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    3c00:	f003 fe63 	bl	78ca <adjust_owner_prio.isra.0>
    3c04:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    3c06:	e9cd 7600 	strd	r7, r6, [sp]
    3c0a:	481a      	ldr	r0, [pc, #104]	; (3c74 <z_impl_k_mutex_lock+0xf0>)
    3c0c:	4622      	mov	r2, r4
    3c0e:	4641      	mov	r1, r8
    3c10:	f000 f9f8 	bl	4004 <z_pend_curr>
	if (got_mutex == 0) {
    3c14:	2800      	cmp	r0, #0
    3c16:	d0e1      	beq.n	3bdc <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    3c18:	f04f 0320 	mov.w	r3, #32
    3c1c:	f3ef 8611 	mrs	r6, BASEPRI
    3c20:	f383 8812 	msr	BASEPRI_MAX, r3
    3c24:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    3c28:	68a0      	ldr	r0, [r4, #8]
    3c2a:	b1d0      	cbz	r0, 3c62 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3c2c:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    3c2e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3c30:	429c      	cmp	r4, r3
    3c32:	d00a      	beq.n	3c4a <z_impl_k_mutex_lock+0xc6>
    3c34:	b14b      	cbz	r3, 3c4a <z_impl_k_mutex_lock+0xc6>
    3c36:	f993 300e 	ldrsb.w	r3, [r3, #14]
    3c3a:	4299      	cmp	r1, r3
    3c3c:	bfa8      	it	ge
    3c3e:	4619      	movge	r1, r3
    3c40:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    3c44:	4299      	cmp	r1, r3
    3c46:	bfb8      	it	lt
    3c48:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    3c4a:	f003 fe3e 	bl	78ca <adjust_owner_prio.isra.0>
    3c4e:	b140      	cbz	r0, 3c62 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    3c50:	4808      	ldr	r0, [pc, #32]	; (3c74 <z_impl_k_mutex_lock+0xf0>)
    3c52:	4631      	mov	r1, r6
    3c54:	f000 fa3a 	bl	40cc <z_reschedule>
	return -EAGAIN;
    3c58:	f06f 000a 	mvn.w	r0, #10
    3c5c:	e7af      	b.n	3bbe <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    3c5e:	2500      	movs	r5, #0
    3c60:	e7d1      	b.n	3c06 <z_impl_k_mutex_lock+0x82>
	if (resched) {
    3c62:	2d00      	cmp	r5, #0
    3c64:	d1f4      	bne.n	3c50 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    3c66:	f386 8811 	msr	BASEPRI, r6
    3c6a:	f3bf 8f6f 	isb	sy
    3c6e:	e7f3      	b.n	3c58 <z_impl_k_mutex_lock+0xd4>
    3c70:	20000abc 	.word	0x20000abc
    3c74:	200019cc 	.word	0x200019cc

00003c78 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    3c78:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    3c7a:	6883      	ldr	r3, [r0, #8]
{
    3c7c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    3c7e:	b36b      	cbz	r3, 3cdc <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    3c80:	4a19      	ldr	r2, [pc, #100]	; (3ce8 <z_impl_k_mutex_unlock+0x70>)
    3c82:	6892      	ldr	r2, [r2, #8]
    3c84:	4293      	cmp	r3, r2
    3c86:	d12c      	bne.n	3ce2 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    3c88:	68c3      	ldr	r3, [r0, #12]
    3c8a:	2b01      	cmp	r3, #1
    3c8c:	d903      	bls.n	3c96 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    3c8e:	3b01      	subs	r3, #1
    3c90:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    3c92:	2000      	movs	r0, #0
}
    3c94:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    3c96:	f04f 0320 	mov.w	r3, #32
    3c9a:	f3ef 8511 	mrs	r5, BASEPRI
    3c9e:	f383 8812 	msr	BASEPRI_MAX, r3
    3ca2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    3ca6:	6901      	ldr	r1, [r0, #16]
    3ca8:	6880      	ldr	r0, [r0, #8]
    3caa:	f003 fe0e 	bl	78ca <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    3cae:	4620      	mov	r0, r4
    3cb0:	f003 fe96 	bl	79e0 <z_unpend_first_thread>
	mutex->owner = new_owner;
    3cb4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    3cb6:	b158      	cbz	r0, 3cd0 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    3cb8:	f990 200e 	ldrsb.w	r2, [r0, #14]
    3cbc:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3cbe:	2200      	movs	r2, #0
    3cc0:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    3cc2:	f003 fe57 	bl	7974 <z_ready_thread>
		z_reschedule(&lock, key);
    3cc6:	4809      	ldr	r0, [pc, #36]	; (3cec <z_impl_k_mutex_unlock+0x74>)
    3cc8:	4629      	mov	r1, r5
    3cca:	f000 f9ff 	bl	40cc <z_reschedule>
    3cce:	e7e0      	b.n	3c92 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    3cd0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    3cd2:	f385 8811 	msr	BASEPRI, r5
    3cd6:	f3bf 8f6f 	isb	sy
    3cda:	e7da      	b.n	3c92 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    3cdc:	f06f 0015 	mvn.w	r0, #21
    3ce0:	e7d8      	b.n	3c94 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    3ce2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3ce6:	e7d5      	b.n	3c94 <z_impl_k_mutex_unlock+0x1c>
    3ce8:	20000abc 	.word	0x20000abc
    3cec:	200019cc 	.word	0x200019cc

00003cf0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3cf0:	b538      	push	{r3, r4, r5, lr}
    3cf2:	4604      	mov	r4, r0
	__asm__ volatile(
    3cf4:	f04f 0320 	mov.w	r3, #32
    3cf8:	f3ef 8511 	mrs	r5, BASEPRI
    3cfc:	f383 8812 	msr	BASEPRI_MAX, r3
    3d00:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    3d04:	f003 fe6c 	bl	79e0 <z_unpend_first_thread>

	if (thread != NULL) {
    3d08:	b148      	cbz	r0, 3d1e <z_impl_k_sem_give+0x2e>
    3d0a:	2200      	movs	r2, #0
    3d0c:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3d0e:	f003 fe31 	bl	7974 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3d12:	4629      	mov	r1, r5
    3d14:	4805      	ldr	r0, [pc, #20]	; (3d2c <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    3d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    3d1a:	f000 b9d7 	b.w	40cc <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3d1e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3d22:	429a      	cmp	r2, r3
    3d24:	bf18      	it	ne
    3d26:	3301      	addne	r3, #1
    3d28:	60a3      	str	r3, [r4, #8]
}
    3d2a:	e7f2      	b.n	3d12 <z_impl_k_sem_give+0x22>
    3d2c:	200019cc 	.word	0x200019cc

00003d30 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3d30:	b513      	push	{r0, r1, r4, lr}
    3d32:	f04f 0420 	mov.w	r4, #32
    3d36:	f3ef 8111 	mrs	r1, BASEPRI
    3d3a:	f384 8812 	msr	BASEPRI_MAX, r4
    3d3e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    3d42:	6884      	ldr	r4, [r0, #8]
    3d44:	b144      	cbz	r4, 3d58 <z_impl_k_sem_take+0x28>
		sem->count--;
    3d46:	3c01      	subs	r4, #1
    3d48:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    3d4a:	f381 8811 	msr	BASEPRI, r1
    3d4e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    3d52:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    3d54:	b002      	add	sp, #8
    3d56:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3d58:	ea52 0403 	orrs.w	r4, r2, r3
    3d5c:	d106      	bne.n	3d6c <z_impl_k_sem_take+0x3c>
    3d5e:	f381 8811 	msr	BASEPRI, r1
    3d62:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    3d66:	f06f 000f 	mvn.w	r0, #15
    3d6a:	e7f3      	b.n	3d54 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3d6c:	e9cd 2300 	strd	r2, r3, [sp]
    3d70:	4602      	mov	r2, r0
    3d72:	4802      	ldr	r0, [pc, #8]	; (3d7c <z_impl_k_sem_take+0x4c>)
    3d74:	f000 f946 	bl	4004 <z_pend_curr>
	return ret;
    3d78:	e7ec      	b.n	3d54 <z_impl_k_sem_take+0x24>
    3d7a:	bf00      	nop
    3d7c:	200019cc 	.word	0x200019cc

00003d80 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    3d80:	89c3      	ldrh	r3, [r0, #14]
    3d82:	2b7f      	cmp	r3, #127	; 0x7f
    3d84:	d812      	bhi.n	3dac <sliceable+0x2c>
	int ret = slice_ticks;
    3d86:	4b0a      	ldr	r3, [pc, #40]	; (3db0 <sliceable+0x30>)
    3d88:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    3d8a:	b163      	cbz	r3, 3da6 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    3d8c:	4b09      	ldr	r3, [pc, #36]	; (3db4 <sliceable+0x34>)
    3d8e:	f990 200e 	ldrsb.w	r2, [r0, #14]
    3d92:	681b      	ldr	r3, [r3, #0]
    3d94:	429a      	cmp	r2, r3
    3d96:	db09      	blt.n	3dac <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    3d98:	7b43      	ldrb	r3, [r0, #13]
    3d9a:	06db      	lsls	r3, r3, #27
    3d9c:	d106      	bne.n	3dac <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    3d9e:	4b06      	ldr	r3, [pc, #24]	; (3db8 <sliceable+0x38>)
    3da0:	1ac3      	subs	r3, r0, r3
    3da2:	bf18      	it	ne
    3da4:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    3da6:	f003 0001 	and.w	r0, r3, #1
    3daa:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    3dac:	2300      	movs	r3, #0
    3dae:	e7fa      	b.n	3da6 <sliceable+0x26>
    3db0:	20000ae8 	.word	0x20000ae8
    3db4:	20000ae4 	.word	0x20000ae4
    3db8:	200002d0 	.word	0x200002d0

00003dbc <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    3dbc:	4b04      	ldr	r3, [pc, #16]	; (3dd0 <slice_timeout+0x14>)
    3dbe:	1ac0      	subs	r0, r0, r3
    3dc0:	4b04      	ldr	r3, [pc, #16]	; (3dd4 <slice_timeout+0x18>)
    3dc2:	10c0      	asrs	r0, r0, #3
    3dc4:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
    3dc6:	4b04      	ldr	r3, [pc, #16]	; (3dd8 <slice_timeout+0x1c>)
    3dc8:	2201      	movs	r2, #1
    3dca:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    3dcc:	4770      	bx	lr
    3dce:	bf00      	nop
    3dd0:	200003d0 	.word	0x200003d0
    3dd4:	aaaaaaab 	.word	0xaaaaaaab
    3dd8:	200019cc 	.word	0x200019cc

00003ddc <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    3ddc:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    3dde:	4b0e      	ldr	r3, [pc, #56]	; (3e18 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    3de0:	4c0e      	ldr	r4, [pc, #56]	; (3e1c <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    3de2:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    3de4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    3de8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
    3dec:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    3dee:	4620      	mov	r0, r4
    3df0:	f003 fe28 	bl	7a44 <z_abort_timeout>
	slice_expired[cpu] = false;
    3df4:	4b0a      	ldr	r3, [pc, #40]	; (3e20 <z_reset_time_slice+0x44>)
    3df6:	2200      	movs	r2, #0
	if (sliceable(curr)) {
    3df8:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    3dfa:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    3dfc:	f7ff ffc0 	bl	3d80 <sliceable>
    3e00:	b148      	cbz	r0, 3e16 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    3e02:	4b08      	ldr	r3, [pc, #32]	; (3e24 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    3e04:	4908      	ldr	r1, [pc, #32]	; (3e28 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    3e06:	681a      	ldr	r2, [r3, #0]
    3e08:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    3e0a:	4620      	mov	r0, r4
    3e0c:	17d3      	asrs	r3, r2, #31
	}
}
    3e0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    3e12:	f000 bb57 	b.w	44c4 <z_add_timeout>
}
    3e16:	bd70      	pop	{r4, r5, r6, pc}
    3e18:	20000abc 	.word	0x20000abc
    3e1c:	200003d0 	.word	0x200003d0
    3e20:	200019cc 	.word	0x200019cc
    3e24:	20000ae8 	.word	0x20000ae8
    3e28:	00003dbd 	.word	0x00003dbd

00003e2c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    3e2c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    3e2e:	4d0d      	ldr	r5, [pc, #52]	; (3e64 <update_cache+0x38>)
    3e30:	462b      	mov	r3, r5
    3e32:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3e36:	429c      	cmp	r4, r3
    3e38:	d000      	beq.n	3e3c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3e3a:	b904      	cbnz	r4, 3e3e <update_cache+0x12>
    3e3c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    3e3e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    3e40:	b938      	cbnz	r0, 3e52 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    3e42:	7b5a      	ldrb	r2, [r3, #13]
    3e44:	06d2      	lsls	r2, r2, #27
    3e46:	d104      	bne.n	3e52 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3e48:	69a2      	ldr	r2, [r4, #24]
    3e4a:	b912      	cbnz	r2, 3e52 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    3e4c:	89da      	ldrh	r2, [r3, #14]
    3e4e:	2a7f      	cmp	r2, #127	; 0x7f
    3e50:	d805      	bhi.n	3e5e <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    3e52:	429c      	cmp	r4, r3
    3e54:	d002      	beq.n	3e5c <update_cache+0x30>
			z_reset_time_slice(thread);
    3e56:	4620      	mov	r0, r4
    3e58:	f7ff ffc0 	bl	3ddc <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    3e5c:	4623      	mov	r3, r4
    3e5e:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    3e60:	bd38      	pop	{r3, r4, r5, pc}
    3e62:	bf00      	nop
    3e64:	20000abc 	.word	0x20000abc

00003e68 <move_thread_to_end_of_prio_q>:
{
    3e68:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    3e6a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    3e6e:	7b43      	ldrb	r3, [r0, #13]
    3e70:	2a00      	cmp	r2, #0
{
    3e72:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3e74:	da04      	bge.n	3e80 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3e7a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    3e7c:	f003 fd40 	bl	7900 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    3e80:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    3e82:	4a15      	ldr	r2, [pc, #84]	; (3ed8 <move_thread_to_end_of_prio_q+0x70>)
    3e84:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3e88:	4610      	mov	r0, r2
    3e8a:	734b      	strb	r3, [r1, #13]
    3e8c:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    3e90:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3e92:	4283      	cmp	r3, r0
    3e94:	bf08      	it	eq
    3e96:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3e98:	b923      	cbnz	r3, 3ea4 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    3e9a:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    3e9e:	6021      	str	r1, [r4, #0]
	list->tail = node;
    3ea0:	6211      	str	r1, [r2, #32]
}
    3ea2:	e00c      	b.n	3ebe <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    3ea4:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    3ea8:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    3eac:	42b5      	cmp	r5, r6
    3eae:	d00e      	beq.n	3ece <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3eb0:	42ae      	cmp	r6, r5
    3eb2:	dd0c      	ble.n	3ece <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    3eb4:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    3eb6:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    3eba:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    3ebc:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    3ebe:	6890      	ldr	r0, [r2, #8]
    3ec0:	1a43      	subs	r3, r0, r1
    3ec2:	4258      	negs	r0, r3
}
    3ec4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    3ec8:	4158      	adcs	r0, r3
    3eca:	f7ff bfaf 	b.w	3e2c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3ece:	429c      	cmp	r4, r3
    3ed0:	d0e3      	beq.n	3e9a <move_thread_to_end_of_prio_q+0x32>
    3ed2:	681b      	ldr	r3, [r3, #0]
    3ed4:	e7e0      	b.n	3e98 <move_thread_to_end_of_prio_q+0x30>
    3ed6:	bf00      	nop
    3ed8:	20000abc 	.word	0x20000abc

00003edc <ready_thread>:
{
    3edc:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3ede:	f990 300d 	ldrsb.w	r3, [r0, #13]
    3ee2:	7b42      	ldrb	r2, [r0, #13]
    3ee4:	2b00      	cmp	r3, #0
    3ee6:	db29      	blt.n	3f3c <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3ee8:	06d3      	lsls	r3, r2, #27
    3eea:	d127      	bne.n	3f3c <ready_thread+0x60>
	return node->next != NULL;
    3eec:	6983      	ldr	r3, [r0, #24]
    3eee:	bb2b      	cbnz	r3, 3f3c <ready_thread+0x60>
	return list->head == list;
    3ef0:	4913      	ldr	r1, [pc, #76]	; (3f40 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    3ef2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3ef6:	7342      	strb	r2, [r0, #13]
    3ef8:	460a      	mov	r2, r1
    3efa:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3efe:	4294      	cmp	r4, r2
    3f00:	bf18      	it	ne
    3f02:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    3f04:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3f06:	b923      	cbnz	r3, 3f12 <ready_thread+0x36>
	node->prev = tail;
    3f08:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    3f0c:	6020      	str	r0, [r4, #0]
	list->tail = node;
    3f0e:	6208      	str	r0, [r1, #32]
}
    3f10:	e00c      	b.n	3f2c <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    3f12:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    3f16:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    3f1a:	42b5      	cmp	r5, r6
    3f1c:	d00a      	beq.n	3f34 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3f1e:	42ae      	cmp	r6, r5
    3f20:	dd08      	ble.n	3f34 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    3f22:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3f24:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    3f28:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    3f2a:	6058      	str	r0, [r3, #4]
}
    3f2c:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    3f2e:	2000      	movs	r0, #0
    3f30:	f7ff bf7c 	b.w	3e2c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3f34:	42a3      	cmp	r3, r4
    3f36:	d0e7      	beq.n	3f08 <ready_thread+0x2c>
    3f38:	681b      	ldr	r3, [r3, #0]
    3f3a:	e7e4      	b.n	3f06 <ready_thread+0x2a>
}
    3f3c:	bc70      	pop	{r4, r5, r6}
    3f3e:	4770      	bx	lr
    3f40:	20000abc 	.word	0x20000abc

00003f44 <unready_thread>:
{
    3f44:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    3f46:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    3f4a:	7b43      	ldrb	r3, [r0, #13]
    3f4c:	2a00      	cmp	r2, #0
{
    3f4e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3f50:	da04      	bge.n	3f5c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3f56:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3f58:	f003 fcd2 	bl	7900 <sys_dlist_remove>
	update_cache(thread == _current);
    3f5c:	4b04      	ldr	r3, [pc, #16]	; (3f70 <unready_thread+0x2c>)
    3f5e:	6898      	ldr	r0, [r3, #8]
    3f60:	1a43      	subs	r3, r0, r1
    3f62:	4258      	negs	r0, r3
    3f64:	4158      	adcs	r0, r3
}
    3f66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    3f6a:	f7ff bf5f 	b.w	3e2c <update_cache>
    3f6e:	bf00      	nop
    3f70:	20000abc 	.word	0x20000abc

00003f74 <pend_locked>:
{
    3f74:	b570      	push	{r4, r5, r6, lr}
    3f76:	4615      	mov	r5, r2
    3f78:	461c      	mov	r4, r3
    3f7a:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    3f7c:	f003 fcd2 	bl	7924 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3f80:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    3f84:	bf08      	it	eq
    3f86:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    3f8a:	d008      	beq.n	3f9e <pend_locked+0x2a>
    3f8c:	462a      	mov	r2, r5
    3f8e:	4623      	mov	r3, r4
    3f90:	f106 0018 	add.w	r0, r6, #24
    3f94:	4902      	ldr	r1, [pc, #8]	; (3fa0 <pend_locked+0x2c>)
}
    3f96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3f9a:	f000 ba93 	b.w	44c4 <z_add_timeout>
    3f9e:	bd70      	pop	{r4, r5, r6, pc}
    3fa0:	000079d9 	.word	0x000079d9

00003fa4 <z_time_slice>:
{
    3fa4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3fa6:	f04f 0320 	mov.w	r3, #32
    3faa:	f3ef 8511 	mrs	r5, BASEPRI
    3fae:	f383 8812 	msr	BASEPRI_MAX, r3
    3fb2:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    3fb6:	4b10      	ldr	r3, [pc, #64]	; (3ff8 <z_time_slice+0x54>)
	if (pending_current == curr) {
    3fb8:	4a10      	ldr	r2, [pc, #64]	; (3ffc <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    3fba:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    3fbc:	6810      	ldr	r0, [r2, #0]
    3fbe:	42a0      	cmp	r0, r4
    3fc0:	d106      	bne.n	3fd0 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    3fc2:	f7ff ff0b 	bl	3ddc <z_reset_time_slice>
	__asm__ volatile(
    3fc6:	f385 8811 	msr	BASEPRI, r5
    3fca:	f3bf 8f6f 	isb	sy
}
    3fce:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    3fd0:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    3fd2:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    3fd4:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    3fd6:	4a0a      	ldr	r2, [pc, #40]	; (4000 <CONFIG_COVERAGE_GCOV_HEAP_SIZE>)
    3fd8:	5cd3      	ldrb	r3, [r2, r3]
    3fda:	2b00      	cmp	r3, #0
    3fdc:	d0f3      	beq.n	3fc6 <z_time_slice+0x22>
    3fde:	4620      	mov	r0, r4
    3fe0:	f7ff fece 	bl	3d80 <sliceable>
    3fe4:	2800      	cmp	r0, #0
    3fe6:	d0ee      	beq.n	3fc6 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    3fe8:	7b63      	ldrb	r3, [r4, #13]
    3fea:	06db      	lsls	r3, r3, #27
    3fec:	d102      	bne.n	3ff4 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    3fee:	4620      	mov	r0, r4
    3ff0:	f7ff ff3a 	bl	3e68 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    3ff4:	4620      	mov	r0, r4
    3ff6:	e7e4      	b.n	3fc2 <z_time_slice+0x1e>
    3ff8:	20000abc 	.word	0x20000abc
    3ffc:	20000ae0 	.word	0x20000ae0
    4000:	200019cc 	.word	0x200019cc

00004004 <z_pend_curr>:
{
    4004:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    4006:	480c      	ldr	r0, [pc, #48]	; (4038 <z_pend_curr+0x34>)
    4008:	4d0c      	ldr	r5, [pc, #48]	; (403c <z_pend_curr+0x38>)
    400a:	6886      	ldr	r6, [r0, #8]
    400c:	602e      	str	r6, [r5, #0]
{
    400e:	460c      	mov	r4, r1
    4010:	4611      	mov	r1, r2
    4012:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    4016:	f04f 0620 	mov.w	r6, #32
    401a:	f3ef 8511 	mrs	r5, BASEPRI
    401e:	f386 8812 	msr	BASEPRI_MAX, r6
    4022:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    4026:	6880      	ldr	r0, [r0, #8]
    4028:	f7ff ffa4 	bl	3f74 <pend_locked>
	ret = arch_swap(key);
    402c:	4620      	mov	r0, r4
}
    402e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4032:	f7fd b9c1 	b.w	13b8 <arch_swap>
    4036:	bf00      	nop
    4038:	20000abc 	.word	0x20000abc
    403c:	20000ae0 	.word	0x20000ae0

00004040 <z_set_prio>:
{
    4040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4042:	4604      	mov	r4, r0
    4044:	f04f 0320 	mov.w	r3, #32
    4048:	f3ef 8611 	mrs	r6, BASEPRI
    404c:	f383 8812 	msr	BASEPRI_MAX, r3
    4050:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    4054:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4056:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    4058:	b249      	sxtb	r1, r1
    405a:	d119      	bne.n	4090 <z_set_prio+0x50>
	return node->next != NULL;
    405c:	6985      	ldr	r5, [r0, #24]
    405e:	b9bd      	cbnz	r5, 4090 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4064:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4066:	f003 fc4b 	bl	7900 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    406a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    406c:	4a16      	ldr	r2, [pc, #88]	; (40c8 <z_set_prio+0x88>)
				thread->base.prio = prio;
    406e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    4070:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4074:	7343      	strb	r3, [r0, #13]
    4076:	4613      	mov	r3, r2
    4078:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    407c:	4298      	cmp	r0, r3
    407e:	bf18      	it	ne
    4080:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    4082:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4084:	b95d      	cbnz	r5, 409e <z_set_prio+0x5e>
	node->prev = tail;
    4086:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    408a:	6004      	str	r4, [r0, #0]
	list->tail = node;
    408c:	6214      	str	r4, [r2, #32]
}
    408e:	e011      	b.n	40b4 <z_set_prio+0x74>
			thread->base.prio = prio;
    4090:	73a1      	strb	r1, [r4, #14]
    4092:	2000      	movs	r0, #0
	__asm__ volatile(
    4094:	f386 8811 	msr	BASEPRI, r6
    4098:	f3bf 8f6f 	isb	sy
}
    409c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    409e:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    40a2:	42b9      	cmp	r1, r7
    40a4:	d00b      	beq.n	40be <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    40a6:	428f      	cmp	r7, r1
    40a8:	dd09      	ble.n	40be <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    40aa:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    40ac:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    40b0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    40b2:	606c      	str	r4, [r5, #4]
			update_cache(1);
    40b4:	2001      	movs	r0, #1
    40b6:	f7ff feb9 	bl	3e2c <update_cache>
    40ba:	2001      	movs	r0, #1
    40bc:	e7ea      	b.n	4094 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    40be:	42a8      	cmp	r0, r5
    40c0:	d0e1      	beq.n	4086 <z_set_prio+0x46>
    40c2:	682d      	ldr	r5, [r5, #0]
    40c4:	e7de      	b.n	4084 <z_set_prio+0x44>
    40c6:	bf00      	nop
    40c8:	20000abc 	.word	0x20000abc

000040cc <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    40cc:	b949      	cbnz	r1, 40e2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    40ce:	f3ef 8005 	mrs	r0, IPSR
    40d2:	b930      	cbnz	r0, 40e2 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    40d4:	4b05      	ldr	r3, [pc, #20]	; (40ec <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    40d6:	699a      	ldr	r2, [r3, #24]
    40d8:	689b      	ldr	r3, [r3, #8]
    40da:	429a      	cmp	r2, r3
    40dc:	d001      	beq.n	40e2 <z_reschedule+0x16>
    40de:	f7fd b96b 	b.w	13b8 <arch_swap>
    40e2:	f381 8811 	msr	BASEPRI, r1
    40e6:	f3bf 8f6f 	isb	sy
}
    40ea:	4770      	bx	lr
    40ec:	20000abc 	.word	0x20000abc

000040f0 <z_sched_start>:
{
    40f0:	b510      	push	{r4, lr}
	__asm__ volatile(
    40f2:	f04f 0220 	mov.w	r2, #32
    40f6:	f3ef 8411 	mrs	r4, BASEPRI
    40fa:	f382 8812 	msr	BASEPRI_MAX, r2
    40fe:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    4102:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    4104:	0751      	lsls	r1, r2, #29
    4106:	d404      	bmi.n	4112 <z_sched_start+0x22>
	__asm__ volatile(
    4108:	f384 8811 	msr	BASEPRI, r4
    410c:	f3bf 8f6f 	isb	sy
}
    4110:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4112:	f022 0204 	bic.w	r2, r2, #4
    4116:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    4118:	f7ff fee0 	bl	3edc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    411c:	4621      	mov	r1, r4
    411e:	4802      	ldr	r0, [pc, #8]	; (4128 <z_sched_start+0x38>)
}
    4120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    4124:	f7ff bfd2 	b.w	40cc <z_reschedule>
    4128:	200019cd 	.word	0x200019cd

0000412c <z_impl_k_thread_suspend>:
{
    412c:	b570      	push	{r4, r5, r6, lr}
    412e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4130:	3018      	adds	r0, #24
    4132:	f003 fc87 	bl	7a44 <z_abort_timeout>
	__asm__ volatile(
    4136:	f04f 0320 	mov.w	r3, #32
    413a:	f3ef 8611 	mrs	r6, BASEPRI
    413e:	f383 8812 	msr	BASEPRI_MAX, r3
    4142:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    4146:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    414a:	7b63      	ldrb	r3, [r4, #13]
    414c:	2a00      	cmp	r2, #0
    414e:	da05      	bge.n	415c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4154:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4156:	4620      	mov	r0, r4
    4158:	f003 fbd2 	bl	7900 <sys_dlist_remove>
		update_cache(thread == _current);
    415c:	4d0b      	ldr	r5, [pc, #44]	; (418c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    415e:	7b63      	ldrb	r3, [r4, #13]
    4160:	68a8      	ldr	r0, [r5, #8]
    4162:	f043 0310 	orr.w	r3, r3, #16
    4166:	7363      	strb	r3, [r4, #13]
    4168:	1b03      	subs	r3, r0, r4
    416a:	4258      	negs	r0, r3
    416c:	4158      	adcs	r0, r3
    416e:	f7ff fe5d 	bl	3e2c <update_cache>
	__asm__ volatile(
    4172:	f386 8811 	msr	BASEPRI, r6
    4176:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    417a:	68ab      	ldr	r3, [r5, #8]
    417c:	42a3      	cmp	r3, r4
    417e:	d103      	bne.n	4188 <z_impl_k_thread_suspend+0x5c>
}
    4180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    4184:	f003 bc54 	b.w	7a30 <z_reschedule_unlocked>
}
    4188:	bd70      	pop	{r4, r5, r6, pc}
    418a:	bf00      	nop
    418c:	20000abc 	.word	0x20000abc

00004190 <k_sched_lock>:
	__asm__ volatile(
    4190:	f04f 0320 	mov.w	r3, #32
    4194:	f3ef 8111 	mrs	r1, BASEPRI
    4198:	f383 8812 	msr	BASEPRI_MAX, r3
    419c:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    41a0:	4b04      	ldr	r3, [pc, #16]	; (41b4 <k_sched_lock+0x24>)
    41a2:	689a      	ldr	r2, [r3, #8]
    41a4:	7bd3      	ldrb	r3, [r2, #15]
    41a6:	3b01      	subs	r3, #1
    41a8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    41aa:	f381 8811 	msr	BASEPRI, r1
    41ae:	f3bf 8f6f 	isb	sy
}
    41b2:	4770      	bx	lr
    41b4:	20000abc 	.word	0x20000abc

000041b8 <k_sched_unlock>:
{
    41b8:	b510      	push	{r4, lr}
	__asm__ volatile(
    41ba:	f04f 0320 	mov.w	r3, #32
    41be:	f3ef 8411 	mrs	r4, BASEPRI
    41c2:	f383 8812 	msr	BASEPRI_MAX, r3
    41c6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    41ca:	4b08      	ldr	r3, [pc, #32]	; (41ec <k_sched_unlock+0x34>)
    41cc:	689a      	ldr	r2, [r3, #8]
    41ce:	7bd3      	ldrb	r3, [r2, #15]
    41d0:	3301      	adds	r3, #1
    41d2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    41d4:	2000      	movs	r0, #0
    41d6:	f7ff fe29 	bl	3e2c <update_cache>
	__asm__ volatile(
    41da:	f384 8811 	msr	BASEPRI, r4
    41de:	f3bf 8f6f 	isb	sy
}
    41e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    41e6:	f003 bc23 	b.w	7a30 <z_reschedule_unlocked>
    41ea:	bf00      	nop
    41ec:	20000abc 	.word	0x20000abc

000041f0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    41f0:	4b02      	ldr	r3, [pc, #8]	; (41fc <z_sched_init+0xc>)
    41f2:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    41f6:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    41fa:	4770      	bx	lr
    41fc:	20000abc 	.word	0x20000abc

00004200 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    4200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    4202:	f04f 0320 	mov.w	r3, #32
    4206:	f3ef 8511 	mrs	r5, BASEPRI
    420a:	f383 8812 	msr	BASEPRI_MAX, r3
    420e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    4212:	4919      	ldr	r1, [pc, #100]	; (4278 <z_impl_k_yield+0x78>)
    4214:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4216:	7b43      	ldrb	r3, [r0, #13]
    4218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    421c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    421e:	f003 fb6f 	bl	7900 <sys_dlist_remove>
	}
	queue_thread(_current);
    4222:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4224:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    4226:	4608      	mov	r0, r1
    4228:	f062 027f 	orn	r2, r2, #127	; 0x7f
    422c:	735a      	strb	r2, [r3, #13]
    422e:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    4232:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4234:	4282      	cmp	r2, r0
    4236:	bf08      	it	eq
    4238:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    423a:	b922      	cbnz	r2, 4246 <z_impl_k_yield+0x46>
	node->prev = tail;
    423c:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    4240:	6023      	str	r3, [r4, #0]
	list->tail = node;
    4242:	620b      	str	r3, [r1, #32]
}
    4244:	e00c      	b.n	4260 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    4246:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    424a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    424e:	42be      	cmp	r6, r7
    4250:	d00e      	beq.n	4270 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4252:	42b7      	cmp	r7, r6
    4254:	dd0c      	ble.n	4270 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    4256:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    4258:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    425c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    425e:	6053      	str	r3, [r2, #4]
	update_cache(1);
    4260:	2001      	movs	r0, #1
    4262:	f7ff fde3 	bl	3e2c <update_cache>
    4266:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    4268:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    426c:	f7fd b8a4 	b.w	13b8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    4270:	42a2      	cmp	r2, r4
    4272:	d0e3      	beq.n	423c <z_impl_k_yield+0x3c>
    4274:	6812      	ldr	r2, [r2, #0]
    4276:	e7e0      	b.n	423a <z_impl_k_yield+0x3a>
    4278:	20000abc 	.word	0x20000abc

0000427c <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    427c:	ea50 0301 	orrs.w	r3, r0, r1
{
    4280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4284:	4605      	mov	r5, r0
    4286:	460e      	mov	r6, r1
	if (ticks == 0) {
    4288:	d103      	bne.n	4292 <z_tick_sleep+0x16>
	z_impl_k_yield();
    428a:	f7ff ffb9 	bl	4200 <z_impl_k_yield>
		k_yield();
		return 0;
    428e:	2000      	movs	r0, #0
    4290:	e02c      	b.n	42ec <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    4292:	1c83      	adds	r3, r0, #2
    4294:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    4298:	db2a      	blt.n	42f0 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    429a:	f003 fbf9 	bl	7a90 <sys_clock_tick_get_32>
    429e:	182c      	adds	r4, r5, r0
    42a0:	f04f 0320 	mov.w	r3, #32
    42a4:	f3ef 8811 	mrs	r8, BASEPRI
    42a8:	f383 8812 	msr	BASEPRI_MAX, r3
    42ac:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    42b0:	4f11      	ldr	r7, [pc, #68]	; (42f8 <z_tick_sleep+0x7c>)
    42b2:	4b12      	ldr	r3, [pc, #72]	; (42fc <z_tick_sleep+0x80>)
    42b4:	68b8      	ldr	r0, [r7, #8]
    42b6:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    42b8:	f7ff fe44 	bl	3f44 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    42bc:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    42be:	4910      	ldr	r1, [pc, #64]	; (4300 <z_tick_sleep+0x84>)
    42c0:	462a      	mov	r2, r5
    42c2:	4633      	mov	r3, r6
    42c4:	3018      	adds	r0, #24
    42c6:	f000 f8fd 	bl	44c4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    42ca:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    42cc:	7b53      	ldrb	r3, [r2, #13]
    42ce:	f043 0310 	orr.w	r3, r3, #16
    42d2:	7353      	strb	r3, [r2, #13]
    42d4:	4640      	mov	r0, r8
    42d6:	f7fd f86f 	bl	13b8 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    42da:	f003 fbd9 	bl	7a90 <sys_clock_tick_get_32>
    42de:	1a20      	subs	r0, r4, r0
    42e0:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    42e4:	2801      	cmp	r0, #1
    42e6:	f173 0300 	sbcs.w	r3, r3, #0
    42ea:	dbd0      	blt.n	428e <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    42ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    42f0:	f06f 0401 	mvn.w	r4, #1
    42f4:	1a24      	subs	r4, r4, r0
    42f6:	e7d3      	b.n	42a0 <z_tick_sleep+0x24>
    42f8:	20000abc 	.word	0x20000abc
    42fc:	20000ae0 	.word	0x20000ae0
    4300:	000079d9 	.word	0x000079d9

00004304 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4304:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    4308:	bf08      	it	eq
    430a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    430e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4310:	d106      	bne.n	4320 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    4312:	4b08      	ldr	r3, [pc, #32]	; (4334 <z_impl_k_sleep+0x30>)
    4314:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4316:	f7ff ff09 	bl	412c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    431a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    431e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    4320:	f7ff ffac 	bl	427c <z_tick_sleep>
    4324:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4328:	fb80 0303 	smull	r0, r3, r0, r3
    432c:	0bc0      	lsrs	r0, r0, #15
    432e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    4332:	e7f4      	b.n	431e <z_impl_k_sleep+0x1a>
    4334:	20000abc 	.word	0x20000abc

00004338 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    4338:	4b01      	ldr	r3, [pc, #4]	; (4340 <z_impl_z_current_get+0x8>)
    433a:	6898      	ldr	r0, [r3, #8]
    433c:	4770      	bx	lr
    433e:	bf00      	nop
    4340:	20000abc 	.word	0x20000abc

00004344 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    4344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4348:	4604      	mov	r4, r0
    434a:	f04f 0320 	mov.w	r3, #32
    434e:	f3ef 8611 	mrs	r6, BASEPRI
    4352:	f383 8812 	msr	BASEPRI_MAX, r3
    4356:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    435a:	7b03      	ldrb	r3, [r0, #12]
    435c:	07d9      	lsls	r1, r3, #31
    435e:	d50b      	bpl.n	4378 <z_thread_abort+0x34>
	__asm__ volatile(
    4360:	f386 8811 	msr	BASEPRI, r6
    4364:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    4368:	4040      	eors	r0, r0
    436a:	f380 8811 	msr	BASEPRI, r0
    436e:	f04f 0004 	mov.w	r0, #4
    4372:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    4374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    4378:	7b43      	ldrb	r3, [r0, #13]
    437a:	071a      	lsls	r2, r3, #28
    437c:	d504      	bpl.n	4388 <z_thread_abort+0x44>
    437e:	f386 8811 	msr	BASEPRI, r6
    4382:	f3bf 8f6f 	isb	sy
    4386:	e7f5      	b.n	4374 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4388:	f023 0220 	bic.w	r2, r3, #32
    438c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    4390:	09d2      	lsrs	r2, r2, #7
    4392:	d120      	bne.n	43d6 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4394:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    4396:	68a3      	ldr	r3, [r4, #8]
    4398:	b113      	cbz	r3, 43a0 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    439a:	4620      	mov	r0, r4
    439c:	f003 fab8 	bl	7910 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    43a0:	f104 0018 	add.w	r0, r4, #24
    43a4:	f003 fb4e 	bl	7a44 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    43a8:	f104 0758 	add.w	r7, r4, #88	; 0x58
    43ac:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    43b0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    43b2:	42bd      	cmp	r5, r7
    43b4:	d000      	beq.n	43b8 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    43b6:	b9b5      	cbnz	r5, 43e6 <z_thread_abort+0xa2>
		update_cache(1);
    43b8:	2001      	movs	r0, #1
    43ba:	f7ff fd37 	bl	3e2c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    43be:	4b10      	ldr	r3, [pc, #64]	; (4400 <z_thread_abort+0xbc>)
    43c0:	689b      	ldr	r3, [r3, #8]
    43c2:	42a3      	cmp	r3, r4
    43c4:	d1db      	bne.n	437e <z_thread_abort+0x3a>
    43c6:	f3ef 8305 	mrs	r3, IPSR
    43ca:	2b00      	cmp	r3, #0
    43cc:	d1d7      	bne.n	437e <z_thread_abort+0x3a>
    43ce:	4630      	mov	r0, r6
    43d0:	f7fc fff2 	bl	13b8 <arch_swap>
	return ret;
    43d4:	e7d3      	b.n	437e <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    43d6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    43da:	f043 0308 	orr.w	r3, r3, #8
    43de:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    43e0:	f003 fa8e 	bl	7900 <sys_dlist_remove>
}
    43e4:	e7d7      	b.n	4396 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    43e6:	4628      	mov	r0, r5
    43e8:	f003 fa92 	bl	7910 <unpend_thread_no_timeout>
    43ec:	f105 0018 	add.w	r0, r5, #24
    43f0:	f003 fb28 	bl	7a44 <z_abort_timeout>
    43f4:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    43f8:	4628      	mov	r0, r5
    43fa:	f7ff fd6f 	bl	3edc <ready_thread>
    43fe:	e7d7      	b.n	43b0 <z_thread_abort+0x6c>
    4400:	20000abc 	.word	0x20000abc

00004404 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    4404:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    4406:	4806      	ldr	r0, [pc, #24]	; (4420 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    4408:	4a06      	ldr	r2, [pc, #24]	; (4424 <z_data_copy+0x20>)
    440a:	4907      	ldr	r1, [pc, #28]	; (4428 <z_data_copy+0x24>)
    440c:	1a12      	subs	r2, r2, r0
    440e:	f003 fa00 	bl	7812 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4412:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    4416:	4a05      	ldr	r2, [pc, #20]	; (442c <z_data_copy+0x28>)
    4418:	4905      	ldr	r1, [pc, #20]	; (4430 <z_data_copy+0x2c>)
    441a:	4806      	ldr	r0, [pc, #24]	; (4434 <z_data_copy+0x30>)
    441c:	f003 b9f9 	b.w	7812 <z_early_memcpy>
    4420:	20000000 	.word	0x20000000
    4424:	200001b0 	.word	0x200001b0
    4428:	00008334 	.word	0x00008334
    442c:	00000000 	.word	0x00000000
    4430:	00008334 	.word	0x00008334
    4434:	20000000 	.word	0x20000000

00004438 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4438:	4b03      	ldr	r3, [pc, #12]	; (4448 <elapsed+0x10>)
    443a:	681b      	ldr	r3, [r3, #0]
    443c:	b90b      	cbnz	r3, 4442 <elapsed+0xa>
    443e:	f7fe bc21 	b.w	2c84 <sys_clock_elapsed>
}
    4442:	2000      	movs	r0, #0
    4444:	4770      	bx	lr
    4446:	bf00      	nop
    4448:	20000aec 	.word	0x20000aec

0000444c <next_timeout>:

static int32_t next_timeout(void)
{
    444c:	b510      	push	{r4, lr}
	return list->head == list;
    444e:	4b0e      	ldr	r3, [pc, #56]	; (4488 <next_timeout+0x3c>)
    4450:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4452:	429c      	cmp	r4, r3
    4454:	d104      	bne.n	4460 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    4456:	f7ff ffef 	bl	4438 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    445a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    445e:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    4460:	f7ff ffea 	bl	4438 <elapsed>
	if ((to == NULL) ||
    4464:	2c00      	cmp	r4, #0
    4466:	d0f8      	beq.n	445a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    4468:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    446c:	1a1b      	subs	r3, r3, r0
    446e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    4472:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    4476:	f172 0100 	sbcs.w	r1, r2, #0
    447a:	daee      	bge.n	445a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    447c:	2a00      	cmp	r2, #0
    447e:	bfac      	ite	ge
    4480:	4618      	movge	r0, r3
    4482:	2000      	movlt	r0, #0
	return ret;
    4484:	e7eb      	b.n	445e <next_timeout+0x12>
    4486:	bf00      	nop
    4488:	200000cc 	.word	0x200000cc

0000448c <remove_timeout>:
{
    448c:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    448e:	b170      	cbz	r0, 44ae <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    4490:	4b0b      	ldr	r3, [pc, #44]	; (44c0 <remove_timeout+0x34>)
    4492:	685b      	ldr	r3, [r3, #4]
    4494:	4298      	cmp	r0, r3
    4496:	d00a      	beq.n	44ae <remove_timeout+0x22>
    4498:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    449a:	b143      	cbz	r3, 44ae <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    449c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    44a0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    44a4:	1912      	adds	r2, r2, r4
    44a6:	eb41 0105 	adc.w	r1, r1, r5
    44aa:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    44ae:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    44b2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    44b4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    44b6:	2300      	movs	r3, #0
	node->prev = NULL;
    44b8:	e9c0 3300 	strd	r3, r3, [r0]
}
    44bc:	bd30      	pop	{r4, r5, pc}
    44be:	bf00      	nop
    44c0:	200000cc 	.word	0x200000cc

000044c4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    44c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    44c8:	bf08      	it	eq
    44ca:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    44ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44d0:	4604      	mov	r4, r0
    44d2:	461d      	mov	r5, r3
    44d4:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    44d6:	d05c      	beq.n	4592 <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    44d8:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    44da:	f04f 0320 	mov.w	r3, #32
    44de:	f3ef 8711 	mrs	r7, BASEPRI
    44e2:	f383 8812 	msr	BASEPRI_MAX, r3
    44e6:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    44ea:	3201      	adds	r2, #1
    44ec:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    44f0:	da24      	bge.n	453c <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    44f2:	492d      	ldr	r1, [pc, #180]	; (45a8 <z_add_timeout+0xe4>)
    44f4:	e9d1 2000 	ldrd	r2, r0, [r1]
    44f8:	f06f 0301 	mvn.w	r3, #1
    44fc:	1a9b      	subs	r3, r3, r2
    44fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4502:	eb62 0000 	sbc.w	r0, r2, r0
    4506:	1b9e      	subs	r6, r3, r6
    4508:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    450c:	2e01      	cmp	r6, #1
    450e:	f170 0300 	sbcs.w	r3, r0, #0
    4512:	da01      	bge.n	4518 <z_add_timeout+0x54>
    4514:	2601      	movs	r6, #1
    4516:	2000      	movs	r0, #0
    4518:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    451c:	4e23      	ldr	r6, [pc, #140]	; (45ac <z_add_timeout+0xe8>)
    451e:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    4522:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4524:	45b4      	cmp	ip, r6
    4526:	bf08      	it	eq
    4528:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    452c:	f1bc 0f00 	cmp.w	ip, #0
    4530:	d10d      	bne.n	454e <z_add_timeout+0x8a>
	node->prev = tail;
    4532:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    4536:	602c      	str	r4, [r5, #0]
	list->tail = node;
    4538:	6074      	str	r4, [r6, #4]
}
    453a:	e01c      	b.n	4576 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    453c:	f7ff ff7c 	bl	4438 <elapsed>
    4540:	3601      	adds	r6, #1
    4542:	f145 0500 	adc.w	r5, r5, #0
    4546:	1836      	adds	r6, r6, r0
    4548:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    454c:	e7e4      	b.n	4518 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    454e:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    4552:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    4556:	4293      	cmp	r3, r2
    4558:	eb71 0e00 	sbcs.w	lr, r1, r0
    455c:	da1a      	bge.n	4594 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    455e:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    4560:	f8dc 3004 	ldr.w	r3, [ip, #4]
    4564:	eb60 0001 	sbc.w	r0, r0, r1
    4568:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    456c:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    4570:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    4572:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    4576:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4578:	42b3      	cmp	r3, r6
    457a:	d006      	beq.n	458a <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    457c:	429c      	cmp	r4, r3
    457e:	d104      	bne.n	458a <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    4580:	f7ff ff64 	bl	444c <next_timeout>
    4584:	2100      	movs	r1, #0
    4586:	f7fe fb4b 	bl	2c20 <sys_clock_set_timeout>
	__asm__ volatile(
    458a:	f387 8811 	msr	BASEPRI, r7
    458e:	f3bf 8f6f 	isb	sy
		}
	}
}
    4592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    4594:	1a9b      	subs	r3, r3, r2
    4596:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    459a:	45ac      	cmp	ip, r5
    459c:	e9c4 3104 	strd	r3, r1, [r4, #16]
    45a0:	d0c7      	beq.n	4532 <z_add_timeout+0x6e>
    45a2:	f8dc c000 	ldr.w	ip, [ip]
    45a6:	e7c1      	b.n	452c <z_add_timeout+0x68>
    45a8:	200003e8 	.word	0x200003e8
    45ac:	200000cc 	.word	0x200000cc

000045b0 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    45b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    45b4:	f04f 0320 	mov.w	r3, #32
    45b8:	f3ef 8c11 	mrs	ip, BASEPRI
    45bc:	f383 8812 	msr	BASEPRI_MAX, r3
    45c0:	f3bf 8f6f 	isb	sy
	return list->head == list;
    45c4:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 4678 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    45c8:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 467c <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    45cc:	4f2c      	ldr	r7, [pc, #176]	; (4680 <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
    45ce:	f8c9 0000 	str.w	r0, [r9]
    45d2:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    45d6:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    45d8:	4550      	cmp	r0, sl
    45da:	bf08      	it	eq
    45dc:	2000      	moveq	r0, #0
    45de:	2500      	movs	r5, #0
		curr_tick += dt;
    45e0:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    45e4:	f8d9 3000 	ldr.w	r3, [r9]
    45e8:	46e0      	mov	r8, ip
    45ea:	b380      	cbz	r0, 464e <sys_clock_announce+0x9e>
    45ec:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    45f0:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    45f4:	42b3      	cmp	r3, r6
    45f6:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    45fa:	da05      	bge.n	4608 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    45fc:	1af6      	subs	r6, r6, r3
    45fe:	eb6c 040e 	sbc.w	r4, ip, lr
    4602:	e9c0 6404 	strd	r6, r4, [r0, #16]
    4606:	e022      	b.n	464e <sys_clock_announce+0x9e>
		curr_tick += dt;
    4608:	18b2      	adds	r2, r6, r2
    460a:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    460e:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    4612:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    4616:	f7ff ff39 	bl	448c <remove_timeout>
	__asm__ volatile(
    461a:	f388 8811 	msr	BASEPRI, r8
    461e:	f3bf 8f6f 	isb	sy
		t->fn(t);
    4622:	6883      	ldr	r3, [r0, #8]
    4624:	4798      	blx	r3
	__asm__ volatile(
    4626:	f04f 0320 	mov.w	r3, #32
    462a:	f3ef 8811 	mrs	r8, BASEPRI
    462e:	f383 8812 	msr	BASEPRI_MAX, r3
    4632:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    4636:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    463a:	f8da 0000 	ldr.w	r0, [sl]
    463e:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4640:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    4642:	46c4      	mov	ip, r8
    4644:	f8c9 3000 	str.w	r3, [r9]
    4648:	d1ca      	bne.n	45e0 <sys_clock_announce+0x30>
		curr_tick += dt;
    464a:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
    464e:	189a      	adds	r2, r3, r2
    4650:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
    4654:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    4656:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    465a:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    465e:	f7ff fef5 	bl	444c <next_timeout>
    4662:	4621      	mov	r1, r4
    4664:	f7fe fadc 	bl	2c20 <sys_clock_set_timeout>
	__asm__ volatile(
    4668:	f388 8811 	msr	BASEPRI, r8
    466c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    4670:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    4674:	f7ff bc96 	b.w	3fa4 <z_time_slice>
    4678:	200000cc 	.word	0x200000cc
    467c:	20000aec 	.word	0x20000aec
    4680:	200003e8 	.word	0x200003e8

00004684 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    4684:	b510      	push	{r4, lr}
	__asm__ volatile(
    4686:	f04f 0320 	mov.w	r3, #32
    468a:	f3ef 8411 	mrs	r4, BASEPRI
    468e:	f383 8812 	msr	BASEPRI_MAX, r3
    4692:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    4696:	f7ff fecf 	bl	4438 <elapsed>
    469a:	4a06      	ldr	r2, [pc, #24]	; (46b4 <sys_clock_tick_get+0x30>)
    469c:	4603      	mov	r3, r0
    469e:	e9d2 0100 	ldrd	r0, r1, [r2]
    46a2:	1818      	adds	r0, r3, r0
    46a4:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    46a8:	f384 8811 	msr	BASEPRI, r4
    46ac:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    46b0:	bd10      	pop	{r4, pc}
    46b2:	bf00      	nop
    46b4:	200003e8 	.word	0x200003e8

000046b8 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    46b8:	4801      	ldr	r0, [pc, #4]	; (46c0 <boot_banner+0x8>)
    46ba:	f002 bc65 	b.w	6f88 <printk>
    46be:	bf00      	nop
    46c0:	00008304 	.word	0x00008304

000046c4 <nrf_cc3xx_platform_init>:
    46c4:	b510      	push	{r4, lr}
    46c6:	4c0c      	ldr	r4, [pc, #48]	; (46f8 <nrf_cc3xx_platform_init+0x34>)
    46c8:	6823      	ldr	r3, [r4, #0]
    46ca:	b113      	cbz	r3, 46d2 <nrf_cc3xx_platform_init+0xe>
    46cc:	4b0b      	ldr	r3, [pc, #44]	; (46fc <nrf_cc3xx_platform_init+0x38>)
    46ce:	681b      	ldr	r3, [r3, #0]
    46d0:	b92b      	cbnz	r3, 46de <nrf_cc3xx_platform_init+0x1a>
    46d2:	f000 fe29 	bl	5328 <CC_LibInit>
    46d6:	b930      	cbnz	r0, 46e6 <nrf_cc3xx_platform_init+0x22>
    46d8:	4b08      	ldr	r3, [pc, #32]	; (46fc <nrf_cc3xx_platform_init+0x38>)
    46da:	2201      	movs	r2, #1
    46dc:	601a      	str	r2, [r3, #0]
    46de:	2301      	movs	r3, #1
    46e0:	6023      	str	r3, [r4, #0]
    46e2:	2000      	movs	r0, #0
    46e4:	bd10      	pop	{r4, pc}
    46e6:	3801      	subs	r0, #1
    46e8:	2806      	cmp	r0, #6
    46ea:	d901      	bls.n	46f0 <nrf_cc3xx_platform_init+0x2c>
    46ec:	4804      	ldr	r0, [pc, #16]	; (4700 <nrf_cc3xx_platform_init+0x3c>)
    46ee:	bd10      	pop	{r4, pc}
    46f0:	4b04      	ldr	r3, [pc, #16]	; (4704 <nrf_cc3xx_platform_init+0x40>)
    46f2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    46f6:	bd10      	pop	{r4, pc}
    46f8:	20000af4 	.word	0x20000af4
    46fc:	20000af0 	.word	0x20000af0
    4700:	ffff8ffe 	.word	0xffff8ffe
    4704:	00007f50 	.word	0x00007f50

00004708 <nrf_cc3xx_platform_abort>:
    4708:	f3bf 8f4f 	dsb	sy
    470c:	4905      	ldr	r1, [pc, #20]	; (4724 <nrf_cc3xx_platform_abort+0x1c>)
    470e:	4b06      	ldr	r3, [pc, #24]	; (4728 <nrf_cc3xx_platform_abort+0x20>)
    4710:	68ca      	ldr	r2, [r1, #12]
    4712:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4716:	4313      	orrs	r3, r2
    4718:	60cb      	str	r3, [r1, #12]
    471a:	f3bf 8f4f 	dsb	sy
    471e:	bf00      	nop
    4720:	e7fd      	b.n	471e <nrf_cc3xx_platform_abort+0x16>
    4722:	bf00      	nop
    4724:	e000ed00 	.word	0xe000ed00
    4728:	05fa0004 	.word	0x05fa0004

0000472c <CC_PalAbort>:
    472c:	b410      	push	{r4}
    472e:	4b09      	ldr	r3, [pc, #36]	; (4754 <CC_PalAbort+0x28>)
    4730:	4909      	ldr	r1, [pc, #36]	; (4758 <CC_PalAbort+0x2c>)
    4732:	4c0a      	ldr	r4, [pc, #40]	; (475c <CC_PalAbort+0x30>)
    4734:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    4738:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    473c:	6849      	ldr	r1, [r1, #4]
    473e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    4742:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    4746:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    474a:	2300      	movs	r3, #0
    474c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    4750:	bc10      	pop	{r4}
    4752:	4708      	bx	r1
    4754:	5002b000 	.word	0x5002b000
    4758:	200000d4 	.word	0x200000d4
    475c:	5002a000 	.word	0x5002a000

00004760 <nrf_cc3xx_platform_set_abort>:
    4760:	e9d0 1200 	ldrd	r1, r2, [r0]
    4764:	4b01      	ldr	r3, [pc, #4]	; (476c <nrf_cc3xx_platform_set_abort+0xc>)
    4766:	e9c3 1200 	strd	r1, r2, [r3]
    476a:	4770      	bx	lr
    476c:	200000d4 	.word	0x200000d4

00004770 <nrf_cc3xx_platform_ctr_drbg_init>:
    4770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4774:	4b13      	ldr	r3, [pc, #76]	; (47c4 <nrf_cc3xx_platform_ctr_drbg_init+0x54>)
    4776:	4e14      	ldr	r6, [pc, #80]	; (47c8 <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
    4778:	2800      	cmp	r0, #0
    477a:	bf14      	ite	ne
    477c:	4604      	movne	r4, r0
    477e:	461c      	moveq	r4, r3
    4780:	b083      	sub	sp, #12
    4782:	6823      	ldr	r3, [r4, #0]
    4784:	42b3      	cmp	r3, r6
    4786:	d019      	beq.n	47bc <nrf_cc3xx_platform_ctr_drbg_init+0x4c>
    4788:	460d      	mov	r5, r1
    478a:	4620      	mov	r0, r4
    478c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    4790:	f104 0904 	add.w	r9, r4, #4
    4794:	4617      	mov	r7, r2
    4796:	f504 788e 	add.w	r8, r4, #284	; 0x11c
    479a:	f000 f8e9 	bl	4970 <mbedtls_platform_zeroize>
    479e:	4648      	mov	r0, r9
    47a0:	f000 fcac 	bl	50fc <cc_mbedtls_entropy_init>
    47a4:	4640      	mov	r0, r8
    47a6:	f000 fadb 	bl	4d60 <cc_mbedtls_ctr_drbg_init>
    47aa:	4908      	ldr	r1, [pc, #32]	; (47cc <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
    47ac:	9700      	str	r7, [sp, #0]
    47ae:	462b      	mov	r3, r5
    47b0:	464a      	mov	r2, r9
    47b2:	4640      	mov	r0, r8
    47b4:	f000 faea 	bl	4d8c <cc_mbedtls_ctr_drbg_seed>
    47b8:	b908      	cbnz	r0, 47be <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
    47ba:	6026      	str	r6, [r4, #0]
    47bc:	2000      	movs	r0, #0
    47be:	b003      	add	sp, #12
    47c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    47c4:	20000af8 	.word	0x20000af8
    47c8:	5ac9bca5 	.word	0x5ac9bca5
    47cc:	00005185 	.word	0x00005185

000047d0 <nrf_cc3xx_platform_ctr_drbg_get>:
    47d0:	b570      	push	{r4, r5, r6, lr}
    47d2:	461d      	mov	r5, r3
    47d4:	4b0c      	ldr	r3, [pc, #48]	; (4808 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
    47d6:	2800      	cmp	r0, #0
    47d8:	bf18      	it	ne
    47da:	4603      	movne	r3, r0
    47dc:	480b      	ldr	r0, [pc, #44]	; (480c <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
    47de:	681e      	ldr	r6, [r3, #0]
    47e0:	4286      	cmp	r6, r0
    47e2:	b082      	sub	sp, #8
    47e4:	d10d      	bne.n	4802 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
    47e6:	2600      	movs	r6, #0
    47e8:	f503 708e 	add.w	r0, r3, #284	; 0x11c
    47ec:	9600      	str	r6, [sp, #0]
    47ee:	4633      	mov	r3, r6
    47f0:	4614      	mov	r4, r2
    47f2:	f000 fb17 	bl	4e24 <cc_mbedtls_ctr_drbg_random_with_add>
    47f6:	2800      	cmp	r0, #0
    47f8:	bf18      	it	ne
    47fa:	4634      	movne	r4, r6
    47fc:	602c      	str	r4, [r5, #0]
    47fe:	b002      	add	sp, #8
    4800:	bd70      	pop	{r4, r5, r6, pc}
    4802:	4803      	ldr	r0, [pc, #12]	; (4810 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
    4804:	e7fb      	b.n	47fe <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
    4806:	bf00      	nop
    4808:	20000af8 	.word	0x20000af8
    480c:	5ac9bca5 	.word	0x5ac9bca5
    4810:	ffff8fe8 	.word	0xffff8fe8

00004814 <mutex_free>:
    4814:	b510      	push	{r4, lr}
    4816:	4604      	mov	r4, r0
    4818:	b150      	cbz	r0, 4830 <mutex_free+0x1c>
    481a:	6863      	ldr	r3, [r4, #4]
    481c:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    4820:	d005      	beq.n	482e <mutex_free+0x1a>
    4822:	4a06      	ldr	r2, [pc, #24]	; (483c <mutex_free+0x28>)
    4824:	4293      	cmp	r3, r2
    4826:	d002      	beq.n	482e <mutex_free+0x1a>
    4828:	2300      	movs	r3, #0
    482a:	6023      	str	r3, [r4, #0]
    482c:	6062      	str	r2, [r4, #4]
    482e:	bd10      	pop	{r4, pc}
    4830:	4b03      	ldr	r3, [pc, #12]	; (4840 <mutex_free+0x2c>)
    4832:	4804      	ldr	r0, [pc, #16]	; (4844 <mutex_free+0x30>)
    4834:	685b      	ldr	r3, [r3, #4]
    4836:	4798      	blx	r3
    4838:	e7ef      	b.n	481a <mutex_free+0x6>
    483a:	bf00      	nop
    483c:	a95c5f2c 	.word	0xa95c5f2c
    4840:	200000d4 	.word	0x200000d4
    4844:	00007f6c 	.word	0x00007f6c

00004848 <mutex_lock>:
    4848:	b1c8      	cbz	r0, 487e <mutex_lock+0x36>
    484a:	6843      	ldr	r3, [r0, #4]
    484c:	4a0d      	ldr	r2, [pc, #52]	; (4884 <mutex_lock+0x3c>)
    484e:	4293      	cmp	r3, r2
    4850:	d013      	beq.n	487a <mutex_lock+0x32>
    4852:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    4856:	d00e      	beq.n	4876 <mutex_lock+0x2e>
    4858:	2301      	movs	r3, #1
    485a:	e850 2f00 	ldrex	r2, [r0]
    485e:	4619      	mov	r1, r3
    4860:	e840 1c00 	strex	ip, r1, [r0]
    4864:	f09c 0f00 	teq	ip, #0
    4868:	d1f7      	bne.n	485a <mutex_lock+0x12>
    486a:	2a01      	cmp	r2, #1
    486c:	d0f5      	beq.n	485a <mutex_lock+0x12>
    486e:	f3bf 8f5f 	dmb	sy
    4872:	2000      	movs	r0, #0
    4874:	4770      	bx	lr
    4876:	4804      	ldr	r0, [pc, #16]	; (4888 <mutex_lock+0x40>)
    4878:	4770      	bx	lr
    487a:	4804      	ldr	r0, [pc, #16]	; (488c <mutex_lock+0x44>)
    487c:	4770      	bx	lr
    487e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4882:	4770      	bx	lr
    4884:	a95c5f2c 	.word	0xa95c5f2c
    4888:	ffff8fe9 	.word	0xffff8fe9
    488c:	ffff8fea 	.word	0xffff8fea

00004890 <mutex_unlock>:
    4890:	b180      	cbz	r0, 48b4 <mutex_unlock+0x24>
    4892:	6843      	ldr	r3, [r0, #4]
    4894:	4a09      	ldr	r2, [pc, #36]	; (48bc <mutex_unlock+0x2c>)
    4896:	4293      	cmp	r3, r2
    4898:	d00a      	beq.n	48b0 <mutex_unlock+0x20>
    489a:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    489e:	d005      	beq.n	48ac <mutex_unlock+0x1c>
    48a0:	f3bf 8f5f 	dmb	sy
    48a4:	2300      	movs	r3, #0
    48a6:	6003      	str	r3, [r0, #0]
    48a8:	4618      	mov	r0, r3
    48aa:	4770      	bx	lr
    48ac:	4804      	ldr	r0, [pc, #16]	; (48c0 <mutex_unlock+0x30>)
    48ae:	4770      	bx	lr
    48b0:	4804      	ldr	r0, [pc, #16]	; (48c4 <mutex_unlock+0x34>)
    48b2:	4770      	bx	lr
    48b4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    48b8:	4770      	bx	lr
    48ba:	bf00      	nop
    48bc:	a95c5f2c 	.word	0xa95c5f2c
    48c0:	ffff8fe9 	.word	0xffff8fe9
    48c4:	ffff8fea 	.word	0xffff8fea

000048c8 <mutex_init>:
    48c8:	b510      	push	{r4, lr}
    48ca:	4604      	mov	r4, r0
    48cc:	b120      	cbz	r0, 48d8 <mutex_init+0x10>
    48ce:	4b04      	ldr	r3, [pc, #16]	; (48e0 <mutex_init+0x18>)
    48d0:	6063      	str	r3, [r4, #4]
    48d2:	2200      	movs	r2, #0
    48d4:	6022      	str	r2, [r4, #0]
    48d6:	bd10      	pop	{r4, pc}
    48d8:	4802      	ldr	r0, [pc, #8]	; (48e4 <mutex_init+0x1c>)
    48da:	f7ff ff27 	bl	472c <CC_PalAbort>
    48de:	e7f6      	b.n	48ce <mutex_init+0x6>
    48e0:	3a00003a 	.word	0x3a00003a
    48e4:	00007f94 	.word	0x00007f94

000048e8 <nrf_cc3xx_platform_set_mutexes>:
    48e8:	b570      	push	{r4, r5, r6, lr}
    48ea:	e9d0 2300 	ldrd	r2, r3, [r0]
    48ee:	4c17      	ldr	r4, [pc, #92]	; (494c <nrf_cc3xx_platform_set_mutexes+0x64>)
    48f0:	4d17      	ldr	r5, [pc, #92]	; (4950 <nrf_cc3xx_platform_set_mutexes+0x68>)
    48f2:	6063      	str	r3, [r4, #4]
    48f4:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    48f8:	e9c4 3002 	strd	r3, r0, [r4, #8]
    48fc:	6022      	str	r2, [r4, #0]
    48fe:	6848      	ldr	r0, [r1, #4]
    4900:	f8d1 c000 	ldr.w	ip, [r1]
    4904:	4b13      	ldr	r3, [pc, #76]	; (4954 <nrf_cc3xx_platform_set_mutexes+0x6c>)
    4906:	e9c3 c000 	strd	ip, r0, [r3]
    490a:	f8d5 0118 	ldr.w	r0, [r5, #280]	; 0x118
    490e:	f8d1 c008 	ldr.w	ip, [r1, #8]
    4912:	f8c3 c008 	str.w	ip, [r3, #8]
    4916:	f010 5f68 	tst.w	r0, #973078528	; 0x3a000000
    491a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    491e:	6909      	ldr	r1, [r1, #16]
    4920:	f8c3 c00c 	str.w	ip, [r3, #12]
    4924:	6119      	str	r1, [r3, #16]
    4926:	d010      	beq.n	494a <nrf_cc3xx_platform_set_mutexes+0x62>
    4928:	490b      	ldr	r1, [pc, #44]	; (4958 <nrf_cc3xx_platform_set_mutexes+0x70>)
    492a:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
    492e:	2300      	movs	r3, #0
    4930:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
    4934:	f505 708a 	add.w	r0, r5, #276	; 0x114
    4938:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    493c:	4790      	blx	r2
    493e:	6823      	ldr	r3, [r4, #0]
    4940:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    4944:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4948:	4718      	bx	r3
    494a:	bd70      	pop	{r4, r5, r6, pc}
    494c:	200000f0 	.word	0x200000f0
    4950:	20000af8 	.word	0x20000af8
    4954:	200000dc 	.word	0x200000dc
    4958:	a95c5f2c 	.word	0xa95c5f2c

0000495c <mbedtls_zeroize_internal>:
    495c:	b138      	cbz	r0, 496e <mbedtls_zeroize_internal+0x12>
    495e:	b131      	cbz	r1, 496e <mbedtls_zeroize_internal+0x12>
    4960:	4401      	add	r1, r0
    4962:	2200      	movs	r2, #0
    4964:	4603      	mov	r3, r0
    4966:	3001      	adds	r0, #1
    4968:	4281      	cmp	r1, r0
    496a:	701a      	strb	r2, [r3, #0]
    496c:	d1fa      	bne.n	4964 <mbedtls_zeroize_internal+0x8>
    496e:	4770      	bx	lr

00004970 <mbedtls_platform_zeroize>:
    4970:	b138      	cbz	r0, 4982 <mbedtls_platform_zeroize+0x12>
    4972:	b131      	cbz	r1, 4982 <mbedtls_platform_zeroize+0x12>
    4974:	4401      	add	r1, r0
    4976:	2200      	movs	r2, #0
    4978:	4603      	mov	r3, r0
    497a:	3001      	adds	r0, #1
    497c:	4288      	cmp	r0, r1
    497e:	701a      	strb	r2, [r3, #0]
    4980:	d1fa      	bne.n	4978 <mbedtls_platform_zeroize+0x8>
    4982:	4770      	bx	lr

00004984 <block_cipher_df>:
    4984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4988:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
    498c:	b0b5      	sub	sp, #212	; 0xd4
    498e:	f200 80d7 	bhi.w	4b40 <block_cipher_df+0x1bc>
    4992:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 4b48 <block_cipher_df+0x1c4>
    4996:	4614      	mov	r4, r2
    4998:	460d      	mov	r5, r1
    499a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    499e:	2100      	movs	r1, #0
    49a0:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
    49a4:	4607      	mov	r7, r0
    49a6:	4648      	mov	r0, r9
    49a8:	f002 fc8d 	bl	72c6 <memset>
    49ac:	4640      	mov	r0, r8
    49ae:	f001 f951 	bl	5c54 <cc_mbedtls_aes_init>
    49b2:	2300      	movs	r3, #0
    49b4:	f8a9 3010 	strh.w	r3, [r9, #16]
    49b8:	ba63      	rev16	r3, r4
    49ba:	f109 0618 	add.w	r6, r9, #24
    49be:	f8a9 3012 	strh.w	r3, [r9, #18]
    49c2:	2320      	movs	r3, #32
    49c4:	4629      	mov	r1, r5
    49c6:	4622      	mov	r2, r4
    49c8:	f889 3017 	strb.w	r3, [r9, #23]
    49cc:	4630      	mov	r0, r6
    49ce:	f002 fc6f 	bl	72b0 <memcpy>
    49d2:	4b5e      	ldr	r3, [pc, #376]	; (4b4c <block_cipher_df+0x1c8>)
    49d4:	9307      	str	r3, [sp, #28]
    49d6:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
    49da:	2280      	movs	r2, #128	; 0x80
    49dc:	9308      	str	r3, [sp, #32]
    49de:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
    49e2:	9309      	str	r3, [sp, #36]	; 0x24
    49e4:	5532      	strb	r2, [r6, r4]
    49e6:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
    49ea:	a907      	add	r1, sp, #28
    49ec:	4640      	mov	r0, r8
    49ee:	930a      	str	r3, [sp, #40]	; 0x28
    49f0:	f001 f946 	bl	5c80 <cc_mbedtls_aes_setkey_enc>
    49f4:	4682      	mov	sl, r0
    49f6:	2800      	cmp	r0, #0
    49f8:	d17f      	bne.n	4afa <block_cipher_df+0x176>
    49fa:	f104 0319 	add.w	r3, r4, #25
    49fe:	ae0b      	add	r6, sp, #44	; 0x2c
    4a00:	ac0f      	add	r4, sp, #60	; 0x3c
    4a02:	9302      	str	r3, [sp, #8]
    4a04:	9703      	str	r7, [sp, #12]
    4a06:	9601      	str	r6, [sp, #4]
    4a08:	9404      	str	r4, [sp, #16]
    4a0a:	9801      	ldr	r0, [sp, #4]
    4a0c:	f8df b140 	ldr.w	fp, [pc, #320]	; 4b50 <block_cipher_df+0x1cc>
    4a10:	2210      	movs	r2, #16
    4a12:	2100      	movs	r1, #0
    4a14:	f002 fc57 	bl	72c6 <memset>
    4a18:	f8dd a008 	ldr.w	sl, [sp, #8]
    4a1c:	9405      	str	r4, [sp, #20]
    4a1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4a20:	f85b 4c04 	ldr.w	r4, [fp, #-4]
    4a24:	f85b 7c0c 	ldr.w	r7, [fp, #-12]
    4a28:	990b      	ldr	r1, [sp, #44]	; 0x2c
    4a2a:	f85b 0c10 	ldr.w	r0, [fp, #-16]
    4a2e:	f85b 5c08 	ldr.w	r5, [fp, #-8]
    4a32:	e9dd 620c 	ldrd	r6, r2, [sp, #48]	; 0x30
    4a36:	405c      	eors	r4, r3
    4a38:	9b01      	ldr	r3, [sp, #4]
    4a3a:	407e      	eors	r6, r7
    4a3c:	4055      	eors	r5, r2
    4a3e:	ea81 0700 	eor.w	r7, r1, r0
    4a42:	461a      	mov	r2, r3
    4a44:	2101      	movs	r1, #1
    4a46:	4640      	mov	r0, r8
    4a48:	e9cd 760b 	strd	r7, r6, [sp, #44]	; 0x2c
    4a4c:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    4a50:	f001 f930 	bl	5cb4 <cc_mbedtls_aes_crypt_ecb>
    4a54:	f1ba 0f10 	cmp.w	sl, #16
    4a58:	bf94      	ite	ls
    4a5a:	ebaa 0a0a 	subls.w	sl, sl, sl
    4a5e:	f1aa 0a10 	subhi.w	sl, sl, #16
    4a62:	f10b 0b10 	add.w	fp, fp, #16
    4a66:	2800      	cmp	r0, #0
    4a68:	d165      	bne.n	4b36 <block_cipher_df+0x1b2>
    4a6a:	f1ba 0f00 	cmp.w	sl, #0
    4a6e:	d1d6      	bne.n	4a1e <block_cipher_df+0x9a>
    4a70:	9c05      	ldr	r4, [sp, #20]
    4a72:	9901      	ldr	r1, [sp, #4]
    4a74:	4620      	mov	r0, r4
    4a76:	2210      	movs	r2, #16
    4a78:	f002 fc1a 	bl	72b0 <memcpy>
    4a7c:	f899 3003 	ldrb.w	r3, [r9, #3]
    4a80:	3410      	adds	r4, #16
    4a82:	3301      	adds	r3, #1
    4a84:	45a0      	cmp	r8, r4
    4a86:	f889 3003 	strb.w	r3, [r9, #3]
    4a8a:	d1be      	bne.n	4a0a <block_cipher_df+0x86>
    4a8c:	9c04      	ldr	r4, [sp, #16]
    4a8e:	9f03      	ldr	r7, [sp, #12]
    4a90:	9e01      	ldr	r6, [sp, #4]
    4a92:	2280      	movs	r2, #128	; 0x80
    4a94:	4621      	mov	r1, r4
    4a96:	4640      	mov	r0, r8
    4a98:	f001 f8f2 	bl	5c80 <cc_mbedtls_aes_setkey_enc>
    4a9c:	4682      	mov	sl, r0
    4a9e:	bb70      	cbnz	r0, 4afe <block_cipher_df+0x17a>
    4aa0:	f107 0920 	add.w	r9, r7, #32
    4aa4:	463d      	mov	r5, r7
    4aa6:	ab13      	add	r3, sp, #76	; 0x4c
    4aa8:	461a      	mov	r2, r3
    4aaa:	2101      	movs	r1, #1
    4aac:	4640      	mov	r0, r8
    4aae:	f001 f901 	bl	5cb4 <cc_mbedtls_aes_crypt_ecb>
    4ab2:	2210      	movs	r2, #16
    4ab4:	4682      	mov	sl, r0
    4ab6:	a913      	add	r1, sp, #76	; 0x4c
    4ab8:	4628      	mov	r0, r5
    4aba:	4415      	add	r5, r2
    4abc:	f1ba 0f00 	cmp.w	sl, #0
    4ac0:	d11d      	bne.n	4afe <block_cipher_df+0x17a>
    4ac2:	f002 fbf5 	bl	72b0 <memcpy>
    4ac6:	454d      	cmp	r5, r9
    4ac8:	d1ed      	bne.n	4aa6 <block_cipher_df+0x122>
    4aca:	4640      	mov	r0, r8
    4acc:	f001 f8d2 	bl	5c74 <cc_mbedtls_aes_free>
    4ad0:	481d      	ldr	r0, [pc, #116]	; (4b48 <block_cipher_df+0x1c4>)
    4ad2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    4ad6:	f7ff ff4b 	bl	4970 <mbedtls_platform_zeroize>
    4ada:	4620      	mov	r0, r4
    4adc:	2120      	movs	r1, #32
    4ade:	f7ff ff47 	bl	4970 <mbedtls_platform_zeroize>
    4ae2:	a807      	add	r0, sp, #28
    4ae4:	2110      	movs	r1, #16
    4ae6:	f7ff ff43 	bl	4970 <mbedtls_platform_zeroize>
    4aea:	4630      	mov	r0, r6
    4aec:	2110      	movs	r1, #16
    4aee:	f7ff ff3f 	bl	4970 <mbedtls_platform_zeroize>
    4af2:	4650      	mov	r0, sl
    4af4:	b035      	add	sp, #212	; 0xd4
    4af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4afa:	ac0f      	add	r4, sp, #60	; 0x3c
    4afc:	ae0b      	add	r6, sp, #44	; 0x2c
    4afe:	4640      	mov	r0, r8
    4b00:	f001 f8b8 	bl	5c74 <cc_mbedtls_aes_free>
    4b04:	4810      	ldr	r0, [pc, #64]	; (4b48 <block_cipher_df+0x1c4>)
    4b06:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    4b0a:	f7ff ff31 	bl	4970 <mbedtls_platform_zeroize>
    4b0e:	4620      	mov	r0, r4
    4b10:	2120      	movs	r1, #32
    4b12:	f7ff ff2d 	bl	4970 <mbedtls_platform_zeroize>
    4b16:	a807      	add	r0, sp, #28
    4b18:	2110      	movs	r1, #16
    4b1a:	f7ff ff29 	bl	4970 <mbedtls_platform_zeroize>
    4b1e:	2110      	movs	r1, #16
    4b20:	4630      	mov	r0, r6
    4b22:	f7ff ff25 	bl	4970 <mbedtls_platform_zeroize>
    4b26:	2120      	movs	r1, #32
    4b28:	4638      	mov	r0, r7
    4b2a:	f7ff ff21 	bl	4970 <mbedtls_platform_zeroize>
    4b2e:	4650      	mov	r0, sl
    4b30:	b035      	add	sp, #212	; 0xd4
    4b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b36:	9f03      	ldr	r7, [sp, #12]
    4b38:	9e01      	ldr	r6, [sp, #4]
    4b3a:	9c04      	ldr	r4, [sp, #16]
    4b3c:	4682      	mov	sl, r0
    4b3e:	e7de      	b.n	4afe <block_cipher_df+0x17a>
    4b40:	f06f 0a37 	mvn.w	sl, #55	; 0x37
    4b44:	e7f3      	b.n	4b2e <block_cipher_df+0x1aa>
    4b46:	bf00      	nop
    4b48:	20000cc8 	.word	0x20000cc8
    4b4c:	03020100 	.word	0x03020100
    4b50:	20000cd8 	.word	0x20000cd8

00004b54 <ctr_drbg_update_internal>:
    4b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b58:	b088      	sub	sp, #32
    4b5a:	4604      	mov	r4, r0
    4b5c:	460d      	mov	r5, r1
    4b5e:	2220      	movs	r2, #32
    4b60:	2100      	movs	r1, #0
    4b62:	4668      	mov	r0, sp
    4b64:	f002 fbaf 	bl	72c6 <memset>
    4b68:	f104 0620 	add.w	r6, r4, #32
    4b6c:	466f      	mov	r7, sp
    4b6e:	7be2      	ldrb	r2, [r4, #15]
    4b70:	3201      	adds	r2, #1
    4b72:	b2d2      	uxtb	r2, r2
    4b74:	73e2      	strb	r2, [r4, #15]
    4b76:	2a00      	cmp	r2, #0
    4b78:	d14d      	bne.n	4c16 <ctr_drbg_update_internal+0xc2>
    4b7a:	7ba2      	ldrb	r2, [r4, #14]
    4b7c:	3201      	adds	r2, #1
    4b7e:	b2d2      	uxtb	r2, r2
    4b80:	73a2      	strb	r2, [r4, #14]
    4b82:	2a00      	cmp	r2, #0
    4b84:	d147      	bne.n	4c16 <ctr_drbg_update_internal+0xc2>
    4b86:	7b63      	ldrb	r3, [r4, #13]
    4b88:	3301      	adds	r3, #1
    4b8a:	b2db      	uxtb	r3, r3
    4b8c:	7363      	strb	r3, [r4, #13]
    4b8e:	2b00      	cmp	r3, #0
    4b90:	d141      	bne.n	4c16 <ctr_drbg_update_internal+0xc2>
    4b92:	7b23      	ldrb	r3, [r4, #12]
    4b94:	3301      	adds	r3, #1
    4b96:	b2db      	uxtb	r3, r3
    4b98:	7323      	strb	r3, [r4, #12]
    4b9a:	2b00      	cmp	r3, #0
    4b9c:	d13b      	bne.n	4c16 <ctr_drbg_update_internal+0xc2>
    4b9e:	7ae3      	ldrb	r3, [r4, #11]
    4ba0:	3301      	adds	r3, #1
    4ba2:	b2db      	uxtb	r3, r3
    4ba4:	72e3      	strb	r3, [r4, #11]
    4ba6:	2b00      	cmp	r3, #0
    4ba8:	d135      	bne.n	4c16 <ctr_drbg_update_internal+0xc2>
    4baa:	7aa3      	ldrb	r3, [r4, #10]
    4bac:	3301      	adds	r3, #1
    4bae:	b2db      	uxtb	r3, r3
    4bb0:	72a3      	strb	r3, [r4, #10]
    4bb2:	2b00      	cmp	r3, #0
    4bb4:	d12f      	bne.n	4c16 <ctr_drbg_update_internal+0xc2>
    4bb6:	7a63      	ldrb	r3, [r4, #9]
    4bb8:	3301      	adds	r3, #1
    4bba:	b2db      	uxtb	r3, r3
    4bbc:	7263      	strb	r3, [r4, #9]
    4bbe:	bb53      	cbnz	r3, 4c16 <ctr_drbg_update_internal+0xc2>
    4bc0:	7a23      	ldrb	r3, [r4, #8]
    4bc2:	3301      	adds	r3, #1
    4bc4:	b2db      	uxtb	r3, r3
    4bc6:	7223      	strb	r3, [r4, #8]
    4bc8:	bb2b      	cbnz	r3, 4c16 <ctr_drbg_update_internal+0xc2>
    4bca:	79e3      	ldrb	r3, [r4, #7]
    4bcc:	3301      	adds	r3, #1
    4bce:	b2db      	uxtb	r3, r3
    4bd0:	71e3      	strb	r3, [r4, #7]
    4bd2:	bb03      	cbnz	r3, 4c16 <ctr_drbg_update_internal+0xc2>
    4bd4:	79a3      	ldrb	r3, [r4, #6]
    4bd6:	3301      	adds	r3, #1
    4bd8:	b2db      	uxtb	r3, r3
    4bda:	71a3      	strb	r3, [r4, #6]
    4bdc:	b9db      	cbnz	r3, 4c16 <ctr_drbg_update_internal+0xc2>
    4bde:	7963      	ldrb	r3, [r4, #5]
    4be0:	3301      	adds	r3, #1
    4be2:	b2db      	uxtb	r3, r3
    4be4:	7163      	strb	r3, [r4, #5]
    4be6:	b9b3      	cbnz	r3, 4c16 <ctr_drbg_update_internal+0xc2>
    4be8:	7923      	ldrb	r3, [r4, #4]
    4bea:	3301      	adds	r3, #1
    4bec:	b2db      	uxtb	r3, r3
    4bee:	7123      	strb	r3, [r4, #4]
    4bf0:	b98b      	cbnz	r3, 4c16 <ctr_drbg_update_internal+0xc2>
    4bf2:	78e3      	ldrb	r3, [r4, #3]
    4bf4:	3301      	adds	r3, #1
    4bf6:	b2db      	uxtb	r3, r3
    4bf8:	70e3      	strb	r3, [r4, #3]
    4bfa:	b963      	cbnz	r3, 4c16 <ctr_drbg_update_internal+0xc2>
    4bfc:	78a3      	ldrb	r3, [r4, #2]
    4bfe:	3301      	adds	r3, #1
    4c00:	b2db      	uxtb	r3, r3
    4c02:	70a3      	strb	r3, [r4, #2]
    4c04:	b93b      	cbnz	r3, 4c16 <ctr_drbg_update_internal+0xc2>
    4c06:	7863      	ldrb	r3, [r4, #1]
    4c08:	3301      	adds	r3, #1
    4c0a:	b2db      	uxtb	r3, r3
    4c0c:	7063      	strb	r3, [r4, #1]
    4c0e:	b913      	cbnz	r3, 4c16 <ctr_drbg_update_internal+0xc2>
    4c10:	7823      	ldrb	r3, [r4, #0]
    4c12:	3301      	adds	r3, #1
    4c14:	7023      	strb	r3, [r4, #0]
    4c16:	463b      	mov	r3, r7
    4c18:	4622      	mov	r2, r4
    4c1a:	2101      	movs	r1, #1
    4c1c:	4630      	mov	r0, r6
    4c1e:	f001 f849 	bl	5cb4 <cc_mbedtls_aes_crypt_ecb>
    4c22:	4680      	mov	r8, r0
    4c24:	bb50      	cbnz	r0, 4c7c <ctr_drbg_update_internal+0x128>
    4c26:	3710      	adds	r7, #16
    4c28:	ab08      	add	r3, sp, #32
    4c2a:	429f      	cmp	r7, r3
    4c2c:	d19f      	bne.n	4b6e <ctr_drbg_update_internal+0x1a>
    4c2e:	9a02      	ldr	r2, [sp, #8]
    4c30:	68ab      	ldr	r3, [r5, #8]
    4c32:	9f03      	ldr	r7, [sp, #12]
    4c34:	9907      	ldr	r1, [sp, #28]
    4c36:	4053      	eors	r3, r2
    4c38:	9302      	str	r3, [sp, #8]
    4c3a:	4630      	mov	r0, r6
    4c3c:	68ee      	ldr	r6, [r5, #12]
    4c3e:	9b00      	ldr	r3, [sp, #0]
    4c40:	407e      	eors	r6, r7
    4c42:	9603      	str	r6, [sp, #12]
    4c44:	9f04      	ldr	r7, [sp, #16]
    4c46:	692e      	ldr	r6, [r5, #16]
    4c48:	407e      	eors	r6, r7
    4c4a:	9604      	str	r6, [sp, #16]
    4c4c:	696e      	ldr	r6, [r5, #20]
    4c4e:	9f05      	ldr	r7, [sp, #20]
    4c50:	407e      	eors	r6, r7
    4c52:	9605      	str	r6, [sp, #20]
    4c54:	9f06      	ldr	r7, [sp, #24]
    4c56:	69ae      	ldr	r6, [r5, #24]
    4c58:	407e      	eors	r6, r7
    4c5a:	9606      	str	r6, [sp, #24]
    4c5c:	69ee      	ldr	r6, [r5, #28]
    4c5e:	4071      	eors	r1, r6
    4c60:	9107      	str	r1, [sp, #28]
    4c62:	6829      	ldr	r1, [r5, #0]
    4c64:	404b      	eors	r3, r1
    4c66:	9300      	str	r3, [sp, #0]
    4c68:	9901      	ldr	r1, [sp, #4]
    4c6a:	686b      	ldr	r3, [r5, #4]
    4c6c:	2280      	movs	r2, #128	; 0x80
    4c6e:	404b      	eors	r3, r1
    4c70:	4669      	mov	r1, sp
    4c72:	9301      	str	r3, [sp, #4]
    4c74:	f001 f804 	bl	5c80 <cc_mbedtls_aes_setkey_enc>
    4c78:	4680      	mov	r8, r0
    4c7a:	b138      	cbz	r0, 4c8c <ctr_drbg_update_internal+0x138>
    4c7c:	4668      	mov	r0, sp
    4c7e:	2120      	movs	r1, #32
    4c80:	f7ff fe76 	bl	4970 <mbedtls_platform_zeroize>
    4c84:	4640      	mov	r0, r8
    4c86:	b008      	add	sp, #32
    4c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c8c:	2210      	movs	r2, #16
    4c8e:	eb0d 0102 	add.w	r1, sp, r2
    4c92:	4620      	mov	r0, r4
    4c94:	f002 fb0c 	bl	72b0 <memcpy>
    4c98:	e7f0      	b.n	4c7c <ctr_drbg_update_internal+0x128>
    4c9a:	bf00      	nop

00004c9c <mbedtls_ctr_drbg_reseed_internal>:
    4c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4ca0:	4604      	mov	r4, r0
    4ca2:	6980      	ldr	r0, [r0, #24]
    4ca4:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
    4ca8:	d852      	bhi.n	4d50 <mbedtls_ctr_drbg_reseed_internal+0xb4>
    4caa:	461d      	mov	r5, r3
    4cac:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
    4cb0:	42ab      	cmp	r3, r5
    4cb2:	d34d      	bcc.n	4d50 <mbedtls_ctr_drbg_reseed_internal+0xb4>
    4cb4:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
    4cb8:	1a1b      	subs	r3, r3, r0
    4cba:	4293      	cmp	r3, r2
    4cbc:	4616      	mov	r6, r2
    4cbe:	d347      	bcc.n	4d50 <mbedtls_ctr_drbg_reseed_internal+0xb4>
    4cc0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4d5c <mbedtls_ctr_drbg_reseed_internal+0xc0>
    4cc4:	f44f 72c0 	mov.w	r2, #384	; 0x180
    4cc8:	460f      	mov	r7, r1
    4cca:	4648      	mov	r0, r9
    4ccc:	2100      	movs	r1, #0
    4cce:	f002 fafa 	bl	72c6 <memset>
    4cd2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    4cd6:	69a2      	ldr	r2, [r4, #24]
    4cd8:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    4cdc:	4649      	mov	r1, r9
    4cde:	4798      	blx	r3
    4ce0:	2800      	cmp	r0, #0
    4ce2:	d138      	bne.n	4d56 <mbedtls_ctr_drbg_reseed_internal+0xba>
    4ce4:	f8d4 8018 	ldr.w	r8, [r4, #24]
    4ce8:	b13d      	cbz	r5, 4cfa <mbedtls_ctr_drbg_reseed_internal+0x5e>
    4cea:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
    4cee:	462a      	mov	r2, r5
    4cf0:	eb09 0108 	add.w	r1, r9, r8
    4cf4:	4798      	blx	r3
    4cf6:	bb70      	cbnz	r0, 4d56 <mbedtls_ctr_drbg_reseed_internal+0xba>
    4cf8:	44a8      	add	r8, r5
    4cfa:	b107      	cbz	r7, 4cfe <mbedtls_ctr_drbg_reseed_internal+0x62>
    4cfc:	b9c6      	cbnz	r6, 4d30 <mbedtls_ctr_drbg_reseed_internal+0x94>
    4cfe:	4917      	ldr	r1, [pc, #92]	; (4d5c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
    4d00:	4642      	mov	r2, r8
    4d02:	4608      	mov	r0, r1
    4d04:	f7ff fe3e 	bl	4984 <block_cipher_df>
    4d08:	4605      	mov	r5, r0
    4d0a:	b138      	cbz	r0, 4d1c <mbedtls_ctr_drbg_reseed_internal+0x80>
    4d0c:	4813      	ldr	r0, [pc, #76]	; (4d5c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
    4d0e:	f44f 71c0 	mov.w	r1, #384	; 0x180
    4d12:	f7ff fe2d 	bl	4970 <mbedtls_platform_zeroize>
    4d16:	4628      	mov	r0, r5
    4d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4d1c:	490f      	ldr	r1, [pc, #60]	; (4d5c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
    4d1e:	4620      	mov	r0, r4
    4d20:	f7ff ff18 	bl	4b54 <ctr_drbg_update_internal>
    4d24:	4605      	mov	r5, r0
    4d26:	2800      	cmp	r0, #0
    4d28:	d1f0      	bne.n	4d0c <mbedtls_ctr_drbg_reseed_internal+0x70>
    4d2a:	2301      	movs	r3, #1
    4d2c:	6123      	str	r3, [r4, #16]
    4d2e:	e7ed      	b.n	4d0c <mbedtls_ctr_drbg_reseed_internal+0x70>
    4d30:	eb09 0008 	add.w	r0, r9, r8
    4d34:	4639      	mov	r1, r7
    4d36:	4632      	mov	r2, r6
    4d38:	f002 faba 	bl	72b0 <memcpy>
    4d3c:	4907      	ldr	r1, [pc, #28]	; (4d5c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
    4d3e:	44b0      	add	r8, r6
    4d40:	4642      	mov	r2, r8
    4d42:	4608      	mov	r0, r1
    4d44:	f7ff fe1e 	bl	4984 <block_cipher_df>
    4d48:	4605      	mov	r5, r0
    4d4a:	2800      	cmp	r0, #0
    4d4c:	d1de      	bne.n	4d0c <mbedtls_ctr_drbg_reseed_internal+0x70>
    4d4e:	e7e5      	b.n	4d1c <mbedtls_ctr_drbg_reseed_internal+0x80>
    4d50:	f06f 0537 	mvn.w	r5, #55	; 0x37
    4d54:	e7df      	b.n	4d16 <mbedtls_ctr_drbg_reseed_internal+0x7a>
    4d56:	f06f 0533 	mvn.w	r5, #51	; 0x33
    4d5a:	e7dc      	b.n	4d16 <mbedtls_ctr_drbg_reseed_internal+0x7a>
    4d5c:	20000e68 	.word	0x20000e68

00004d60 <cc_mbedtls_ctr_drbg_init>:
    4d60:	b510      	push	{r4, lr}
    4d62:	22a4      	movs	r2, #164	; 0xa4
    4d64:	4604      	mov	r4, r0
    4d66:	2100      	movs	r1, #0
    4d68:	f002 faad 	bl	72c6 <memset>
    4d6c:	4b06      	ldr	r3, [pc, #24]	; (4d88 <cc_mbedtls_ctr_drbg_init+0x28>)
    4d6e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4d72:	f64f 72f0 	movw	r2, #65520	; 0xfff0
    4d76:	6121      	str	r1, [r4, #16]
    4d78:	61e2      	str	r2, [r4, #28]
    4d7a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    4d7e:	681b      	ldr	r3, [r3, #0]
    4d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4d84:	4718      	bx	r3
    4d86:	bf00      	nop
    4d88:	20000140 	.word	0x20000140

00004d8c <cc_mbedtls_ctr_drbg_seed>:
    4d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4d90:	b085      	sub	sp, #20
    4d92:	4605      	mov	r5, r0
    4d94:	460f      	mov	r7, r1
    4d96:	4616      	mov	r6, r2
    4d98:	2100      	movs	r1, #0
    4d9a:	2210      	movs	r2, #16
    4d9c:	4668      	mov	r0, sp
    4d9e:	4699      	mov	r9, r3
    4da0:	f002 fa91 	bl	72c6 <memset>
    4da4:	4b1d      	ldr	r3, [pc, #116]	; (4e1c <cc_mbedtls_ctr_drbg_seed+0x90>)
    4da6:	f105 089c 	add.w	r8, r5, #156	; 0x9c
    4daa:	681b      	ldr	r3, [r3, #0]
    4dac:	4640      	mov	r0, r8
    4dae:	4798      	blx	r3
    4db0:	b120      	cbz	r0, 4dbc <cc_mbedtls_ctr_drbg_seed+0x30>
    4db2:	4604      	mov	r4, r0
    4db4:	4620      	mov	r0, r4
    4db6:	b005      	add	sp, #20
    4db8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4dbc:	f105 0420 	add.w	r4, r5, #32
    4dc0:	4620      	mov	r0, r4
    4dc2:	f000 ff47 	bl	5c54 <cc_mbedtls_aes_init>
    4dc6:	69aa      	ldr	r2, [r5, #24]
    4dc8:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
    4dcc:	692e      	ldr	r6, [r5, #16]
    4dce:	b9e2      	cbnz	r2, 4e0a <cc_mbedtls_ctr_drbg_seed+0x7e>
    4dd0:	2220      	movs	r2, #32
    4dd2:	2e00      	cmp	r6, #0
    4dd4:	61aa      	str	r2, [r5, #24]
    4dd6:	db1f      	blt.n	4e18 <cc_mbedtls_ctr_drbg_seed+0x8c>
    4dd8:	4620      	mov	r0, r4
    4dda:	4669      	mov	r1, sp
    4ddc:	2280      	movs	r2, #128	; 0x80
    4dde:	f000 ff4f 	bl	5c80 <cc_mbedtls_aes_setkey_enc>
    4de2:	4604      	mov	r4, r0
    4de4:	b930      	cbnz	r0, 4df4 <cc_mbedtls_ctr_drbg_seed+0x68>
    4de6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4de8:	4633      	mov	r3, r6
    4dea:	4649      	mov	r1, r9
    4dec:	4628      	mov	r0, r5
    4dee:	f7ff ff55 	bl	4c9c <mbedtls_ctr_drbg_reseed_internal>
    4df2:	4604      	mov	r4, r0
    4df4:	4b0a      	ldr	r3, [pc, #40]	; (4e20 <cc_mbedtls_ctr_drbg_seed+0x94>)
    4df6:	4640      	mov	r0, r8
    4df8:	681b      	ldr	r3, [r3, #0]
    4dfa:	4798      	blx	r3
    4dfc:	2800      	cmp	r0, #0
    4dfe:	bf18      	it	ne
    4e00:	4604      	movne	r4, r0
    4e02:	4620      	mov	r0, r4
    4e04:	b005      	add	sp, #20
    4e06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4e0a:	2e00      	cmp	r6, #0
    4e0c:	dae4      	bge.n	4dd8 <cc_mbedtls_ctr_drbg_seed+0x4c>
    4e0e:	2a17      	cmp	r2, #23
    4e10:	d802      	bhi.n	4e18 <cc_mbedtls_ctr_drbg_seed+0x8c>
    4e12:	3201      	adds	r2, #1
    4e14:	0856      	lsrs	r6, r2, #1
    4e16:	e7df      	b.n	4dd8 <cc_mbedtls_ctr_drbg_seed+0x4c>
    4e18:	2600      	movs	r6, #0
    4e1a:	e7dd      	b.n	4dd8 <cc_mbedtls_ctr_drbg_seed+0x4c>
    4e1c:	2000013c 	.word	0x2000013c
    4e20:	20000138 	.word	0x20000138

00004e24 <cc_mbedtls_ctr_drbg_random_with_add>:
    4e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e28:	b08d      	sub	sp, #52	; 0x34
    4e2a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    4e2e:	9f16      	ldr	r7, [sp, #88]	; 0x58
    4e30:	f200 80e3 	bhi.w	4ffa <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
    4e34:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    4e38:	f200 80dc 	bhi.w	4ff4 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
    4e3c:	4604      	mov	r4, r0
    4e3e:	4615      	mov	r5, r2
    4e40:	460e      	mov	r6, r1
    4e42:	2220      	movs	r2, #32
    4e44:	2100      	movs	r1, #0
    4e46:	a804      	add	r0, sp, #16
    4e48:	4698      	mov	r8, r3
    4e4a:	f002 fa3c 	bl	72c6 <memset>
    4e4e:	4b6c      	ldr	r3, [pc, #432]	; (5000 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
    4e50:	f104 099c 	add.w	r9, r4, #156	; 0x9c
    4e54:	681b      	ldr	r3, [r3, #0]
    4e56:	4648      	mov	r0, r9
    4e58:	4798      	blx	r3
    4e5a:	4683      	mov	fp, r0
    4e5c:	2800      	cmp	r0, #0
    4e5e:	f040 8092 	bne.w	4f86 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
    4e62:	6922      	ldr	r2, [r4, #16]
    4e64:	69e3      	ldr	r3, [r4, #28]
    4e66:	429a      	cmp	r2, r3
    4e68:	f300 8091 	bgt.w	4f8e <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
    4e6c:	6963      	ldr	r3, [r4, #20]
    4e6e:	2b00      	cmp	r3, #0
    4e70:	f040 808d 	bne.w	4f8e <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
    4e74:	2f00      	cmp	r7, #0
    4e76:	f040 80a9 	bne.w	4fcc <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
    4e7a:	f8df a188 	ldr.w	sl, [pc, #392]	; 5004 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
    4e7e:	466f      	mov	r7, sp
    4e80:	2d00      	cmp	r5, #0
    4e82:	f000 8098 	beq.w	4fb6 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
    4e86:	f104 0820 	add.w	r8, r4, #32
    4e8a:	466f      	mov	r7, sp
    4e8c:	e00e      	b.n	4eac <cc_mbedtls_ctr_drbg_random_with_add+0x88>
    4e8e:	2d10      	cmp	r5, #16
    4e90:	46ab      	mov	fp, r5
    4e92:	bf28      	it	cs
    4e94:	f04f 0b10 	movcs.w	fp, #16
    4e98:	4630      	mov	r0, r6
    4e9a:	465a      	mov	r2, fp
    4e9c:	4639      	mov	r1, r7
    4e9e:	f002 fa07 	bl	72b0 <memcpy>
    4ea2:	ebb5 050b 	subs.w	r5, r5, fp
    4ea6:	445e      	add	r6, fp
    4ea8:	f000 8085 	beq.w	4fb6 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
    4eac:	7be3      	ldrb	r3, [r4, #15]
    4eae:	3301      	adds	r3, #1
    4eb0:	b2db      	uxtb	r3, r3
    4eb2:	73e3      	strb	r3, [r4, #15]
    4eb4:	2b00      	cmp	r3, #0
    4eb6:	d14d      	bne.n	4f54 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
    4eb8:	7ba3      	ldrb	r3, [r4, #14]
    4eba:	3301      	adds	r3, #1
    4ebc:	b2db      	uxtb	r3, r3
    4ebe:	73a3      	strb	r3, [r4, #14]
    4ec0:	2b00      	cmp	r3, #0
    4ec2:	d147      	bne.n	4f54 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
    4ec4:	7b63      	ldrb	r3, [r4, #13]
    4ec6:	3301      	adds	r3, #1
    4ec8:	b2db      	uxtb	r3, r3
    4eca:	7363      	strb	r3, [r4, #13]
    4ecc:	2b00      	cmp	r3, #0
    4ece:	d141      	bne.n	4f54 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
    4ed0:	7b23      	ldrb	r3, [r4, #12]
    4ed2:	3301      	adds	r3, #1
    4ed4:	b2db      	uxtb	r3, r3
    4ed6:	7323      	strb	r3, [r4, #12]
    4ed8:	2b00      	cmp	r3, #0
    4eda:	d13b      	bne.n	4f54 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
    4edc:	7ae3      	ldrb	r3, [r4, #11]
    4ede:	3301      	adds	r3, #1
    4ee0:	b2db      	uxtb	r3, r3
    4ee2:	72e3      	strb	r3, [r4, #11]
    4ee4:	2b00      	cmp	r3, #0
    4ee6:	d135      	bne.n	4f54 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
    4ee8:	7aa3      	ldrb	r3, [r4, #10]
    4eea:	3301      	adds	r3, #1
    4eec:	b2db      	uxtb	r3, r3
    4eee:	72a3      	strb	r3, [r4, #10]
    4ef0:	2b00      	cmp	r3, #0
    4ef2:	d12f      	bne.n	4f54 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
    4ef4:	7a63      	ldrb	r3, [r4, #9]
    4ef6:	3301      	adds	r3, #1
    4ef8:	b2db      	uxtb	r3, r3
    4efa:	7263      	strb	r3, [r4, #9]
    4efc:	bb53      	cbnz	r3, 4f54 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
    4efe:	7a23      	ldrb	r3, [r4, #8]
    4f00:	3301      	adds	r3, #1
    4f02:	b2db      	uxtb	r3, r3
    4f04:	7223      	strb	r3, [r4, #8]
    4f06:	bb2b      	cbnz	r3, 4f54 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
    4f08:	79e3      	ldrb	r3, [r4, #7]
    4f0a:	3301      	adds	r3, #1
    4f0c:	b2db      	uxtb	r3, r3
    4f0e:	71e3      	strb	r3, [r4, #7]
    4f10:	bb03      	cbnz	r3, 4f54 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
    4f12:	79a3      	ldrb	r3, [r4, #6]
    4f14:	3301      	adds	r3, #1
    4f16:	b2db      	uxtb	r3, r3
    4f18:	71a3      	strb	r3, [r4, #6]
    4f1a:	b9db      	cbnz	r3, 4f54 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
    4f1c:	7963      	ldrb	r3, [r4, #5]
    4f1e:	3301      	adds	r3, #1
    4f20:	b2db      	uxtb	r3, r3
    4f22:	7163      	strb	r3, [r4, #5]
    4f24:	b9b3      	cbnz	r3, 4f54 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
    4f26:	7923      	ldrb	r3, [r4, #4]
    4f28:	3301      	adds	r3, #1
    4f2a:	b2db      	uxtb	r3, r3
    4f2c:	7123      	strb	r3, [r4, #4]
    4f2e:	b98b      	cbnz	r3, 4f54 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
    4f30:	78e3      	ldrb	r3, [r4, #3]
    4f32:	3301      	adds	r3, #1
    4f34:	b2db      	uxtb	r3, r3
    4f36:	70e3      	strb	r3, [r4, #3]
    4f38:	b963      	cbnz	r3, 4f54 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
    4f3a:	78a3      	ldrb	r3, [r4, #2]
    4f3c:	3301      	adds	r3, #1
    4f3e:	b2db      	uxtb	r3, r3
    4f40:	70a3      	strb	r3, [r4, #2]
    4f42:	b93b      	cbnz	r3, 4f54 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
    4f44:	7863      	ldrb	r3, [r4, #1]
    4f46:	3301      	adds	r3, #1
    4f48:	b2db      	uxtb	r3, r3
    4f4a:	7063      	strb	r3, [r4, #1]
    4f4c:	b913      	cbnz	r3, 4f54 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
    4f4e:	7823      	ldrb	r3, [r4, #0]
    4f50:	3301      	adds	r3, #1
    4f52:	7023      	strb	r3, [r4, #0]
    4f54:	463b      	mov	r3, r7
    4f56:	4622      	mov	r2, r4
    4f58:	2101      	movs	r1, #1
    4f5a:	4640      	mov	r0, r8
    4f5c:	f000 feaa 	bl	5cb4 <cc_mbedtls_aes_crypt_ecb>
    4f60:	4683      	mov	fp, r0
    4f62:	2800      	cmp	r0, #0
    4f64:	d093      	beq.n	4e8e <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
    4f66:	f8da 3000 	ldr.w	r3, [sl]
    4f6a:	4648      	mov	r0, r9
    4f6c:	4798      	blx	r3
    4f6e:	2120      	movs	r1, #32
    4f70:	4603      	mov	r3, r0
    4f72:	a804      	add	r0, sp, #16
    4f74:	2b00      	cmp	r3, #0
    4f76:	bf18      	it	ne
    4f78:	469b      	movne	fp, r3
    4f7a:	f7ff fcf9 	bl	4970 <mbedtls_platform_zeroize>
    4f7e:	2110      	movs	r1, #16
    4f80:	4638      	mov	r0, r7
    4f82:	f7ff fcf5 	bl	4970 <mbedtls_platform_zeroize>
    4f86:	4658      	mov	r0, fp
    4f88:	b00d      	add	sp, #52	; 0x34
    4f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f8e:	463a      	mov	r2, r7
    4f90:	4641      	mov	r1, r8
    4f92:	2300      	movs	r3, #0
    4f94:	4620      	mov	r0, r4
    4f96:	f7ff fe81 	bl	4c9c <mbedtls_ctr_drbg_reseed_internal>
    4f9a:	f8df a068 	ldr.w	sl, [pc, #104]	; 5004 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
    4f9e:	2800      	cmp	r0, #0
    4fa0:	f43f af6d 	beq.w	4e7e <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
    4fa4:	f8da 3000 	ldr.w	r3, [sl]
    4fa8:	4648      	mov	r0, r9
    4faa:	4798      	blx	r3
    4fac:	4683      	mov	fp, r0
    4fae:	2800      	cmp	r0, #0
    4fb0:	f43f af65 	beq.w	4e7e <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
    4fb4:	e7e7      	b.n	4f86 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
    4fb6:	a904      	add	r1, sp, #16
    4fb8:	4620      	mov	r0, r4
    4fba:	f7ff fdcb 	bl	4b54 <ctr_drbg_update_internal>
    4fbe:	4683      	mov	fp, r0
    4fc0:	2800      	cmp	r0, #0
    4fc2:	d1d0      	bne.n	4f66 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
    4fc4:	6923      	ldr	r3, [r4, #16]
    4fc6:	3301      	adds	r3, #1
    4fc8:	6123      	str	r3, [r4, #16]
    4fca:	e7cc      	b.n	4f66 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
    4fcc:	463a      	mov	r2, r7
    4fce:	4641      	mov	r1, r8
    4fd0:	a804      	add	r0, sp, #16
    4fd2:	f7ff fcd7 	bl	4984 <block_cipher_df>
    4fd6:	4683      	mov	fp, r0
    4fd8:	b118      	cbz	r0, 4fe2 <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
    4fda:	f8df a028 	ldr.w	sl, [pc, #40]	; 5004 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
    4fde:	466f      	mov	r7, sp
    4fe0:	e7c1      	b.n	4f66 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
    4fe2:	a904      	add	r1, sp, #16
    4fe4:	4620      	mov	r0, r4
    4fe6:	f7ff fdb5 	bl	4b54 <ctr_drbg_update_internal>
    4fea:	4683      	mov	fp, r0
    4fec:	2800      	cmp	r0, #0
    4fee:	f43f af44 	beq.w	4e7a <cc_mbedtls_ctr_drbg_random_with_add+0x56>
    4ff2:	e7f2      	b.n	4fda <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
    4ff4:	f06f 0b37 	mvn.w	fp, #55	; 0x37
    4ff8:	e7c5      	b.n	4f86 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
    4ffa:	f06f 0b35 	mvn.w	fp, #53	; 0x35
    4ffe:	e7c2      	b.n	4f86 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
    5000:	2000013c 	.word	0x2000013c
    5004:	20000138 	.word	0x20000138

00005008 <entropy_update>:
    5008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    500c:	2b20      	cmp	r3, #32
    500e:	b08b      	sub	sp, #44	; 0x2c
    5010:	461d      	mov	r5, r3
    5012:	4606      	mov	r6, r0
    5014:	4688      	mov	r8, r1
    5016:	4691      	mov	r9, r2
    5018:	d826      	bhi.n	5068 <entropy_update+0x60>
    501a:	b2db      	uxtb	r3, r3
    501c:	af02      	add	r7, sp, #8
    501e:	f88d 8004 	strb.w	r8, [sp, #4]
    5022:	46b0      	mov	r8, r6
    5024:	f88d 3005 	strb.w	r3, [sp, #5]
    5028:	f858 1b04 	ldr.w	r1, [r8], #4
    502c:	b921      	cbnz	r1, 5038 <entropy_update+0x30>
    502e:	4640      	mov	r0, r8
    5030:	f000 fe84 	bl	5d3c <cc_mbedtls_sha256_starts>
    5034:	4604      	mov	r4, r0
    5036:	b940      	cbnz	r0, 504a <entropy_update+0x42>
    5038:	2301      	movs	r3, #1
    503a:	6033      	str	r3, [r6, #0]
    503c:	2202      	movs	r2, #2
    503e:	a901      	add	r1, sp, #4
    5040:	4640      	mov	r0, r8
    5042:	f000 fe8f 	bl	5d64 <cc_mbedtls_sha256_update>
    5046:	4604      	mov	r4, r0
    5048:	b138      	cbz	r0, 505a <entropy_update+0x52>
    504a:	4638      	mov	r0, r7
    504c:	2120      	movs	r1, #32
    504e:	f7ff fc8f 	bl	4970 <mbedtls_platform_zeroize>
    5052:	4620      	mov	r0, r4
    5054:	b00b      	add	sp, #44	; 0x2c
    5056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    505a:	462a      	mov	r2, r5
    505c:	4649      	mov	r1, r9
    505e:	4640      	mov	r0, r8
    5060:	f000 fe80 	bl	5d64 <cc_mbedtls_sha256_update>
    5064:	4604      	mov	r4, r0
    5066:	e7f0      	b.n	504a <entropy_update+0x42>
    5068:	af02      	add	r7, sp, #8
    506a:	4619      	mov	r1, r3
    506c:	4610      	mov	r0, r2
    506e:	2300      	movs	r3, #0
    5070:	463a      	mov	r2, r7
    5072:	f000 fffd 	bl	6070 <cc_mbedtls_sha256>
    5076:	4604      	mov	r4, r0
    5078:	2800      	cmp	r0, #0
    507a:	d1e6      	bne.n	504a <entropy_update+0x42>
    507c:	2320      	movs	r3, #32
    507e:	46b9      	mov	r9, r7
    5080:	461d      	mov	r5, r3
    5082:	e7cc      	b.n	501e <entropy_update+0x16>

00005084 <entropy_gather_internal.part.0>:
    5084:	b5f0      	push	{r4, r5, r6, r7, lr}
    5086:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
    508a:	b0a7      	sub	sp, #156	; 0x9c
    508c:	2b00      	cmp	r3, #0
    508e:	bfd8      	it	le
    5090:	ae02      	addle	r6, sp, #8
    5092:	dd2c      	ble.n	50ee <entropy_gather_internal.part.0+0x6a>
    5094:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
    5098:	4605      	mov	r5, r0
    509a:	2300      	movs	r3, #0
    509c:	ae02      	add	r6, sp, #8
    509e:	9301      	str	r3, [sp, #4]
    50a0:	f1a4 0701 	sub.w	r7, r4, #1
    50a4:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    50a8:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
    50ac:	ab01      	add	r3, sp, #4
    50ae:	2290      	movs	r2, #144	; 0x90
    50b0:	4631      	mov	r1, r6
    50b2:	47a0      	blx	r4
    50b4:	fab7 f787 	clz	r7, r7
    50b8:	097f      	lsrs	r7, r7, #5
    50ba:	4604      	mov	r4, r0
    50bc:	b910      	cbnz	r0, 50c4 <entropy_gather_internal.part.0+0x40>
    50be:	9b01      	ldr	r3, [sp, #4]
    50c0:	b93b      	cbnz	r3, 50d2 <entropy_gather_internal.part.0+0x4e>
    50c2:	b1a7      	cbz	r7, 50ee <entropy_gather_internal.part.0+0x6a>
    50c4:	4630      	mov	r0, r6
    50c6:	2190      	movs	r1, #144	; 0x90
    50c8:	f7ff fc52 	bl	4970 <mbedtls_platform_zeroize>
    50cc:	4620      	mov	r0, r4
    50ce:	b027      	add	sp, #156	; 0x9c
    50d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50d2:	4601      	mov	r1, r0
    50d4:	4632      	mov	r2, r6
    50d6:	4628      	mov	r0, r5
    50d8:	f7ff ff96 	bl	5008 <entropy_update>
    50dc:	b950      	cbnz	r0, 50f4 <entropy_gather_internal.part.0+0x70>
    50de:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    50e2:	9a01      	ldr	r2, [sp, #4]
    50e4:	4413      	add	r3, r2
    50e6:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
    50ea:	2f00      	cmp	r7, #0
    50ec:	d1ea      	bne.n	50c4 <entropy_gather_internal.part.0+0x40>
    50ee:	f06f 043c 	mvn.w	r4, #60	; 0x3c
    50f2:	e7e7      	b.n	50c4 <entropy_gather_internal.part.0+0x40>
    50f4:	4604      	mov	r4, r0
    50f6:	4620      	mov	r0, r4
    50f8:	b027      	add	sp, #156	; 0x9c
    50fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000050fc <cc_mbedtls_entropy_init>:
    50fc:	b570      	push	{r4, r5, r6, lr}
    50fe:	2500      	movs	r5, #0
    5100:	4604      	mov	r4, r0
    5102:	f504 7688 	add.w	r6, r4, #272	; 0x110
    5106:	2214      	movs	r2, #20
    5108:	4629      	mov	r1, r5
    510a:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
    510e:	30fc      	adds	r0, #252	; 0xfc
    5110:	f002 f8d9 	bl	72c6 <memset>
    5114:	2208      	movs	r2, #8
    5116:	4629      	mov	r1, r5
    5118:	4630      	mov	r0, r6
    511a:	f002 f8d4 	bl	72c6 <memset>
    511e:	4b15      	ldr	r3, [pc, #84]	; (5174 <cc_mbedtls_entropy_init+0x78>)
    5120:	4630      	mov	r0, r6
    5122:	681b      	ldr	r3, [r3, #0]
    5124:	4798      	blx	r3
    5126:	4620      	mov	r0, r4
    5128:	f840 5b04 	str.w	r5, [r0], #4
    512c:	f000 fdec 	bl	5d08 <cc_mbedtls_sha256_init>
    5130:	4b11      	ldr	r3, [pc, #68]	; (5178 <cc_mbedtls_entropy_init+0x7c>)
    5132:	4630      	mov	r0, r6
    5134:	681b      	ldr	r3, [r3, #0]
    5136:	4798      	blx	r3
    5138:	b9d8      	cbnz	r0, 5172 <cc_mbedtls_entropy_init+0x76>
    513a:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    513e:	42ab      	cmp	r3, r5
    5140:	dc11      	bgt.n	5166 <cc_mbedtls_entropy_init+0x6a>
    5142:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    5146:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    514a:	2120      	movs	r1, #32
    514c:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
    5150:	2101      	movs	r1, #1
    5152:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
    5156:	3301      	adds	r3, #1
    5158:	4908      	ldr	r1, [pc, #32]	; (517c <cc_mbedtls_entropy_init+0x80>)
    515a:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
    515e:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
    5162:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
    5166:	4b06      	ldr	r3, [pc, #24]	; (5180 <cc_mbedtls_entropy_init+0x84>)
    5168:	4630      	mov	r0, r6
    516a:	681b      	ldr	r3, [r3, #0]
    516c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5170:	4718      	bx	r3
    5172:	bd70      	pop	{r4, r5, r6, pc}
    5174:	20000140 	.word	0x20000140
    5178:	2000013c 	.word	0x2000013c
    517c:	00005b59 	.word	0x00005b59
    5180:	20000138 	.word	0x20000138

00005184 <cc_mbedtls_entropy_func>:
    5184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5188:	2a20      	cmp	r2, #32
    518a:	b088      	sub	sp, #32
    518c:	d879      	bhi.n	5282 <cc_mbedtls_entropy_func+0xfe>
    518e:	4b3e      	ldr	r3, [pc, #248]	; (5288 <cc_mbedtls_entropy_func+0x104>)
    5190:	f500 7988 	add.w	r9, r0, #272	; 0x110
    5194:	681b      	ldr	r3, [r3, #0]
    5196:	4604      	mov	r4, r0
    5198:	4648      	mov	r0, r9
    519a:	4617      	mov	r7, r2
    519c:	4688      	mov	r8, r1
    519e:	4798      	blx	r3
    51a0:	4605      	mov	r5, r0
    51a2:	b9f8      	cbnz	r0, 51e4 <cc_mbedtls_entropy_func+0x60>
    51a4:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    51a8:	f240 1601 	movw	r6, #257	; 0x101
    51ac:	2b00      	cmp	r3, #0
    51ae:	d064      	beq.n	527a <cc_mbedtls_entropy_func+0xf6>
    51b0:	4620      	mov	r0, r4
    51b2:	f7ff ff67 	bl	5084 <entropy_gather_internal.part.0>
    51b6:	4605      	mov	r5, r0
    51b8:	b938      	cbnz	r0, 51ca <cc_mbedtls_entropy_func+0x46>
    51ba:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    51be:	2b00      	cmp	r3, #0
    51c0:	dc14      	bgt.n	51ec <cc_mbedtls_entropy_func+0x68>
    51c2:	3e01      	subs	r6, #1
    51c4:	d1f2      	bne.n	51ac <cc_mbedtls_entropy_func+0x28>
    51c6:	f06f 053b 	mvn.w	r5, #59	; 0x3b
    51ca:	466e      	mov	r6, sp
    51cc:	2120      	movs	r1, #32
    51ce:	4630      	mov	r0, r6
    51d0:	f7ff fbce 	bl	4970 <mbedtls_platform_zeroize>
    51d4:	4b2d      	ldr	r3, [pc, #180]	; (528c <cc_mbedtls_entropy_func+0x108>)
    51d6:	4648      	mov	r0, r9
    51d8:	681b      	ldr	r3, [r3, #0]
    51da:	4798      	blx	r3
    51dc:	2800      	cmp	r0, #0
    51de:	bf18      	it	ne
    51e0:	f06f 051d 	mvnne.w	r5, #29
    51e4:	4628      	mov	r0, r5
    51e6:	b008      	add	sp, #32
    51e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    51ec:	e9d4 3241 	ldrd	r3, r2, [r4, #260]	; 0x104
    51f0:	4293      	cmp	r3, r2
    51f2:	d303      	bcc.n	51fc <cc_mbedtls_entropy_func+0x78>
    51f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
    51f8:	2a01      	cmp	r2, #1
    51fa:	d002      	beq.n	5202 <cc_mbedtls_entropy_func+0x7e>
    51fc:	3e01      	subs	r6, #1
    51fe:	d1d7      	bne.n	51b0 <cc_mbedtls_entropy_func+0x2c>
    5200:	e7e1      	b.n	51c6 <cc_mbedtls_entropy_func+0x42>
    5202:	2b1f      	cmp	r3, #31
    5204:	d9fa      	bls.n	51fc <cc_mbedtls_entropy_func+0x78>
    5206:	466e      	mov	r6, sp
    5208:	4601      	mov	r1, r0
    520a:	2220      	movs	r2, #32
    520c:	4630      	mov	r0, r6
    520e:	f104 0a04 	add.w	sl, r4, #4
    5212:	f002 f858 	bl	72c6 <memset>
    5216:	4631      	mov	r1, r6
    5218:	4650      	mov	r0, sl
    521a:	f000 fdcd 	bl	5db8 <cc_mbedtls_sha256_finish>
    521e:	4605      	mov	r5, r0
    5220:	2800      	cmp	r0, #0
    5222:	d1d3      	bne.n	51cc <cc_mbedtls_entropy_func+0x48>
    5224:	4650      	mov	r0, sl
    5226:	f000 fd83 	bl	5d30 <cc_mbedtls_sha256_free>
    522a:	4650      	mov	r0, sl
    522c:	f000 fd6c 	bl	5d08 <cc_mbedtls_sha256_init>
    5230:	4629      	mov	r1, r5
    5232:	4650      	mov	r0, sl
    5234:	f000 fd82 	bl	5d3c <cc_mbedtls_sha256_starts>
    5238:	4605      	mov	r5, r0
    523a:	2800      	cmp	r0, #0
    523c:	d1c6      	bne.n	51cc <cc_mbedtls_entropy_func+0x48>
    523e:	4650      	mov	r0, sl
    5240:	2220      	movs	r2, #32
    5242:	4631      	mov	r1, r6
    5244:	f000 fd8e 	bl	5d64 <cc_mbedtls_sha256_update>
    5248:	4605      	mov	r5, r0
    524a:	2800      	cmp	r0, #0
    524c:	d1be      	bne.n	51cc <cc_mbedtls_entropy_func+0x48>
    524e:	4603      	mov	r3, r0
    5250:	4632      	mov	r2, r6
    5252:	2120      	movs	r1, #32
    5254:	4630      	mov	r0, r6
    5256:	f000 ff0b 	bl	6070 <cc_mbedtls_sha256>
    525a:	4605      	mov	r5, r0
    525c:	2800      	cmp	r0, #0
    525e:	d1b5      	bne.n	51cc <cc_mbedtls_entropy_func+0x48>
    5260:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
    5264:	2b00      	cmp	r3, #0
    5266:	bfc4      	itt	gt
    5268:	2300      	movgt	r3, #0
    526a:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
    526e:	463a      	mov	r2, r7
    5270:	4640      	mov	r0, r8
    5272:	4631      	mov	r1, r6
    5274:	f002 f81c 	bl	72b0 <memcpy>
    5278:	e7a8      	b.n	51cc <cc_mbedtls_entropy_func+0x48>
    527a:	f06f 053f 	mvn.w	r5, #63	; 0x3f
    527e:	466e      	mov	r6, sp
    5280:	e7a4      	b.n	51cc <cc_mbedtls_entropy_func+0x48>
    5282:	f06f 053b 	mvn.w	r5, #59	; 0x3b
    5286:	e7ad      	b.n	51e4 <cc_mbedtls_entropy_func+0x60>
    5288:	2000013c 	.word	0x2000013c
    528c:	20000138 	.word	0x20000138

00005290 <RndStartupTest.constprop.0>:
    5290:	b530      	push	{r4, r5, lr}
    5292:	b08d      	sub	sp, #52	; 0x34
    5294:	2100      	movs	r1, #0
    5296:	2228      	movs	r2, #40	; 0x28
    5298:	a802      	add	r0, sp, #8
    529a:	9101      	str	r1, [sp, #4]
    529c:	f002 f813 	bl	72c6 <memset>
    52a0:	a802      	add	r0, sp, #8
    52a2:	f000 ff0d 	bl	60c0 <RNG_PLAT_SetUserRngParameters>
    52a6:	4604      	mov	r4, r0
    52a8:	b110      	cbz	r0, 52b0 <RndStartupTest.constprop.0+0x20>
    52aa:	4620      	mov	r0, r4
    52ac:	b00d      	add	sp, #52	; 0x34
    52ae:	bd30      	pop	{r4, r5, pc}
    52b0:	4d17      	ldr	r5, [pc, #92]	; (5310 <RndStartupTest.constprop.0+0x80>)
    52b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    52b6:	6828      	ldr	r0, [r5, #0]
    52b8:	f000 f944 	bl	5544 <CC_PalMutexLock>
    52bc:	4604      	mov	r4, r0
    52be:	b120      	cbz	r0, 52ca <RndStartupTest.constprop.0+0x3a>
    52c0:	4814      	ldr	r0, [pc, #80]	; (5314 <RndStartupTest.constprop.0+0x84>)
    52c2:	f7ff fa33 	bl	472c <CC_PalAbort>
    52c6:	2c01      	cmp	r4, #1
    52c8:	d018      	beq.n	52fc <RndStartupTest.constprop.0+0x6c>
    52ca:	2000      	movs	r0, #0
    52cc:	f000 f96a 	bl	55a4 <CC_PalPowerSaveModeSelect>
    52d0:	b9d0      	cbnz	r0, 5308 <RndStartupTest.constprop.0+0x78>
    52d2:	4a11      	ldr	r2, [pc, #68]	; (5318 <RndStartupTest.constprop.0+0x88>)
    52d4:	a902      	add	r1, sp, #8
    52d6:	a801      	add	r0, sp, #4
    52d8:	f000 fc30 	bl	5b3c <LLF_RND_RunTrngStartupTest>
    52dc:	4604      	mov	r4, r0
    52de:	2001      	movs	r0, #1
    52e0:	f000 f960 	bl	55a4 <CC_PalPowerSaveModeSelect>
    52e4:	b960      	cbnz	r0, 5300 <RndStartupTest.constprop.0+0x70>
    52e6:	6828      	ldr	r0, [r5, #0]
    52e8:	f000 f934 	bl	5554 <CC_PalMutexUnlock>
    52ec:	2800      	cmp	r0, #0
    52ee:	d0dc      	beq.n	52aa <RndStartupTest.constprop.0+0x1a>
    52f0:	480a      	ldr	r0, [pc, #40]	; (531c <RndStartupTest.constprop.0+0x8c>)
    52f2:	f7ff fa1b 	bl	472c <CC_PalAbort>
    52f6:	4620      	mov	r0, r4
    52f8:	b00d      	add	sp, #52	; 0x34
    52fa:	bd30      	pop	{r4, r5, pc}
    52fc:	2405      	movs	r4, #5
    52fe:	e7f2      	b.n	52e6 <RndStartupTest.constprop.0+0x56>
    5300:	4807      	ldr	r0, [pc, #28]	; (5320 <RndStartupTest.constprop.0+0x90>)
    5302:	f7ff fa13 	bl	472c <CC_PalAbort>
    5306:	e7ee      	b.n	52e6 <RndStartupTest.constprop.0+0x56>
    5308:	4806      	ldr	r0, [pc, #24]	; (5324 <RndStartupTest.constprop.0+0x94>)
    530a:	f7ff fa0f 	bl	472c <CC_PalAbort>
    530e:	e7e0      	b.n	52d2 <RndStartupTest.constprop.0+0x42>
    5310:	20000124 	.word	0x20000124
    5314:	00007fb8 	.word	0x00007fb8
    5318:	20000fe8 	.word	0x20000fe8
    531c:	00008010 	.word	0x00008010
    5320:	00007ff0 	.word	0x00007ff0
    5324:	00007fd0 	.word	0x00007fd0

00005328 <CC_LibInit>:
    5328:	b530      	push	{r4, r5, lr}
    532a:	b083      	sub	sp, #12
    532c:	f000 f85c 	bl	53e8 <CC_HalInit>
    5330:	b128      	cbz	r0, 533e <CC_LibInit+0x16>
    5332:	f000 f8ab 	bl	548c <CC_PalTerminate>
    5336:	2403      	movs	r4, #3
    5338:	4620      	mov	r0, r4
    533a:	b003      	add	sp, #12
    533c:	bd30      	pop	{r4, r5, pc}
    533e:	f000 f877 	bl	5430 <CC_PalInit>
    5342:	b9d8      	cbnz	r0, 537c <CC_LibInit+0x54>
    5344:	f000 f92e 	bl	55a4 <CC_PalPowerSaveModeSelect>
    5348:	b9e0      	cbnz	r0, 5384 <CC_LibInit+0x5c>
    534a:	4c22      	ldr	r4, [pc, #136]	; (53d4 <CC_LibInit+0xac>)
    534c:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
    5350:	0e1b      	lsrs	r3, r3, #24
    5352:	2bf0      	cmp	r3, #240	; 0xf0
    5354:	d10a      	bne.n	536c <CC_LibInit+0x44>
    5356:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
    535a:	4b1f      	ldr	r3, [pc, #124]	; (53d8 <CC_LibInit+0xb0>)
    535c:	429a      	cmp	r2, r3
    535e:	d031      	beq.n	53c4 <CC_LibInit+0x9c>
    5360:	f000 f844 	bl	53ec <CC_HalTerminate>
    5364:	2407      	movs	r4, #7
    5366:	f000 f891 	bl	548c <CC_PalTerminate>
    536a:	e7e5      	b.n	5338 <CC_LibInit+0x10>
    536c:	f000 f83e 	bl	53ec <CC_HalTerminate>
    5370:	f000 f88c 	bl	548c <CC_PalTerminate>
    5374:	2406      	movs	r4, #6
    5376:	4620      	mov	r0, r4
    5378:	b003      	add	sp, #12
    537a:	bd30      	pop	{r4, r5, pc}
    537c:	2404      	movs	r4, #4
    537e:	4620      	mov	r0, r4
    5380:	b003      	add	sp, #12
    5382:	bd30      	pop	{r4, r5, pc}
    5384:	f000 f832 	bl	53ec <CC_HalTerminate>
    5388:	f000 f880 	bl	548c <CC_PalTerminate>
    538c:	f7ff ff80 	bl	5290 <RndStartupTest.constprop.0>
    5390:	4604      	mov	r4, r0
    5392:	b998      	cbnz	r0, 53bc <CC_LibInit+0x94>
    5394:	4d11      	ldr	r5, [pc, #68]	; (53dc <CC_LibInit+0xb4>)
    5396:	682b      	ldr	r3, [r5, #0]
    5398:	2b00      	cmp	r3, #0
    539a:	d1cd      	bne.n	5338 <CC_LibInit+0x10>
    539c:	4602      	mov	r2, r0
    539e:	4601      	mov	r1, r0
    53a0:	f7ff f9e6 	bl	4770 <nrf_cc3xx_platform_ctr_drbg_init>
    53a4:	b950      	cbnz	r0, 53bc <CC_LibInit+0x94>
    53a6:	490e      	ldr	r1, [pc, #56]	; (53e0 <CC_LibInit+0xb8>)
    53a8:	ab01      	add	r3, sp, #4
    53aa:	2268      	movs	r2, #104	; 0x68
    53ac:	f7ff fa10 	bl	47d0 <nrf_cc3xx_platform_ctr_drbg_get>
    53b0:	b920      	cbnz	r0, 53bc <CC_LibInit+0x94>
    53b2:	4b0c      	ldr	r3, [pc, #48]	; (53e4 <CC_LibInit+0xbc>)
    53b4:	602b      	str	r3, [r5, #0]
    53b6:	4620      	mov	r0, r4
    53b8:	b003      	add	sp, #12
    53ba:	bd30      	pop	{r4, r5, pc}
    53bc:	2405      	movs	r4, #5
    53be:	4620      	mov	r0, r4
    53c0:	b003      	add	sp, #12
    53c2:	bd30      	pop	{r4, r5, pc}
    53c4:	2001      	movs	r0, #1
    53c6:	f000 f8ed 	bl	55a4 <CC_PalPowerSaveModeSelect>
    53ca:	2800      	cmp	r0, #0
    53cc:	d1da      	bne.n	5384 <CC_LibInit+0x5c>
    53ce:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
    53d2:	e7db      	b.n	538c <CC_LibInit+0x64>
    53d4:	5002b000 	.word	0x5002b000
    53d8:	20e00000 	.word	0x20e00000
    53dc:	20001208 	.word	0x20001208
    53e0:	2000120c 	.word	0x2000120c
    53e4:	5a5aea5a 	.word	0x5a5aea5a

000053e8 <CC_HalInit>:
    53e8:	2000      	movs	r0, #0
    53ea:	4770      	bx	lr

000053ec <CC_HalTerminate>:
    53ec:	2000      	movs	r0, #0
    53ee:	4770      	bx	lr

000053f0 <CC_HalClearInterruptBit>:
    53f0:	0543      	lsls	r3, r0, #21
    53f2:	d504      	bpl.n	53fe <CC_HalClearInterruptBit+0xe>
    53f4:	4b04      	ldr	r3, [pc, #16]	; (5408 <CC_HalClearInterruptBit+0x18>)
    53f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    53fa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    53fe:	4b02      	ldr	r3, [pc, #8]	; (5408 <CC_HalClearInterruptBit+0x18>)
    5400:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
    5404:	4770      	bx	lr
    5406:	bf00      	nop
    5408:	5002b000 	.word	0x5002b000

0000540c <CC_HalMaskInterrupt>:
    540c:	4b01      	ldr	r3, [pc, #4]	; (5414 <CC_HalMaskInterrupt+0x8>)
    540e:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    5412:	4770      	bx	lr
    5414:	5002b000 	.word	0x5002b000

00005418 <CC_HalWaitInterrupt>:
    5418:	b108      	cbz	r0, 541e <CC_HalWaitInterrupt+0x6>
    541a:	f000 b86b 	b.w	54f4 <CC_PalWaitInterrupt>
    541e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    5422:	4770      	bx	lr

00005424 <CC_HalWaitInterruptRND>:
    5424:	b108      	cbz	r0, 542a <CC_HalWaitInterruptRND+0x6>
    5426:	f000 b84f 	b.w	54c8 <CC_PalWaitInterruptRND>
    542a:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    542e:	4770      	bx	lr

00005430 <CC_PalInit>:
    5430:	b510      	push	{r4, lr}
    5432:	4811      	ldr	r0, [pc, #68]	; (5478 <CC_PalInit+0x48>)
    5434:	f000 f872 	bl	551c <CC_PalMutexCreate>
    5438:	b100      	cbz	r0, 543c <CC_PalInit+0xc>
    543a:	bd10      	pop	{r4, pc}
    543c:	480f      	ldr	r0, [pc, #60]	; (547c <CC_PalInit+0x4c>)
    543e:	f000 f86d 	bl	551c <CC_PalMutexCreate>
    5442:	2800      	cmp	r0, #0
    5444:	d1f9      	bne.n	543a <CC_PalInit+0xa>
    5446:	4c0e      	ldr	r4, [pc, #56]	; (5480 <CC_PalInit+0x50>)
    5448:	4620      	mov	r0, r4
    544a:	f000 f867 	bl	551c <CC_PalMutexCreate>
    544e:	2800      	cmp	r0, #0
    5450:	d1f3      	bne.n	543a <CC_PalInit+0xa>
    5452:	4b0c      	ldr	r3, [pc, #48]	; (5484 <CC_PalInit+0x54>)
    5454:	480c      	ldr	r0, [pc, #48]	; (5488 <CC_PalInit+0x58>)
    5456:	601c      	str	r4, [r3, #0]
    5458:	f000 f860 	bl	551c <CC_PalMutexCreate>
    545c:	4601      	mov	r1, r0
    545e:	2800      	cmp	r0, #0
    5460:	d1eb      	bne.n	543a <CC_PalInit+0xa>
    5462:	f000 f82d 	bl	54c0 <CC_PalDmaInit>
    5466:	4604      	mov	r4, r0
    5468:	b108      	cbz	r0, 546e <CC_PalInit+0x3e>
    546a:	4620      	mov	r0, r4
    546c:	bd10      	pop	{r4, pc}
    546e:	f000 f87b 	bl	5568 <CC_PalPowerSaveModeInit>
    5472:	4620      	mov	r0, r4
    5474:	e7fa      	b.n	546c <CC_PalInit+0x3c>
    5476:	bf00      	nop
    5478:	20000134 	.word	0x20000134
    547c:	20000130 	.word	0x20000130
    5480:	2000012c 	.word	0x2000012c
    5484:	20000124 	.word	0x20000124
    5488:	20000128 	.word	0x20000128

0000548c <CC_PalTerminate>:
    548c:	b508      	push	{r3, lr}
    548e:	4808      	ldr	r0, [pc, #32]	; (54b0 <CC_PalTerminate+0x24>)
    5490:	f000 f84e 	bl	5530 <CC_PalMutexDestroy>
    5494:	4807      	ldr	r0, [pc, #28]	; (54b4 <CC_PalTerminate+0x28>)
    5496:	f000 f84b 	bl	5530 <CC_PalMutexDestroy>
    549a:	4807      	ldr	r0, [pc, #28]	; (54b8 <CC_PalTerminate+0x2c>)
    549c:	f000 f848 	bl	5530 <CC_PalMutexDestroy>
    54a0:	4806      	ldr	r0, [pc, #24]	; (54bc <CC_PalTerminate+0x30>)
    54a2:	f000 f845 	bl	5530 <CC_PalMutexDestroy>
    54a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    54aa:	f000 b80b 	b.w	54c4 <CC_PalDmaTerminate>
    54ae:	bf00      	nop
    54b0:	20000134 	.word	0x20000134
    54b4:	20000130 	.word	0x20000130
    54b8:	2000012c 	.word	0x2000012c
    54bc:	20000128 	.word	0x20000128

000054c0 <CC_PalDmaInit>:
    54c0:	2000      	movs	r0, #0
    54c2:	4770      	bx	lr

000054c4 <CC_PalDmaTerminate>:
    54c4:	4770      	bx	lr
    54c6:	bf00      	nop

000054c8 <CC_PalWaitInterruptRND>:
    54c8:	b410      	push	{r4}
    54ca:	4c09      	ldr	r4, [pc, #36]	; (54f0 <CC_PalWaitInterruptRND+0x28>)
    54cc:	4602      	mov	r2, r0
    54ce:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
    54d2:	4213      	tst	r3, r2
    54d4:	d0fb      	beq.n	54ce <CC_PalWaitInterruptRND+0x6>
    54d6:	b121      	cbz	r1, 54e2 <CC_PalWaitInterruptRND+0x1a>
    54d8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    54dc:	600b      	str	r3, [r1, #0]
    54de:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    54e2:	4b03      	ldr	r3, [pc, #12]	; (54f0 <CC_PalWaitInterruptRND+0x28>)
    54e4:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
    54e8:	2000      	movs	r0, #0
    54ea:	bc10      	pop	{r4}
    54ec:	4770      	bx	lr
    54ee:	bf00      	nop
    54f0:	5002b000 	.word	0x5002b000

000054f4 <CC_PalWaitInterrupt>:
    54f4:	4a04      	ldr	r2, [pc, #16]	; (5508 <CC_PalWaitInterrupt+0x14>)
    54f6:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
    54fa:	4218      	tst	r0, r3
    54fc:	d0fb      	beq.n	54f6 <CC_PalWaitInterrupt+0x2>
    54fe:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
    5502:	2000      	movs	r0, #0
    5504:	4770      	bx	lr
    5506:	bf00      	nop
    5508:	5002b000 	.word	0x5002b000

0000550c <CC_PalMemCopyPlat>:
    550c:	f001 beb9 	b.w	7282 <memmove>

00005510 <CC_PalMemSetPlat>:
    5510:	f001 bed9 	b.w	72c6 <memset>

00005514 <CC_PalMemSetZeroPlat>:
    5514:	460a      	mov	r2, r1
    5516:	2100      	movs	r1, #0
    5518:	f001 bed5 	b.w	72c6 <memset>

0000551c <CC_PalMutexCreate>:
    551c:	b508      	push	{r3, lr}
    551e:	4b03      	ldr	r3, [pc, #12]	; (552c <CC_PalMutexCreate+0x10>)
    5520:	6802      	ldr	r2, [r0, #0]
    5522:	681b      	ldr	r3, [r3, #0]
    5524:	6810      	ldr	r0, [r2, #0]
    5526:	4798      	blx	r3
    5528:	2000      	movs	r0, #0
    552a:	bd08      	pop	{r3, pc}
    552c:	200000f0 	.word	0x200000f0

00005530 <CC_PalMutexDestroy>:
    5530:	b508      	push	{r3, lr}
    5532:	4b03      	ldr	r3, [pc, #12]	; (5540 <CC_PalMutexDestroy+0x10>)
    5534:	6802      	ldr	r2, [r0, #0]
    5536:	685b      	ldr	r3, [r3, #4]
    5538:	6810      	ldr	r0, [r2, #0]
    553a:	4798      	blx	r3
    553c:	2000      	movs	r0, #0
    553e:	bd08      	pop	{r3, pc}
    5540:	200000f0 	.word	0x200000f0

00005544 <CC_PalMutexLock>:
    5544:	4b02      	ldr	r3, [pc, #8]	; (5550 <CC_PalMutexLock+0xc>)
    5546:	6802      	ldr	r2, [r0, #0]
    5548:	689b      	ldr	r3, [r3, #8]
    554a:	6810      	ldr	r0, [r2, #0]
    554c:	4718      	bx	r3
    554e:	bf00      	nop
    5550:	200000f0 	.word	0x200000f0

00005554 <CC_PalMutexUnlock>:
    5554:	b508      	push	{r3, lr}
    5556:	4b03      	ldr	r3, [pc, #12]	; (5564 <CC_PalMutexUnlock+0x10>)
    5558:	6802      	ldr	r2, [r0, #0]
    555a:	68db      	ldr	r3, [r3, #12]
    555c:	6810      	ldr	r0, [r2, #0]
    555e:	4798      	blx	r3
    5560:	2000      	movs	r0, #0
    5562:	bd08      	pop	{r3, pc}
    5564:	200000f0 	.word	0x200000f0

00005568 <CC_PalPowerSaveModeInit>:
    5568:	b570      	push	{r4, r5, r6, lr}
    556a:	4c09      	ldr	r4, [pc, #36]	; (5590 <CC_PalPowerSaveModeInit+0x28>)
    556c:	4d09      	ldr	r5, [pc, #36]	; (5594 <CC_PalPowerSaveModeInit+0x2c>)
    556e:	6920      	ldr	r0, [r4, #16]
    5570:	68ab      	ldr	r3, [r5, #8]
    5572:	4798      	blx	r3
    5574:	b118      	cbz	r0, 557e <CC_PalPowerSaveModeInit+0x16>
    5576:	4b08      	ldr	r3, [pc, #32]	; (5598 <CC_PalPowerSaveModeInit+0x30>)
    5578:	4808      	ldr	r0, [pc, #32]	; (559c <CC_PalPowerSaveModeInit+0x34>)
    557a:	685b      	ldr	r3, [r3, #4]
    557c:	4798      	blx	r3
    557e:	4a08      	ldr	r2, [pc, #32]	; (55a0 <CC_PalPowerSaveModeInit+0x38>)
    5580:	68eb      	ldr	r3, [r5, #12]
    5582:	6920      	ldr	r0, [r4, #16]
    5584:	2100      	movs	r1, #0
    5586:	6011      	str	r1, [r2, #0]
    5588:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    558c:	4718      	bx	r3
    558e:	bf00      	nop
    5590:	200000dc 	.word	0x200000dc
    5594:	200000f0 	.word	0x200000f0
    5598:	200000d4 	.word	0x200000d4
    559c:	00008028 	.word	0x00008028
    55a0:	20001274 	.word	0x20001274

000055a4 <CC_PalPowerSaveModeSelect>:
    55a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55a6:	4d1a      	ldr	r5, [pc, #104]	; (5610 <CC_PalPowerSaveModeSelect+0x6c>)
    55a8:	4e1a      	ldr	r6, [pc, #104]	; (5614 <CC_PalPowerSaveModeSelect+0x70>)
    55aa:	4604      	mov	r4, r0
    55ac:	68b2      	ldr	r2, [r6, #8]
    55ae:	6928      	ldr	r0, [r5, #16]
    55b0:	4790      	blx	r2
    55b2:	b9e8      	cbnz	r0, 55f0 <CC_PalPowerSaveModeSelect+0x4c>
    55b4:	4f18      	ldr	r7, [pc, #96]	; (5618 <CC_PalPowerSaveModeSelect+0x74>)
    55b6:	683b      	ldr	r3, [r7, #0]
    55b8:	b14c      	cbz	r4, 55ce <CC_PalPowerSaveModeSelect+0x2a>
    55ba:	b1a3      	cbz	r3, 55e6 <CC_PalPowerSaveModeSelect+0x42>
    55bc:	2b01      	cmp	r3, #1
    55be:	d019      	beq.n	55f4 <CC_PalPowerSaveModeSelect+0x50>
    55c0:	3b01      	subs	r3, #1
    55c2:	603b      	str	r3, [r7, #0]
    55c4:	6928      	ldr	r0, [r5, #16]
    55c6:	68f3      	ldr	r3, [r6, #12]
    55c8:	4798      	blx	r3
    55ca:	2000      	movs	r0, #0
    55cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    55ce:	b943      	cbnz	r3, 55e2 <CC_PalPowerSaveModeSelect+0x3e>
    55d0:	4a12      	ldr	r2, [pc, #72]	; (561c <CC_PalPowerSaveModeSelect+0x78>)
    55d2:	2101      	movs	r1, #1
    55d4:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    55d8:	4911      	ldr	r1, [pc, #68]	; (5620 <CC_PalPowerSaveModeSelect+0x7c>)
    55da:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    55de:	2a00      	cmp	r2, #0
    55e0:	d1fb      	bne.n	55da <CC_PalPowerSaveModeSelect+0x36>
    55e2:	3301      	adds	r3, #1
    55e4:	603b      	str	r3, [r7, #0]
    55e6:	68f3      	ldr	r3, [r6, #12]
    55e8:	6928      	ldr	r0, [r5, #16]
    55ea:	4798      	blx	r3
    55ec:	2000      	movs	r0, #0
    55ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    55f0:	480c      	ldr	r0, [pc, #48]	; (5624 <CC_PalPowerSaveModeSelect+0x80>)
    55f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    55f4:	4a0a      	ldr	r2, [pc, #40]	; (5620 <CC_PalPowerSaveModeSelect+0x7c>)
    55f6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    55fa:	2b00      	cmp	r3, #0
    55fc:	d1fb      	bne.n	55f6 <CC_PalPowerSaveModeSelect+0x52>
    55fe:	4a07      	ldr	r2, [pc, #28]	; (561c <CC_PalPowerSaveModeSelect+0x78>)
    5600:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    5604:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    5608:	f7ff ff00 	bl	540c <CC_HalMaskInterrupt>
    560c:	683b      	ldr	r3, [r7, #0]
    560e:	e7d7      	b.n	55c0 <CC_PalPowerSaveModeSelect+0x1c>
    5610:	200000dc 	.word	0x200000dc
    5614:	200000f0 	.word	0x200000f0
    5618:	20001274 	.word	0x20001274
    561c:	5002a000 	.word	0x5002a000
    5620:	5002b000 	.word	0x5002b000
    5624:	ffff8fe9 	.word	0xffff8fe9

00005628 <mutex_init>:
    5628:	4b01      	ldr	r3, [pc, #4]	; (5630 <mutex_init+0x8>)
    562a:	681b      	ldr	r3, [r3, #0]
    562c:	4718      	bx	r3
    562e:	bf00      	nop
    5630:	200000f0 	.word	0x200000f0

00005634 <mutex_lock>:
    5634:	4b01      	ldr	r3, [pc, #4]	; (563c <mutex_lock+0x8>)
    5636:	689b      	ldr	r3, [r3, #8]
    5638:	4718      	bx	r3
    563a:	bf00      	nop
    563c:	200000f0 	.word	0x200000f0

00005640 <mutex_unlock>:
    5640:	4b01      	ldr	r3, [pc, #4]	; (5648 <mutex_unlock+0x8>)
    5642:	68db      	ldr	r3, [r3, #12]
    5644:	4718      	bx	r3
    5646:	bf00      	nop
    5648:	200000f0 	.word	0x200000f0

0000564c <startTrngHW>:
    564c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5650:	2800      	cmp	r0, #0
    5652:	d078      	beq.n	5746 <startTrngHW+0xfa>
    5654:	460c      	mov	r4, r1
    5656:	2900      	cmp	r1, #0
    5658:	d075      	beq.n	5746 <startTrngHW+0xfa>
    565a:	461d      	mov	r5, r3
    565c:	2b00      	cmp	r3, #0
    565e:	d072      	beq.n	5746 <startTrngHW+0xfa>
    5660:	4607      	mov	r7, r0
    5662:	b11a      	cbz	r2, 566c <startTrngHW+0x20>
    5664:	2201      	movs	r2, #1
    5666:	2300      	movs	r3, #0
    5668:	602a      	str	r2, [r5, #0]
    566a:	6003      	str	r3, [r0, #0]
    566c:	682b      	ldr	r3, [r5, #0]
    566e:	2b00      	cmp	r3, #0
    5670:	d064      	beq.n	573c <startTrngHW+0xf0>
    5672:	4629      	mov	r1, r5
    5674:	4620      	mov	r0, r4
    5676:	f000 fddb 	bl	6230 <LLF_RND_GetFastestRosc>
    567a:	4680      	mov	r8, r0
    567c:	2800      	cmp	r0, #0
    567e:	d15f      	bne.n	5740 <startTrngHW+0xf4>
    5680:	6828      	ldr	r0, [r5, #0]
    5682:	4621      	mov	r1, r4
    5684:	f000 fdba 	bl	61fc <LLF_RND_GetRoscSampleCnt>
    5688:	4680      	mov	r8, r0
    568a:	2800      	cmp	r0, #0
    568c:	d158      	bne.n	5740 <startTrngHW+0xf4>
    568e:	682b      	ldr	r3, [r5, #0]
    5690:	2b08      	cmp	r3, #8
    5692:	d06c      	beq.n	576e <startTrngHW+0x122>
    5694:	2b04      	cmp	r3, #4
    5696:	d06d      	beq.n	5774 <startTrngHW+0x128>
    5698:	f1a3 0902 	sub.w	r9, r3, #2
    569c:	fab9 f989 	clz	r9, r9
    56a0:	ea4f 1959 	mov.w	r9, r9, lsr #5
    56a4:	4e35      	ldr	r6, [pc, #212]	; (577c <startTrngHW+0x130>)
    56a6:	2101      	movs	r1, #1
    56a8:	f8c6 11c4 	str.w	r1, [r6, #452]	; 0x1c4
    56ac:	f8c6 1140 	str.w	r1, [r6, #320]	; 0x140
    56b0:	f8c6 11c4 	str.w	r1, [r6, #452]	; 0x1c4
    56b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    56b6:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
    56ba:	f8d6 2130 	ldr.w	r2, [r6, #304]	; 0x130
    56be:	4293      	cmp	r3, r2
    56c0:	d1f6      	bne.n	56b0 <startTrngHW+0x64>
    56c2:	f04f 0a00 	mov.w	sl, #0
    56c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    56ca:	f8c6 a12c 	str.w	sl, [r6, #300]	; 0x12c
    56ce:	f7ff fe8f 	bl	53f0 <CC_HalClearInterruptBit>
    56d2:	f06f 031b 	mvn.w	r3, #27
    56d6:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    56da:	4650      	mov	r0, sl
    56dc:	f7ff fe96 	bl	540c <CC_HalMaskInterrupt>
    56e0:	f8c6 910c 	str.w	r9, [r6, #268]	; 0x10c
    56e4:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
    56e8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    56ec:	f7ff fe8e 	bl	540c <CC_HalMaskInterrupt>
    56f0:	230a      	movs	r3, #10
    56f2:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
    56f6:	9b08      	ldr	r3, [sp, #32]
    56f8:	2b01      	cmp	r3, #1
    56fa:	d029      	beq.n	5750 <startTrngHW+0x104>
    56fc:	6923      	ldr	r3, [r4, #16]
    56fe:	4a20      	ldr	r2, [pc, #128]	; (5780 <startTrngHW+0x134>)
    5700:	fba2 2303 	umull	r2, r3, r2, r3
    5704:	091b      	lsrs	r3, r3, #4
    5706:	6a62      	ldr	r2, [r4, #36]	; 0x24
    5708:	fb02 f303 	mul.w	r3, r2, r3
    570c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5710:	4a1a      	ldr	r2, [pc, #104]	; (577c <startTrngHW+0x130>)
    5712:	03db      	lsls	r3, r3, #15
    5714:	099b      	lsrs	r3, r3, #6
    5716:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8
    571a:	2301      	movs	r3, #1
    571c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
    5720:	683b      	ldr	r3, [r7, #0]
    5722:	682a      	ldr	r2, [r5, #0]
    5724:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    5728:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    572c:	603b      	str	r3, [r7, #0]
    572e:	682a      	ldr	r2, [r5, #0]
    5730:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5734:	603b      	str	r3, [r7, #0]
    5736:	4640      	mov	r0, r8
    5738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    573c:	f8df 8044 	ldr.w	r8, [pc, #68]	; 5784 <startTrngHW+0x138>
    5740:	4640      	mov	r0, r8
    5742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5746:	f8df 8040 	ldr.w	r8, [pc, #64]	; 5788 <startTrngHW+0x13c>
    574a:	4640      	mov	r0, r8
    574c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5750:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5754:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
    5758:	3201      	adds	r2, #1
    575a:	d006      	beq.n	576a <startTrngHW+0x11e>
    575c:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
    5760:	4a07      	ldr	r2, [pc, #28]	; (5780 <startTrngHW+0x134>)
    5762:	fba2 2303 	umull	r2, r3, r2, r3
    5766:	091b      	lsrs	r3, r3, #4
    5768:	e7cd      	b.n	5706 <startTrngHW+0xba>
    576a:	2316      	movs	r3, #22
    576c:	e7cb      	b.n	5706 <startTrngHW+0xba>
    576e:	f04f 0903 	mov.w	r9, #3
    5772:	e797      	b.n	56a4 <startTrngHW+0x58>
    5774:	f04f 0902 	mov.w	r9, #2
    5778:	e794      	b.n	56a4 <startTrngHW+0x58>
    577a:	bf00      	nop
    577c:	5002b000 	.word	0x5002b000
    5780:	aaaaaaab 	.word	0xaaaaaaab
    5784:	00f10c31 	.word	0x00f10c31
    5788:	00f10c35 	.word	0x00f10c35

0000578c <LLF_RND_RepetitionCounterTest>:
    578c:	b350      	cbz	r0, 57e4 <LLF_RND_RepetitionCounterTest+0x58>
    578e:	1e4b      	subs	r3, r1, #1
    5790:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
    5794:	d226      	bcs.n	57e4 <LLF_RND_RepetitionCounterTest+0x58>
    5796:	f04f 0c00 	mov.w	ip, #0
    579a:	b530      	push	{r4, r5, lr}
    579c:	00cd      	lsls	r5, r1, #3
    579e:	46e6      	mov	lr, ip
    57a0:	4664      	mov	r4, ip
    57a2:	0963      	lsrs	r3, r4, #5
    57a4:	f004 011f 	and.w	r1, r4, #31
    57a8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    57ac:	291f      	cmp	r1, #31
    57ae:	fa23 f301 	lsr.w	r3, r3, r1
    57b2:	d006      	beq.n	57c2 <LLF_RND_RepetitionCounterTest+0x36>
    57b4:	f003 0301 	and.w	r3, r3, #1
    57b8:	b91c      	cbnz	r4, 57c2 <LLF_RND_RepetitionCounterTest+0x36>
    57ba:	2401      	movs	r4, #1
    57bc:	469e      	mov	lr, r3
    57be:	46a4      	mov	ip, r4
    57c0:	e7ef      	b.n	57a2 <LLF_RND_RepetitionCounterTest+0x16>
    57c2:	459e      	cmp	lr, r3
    57c4:	f104 0401 	add.w	r4, r4, #1
    57c8:	d006      	beq.n	57d8 <LLF_RND_RepetitionCounterTest+0x4c>
    57ca:	469e      	mov	lr, r3
    57cc:	f04f 0c01 	mov.w	ip, #1
    57d0:	42ac      	cmp	r4, r5
    57d2:	d1e6      	bne.n	57a2 <LLF_RND_RepetitionCounterTest+0x16>
    57d4:	2000      	movs	r0, #0
    57d6:	bd30      	pop	{r4, r5, pc}
    57d8:	f10c 0c01 	add.w	ip, ip, #1
    57dc:	4594      	cmp	ip, r2
    57de:	d1f7      	bne.n	57d0 <LLF_RND_RepetitionCounterTest+0x44>
    57e0:	4801      	ldr	r0, [pc, #4]	; (57e8 <LLF_RND_RepetitionCounterTest+0x5c>)
    57e2:	bd30      	pop	{r4, r5, pc}
    57e4:	4800      	ldr	r0, [pc, #0]	; (57e8 <LLF_RND_RepetitionCounterTest+0x5c>)
    57e6:	4770      	bx	lr
    57e8:	00f10c36 	.word	0x00f10c36

000057ec <LLF_RND_AdaptiveProportionTest>:
    57ec:	b3c8      	cbz	r0, 5862 <LLF_RND_AdaptiveProportionTest+0x76>
    57ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    57f2:	1e4c      	subs	r4, r1, #1
    57f4:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
    57f8:	d21c      	bcs.n	5834 <LLF_RND_AdaptiveProportionTest+0x48>
    57fa:	b1db      	cbz	r3, 5834 <LLF_RND_AdaptiveProportionTest+0x48>
    57fc:	b1d2      	cbz	r2, 5834 <LLF_RND_AdaptiveProportionTest+0x48>
    57fe:	f04f 0e00 	mov.w	lr, #0
    5802:	00cf      	lsls	r7, r1, #3
    5804:	4676      	mov	r6, lr
    5806:	46f0      	mov	r8, lr
    5808:	4675      	mov	r5, lr
    580a:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
    580e:	096c      	lsrs	r4, r5, #5
    5810:	f005 011f 	and.w	r1, r5, #31
    5814:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    5818:	291f      	cmp	r1, #31
    581a:	fa24 fc01 	lsr.w	ip, r4, r1
    581e:	d00c      	beq.n	583a <LLF_RND_AdaptiveProportionTest+0x4e>
    5820:	f00c 0c01 	and.w	ip, ip, #1
    5824:	b94d      	cbnz	r5, 583a <LLF_RND_AdaptiveProportionTest+0x4e>
    5826:	2601      	movs	r6, #1
    5828:	46e0      	mov	r8, ip
    582a:	4635      	mov	r5, r6
    582c:	46b6      	mov	lr, r6
    582e:	e7ee      	b.n	580e <LLF_RND_AdaptiveProportionTest+0x22>
    5830:	4296      	cmp	r6, r2
    5832:	d918      	bls.n	5866 <LLF_RND_AdaptiveProportionTest+0x7a>
    5834:	480d      	ldr	r0, [pc, #52]	; (586c <LLF_RND_AdaptiveProportionTest+0x80>)
    5836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    583a:	4573      	cmp	r3, lr
    583c:	d00c      	beq.n	5858 <LLF_RND_AdaptiveProportionTest+0x6c>
    583e:	45c4      	cmp	ip, r8
    5840:	bf08      	it	eq
    5842:	3601      	addeq	r6, #1
    5844:	45f1      	cmp	r9, lr
    5846:	d0f3      	beq.n	5830 <LLF_RND_AdaptiveProportionTest+0x44>
    5848:	f10e 0e01 	add.w	lr, lr, #1
    584c:	3501      	adds	r5, #1
    584e:	42bd      	cmp	r5, r7
    5850:	d1dd      	bne.n	580e <LLF_RND_AdaptiveProportionTest+0x22>
    5852:	2000      	movs	r0, #0
    5854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5858:	f04f 0e01 	mov.w	lr, #1
    585c:	46e0      	mov	r8, ip
    585e:	4676      	mov	r6, lr
    5860:	e7f4      	b.n	584c <LLF_RND_AdaptiveProportionTest+0x60>
    5862:	4802      	ldr	r0, [pc, #8]	; (586c <LLF_RND_AdaptiveProportionTest+0x80>)
    5864:	4770      	bx	lr
    5866:	469e      	mov	lr, r3
    5868:	e7f0      	b.n	584c <LLF_RND_AdaptiveProportionTest+0x60>
    586a:	bf00      	nop
    586c:	00f10c37 	.word	0x00f10c37

00005870 <getTrngSource>:
    5870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5874:	b091      	sub	sp, #68	; 0x44
    5876:	460d      	mov	r5, r1
    5878:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
    587c:	4682      	mov	sl, r0
    587e:	2900      	cmp	r1, #0
    5880:	d16e      	bne.n	5960 <getTrngSource+0xf0>
    5882:	6928      	ldr	r0, [r5, #16]
    5884:	9006      	str	r0, [sp, #24]
    5886:	981a      	ldr	r0, [sp, #104]	; 0x68
    5888:	601c      	str	r4, [r3, #0]
    588a:	2300      	movs	r3, #0
    588c:	6003      	str	r3, [r0, #0]
    588e:	2a00      	cmp	r2, #0
    5890:	f000 812e 	beq.w	5af0 <getTrngSource+0x280>
    5894:	4b9c      	ldr	r3, [pc, #624]	; (5b08 <getTrngSource+0x298>)
    5896:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    5898:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
    589c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    58a0:	429a      	cmp	r2, r3
    58a2:	d169      	bne.n	5978 <getTrngSource+0x108>
    58a4:	290a      	cmp	r1, #10
    58a6:	d167      	bne.n	5978 <getTrngSource+0x108>
    58a8:	f89a 3003 	ldrb.w	r3, [sl, #3]
    58ac:	9308      	str	r3, [sp, #32]
    58ae:	f104 0308 	add.w	r3, r4, #8
    58b2:	9906      	ldr	r1, [sp, #24]
    58b4:	9307      	str	r3, [sp, #28]
    58b6:	4b95      	ldr	r3, [pc, #596]	; (5b0c <getTrngSource+0x29c>)
    58b8:	4c93      	ldr	r4, [pc, #588]	; (5b08 <getTrngSource+0x298>)
    58ba:	fba3 2301 	umull	r2, r3, r3, r1
    58be:	089b      	lsrs	r3, r3, #2
    58c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    58c4:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
    58c8:	9303      	str	r3, [sp, #12]
    58ca:	2304      	movs	r3, #4
    58cc:	9305      	str	r3, [sp, #20]
    58ce:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    58d0:	9e06      	ldr	r6, [sp, #24]
    58d2:	601e      	str	r6, [r3, #0]
    58d4:	2e00      	cmp	r6, #0
    58d6:	f000 80e9 	beq.w	5aac <getTrngSource+0x23c>
    58da:	2700      	movs	r7, #0
    58dc:	f000 fcb8 	bl	6250 <LLF_RND_TurnOffTrng>
    58e0:	9709      	str	r7, [sp, #36]	; 0x24
    58e2:	f1ba 0f00 	cmp.w	sl, #0
    58e6:	f000 80d5 	beq.w	5a94 <getTrngSource+0x224>
    58ea:	f8dd 801c 	ldr.w	r8, [sp, #28]
    58ee:	f04f 0901 	mov.w	r9, #1
    58f2:	2d00      	cmp	r5, #0
    58f4:	f000 80ce 	beq.w	5a94 <getTrngSource+0x224>
    58f8:	9b08      	ldr	r3, [sp, #32]
    58fa:	2b00      	cmp	r3, #0
    58fc:	d03e      	beq.n	597c <getTrngSource+0x10c>
    58fe:	a908      	add	r1, sp, #32
    5900:	4628      	mov	r0, r5
    5902:	f000 fc95 	bl	6230 <LLF_RND_GetFastestRosc>
    5906:	2800      	cmp	r0, #0
    5908:	d03a      	beq.n	5980 <getTrngSource+0x110>
    590a:	4b81      	ldr	r3, [pc, #516]	; (5b10 <getTrngSource+0x2a0>)
    590c:	4298      	cmp	r0, r3
    590e:	d020      	beq.n	5952 <getTrngSource+0xe2>
    5910:	9b08      	ldr	r3, [sp, #32]
    5912:	2b08      	cmp	r3, #8
    5914:	f000 80e4 	beq.w	5ae0 <getTrngSource+0x270>
    5918:	005b      	lsls	r3, r3, #1
    591a:	2200      	movs	r2, #0
    591c:	9308      	str	r3, [sp, #32]
    591e:	9200      	str	r2, [sp, #0]
    5920:	ab08      	add	r3, sp, #32
    5922:	4629      	mov	r1, r5
    5924:	4650      	mov	r0, sl
    5926:	f7ff fe91 	bl	564c <startTrngHW>
    592a:	4b7a      	ldr	r3, [pc, #488]	; (5b14 <getTrngSource+0x2a4>)
    592c:	4298      	cmp	r0, r3
    592e:	f000 80d3 	beq.w	5ad8 <getTrngSource+0x268>
    5932:	b970      	cbnz	r0, 5952 <getTrngSource+0xe2>
    5934:	f8da 2000 	ldr.w	r2, [sl]
    5938:	0a13      	lsrs	r3, r2, #8
    593a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    593e:	4313      	orrs	r3, r2
    5940:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    5944:	f8ca 3000 	str.w	r3, [sl]
    5948:	9b05      	ldr	r3, [sp, #20]
    594a:	3b01      	subs	r3, #1
    594c:	9305      	str	r3, [sp, #20]
    594e:	d1be      	bne.n	58ce <getTrngSource+0x5e>
    5950:	2000      	movs	r0, #0
    5952:	9003      	str	r0, [sp, #12]
    5954:	f000 fc7c 	bl	6250 <LLF_RND_TurnOffTrng>
    5958:	9803      	ldr	r0, [sp, #12]
    595a:	b011      	add	sp, #68	; 0x44
    595c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5960:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    5964:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
    5968:	3601      	adds	r6, #1
    596a:	bf14      	ite	ne
    596c:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
    5970:	f44f 7004 	moveq.w	r0, #528	; 0x210
    5974:	9006      	str	r0, [sp, #24]
    5976:	e786      	b.n	5886 <getTrngSource+0x16>
    5978:	4867      	ldr	r0, [pc, #412]	; (5b18 <getTrngSource+0x2a8>)
    597a:	e7ea      	b.n	5952 <getTrngSource+0xe2>
    597c:	4865      	ldr	r0, [pc, #404]	; (5b14 <getTrngSource+0x2a4>)
    597e:	e7c4      	b.n	590a <getTrngSource+0x9a>
    5980:	9808      	ldr	r0, [sp, #32]
    5982:	4629      	mov	r1, r5
    5984:	f000 fc3a 	bl	61fc <LLF_RND_GetRoscSampleCnt>
    5988:	2800      	cmp	r0, #0
    598a:	d1be      	bne.n	590a <getTrngSource+0x9a>
    598c:	9b08      	ldr	r3, [sp, #32]
    598e:	2b08      	cmp	r3, #8
    5990:	f000 80a8 	beq.w	5ae4 <getTrngSource+0x274>
    5994:	2b04      	cmp	r3, #4
    5996:	f000 80a8 	beq.w	5aea <getTrngSource+0x27a>
    599a:	f1a3 0302 	sub.w	r3, r3, #2
    599e:	fab3 f383 	clz	r3, r3
    59a2:	095b      	lsrs	r3, r3, #5
    59a4:	9304      	str	r3, [sp, #16]
    59a6:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
    59aa:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
    59ae:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
    59b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    59b4:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    59b8:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
    59bc:	4293      	cmp	r3, r2
    59be:	d1f6      	bne.n	59ae <getTrngSource+0x13e>
    59c0:	f04f 0b00 	mov.w	fp, #0
    59c4:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
    59c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    59cc:	f7ff fd10 	bl	53f0 <CC_HalClearInterruptBit>
    59d0:	f06f 031b 	mvn.w	r3, #27
    59d4:	4658      	mov	r0, fp
    59d6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    59da:	f7ff fd17 	bl	540c <CC_HalMaskInterrupt>
    59de:	9b04      	ldr	r3, [sp, #16]
    59e0:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
    59e4:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
    59e8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    59ec:	f7ff fd0e 	bl	540c <CC_HalMaskInterrupt>
    59f0:	230a      	movs	r3, #10
    59f2:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    59f6:	692b      	ldr	r3, [r5, #16]
    59f8:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
    59fc:	fbab 2303 	umull	r2, r3, fp, r3
    5a00:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    5a02:	091b      	lsrs	r3, r3, #4
    5a04:	fb02 f303 	mul.w	r3, r2, r3
    5a08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5a0c:	03db      	lsls	r3, r3, #15
    5a0e:	099b      	lsrs	r3, r3, #6
    5a10:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
    5a14:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
    5a18:	f8da 3000 	ldr.w	r3, [sl]
    5a1c:	9908      	ldr	r1, [sp, #32]
    5a1e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
    5a22:	020b      	lsls	r3, r1, #8
    5a24:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    5a28:	4313      	orrs	r3, r2
    5a2a:	f8ca 3000 	str.w	r3, [sl]
    5a2e:	a809      	add	r0, sp, #36	; 0x24
    5a30:	f000 fbd4 	bl	61dc <LLF_RND_WaitRngInterrupt>
    5a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5a36:	f003 031a 	and.w	r3, r3, #26
    5a3a:	4303      	orrs	r3, r0
    5a3c:	f47f af68 	bne.w	5910 <getTrngSource+0xa0>
    5a40:	fbab 3b06 	umull	r3, fp, fp, r6
    5a44:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    5a48:	930a      	str	r3, [sp, #40]	; 0x28
    5a4a:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    5a4e:	930b      	str	r3, [sp, #44]	; 0x2c
    5a50:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    5a54:	930c      	str	r3, [sp, #48]	; 0x30
    5a56:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    5a5a:	930d      	str	r3, [sp, #52]	; 0x34
    5a5c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    5a60:	930e      	str	r3, [sp, #56]	; 0x38
    5a62:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    5a66:	930f      	str	r3, [sp, #60]	; 0x3c
    5a68:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
    5a6c:	d101      	bne.n	5a72 <getTrngSource+0x202>
    5a6e:	9b03      	ldr	r3, [sp, #12]
    5a70:	b993      	cbnz	r3, 5a98 <getTrngSource+0x228>
    5a72:	4640      	mov	r0, r8
    5a74:	2218      	movs	r2, #24
    5a76:	a90a      	add	r1, sp, #40	; 0x28
    5a78:	3e18      	subs	r6, #24
    5a7a:	f7ff fd47 	bl	550c <CC_PalMemCopyPlat>
    5a7e:	f108 0818 	add.w	r8, r8, #24
    5a82:	3701      	adds	r7, #1
    5a84:	b196      	cbz	r6, 5aac <getTrngSource+0x23c>
    5a86:	f000 fbe3 	bl	6250 <LLF_RND_TurnOffTrng>
    5a8a:	2300      	movs	r3, #0
    5a8c:	9309      	str	r3, [sp, #36]	; 0x24
    5a8e:	2d00      	cmp	r5, #0
    5a90:	f47f af32 	bne.w	58f8 <getTrngSource+0x88>
    5a94:	4821      	ldr	r0, [pc, #132]	; (5b1c <getTrngSource+0x2ac>)
    5a96:	e738      	b.n	590a <getTrngSource+0x9a>
    5a98:	4640      	mov	r0, r8
    5a9a:	1af6      	subs	r6, r6, r3
    5a9c:	461a      	mov	r2, r3
    5a9e:	a90a      	add	r1, sp, #40	; 0x28
    5aa0:	4498      	add	r8, r3
    5aa2:	3701      	adds	r7, #1
    5aa4:	f7ff fd32 	bl	550c <CC_PalMemCopyPlat>
    5aa8:	2e00      	cmp	r6, #0
    5aaa:	d1ec      	bne.n	5a86 <getTrngSource+0x216>
    5aac:	9f06      	ldr	r7, [sp, #24]
    5aae:	9e07      	ldr	r6, [sp, #28]
    5ab0:	696a      	ldr	r2, [r5, #20]
    5ab2:	4639      	mov	r1, r7
    5ab4:	4630      	mov	r0, r6
    5ab6:	f7ff fe69 	bl	578c <LLF_RND_RepetitionCounterTest>
    5aba:	69aa      	ldr	r2, [r5, #24]
    5abc:	b940      	cbnz	r0, 5ad0 <getTrngSource+0x260>
    5abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
    5ac2:	4639      	mov	r1, r7
    5ac4:	4630      	mov	r0, r6
    5ac6:	f7ff fe91 	bl	57ec <LLF_RND_AdaptiveProportionTest>
    5aca:	2800      	cmp	r0, #0
    5acc:	f43f af40 	beq.w	5950 <getTrngSource+0xe0>
    5ad0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    5ad2:	2300      	movs	r3, #0
    5ad4:	6013      	str	r3, [r2, #0]
    5ad6:	e718      	b.n	590a <getTrngSource+0x9a>
    5ad8:	6a2b      	ldr	r3, [r5, #32]
    5ada:	2b00      	cmp	r3, #0
    5adc:	f43f af39 	beq.w	5952 <getTrngSource+0xe2>
    5ae0:	480f      	ldr	r0, [pc, #60]	; (5b20 <getTrngSource+0x2b0>)
    5ae2:	e736      	b.n	5952 <getTrngSource+0xe2>
    5ae4:	2303      	movs	r3, #3
    5ae6:	9304      	str	r3, [sp, #16]
    5ae8:	e75d      	b.n	59a6 <getTrngSource+0x136>
    5aea:	2302      	movs	r3, #2
    5aec:	9304      	str	r3, [sp, #16]
    5aee:	e75a      	b.n	59a6 <getTrngSource+0x136>
    5af0:	9100      	str	r1, [sp, #0]
    5af2:	ab08      	add	r3, sp, #32
    5af4:	2201      	movs	r2, #1
    5af6:	4629      	mov	r1, r5
    5af8:	4650      	mov	r0, sl
    5afa:	f7ff fda7 	bl	564c <startTrngHW>
    5afe:	2800      	cmp	r0, #0
    5b00:	f43f aed5 	beq.w	58ae <getTrngSource+0x3e>
    5b04:	e725      	b.n	5952 <getTrngSource+0xe2>
    5b06:	bf00      	nop
    5b08:	5002b000 	.word	0x5002b000
    5b0c:	aaaaaaab 	.word	0xaaaaaaab
    5b10:	00f10c02 	.word	0x00f10c02
    5b14:	00f10c31 	.word	0x00f10c31
    5b18:	00f10c30 	.word	0x00f10c30
    5b1c:	00f10c35 	.word	0x00f10c35
    5b20:	00f10c32 	.word	0x00f10c32

00005b24 <LLF_RND_GetTrngSource>:
    5b24:	b410      	push	{r4}
    5b26:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
    5b2a:	9401      	str	r4, [sp, #4]
    5b2c:	9c03      	ldr	r4, [sp, #12]
    5b2e:	9402      	str	r4, [sp, #8]
    5b30:	2400      	movs	r4, #0
    5b32:	9403      	str	r4, [sp, #12]
    5b34:	bc10      	pop	{r4}
    5b36:	f7ff be9b 	b.w	5870 <getTrngSource>
    5b3a:	bf00      	nop

00005b3c <LLF_RND_RunTrngStartupTest>:
    5b3c:	b510      	push	{r4, lr}
    5b3e:	b086      	sub	sp, #24
    5b40:	ab05      	add	r3, sp, #20
    5b42:	2401      	movs	r4, #1
    5b44:	e9cd 2401 	strd	r2, r4, [sp, #4]
    5b48:	9300      	str	r3, [sp, #0]
    5b4a:	2200      	movs	r2, #0
    5b4c:	ab04      	add	r3, sp, #16
    5b4e:	f7ff fe8f 	bl	5870 <getTrngSource>
    5b52:	b006      	add	sp, #24
    5b54:	bd10      	pop	{r4, pc}
    5b56:	bf00      	nop

00005b58 <mbedtls_hardware_poll>:
    5b58:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b5a:	b087      	sub	sp, #28
    5b5c:	2900      	cmp	r1, #0
    5b5e:	d066      	beq.n	5c2e <mbedtls_hardware_poll+0xd6>
    5b60:	461e      	mov	r6, r3
    5b62:	2b00      	cmp	r3, #0
    5b64:	d063      	beq.n	5c2e <mbedtls_hardware_poll+0xd6>
    5b66:	4614      	mov	r4, r2
    5b68:	2a00      	cmp	r2, #0
    5b6a:	d060      	beq.n	5c2e <mbedtls_hardware_poll+0xd6>
    5b6c:	4f31      	ldr	r7, [pc, #196]	; (5c34 <mbedtls_hardware_poll+0xdc>)
    5b6e:	460d      	mov	r5, r1
    5b70:	6838      	ldr	r0, [r7, #0]
    5b72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5b76:	f7ff fce5 	bl	5544 <CC_PalMutexLock>
    5b7a:	2800      	cmp	r0, #0
    5b7c:	d14d      	bne.n	5c1a <mbedtls_hardware_poll+0xc2>
    5b7e:	2000      	movs	r0, #0
    5b80:	f7ff fd10 	bl	55a4 <CC_PalPowerSaveModeSelect>
    5b84:	2800      	cmp	r0, #0
    5b86:	d144      	bne.n	5c12 <mbedtls_hardware_poll+0xba>
    5b88:	482b      	ldr	r0, [pc, #172]	; (5c38 <mbedtls_hardware_poll+0xe0>)
    5b8a:	f000 fa99 	bl	60c0 <RNG_PLAT_SetUserRngParameters>
    5b8e:	4603      	mov	r3, r0
    5b90:	b1d8      	cbz	r0, 5bca <mbedtls_hardware_poll+0x72>
    5b92:	2001      	movs	r0, #1
    5b94:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    5b98:	f7ff fd04 	bl	55a4 <CC_PalPowerSaveModeSelect>
    5b9c:	2800      	cmp	r0, #0
    5b9e:	d134      	bne.n	5c0a <mbedtls_hardware_poll+0xb2>
    5ba0:	4826      	ldr	r0, [pc, #152]	; (5c3c <mbedtls_hardware_poll+0xe4>)
    5ba2:	f44f 7108 	mov.w	r1, #544	; 0x220
    5ba6:	f7fe fed9 	bl	495c <mbedtls_zeroize_internal>
    5baa:	4825      	ldr	r0, [pc, #148]	; (5c40 <mbedtls_hardware_poll+0xe8>)
    5bac:	2104      	movs	r1, #4
    5bae:	f7fe fed5 	bl	495c <mbedtls_zeroize_internal>
    5bb2:	4821      	ldr	r0, [pc, #132]	; (5c38 <mbedtls_hardware_poll+0xe0>)
    5bb4:	2128      	movs	r1, #40	; 0x28
    5bb6:	f7fe fed1 	bl	495c <mbedtls_zeroize_internal>
    5bba:	6838      	ldr	r0, [r7, #0]
    5bbc:	f7ff fcca 	bl	5554 <CC_PalMutexUnlock>
    5bc0:	2800      	cmp	r0, #0
    5bc2:	d12e      	bne.n	5c22 <mbedtls_hardware_poll+0xca>
    5bc4:	4628      	mov	r0, r5
    5bc6:	b007      	add	sp, #28
    5bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5bca:	4a1c      	ldr	r2, [pc, #112]	; (5c3c <mbedtls_hardware_poll+0xe4>)
    5bcc:	9202      	str	r2, [sp, #8]
    5bce:	aa05      	add	r2, sp, #20
    5bd0:	9201      	str	r2, [sp, #4]
    5bd2:	aa04      	add	r2, sp, #16
    5bd4:	9003      	str	r0, [sp, #12]
    5bd6:	9200      	str	r2, [sp, #0]
    5bd8:	4917      	ldr	r1, [pc, #92]	; (5c38 <mbedtls_hardware_poll+0xe0>)
    5bda:	4819      	ldr	r0, [pc, #100]	; (5c40 <mbedtls_hardware_poll+0xe8>)
    5bdc:	461a      	mov	r2, r3
    5bde:	f7ff ffa1 	bl	5b24 <LLF_RND_GetTrngSource>
    5be2:	4603      	mov	r3, r0
    5be4:	2800      	cmp	r0, #0
    5be6:	d1d4      	bne.n	5b92 <mbedtls_hardware_poll+0x3a>
    5be8:	4628      	mov	r0, r5
    5bea:	461d      	mov	r5, r3
    5bec:	9b05      	ldr	r3, [sp, #20]
    5bee:	9904      	ldr	r1, [sp, #16]
    5bf0:	429c      	cmp	r4, r3
    5bf2:	4622      	mov	r2, r4
    5bf4:	bf28      	it	cs
    5bf6:	461a      	movcs	r2, r3
    5bf8:	6032      	str	r2, [r6, #0]
    5bfa:	3108      	adds	r1, #8
    5bfc:	f7ff fc86 	bl	550c <CC_PalMemCopyPlat>
    5c00:	2001      	movs	r0, #1
    5c02:	f7ff fccf 	bl	55a4 <CC_PalPowerSaveModeSelect>
    5c06:	2800      	cmp	r0, #0
    5c08:	d0ca      	beq.n	5ba0 <mbedtls_hardware_poll+0x48>
    5c0a:	480e      	ldr	r0, [pc, #56]	; (5c44 <mbedtls_hardware_poll+0xec>)
    5c0c:	f7fe fd8e 	bl	472c <CC_PalAbort>
    5c10:	e7c6      	b.n	5ba0 <mbedtls_hardware_poll+0x48>
    5c12:	480d      	ldr	r0, [pc, #52]	; (5c48 <mbedtls_hardware_poll+0xf0>)
    5c14:	f7fe fd8a 	bl	472c <CC_PalAbort>
    5c18:	e7b6      	b.n	5b88 <mbedtls_hardware_poll+0x30>
    5c1a:	480c      	ldr	r0, [pc, #48]	; (5c4c <mbedtls_hardware_poll+0xf4>)
    5c1c:	f7fe fd86 	bl	472c <CC_PalAbort>
    5c20:	e7ad      	b.n	5b7e <mbedtls_hardware_poll+0x26>
    5c22:	480b      	ldr	r0, [pc, #44]	; (5c50 <mbedtls_hardware_poll+0xf8>)
    5c24:	f7fe fd82 	bl	472c <CC_PalAbort>
    5c28:	4628      	mov	r0, r5
    5c2a:	b007      	add	sp, #28
    5c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c2e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    5c32:	e7c7      	b.n	5bc4 <mbedtls_hardware_poll+0x6c>
    5c34:	20000124 	.word	0x20000124
    5c38:	2000127c 	.word	0x2000127c
    5c3c:	200012a4 	.word	0x200012a4
    5c40:	20001278 	.word	0x20001278
    5c44:	00007ff0 	.word	0x00007ff0
    5c48:	00007fd0 	.word	0x00007fd0
    5c4c:	00007fb8 	.word	0x00007fb8
    5c50:	00008048 	.word	0x00008048

00005c54 <cc_mbedtls_aes_init>:
    5c54:	b510      	push	{r4, lr}
    5c56:	4604      	mov	r4, r0
    5c58:	b130      	cbz	r0, 5c68 <cc_mbedtls_aes_init+0x14>
    5c5a:	2200      	movs	r2, #0
    5c5c:	2301      	movs	r3, #1
    5c5e:	6562      	str	r2, [r4, #84]	; 0x54
    5c60:	65a2      	str	r2, [r4, #88]	; 0x58
    5c62:	65e3      	str	r3, [r4, #92]	; 0x5c
    5c64:	6623      	str	r3, [r4, #96]	; 0x60
    5c66:	bd10      	pop	{r4, pc}
    5c68:	4801      	ldr	r0, [pc, #4]	; (5c70 <cc_mbedtls_aes_init+0x1c>)
    5c6a:	f7fe fd5f 	bl	472c <CC_PalAbort>
    5c6e:	e7f4      	b.n	5c5a <cc_mbedtls_aes_init+0x6>
    5c70:	00008060 	.word	0x00008060

00005c74 <cc_mbedtls_aes_free>:
    5c74:	b118      	cbz	r0, 5c7e <cc_mbedtls_aes_free+0xa>
    5c76:	2274      	movs	r2, #116	; 0x74
    5c78:	2100      	movs	r1, #0
    5c7a:	f7ff bc49 	b.w	5510 <CC_PalMemSetPlat>
    5c7e:	4770      	bx	lr

00005c80 <cc_mbedtls_aes_setkey_enc>:
    5c80:	b190      	cbz	r0, 5ca8 <cc_mbedtls_aes_setkey_enc+0x28>
    5c82:	b1a1      	cbz	r1, 5cae <cc_mbedtls_aes_setkey_enc+0x2e>
    5c84:	b510      	push	{r4, lr}
    5c86:	2a80      	cmp	r2, #128	; 0x80
    5c88:	f04f 0400 	mov.w	r4, #0
    5c8c:	6384      	str	r4, [r0, #56]	; 0x38
    5c8e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    5c92:	d106      	bne.n	5ca2 <cc_mbedtls_aes_setkey_enc+0x22>
    5c94:	2210      	movs	r2, #16
    5c96:	6304      	str	r4, [r0, #48]	; 0x30
    5c98:	4410      	add	r0, r2
    5c9a:	f7ff fc37 	bl	550c <CC_PalMemCopyPlat>
    5c9e:	4620      	mov	r0, r4
    5ca0:	bd10      	pop	{r4, pc}
    5ca2:	f06f 001f 	mvn.w	r0, #31
    5ca6:	bd10      	pop	{r4, pc}
    5ca8:	f06f 0021 	mvn.w	r0, #33	; 0x21
    5cac:	4770      	bx	lr
    5cae:	f06f 001f 	mvn.w	r0, #31
    5cb2:	4770      	bx	lr

00005cb4 <cc_mbedtls_aes_crypt_ecb>:
    5cb4:	b328      	cbz	r0, 5d02 <cc_mbedtls_aes_crypt_ecb+0x4e>
    5cb6:	b322      	cbz	r2, 5d02 <cc_mbedtls_aes_crypt_ecb+0x4e>
    5cb8:	b31b      	cbz	r3, 5d02 <cc_mbedtls_aes_crypt_ecb+0x4e>
    5cba:	2901      	cmp	r1, #1
    5cbc:	d821      	bhi.n	5d02 <cc_mbedtls_aes_crypt_ecb+0x4e>
    5cbe:	b570      	push	{r4, r5, r6, lr}
    5cc0:	4604      	mov	r4, r0
    5cc2:	6b81      	ldr	r1, [r0, #56]	; 0x38
    5cc4:	b086      	sub	sp, #24
    5cc6:	d017      	beq.n	5cf8 <cc_mbedtls_aes_crypt_ecb+0x44>
    5cc8:	2901      	cmp	r1, #1
    5cca:	d117      	bne.n	5cfc <cc_mbedtls_aes_crypt_ecb+0x48>
    5ccc:	2510      	movs	r5, #16
    5cce:	2100      	movs	r1, #0
    5cd0:	eb0d 0605 	add.w	r6, sp, r5
    5cd4:	6361      	str	r1, [r4, #52]	; 0x34
    5cd6:	4610      	mov	r0, r2
    5cd8:	9500      	str	r5, [sp, #0]
    5cda:	9601      	str	r6, [sp, #4]
    5cdc:	aa02      	add	r2, sp, #8
    5cde:	4629      	mov	r1, r5
    5ce0:	f000 fac2 	bl	6268 <SetDataBuffersInfo>
    5ce4:	b950      	cbnz	r0, 5cfc <cc_mbedtls_aes_crypt_ecb+0x48>
    5ce6:	462b      	mov	r3, r5
    5ce8:	4632      	mov	r2, r6
    5cea:	a902      	add	r1, sp, #8
    5cec:	4620      	mov	r0, r4
    5cee:	f000 fd43 	bl	6778 <ProcessAesDrv>
    5cf2:	b918      	cbnz	r0, 5cfc <cc_mbedtls_aes_crypt_ecb+0x48>
    5cf4:	b006      	add	sp, #24
    5cf6:	bd70      	pop	{r4, r5, r6, pc}
    5cf8:	2900      	cmp	r1, #0
    5cfa:	d0e7      	beq.n	5ccc <cc_mbedtls_aes_crypt_ecb+0x18>
    5cfc:	f06f 0021 	mvn.w	r0, #33	; 0x21
    5d00:	e7f8      	b.n	5cf4 <cc_mbedtls_aes_crypt_ecb+0x40>
    5d02:	f06f 0021 	mvn.w	r0, #33	; 0x21
    5d06:	4770      	bx	lr

00005d08 <cc_mbedtls_sha256_init>:
    5d08:	b510      	push	{r4, lr}
    5d0a:	4604      	mov	r4, r0
    5d0c:	b128      	cbz	r0, 5d1a <cc_mbedtls_sha256_init+0x12>
    5d0e:	4620      	mov	r0, r4
    5d10:	21f4      	movs	r1, #244	; 0xf4
    5d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5d16:	f7ff bbfd 	b.w	5514 <CC_PalMemSetZeroPlat>
    5d1a:	4804      	ldr	r0, [pc, #16]	; (5d2c <cc_mbedtls_sha256_init+0x24>)
    5d1c:	f7fe fd06 	bl	472c <CC_PalAbort>
    5d20:	4620      	mov	r0, r4
    5d22:	21f4      	movs	r1, #244	; 0xf4
    5d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5d28:	f7ff bbf4 	b.w	5514 <CC_PalMemSetZeroPlat>
    5d2c:	00008074 	.word	0x00008074

00005d30 <cc_mbedtls_sha256_free>:
    5d30:	b110      	cbz	r0, 5d38 <cc_mbedtls_sha256_free+0x8>
    5d32:	21f4      	movs	r1, #244	; 0xf4
    5d34:	f7fe be12 	b.w	495c <mbedtls_zeroize_internal>
    5d38:	4770      	bx	lr
    5d3a:	bf00      	nop

00005d3c <cc_mbedtls_sha256_starts>:
    5d3c:	b508      	push	{r3, lr}
    5d3e:	b121      	cbz	r1, 5d4a <cc_mbedtls_sha256_starts+0xe>
    5d40:	2901      	cmp	r1, #1
    5d42:	d008      	beq.n	5d56 <cc_mbedtls_sha256_starts+0x1a>
    5d44:	f06f 0036 	mvn.w	r0, #54	; 0x36
    5d48:	bd08      	pop	{r3, pc}
    5d4a:	2101      	movs	r1, #1
    5d4c:	f000 f858 	bl	5e00 <mbedtls_sha_starts_internal>
    5d50:	2800      	cmp	r0, #0
    5d52:	d1f7      	bne.n	5d44 <cc_mbedtls_sha256_starts+0x8>
    5d54:	bd08      	pop	{r3, pc}
    5d56:	2102      	movs	r1, #2
    5d58:	f000 f852 	bl	5e00 <mbedtls_sha_starts_internal>
    5d5c:	2800      	cmp	r0, #0
    5d5e:	d0f9      	beq.n	5d54 <cc_mbedtls_sha256_starts+0x18>
    5d60:	e7f0      	b.n	5d44 <cc_mbedtls_sha256_starts+0x8>
    5d62:	bf00      	nop

00005d64 <cc_mbedtls_sha256_update>:
    5d64:	b530      	push	{r4, r5, lr}
    5d66:	4605      	mov	r5, r0
    5d68:	1888      	adds	r0, r1, r2
    5d6a:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
    5d6e:	b0a1      	sub	sp, #132	; 0x84
    5d70:	460b      	mov	r3, r1
    5d72:	4614      	mov	r4, r2
    5d74:	d801      	bhi.n	5d7a <cc_mbedtls_sha256_update+0x16>
    5d76:	2a80      	cmp	r2, #128	; 0x80
    5d78:	d90c      	bls.n	5d94 <cc_mbedtls_sha256_update+0x30>
    5d7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    5d7e:	d917      	bls.n	5db0 <cc_mbedtls_sha256_update+0x4c>
    5d80:	4622      	mov	r2, r4
    5d82:	4619      	mov	r1, r3
    5d84:	4628      	mov	r0, r5
    5d86:	f000 f87d 	bl	5e84 <mbedtls_sha_update_internal>
    5d8a:	4604      	mov	r4, r0
    5d8c:	b984      	cbnz	r4, 5db0 <cc_mbedtls_sha256_update+0x4c>
    5d8e:	4620      	mov	r0, r4
    5d90:	b021      	add	sp, #132	; 0x84
    5d92:	bd30      	pop	{r4, r5, pc}
    5d94:	4668      	mov	r0, sp
    5d96:	f7ff fbb9 	bl	550c <CC_PalMemCopyPlat>
    5d9a:	4622      	mov	r2, r4
    5d9c:	4669      	mov	r1, sp
    5d9e:	4628      	mov	r0, r5
    5da0:	f000 f870 	bl	5e84 <mbedtls_sha_update_internal>
    5da4:	2180      	movs	r1, #128	; 0x80
    5da6:	4604      	mov	r4, r0
    5da8:	4668      	mov	r0, sp
    5daa:	f7ff fbb3 	bl	5514 <CC_PalMemSetZeroPlat>
    5dae:	e7ed      	b.n	5d8c <cc_mbedtls_sha256_update+0x28>
    5db0:	f06f 0436 	mvn.w	r4, #54	; 0x36
    5db4:	e7eb      	b.n	5d8e <cc_mbedtls_sha256_update+0x2a>
    5db6:	bf00      	nop

00005db8 <cc_mbedtls_sha256_finish>:
    5db8:	b570      	push	{r4, r5, r6, lr}
    5dba:	b1e8      	cbz	r0, 5df8 <cc_mbedtls_sha256_finish+0x40>
    5dbc:	460e      	mov	r6, r1
    5dbe:	b1d9      	cbz	r1, 5df8 <cc_mbedtls_sha256_finish+0x40>
    5dc0:	4604      	mov	r4, r0
    5dc2:	f000 f831 	bl	5e28 <mbedtls_sha_finish_internal>
    5dc6:	4605      	mov	r5, r0
    5dc8:	b9b0      	cbnz	r0, 5df8 <cc_mbedtls_sha256_finish+0x40>
    5dca:	6823      	ldr	r3, [r4, #0]
    5dcc:	2b01      	cmp	r3, #1
    5dce:	d00b      	beq.n	5de8 <cc_mbedtls_sha256_finish+0x30>
    5dd0:	2b02      	cmp	r3, #2
    5dd2:	d001      	beq.n	5dd8 <cc_mbedtls_sha256_finish+0x20>
    5dd4:	4628      	mov	r0, r5
    5dd6:	bd70      	pop	{r4, r5, r6, pc}
    5dd8:	221c      	movs	r2, #28
    5dda:	f104 0108 	add.w	r1, r4, #8
    5dde:	4630      	mov	r0, r6
    5de0:	f7ff fb94 	bl	550c <CC_PalMemCopyPlat>
    5de4:	4628      	mov	r0, r5
    5de6:	bd70      	pop	{r4, r5, r6, pc}
    5de8:	2220      	movs	r2, #32
    5dea:	f104 0108 	add.w	r1, r4, #8
    5dee:	4630      	mov	r0, r6
    5df0:	f7ff fb8c 	bl	550c <CC_PalMemCopyPlat>
    5df4:	4628      	mov	r0, r5
    5df6:	bd70      	pop	{r4, r5, r6, pc}
    5df8:	f06f 0536 	mvn.w	r5, #54	; 0x36
    5dfc:	e7ea      	b.n	5dd4 <cc_mbedtls_sha256_finish+0x1c>
    5dfe:	bf00      	nop

00005e00 <mbedtls_sha_starts_internal>:
    5e00:	b178      	cbz	r0, 5e22 <mbedtls_sha_starts_internal+0x22>
    5e02:	b538      	push	{r3, r4, r5, lr}
    5e04:	4604      	mov	r4, r0
    5e06:	460d      	mov	r5, r1
    5e08:	21f0      	movs	r1, #240	; 0xf0
    5e0a:	f7ff fb83 	bl	5514 <CC_PalMemSetZeroPlat>
    5e0e:	2340      	movs	r3, #64	; 0x40
    5e10:	6025      	str	r5, [r4, #0]
    5e12:	65e3      	str	r3, [r4, #92]	; 0x5c
    5e14:	4620      	mov	r0, r4
    5e16:	f000 fa5b 	bl	62d0 <InitHashDrv>
    5e1a:	3800      	subs	r0, #0
    5e1c:	bf18      	it	ne
    5e1e:	2001      	movne	r0, #1
    5e20:	bd38      	pop	{r3, r4, r5, pc}
    5e22:	2001      	movs	r0, #1
    5e24:	4770      	bx	lr
    5e26:	bf00      	nop

00005e28 <mbedtls_sha_finish_internal>:
    5e28:	b570      	push	{r4, r5, r6, lr}
    5e2a:	6e05      	ldr	r5, [r0, #96]	; 0x60
    5e2c:	b0a4      	sub	sp, #144	; 0x90
    5e2e:	4604      	mov	r4, r0
    5e30:	ae04      	add	r6, sp, #16
    5e32:	b9e5      	cbnz	r5, 5e6e <mbedtls_sha_finish_internal+0x46>
    5e34:	2201      	movs	r2, #1
    5e36:	2300      	movs	r3, #0
    5e38:	6062      	str	r2, [r4, #4]
    5e3a:	4630      	mov	r0, r6
    5e3c:	e9cd 3300 	strd	r3, r3, [sp]
    5e40:	aa02      	add	r2, sp, #8
    5e42:	4629      	mov	r1, r5
    5e44:	f000 fa10 	bl	6268 <SetDataBuffersInfo>
    5e48:	b110      	cbz	r0, 5e50 <mbedtls_sha_finish_internal+0x28>
    5e4a:	2001      	movs	r0, #1
    5e4c:	b024      	add	sp, #144	; 0x90
    5e4e:	bd70      	pop	{r4, r5, r6, pc}
    5e50:	462a      	mov	r2, r5
    5e52:	a902      	add	r1, sp, #8
    5e54:	4620      	mov	r0, r4
    5e56:	f000 fa63 	bl	6320 <ProcessHashDrv>
    5e5a:	2800      	cmp	r0, #0
    5e5c:	d1f5      	bne.n	5e4a <mbedtls_sha_finish_internal+0x22>
    5e5e:	4620      	mov	r0, r4
    5e60:	f000 fb74 	bl	654c <FinishHashDrv>
    5e64:	2800      	cmp	r0, #0
    5e66:	d1f0      	bne.n	5e4a <mbedtls_sha_finish_internal+0x22>
    5e68:	6620      	str	r0, [r4, #96]	; 0x60
    5e6a:	b024      	add	sp, #144	; 0x90
    5e6c:	bd70      	pop	{r4, r5, r6, pc}
    5e6e:	2d80      	cmp	r5, #128	; 0x80
    5e70:	462a      	mov	r2, r5
    5e72:	f100 0164 	add.w	r1, r0, #100	; 0x64
    5e76:	bf28      	it	cs
    5e78:	2280      	movcs	r2, #128	; 0x80
    5e7a:	4630      	mov	r0, r6
    5e7c:	f7ff fb46 	bl	550c <CC_PalMemCopyPlat>
    5e80:	6e25      	ldr	r5, [r4, #96]	; 0x60
    5e82:	e7d7      	b.n	5e34 <mbedtls_sha_finish_internal+0xc>

00005e84 <mbedtls_sha_update_internal>:
    5e84:	2800      	cmp	r0, #0
    5e86:	f000 80ae 	beq.w	5fe6 <mbedtls_sha_update_internal+0x162>
    5e8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e8e:	4614      	mov	r4, r2
    5e90:	b0a5      	sub	sp, #148	; 0x94
    5e92:	2a00      	cmp	r2, #0
    5e94:	d03d      	beq.n	5f12 <mbedtls_sha_update_internal+0x8e>
    5e96:	460f      	mov	r7, r1
    5e98:	2900      	cmp	r1, #0
    5e9a:	d049      	beq.n	5f30 <mbedtls_sha_update_internal+0xac>
    5e9c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    5ea0:	4605      	mov	r5, r0
    5ea2:	6e00      	ldr	r0, [r0, #96]	; 0x60
    5ea4:	d320      	bcc.n	5ee8 <mbedtls_sha_update_internal+0x64>
    5ea6:	f64f 78ff 	movw	r8, #65535	; 0xffff
    5eaa:	f105 0a64 	add.w	sl, r5, #100	; 0x64
    5eae:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    5eb0:	1a1a      	subs	r2, r3, r0
    5eb2:	fbb2 f1f3 	udiv	r1, r2, r3
    5eb6:	fb03 2211 	mls	r2, r3, r1, r2
    5eba:	2a00      	cmp	r2, #0
    5ebc:	d165      	bne.n	5f8a <mbedtls_sha_update_internal+0x106>
    5ebe:	4283      	cmp	r3, r0
    5ec0:	46b9      	mov	r9, r7
    5ec2:	f64f 76ff 	movw	r6, #65535	; 0xffff
    5ec6:	d072      	beq.n	5fae <mbedtls_sha_update_internal+0x12a>
    5ec8:	fbb6 fbf3 	udiv	fp, r6, r3
    5ecc:	fb03 fb0b 	mul.w	fp, r3, fp
    5ed0:	f1bb 0f00 	cmp.w	fp, #0
    5ed4:	d130      	bne.n	5f38 <mbedtls_sha_update_internal+0xb4>
    5ed6:	2e00      	cmp	r6, #0
    5ed8:	d145      	bne.n	5f66 <mbedtls_sha_update_internal+0xe2>
    5eda:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
    5ede:	3cff      	subs	r4, #255	; 0xff
    5ee0:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    5ee4:	4447      	add	r7, r8
    5ee6:	d2e2      	bcs.n	5eae <mbedtls_sha_update_internal+0x2a>
    5ee8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
    5eea:	1a16      	subs	r6, r2, r0
    5eec:	fbb6 f3f2 	udiv	r3, r6, r2
    5ef0:	fb02 6613 	mls	r6, r2, r3, r6
    5ef4:	42a6      	cmp	r6, r4
    5ef6:	bf28      	it	cs
    5ef8:	4626      	movcs	r6, r4
    5efa:	2e00      	cmp	r6, #0
    5efc:	d175      	bne.n	5fea <mbedtls_sha_update_internal+0x166>
    5efe:	4282      	cmp	r2, r0
    5f00:	f000 808d 	beq.w	601e <mbedtls_sha_update_internal+0x19a>
    5f04:	fbb4 f6f2 	udiv	r6, r4, r2
    5f08:	fb02 f606 	mul.w	r6, r2, r6
    5f0c:	b92e      	cbnz	r6, 5f1a <mbedtls_sha_update_internal+0x96>
    5f0e:	2c00      	cmp	r4, #0
    5f10:	d179      	bne.n	6006 <mbedtls_sha_update_internal+0x182>
    5f12:	2000      	movs	r0, #0
    5f14:	b025      	add	sp, #148	; 0x94
    5f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5f1a:	2300      	movs	r3, #0
    5f1c:	e9cd 3300 	strd	r3, r3, [sp]
    5f20:	aa02      	add	r2, sp, #8
    5f22:	4631      	mov	r1, r6
    5f24:	4638      	mov	r0, r7
    5f26:	f000 f99f 	bl	6268 <SetDataBuffersInfo>
    5f2a:	2800      	cmp	r0, #0
    5f2c:	f000 8095 	beq.w	605a <mbedtls_sha_update_internal+0x1d6>
    5f30:	2001      	movs	r0, #1
    5f32:	b025      	add	sp, #148	; 0x94
    5f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5f38:	2300      	movs	r3, #0
    5f3a:	e9cd 3300 	strd	r3, r3, [sp]
    5f3e:	aa02      	add	r2, sp, #8
    5f40:	4659      	mov	r1, fp
    5f42:	4648      	mov	r0, r9
    5f44:	f000 f990 	bl	6268 <SetDataBuffersInfo>
    5f48:	2800      	cmp	r0, #0
    5f4a:	d1f1      	bne.n	5f30 <mbedtls_sha_update_internal+0xac>
    5f4c:	a902      	add	r1, sp, #8
    5f4e:	465a      	mov	r2, fp
    5f50:	4628      	mov	r0, r5
    5f52:	f000 f9e5 	bl	6320 <ProcessHashDrv>
    5f56:	2800      	cmp	r0, #0
    5f58:	d1ea      	bne.n	5f30 <mbedtls_sha_update_internal+0xac>
    5f5a:	eba6 060b 	sub.w	r6, r6, fp
    5f5e:	6e28      	ldr	r0, [r5, #96]	; 0x60
    5f60:	44d9      	add	r9, fp
    5f62:	2e00      	cmp	r6, #0
    5f64:	d0b9      	beq.n	5eda <mbedtls_sha_update_internal+0x56>
    5f66:	3019      	adds	r0, #25
    5f68:	4649      	mov	r1, r9
    5f6a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    5f6e:	4632      	mov	r2, r6
    5f70:	f7ff facc 	bl	550c <CC_PalMemCopyPlat>
    5f74:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
    5f78:	6e28      	ldr	r0, [r5, #96]	; 0x60
    5f7a:	3cff      	subs	r4, #255	; 0xff
    5f7c:	4430      	add	r0, r6
    5f7e:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    5f82:	4447      	add	r7, r8
    5f84:	6628      	str	r0, [r5, #96]	; 0x60
    5f86:	d292      	bcs.n	5eae <mbedtls_sha_update_internal+0x2a>
    5f88:	e7ae      	b.n	5ee8 <mbedtls_sha_update_internal+0x64>
    5f8a:	4542      	cmp	r2, r8
    5f8c:	bf28      	it	cs
    5f8e:	4642      	movcs	r2, r8
    5f90:	4450      	add	r0, sl
    5f92:	4639      	mov	r1, r7
    5f94:	4616      	mov	r6, r2
    5f96:	f7ff fab9 	bl	550c <CC_PalMemCopyPlat>
    5f9a:	6e28      	ldr	r0, [r5, #96]	; 0x60
    5f9c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    5f9e:	4430      	add	r0, r6
    5fa0:	4283      	cmp	r3, r0
    5fa2:	eb07 0906 	add.w	r9, r7, r6
    5fa6:	6628      	str	r0, [r5, #96]	; 0x60
    5fa8:	eba8 0606 	sub.w	r6, r8, r6
    5fac:	d18c      	bne.n	5ec8 <mbedtls_sha_update_internal+0x44>
    5fae:	2b80      	cmp	r3, #128	; 0x80
    5fb0:	bf28      	it	cs
    5fb2:	2380      	movcs	r3, #128	; 0x80
    5fb4:	461a      	mov	r2, r3
    5fb6:	4651      	mov	r1, sl
    5fb8:	a804      	add	r0, sp, #16
    5fba:	f7ff faa7 	bl	550c <CC_PalMemCopyPlat>
    5fbe:	2300      	movs	r3, #0
    5fc0:	e9cd 3300 	strd	r3, r3, [sp]
    5fc4:	aa02      	add	r2, sp, #8
    5fc6:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    5fc8:	a804      	add	r0, sp, #16
    5fca:	f000 f94d 	bl	6268 <SetDataBuffersInfo>
    5fce:	2800      	cmp	r0, #0
    5fd0:	d1ae      	bne.n	5f30 <mbedtls_sha_update_internal+0xac>
    5fd2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
    5fd4:	a902      	add	r1, sp, #8
    5fd6:	4628      	mov	r0, r5
    5fd8:	f000 f9a2 	bl	6320 <ProcessHashDrv>
    5fdc:	2800      	cmp	r0, #0
    5fde:	d1a7      	bne.n	5f30 <mbedtls_sha_update_internal+0xac>
    5fe0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    5fe2:	6628      	str	r0, [r5, #96]	; 0x60
    5fe4:	e770      	b.n	5ec8 <mbedtls_sha_update_internal+0x44>
    5fe6:	2001      	movs	r0, #1
    5fe8:	4770      	bx	lr
    5fea:	f105 0364 	add.w	r3, r5, #100	; 0x64
    5fee:	4639      	mov	r1, r7
    5ff0:	4632      	mov	r2, r6
    5ff2:	4418      	add	r0, r3
    5ff4:	f7ff fa8a 	bl	550c <CC_PalMemCopyPlat>
    5ff8:	6e28      	ldr	r0, [r5, #96]	; 0x60
    5ffa:	6dea      	ldr	r2, [r5, #92]	; 0x5c
    5ffc:	4430      	add	r0, r6
    5ffe:	1ba4      	subs	r4, r4, r6
    6000:	4437      	add	r7, r6
    6002:	6628      	str	r0, [r5, #96]	; 0x60
    6004:	e77b      	b.n	5efe <mbedtls_sha_update_internal+0x7a>
    6006:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    6008:	3319      	adds	r3, #25
    600a:	eb05 0083 	add.w	r0, r5, r3, lsl #2
    600e:	4622      	mov	r2, r4
    6010:	4639      	mov	r1, r7
    6012:	f7ff fa7b 	bl	550c <CC_PalMemCopyPlat>
    6016:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    6018:	4423      	add	r3, r4
    601a:	662b      	str	r3, [r5, #96]	; 0x60
    601c:	e779      	b.n	5f12 <mbedtls_sha_update_internal+0x8e>
    601e:	2a80      	cmp	r2, #128	; 0x80
    6020:	bf28      	it	cs
    6022:	2280      	movcs	r2, #128	; 0x80
    6024:	f105 0164 	add.w	r1, r5, #100	; 0x64
    6028:	a804      	add	r0, sp, #16
    602a:	f7ff fa6f 	bl	550c <CC_PalMemCopyPlat>
    602e:	2300      	movs	r3, #0
    6030:	e9cd 3300 	strd	r3, r3, [sp]
    6034:	a804      	add	r0, sp, #16
    6036:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    6038:	aa02      	add	r2, sp, #8
    603a:	f000 f915 	bl	6268 <SetDataBuffersInfo>
    603e:	2800      	cmp	r0, #0
    6040:	f47f af76 	bne.w	5f30 <mbedtls_sha_update_internal+0xac>
    6044:	6dea      	ldr	r2, [r5, #92]	; 0x5c
    6046:	a902      	add	r1, sp, #8
    6048:	4628      	mov	r0, r5
    604a:	f000 f969 	bl	6320 <ProcessHashDrv>
    604e:	2800      	cmp	r0, #0
    6050:	f47f af6e 	bne.w	5f30 <mbedtls_sha_update_internal+0xac>
    6054:	6dea      	ldr	r2, [r5, #92]	; 0x5c
    6056:	6628      	str	r0, [r5, #96]	; 0x60
    6058:	e754      	b.n	5f04 <mbedtls_sha_update_internal+0x80>
    605a:	a902      	add	r1, sp, #8
    605c:	4632      	mov	r2, r6
    605e:	4628      	mov	r0, r5
    6060:	f000 f95e 	bl	6320 <ProcessHashDrv>
    6064:	2800      	cmp	r0, #0
    6066:	f47f af63 	bne.w	5f30 <mbedtls_sha_update_internal+0xac>
    606a:	4437      	add	r7, r6
    606c:	1ba4      	subs	r4, r4, r6
    606e:	e74e      	b.n	5f0e <mbedtls_sha_update_internal+0x8a>

00006070 <cc_mbedtls_sha256>:
    6070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6072:	461c      	mov	r4, r3
    6074:	4605      	mov	r5, r0
    6076:	4811      	ldr	r0, [pc, #68]	; (60bc <cc_mbedtls_sha256+0x4c>)
    6078:	460e      	mov	r6, r1
    607a:	4617      	mov	r7, r2
    607c:	f7ff fe44 	bl	5d08 <cc_mbedtls_sha256_init>
    6080:	4621      	mov	r1, r4
    6082:	480e      	ldr	r0, [pc, #56]	; (60bc <cc_mbedtls_sha256+0x4c>)
    6084:	f7ff fe5a 	bl	5d3c <cc_mbedtls_sha256_starts>
    6088:	4604      	mov	r4, r0
    608a:	b120      	cbz	r0, 6096 <cc_mbedtls_sha256+0x26>
    608c:	480b      	ldr	r0, [pc, #44]	; (60bc <cc_mbedtls_sha256+0x4c>)
    608e:	f7ff fe4f 	bl	5d30 <cc_mbedtls_sha256_free>
    6092:	4620      	mov	r0, r4
    6094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6096:	4809      	ldr	r0, [pc, #36]	; (60bc <cc_mbedtls_sha256+0x4c>)
    6098:	4632      	mov	r2, r6
    609a:	4629      	mov	r1, r5
    609c:	f7ff fe62 	bl	5d64 <cc_mbedtls_sha256_update>
    60a0:	4604      	mov	r4, r0
    60a2:	2800      	cmp	r0, #0
    60a4:	d1f2      	bne.n	608c <cc_mbedtls_sha256+0x1c>
    60a6:	4639      	mov	r1, r7
    60a8:	4804      	ldr	r0, [pc, #16]	; (60bc <cc_mbedtls_sha256+0x4c>)
    60aa:	f7ff fe85 	bl	5db8 <cc_mbedtls_sha256_finish>
    60ae:	4604      	mov	r4, r0
    60b0:	4802      	ldr	r0, [pc, #8]	; (60bc <cc_mbedtls_sha256+0x4c>)
    60b2:	f7ff fe3d 	bl	5d30 <cc_mbedtls_sha256_free>
    60b6:	4620      	mov	r0, r4
    60b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    60ba:	bf00      	nop
    60bc:	200014c4 	.word	0x200014c4

000060c0 <RNG_PLAT_SetUserRngParameters>:
    60c0:	b530      	push	{r4, r5, lr}
    60c2:	b083      	sub	sp, #12
    60c4:	231c      	movs	r3, #28
    60c6:	a901      	add	r1, sp, #4
    60c8:	4605      	mov	r5, r0
    60ca:	9301      	str	r3, [sp, #4]
    60cc:	f000 f832 	bl	6134 <CC_PalTrngParamGet>
    60d0:	4604      	mov	r4, r0
    60d2:	b938      	cbnz	r0, 60e4 <RNG_PLAT_SetUserRngParameters+0x24>
    60d4:	9b01      	ldr	r3, [sp, #4]
    60d6:	2b1c      	cmp	r3, #28
    60d8:	d007      	beq.n	60ea <RNG_PLAT_SetUserRngParameters+0x2a>
    60da:	4c14      	ldr	r4, [pc, #80]	; (612c <RNG_PLAT_SetUserRngParameters+0x6c>)
    60dc:	211c      	movs	r1, #28
    60de:	4628      	mov	r0, r5
    60e0:	f7ff fa18 	bl	5514 <CC_PalMemSetZeroPlat>
    60e4:	4620      	mov	r0, r4
    60e6:	b003      	add	sp, #12
    60e8:	bd30      	pop	{r4, r5, pc}
    60ea:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
    60ee:	1e13      	subs	r3, r2, #0
    60f0:	bf18      	it	ne
    60f2:	2301      	movne	r3, #1
    60f4:	3900      	subs	r1, #0
    60f6:	682a      	ldr	r2, [r5, #0]
    60f8:	bf18      	it	ne
    60fa:	2101      	movne	r1, #1
    60fc:	009b      	lsls	r3, r3, #2
    60fe:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    6102:	2a00      	cmp	r2, #0
    6104:	bf18      	it	ne
    6106:	f043 0301 	orrne.w	r3, r3, #1
    610a:	68ea      	ldr	r2, [r5, #12]
    610c:	2001      	movs	r0, #1
    610e:	61e8      	str	r0, [r5, #28]
    6110:	b92a      	cbnz	r2, 611e <RNG_PLAT_SetUserRngParameters+0x5e>
    6112:	e9c5 3408 	strd	r3, r4, [r5, #32]
    6116:	2b00      	cmp	r3, #0
    6118:	d1e4      	bne.n	60e4 <RNG_PLAT_SetUserRngParameters+0x24>
    611a:	4c05      	ldr	r4, [pc, #20]	; (6130 <RNG_PLAT_SetUserRngParameters+0x70>)
    611c:	e7de      	b.n	60dc <RNG_PLAT_SetUserRngParameters+0x1c>
    611e:	f043 0308 	orr.w	r3, r3, #8
    6122:	4620      	mov	r0, r4
    6124:	e9c5 3408 	strd	r3, r4, [r5, #32]
    6128:	b003      	add	sp, #12
    612a:	bd30      	pop	{r4, r5, pc}
    612c:	00f00c37 	.word	0x00f00c37
    6130:	00f00c0e 	.word	0x00f00c0e

00006134 <CC_PalTrngParamGet>:
    6134:	b118      	cbz	r0, 613e <CC_PalTrngParamGet+0xa>
    6136:	b111      	cbz	r1, 613e <CC_PalTrngParamGet+0xa>
    6138:	680b      	ldr	r3, [r1, #0]
    613a:	2b1c      	cmp	r3, #28
    613c:	d001      	beq.n	6142 <CC_PalTrngParamGet+0xe>
    613e:	2001      	movs	r0, #1
    6140:	4770      	bx	lr
    6142:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6146:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    614a:	3201      	adds	r2, #1
    614c:	bf14      	ite	ne
    614e:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
    6152:	f241 225c 	movweq	r2, #4700	; 0x125c
    6156:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    615a:	6002      	str	r2, [r0, #0]
    615c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    6160:	3201      	adds	r2, #1
    6162:	bf14      	ite	ne
    6164:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
    6168:	f641 1264 	movweq	r2, #6500	; 0x1964
    616c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6170:	6042      	str	r2, [r0, #4]
    6172:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    6176:	3201      	adds	r2, #1
    6178:	bf14      	ite	ne
    617a:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
    617e:	f640 62d8 	movweq	r2, #3800	; 0xed8
    6182:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6186:	6082      	str	r2, [r0, #8]
    6188:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    618c:	3201      	adds	r2, #1
    618e:	bf14      	ite	ne
    6190:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
    6194:	f241 3288 	movweq	r2, #5000	; 0x1388
    6198:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    619c:	60c2      	str	r2, [r0, #12]
    619e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    61a2:	3201      	adds	r2, #1
    61a4:	bf14      	ite	ne
    61a6:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
    61aa:	2290      	moveq	r2, #144	; 0x90
    61ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    61b0:	6102      	str	r2, [r0, #16]
    61b2:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    61b6:	3201      	adds	r2, #1
    61b8:	bf14      	ite	ne
    61ba:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
    61be:	2251      	moveq	r2, #81	; 0x51
    61c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    61c4:	6142      	str	r2, [r0, #20]
    61c6:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
    61ca:	3201      	adds	r2, #1
    61cc:	bf14      	ite	ne
    61ce:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
    61d2:	f240 3337 	movweq	r3, #823	; 0x337
    61d6:	6183      	str	r3, [r0, #24]
    61d8:	2000      	movs	r0, #0
    61da:	4770      	bx	lr

000061dc <LLF_RND_WaitRngInterrupt>:
    61dc:	b508      	push	{r3, lr}
    61de:	4601      	mov	r1, r0
    61e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
    61e4:	f7ff f91e 	bl	5424 <CC_HalWaitInterruptRND>
    61e8:	4b03      	ldr	r3, [pc, #12]	; (61f8 <LLF_RND_WaitRngInterrupt+0x1c>)
    61ea:	2200      	movs	r2, #0
    61ec:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
    61f0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    61f4:	bd08      	pop	{r3, pc}
    61f6:	bf00      	nop
    61f8:	5002b000 	.word	0x5002b000

000061fc <LLF_RND_GetRoscSampleCnt>:
    61fc:	3801      	subs	r0, #1
    61fe:	2807      	cmp	r0, #7
    6200:	d805      	bhi.n	620e <LLF_RND_GetRoscSampleCnt+0x12>
    6202:	e8df f000 	tbb	[pc, r0]
    6206:	0e10      	.short	0x0e10
    6208:	04040a04 	.word	0x04040a04
    620c:	0604      	.short	0x0604
    620e:	4807      	ldr	r0, [pc, #28]	; (622c <LLF_RND_GetRoscSampleCnt+0x30>)
    6210:	4770      	bx	lr
    6212:	68cb      	ldr	r3, [r1, #12]
    6214:	624b      	str	r3, [r1, #36]	; 0x24
    6216:	2000      	movs	r0, #0
    6218:	4770      	bx	lr
    621a:	688b      	ldr	r3, [r1, #8]
    621c:	624b      	str	r3, [r1, #36]	; 0x24
    621e:	2000      	movs	r0, #0
    6220:	4770      	bx	lr
    6222:	684b      	ldr	r3, [r1, #4]
    6224:	e7f6      	b.n	6214 <LLF_RND_GetRoscSampleCnt+0x18>
    6226:	680b      	ldr	r3, [r1, #0]
    6228:	e7f4      	b.n	6214 <LLF_RND_GetRoscSampleCnt+0x18>
    622a:	bf00      	nop
    622c:	00f10c31 	.word	0x00f10c31

00006230 <LLF_RND_GetFastestRosc>:
    6230:	680b      	ldr	r3, [r1, #0]
    6232:	e002      	b.n	623a <LLF_RND_GetFastestRosc+0xa>
    6234:	2b08      	cmp	r3, #8
    6236:	600b      	str	r3, [r1, #0]
    6238:	d806      	bhi.n	6248 <LLF_RND_GetFastestRosc+0x18>
    623a:	6a02      	ldr	r2, [r0, #32]
    623c:	4213      	tst	r3, r2
    623e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    6242:	d0f7      	beq.n	6234 <LLF_RND_GetFastestRosc+0x4>
    6244:	2000      	movs	r0, #0
    6246:	4770      	bx	lr
    6248:	4800      	ldr	r0, [pc, #0]	; (624c <LLF_RND_GetFastestRosc+0x1c>)
    624a:	4770      	bx	lr
    624c:	00f10c31 	.word	0x00f10c31

00006250 <LLF_RND_TurnOffTrng>:
    6250:	4b04      	ldr	r3, [pc, #16]	; (6264 <LLF_RND_TurnOffTrng+0x14>)
    6252:	2200      	movs	r2, #0
    6254:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    6258:	f44f 6080 	mov.w	r0, #1024	; 0x400
    625c:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
    6260:	f7ff b8c6 	b.w	53f0 <CC_HalClearInterruptBit>
    6264:	5002b000 	.word	0x5002b000

00006268 <SetDataBuffersInfo>:
    6268:	b5f0      	push	{r4, r5, r6, r7, lr}
    626a:	b083      	sub	sp, #12
    626c:	461d      	mov	r5, r3
    626e:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    6272:	f04f 0300 	mov.w	r3, #0
    6276:	f88d 3007 	strb.w	r3, [sp, #7]
    627a:	d324      	bcc.n	62c6 <SetDataBuffersInfo+0x5e>
    627c:	468c      	mov	ip, r1
    627e:	4484      	add	ip, r0
    6280:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
    6284:	4604      	mov	r4, r0
    6286:	d81e      	bhi.n	62c6 <SetDataBuffersInfo+0x5e>
    6288:	4617      	mov	r7, r2
    628a:	f10d 0307 	add.w	r3, sp, #7
    628e:	2201      	movs	r2, #1
    6290:	f000 fe64 	bl	6f5c <CC_PalDataBufferAttrGet>
    6294:	4606      	mov	r6, r0
    6296:	b9b0      	cbnz	r0, 62c6 <SetDataBuffersInfo+0x5e>
    6298:	9a09      	ldr	r2, [sp, #36]	; 0x24
    629a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    629e:	603c      	str	r4, [r7, #0]
    62a0:	713b      	strb	r3, [r7, #4]
    62a2:	b192      	cbz	r2, 62ca <SetDataBuffersInfo+0x62>
    62a4:	b14d      	cbz	r5, 62ba <SetDataBuffersInfo+0x52>
    62a6:	4602      	mov	r2, r0
    62a8:	9908      	ldr	r1, [sp, #32]
    62aa:	f10d 0307 	add.w	r3, sp, #7
    62ae:	4628      	mov	r0, r5
    62b0:	f000 fe54 	bl	6f5c <CC_PalDataBufferAttrGet>
    62b4:	b938      	cbnz	r0, 62c6 <SetDataBuffersInfo+0x5e>
    62b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    62ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
    62bc:	4630      	mov	r0, r6
    62be:	6015      	str	r5, [r2, #0]
    62c0:	7113      	strb	r3, [r2, #4]
    62c2:	b003      	add	sp, #12
    62c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    62c6:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
    62ca:	4630      	mov	r0, r6
    62cc:	b003      	add	sp, #12
    62ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000062d0 <InitHashDrv>:
    62d0:	b1d8      	cbz	r0, 630a <InitHashDrv+0x3a>
    62d2:	b508      	push	{r3, lr}
    62d4:	6803      	ldr	r3, [r0, #0]
    62d6:	2b01      	cmp	r3, #1
    62d8:	d004      	beq.n	62e4 <InitHashDrv+0x14>
    62da:	2b02      	cmp	r3, #2
    62dc:	d00f      	beq.n	62fe <InitHashDrv+0x2e>
    62de:	b143      	cbz	r3, 62f2 <InitHashDrv+0x22>
    62e0:	480b      	ldr	r0, [pc, #44]	; (6310 <InitHashDrv+0x40>)
    62e2:	bd08      	pop	{r3, pc}
    62e4:	490b      	ldr	r1, [pc, #44]	; (6314 <InitHashDrv+0x44>)
    62e6:	2220      	movs	r2, #32
    62e8:	3008      	adds	r0, #8
    62ea:	f7ff f90f 	bl	550c <CC_PalMemCopyPlat>
    62ee:	2000      	movs	r0, #0
    62f0:	bd08      	pop	{r3, pc}
    62f2:	4909      	ldr	r1, [pc, #36]	; (6318 <InitHashDrv+0x48>)
    62f4:	2214      	movs	r2, #20
    62f6:	3008      	adds	r0, #8
    62f8:	f7ff f908 	bl	550c <CC_PalMemCopyPlat>
    62fc:	e7f7      	b.n	62ee <InitHashDrv+0x1e>
    62fe:	4907      	ldr	r1, [pc, #28]	; (631c <InitHashDrv+0x4c>)
    6300:	2220      	movs	r2, #32
    6302:	3008      	adds	r0, #8
    6304:	f7ff f902 	bl	550c <CC_PalMemCopyPlat>
    6308:	e7f1      	b.n	62ee <InitHashDrv+0x1e>
    630a:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
    630e:	4770      	bx	lr
    6310:	00f30001 	.word	0x00f30001
    6314:	00008084 	.word	0x00008084
    6318:	000080c4 	.word	0x000080c4
    631c:	000080a4 	.word	0x000080a4

00006320 <ProcessHashDrv>:
    6320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6324:	2900      	cmp	r1, #0
    6326:	f000 80f9 	beq.w	651c <ProcessHashDrv+0x1fc>
    632a:	4604      	mov	r4, r0
    632c:	2800      	cmp	r0, #0
    632e:	f000 80f9 	beq.w	6524 <ProcessHashDrv+0x204>
    6332:	6803      	ldr	r3, [r0, #0]
    6334:	4690      	mov	r8, r2
    6336:	460f      	mov	r7, r1
    6338:	2b00      	cmp	r3, #0
    633a:	f000 80c3 	beq.w	64c4 <ProcessHashDrv+0x1a4>
    633e:	3b01      	subs	r3, #1
    6340:	2b01      	cmp	r3, #1
    6342:	f200 80d7 	bhi.w	64f4 <ProcessHashDrv+0x1d4>
    6346:	4879      	ldr	r0, [pc, #484]	; (652c <ProcessHashDrv+0x20c>)
    6348:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    634c:	f04f 0902 	mov.w	r9, #2
    6350:	f7ff f8f8 	bl	5544 <CC_PalMutexLock>
    6354:	2800      	cmp	r0, #0
    6356:	f040 80bf 	bne.w	64d8 <ProcessHashDrv+0x1b8>
    635a:	2000      	movs	r0, #0
    635c:	f7ff f922 	bl	55a4 <CC_PalPowerSaveModeSelect>
    6360:	4606      	mov	r6, r0
    6362:	2800      	cmp	r0, #0
    6364:	f040 80c2 	bne.w	64ec <ProcessHashDrv+0x1cc>
    6368:	4a71      	ldr	r2, [pc, #452]	; (6530 <ProcessHashDrv+0x210>)
    636a:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
    636e:	2b00      	cmp	r3, #0
    6370:	d1fb      	bne.n	636a <ProcessHashDrv+0x4a>
    6372:	4d6f      	ldr	r5, [pc, #444]	; (6530 <ProcessHashDrv+0x210>)
    6374:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
    6378:	2b00      	cmp	r3, #0
    637a:	d1fb      	bne.n	6374 <ProcessHashDrv+0x54>
    637c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6380:	f7ff f836 	bl	53f0 <CC_HalClearInterruptBit>
    6384:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
    6388:	f020 0040 	bic.w	r0, r0, #64	; 0x40
    638c:	f7ff f83e 	bl	540c <CC_HalMaskInterrupt>
    6390:	2301      	movs	r3, #1
    6392:	2207      	movs	r2, #7
    6394:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
    6398:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
    639c:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
    63a0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    63a2:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
    63a6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    63a8:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
    63ac:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
    63b0:	6823      	ldr	r3, [r4, #0]
    63b2:	b15b      	cbz	r3, 63cc <ProcessHashDrv+0xac>
    63b4:	3b01      	subs	r3, #1
    63b6:	2b01      	cmp	r3, #1
    63b8:	d818      	bhi.n	63ec <ProcessHashDrv+0xcc>
    63ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    63bc:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
    63c0:	6a23      	ldr	r3, [r4, #32]
    63c2:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
    63c6:	69e3      	ldr	r3, [r4, #28]
    63c8:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
    63cc:	4b58      	ldr	r3, [pc, #352]	; (6530 <ProcessHashDrv+0x210>)
    63ce:	69a2      	ldr	r2, [r4, #24]
    63d0:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
    63d4:	6962      	ldr	r2, [r4, #20]
    63d6:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
    63da:	6922      	ldr	r2, [r4, #16]
    63dc:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
    63e0:	68e2      	ldr	r2, [r4, #12]
    63e2:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
    63e6:	68a2      	ldr	r2, [r4, #8]
    63e8:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    63ec:	4a50      	ldr	r2, [pc, #320]	; (6530 <ProcessHashDrv+0x210>)
    63ee:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    63f2:	2b00      	cmp	r3, #0
    63f4:	d1fb      	bne.n	63ee <ProcessHashDrv+0xce>
    63f6:	f1b8 0f00 	cmp.w	r8, #0
    63fa:	d05f      	beq.n	64bc <ProcessHashDrv+0x19c>
    63fc:	6863      	ldr	r3, [r4, #4]
    63fe:	2b01      	cmp	r3, #1
    6400:	bf08      	it	eq
    6402:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
    6406:	4b4a      	ldr	r3, [pc, #296]	; (6530 <ProcessHashDrv+0x210>)
    6408:	683a      	ldr	r2, [r7, #0]
    640a:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
    640e:	2040      	movs	r0, #64	; 0x40
    6410:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
    6414:	f7ff f800 	bl	5418 <CC_HalWaitInterrupt>
    6418:	4606      	mov	r6, r0
    641a:	4a45      	ldr	r2, [pc, #276]	; (6530 <ProcessHashDrv+0x210>)
    641c:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    6420:	2b00      	cmp	r3, #0
    6422:	d1fb      	bne.n	641c <ProcessHashDrv+0xfc>
    6424:	4a42      	ldr	r2, [pc, #264]	; (6530 <ProcessHashDrv+0x210>)
    6426:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
    642a:	2b00      	cmp	r3, #0
    642c:	d1fb      	bne.n	6426 <ProcessHashDrv+0x106>
    642e:	6823      	ldr	r3, [r4, #0]
    6430:	b15b      	cbz	r3, 644a <ProcessHashDrv+0x12a>
    6432:	3b01      	subs	r3, #1
    6434:	2b01      	cmp	r3, #1
    6436:	d818      	bhi.n	646a <ProcessHashDrv+0x14a>
    6438:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
    643c:	6263      	str	r3, [r4, #36]	; 0x24
    643e:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
    6442:	6223      	str	r3, [r4, #32]
    6444:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
    6448:	61e3      	str	r3, [r4, #28]
    644a:	4b39      	ldr	r3, [pc, #228]	; (6530 <ProcessHashDrv+0x210>)
    644c:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
    6450:	61a2      	str	r2, [r4, #24]
    6452:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
    6456:	6162      	str	r2, [r4, #20]
    6458:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
    645c:	6122      	str	r2, [r4, #16]
    645e:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
    6462:	60e2      	str	r2, [r4, #12]
    6464:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
    6468:	60a3      	str	r3, [r4, #8]
    646a:	4a31      	ldr	r2, [pc, #196]	; (6530 <ProcessHashDrv+0x210>)
    646c:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
    6470:	64a1      	str	r1, [r4, #72]	; 0x48
    6472:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
    6476:	64e1      	str	r1, [r4, #76]	; 0x4c
    6478:	2300      	movs	r3, #0
    647a:	2101      	movs	r1, #1
    647c:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
    6480:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
    6484:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
    6488:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    648c:	2b00      	cmp	r3, #0
    648e:	d1fb      	bne.n	6488 <ProcessHashDrv+0x168>
    6490:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
    6494:	2e00      	cmp	r6, #0
    6496:	d13b      	bne.n	6510 <ProcessHashDrv+0x1f0>
    6498:	4b25      	ldr	r3, [pc, #148]	; (6530 <ProcessHashDrv+0x210>)
    649a:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
    649e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    64a2:	f7fe ffb3 	bl	540c <CC_HalMaskInterrupt>
    64a6:	2001      	movs	r0, #1
    64a8:	f7ff f87c 	bl	55a4 <CC_PalPowerSaveModeSelect>
    64ac:	bb60      	cbnz	r0, 6508 <ProcessHashDrv+0x1e8>
    64ae:	481f      	ldr	r0, [pc, #124]	; (652c <ProcessHashDrv+0x20c>)
    64b0:	f7ff f850 	bl	5554 <CC_PalMutexUnlock>
    64b4:	bb10      	cbnz	r0, 64fc <ProcessHashDrv+0x1dc>
    64b6:	4630      	mov	r0, r6
    64b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    64bc:	2304      	movs	r3, #4
    64be:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
    64c2:	e7aa      	b.n	641a <ProcessHashDrv+0xfa>
    64c4:	4819      	ldr	r0, [pc, #100]	; (652c <ProcessHashDrv+0x20c>)
    64c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    64ca:	f04f 0901 	mov.w	r9, #1
    64ce:	f7ff f839 	bl	5544 <CC_PalMutexLock>
    64d2:	2800      	cmp	r0, #0
    64d4:	f43f af41 	beq.w	635a <ProcessHashDrv+0x3a>
    64d8:	4816      	ldr	r0, [pc, #88]	; (6534 <ProcessHashDrv+0x214>)
    64da:	f7fe f927 	bl	472c <CC_PalAbort>
    64de:	2000      	movs	r0, #0
    64e0:	f7ff f860 	bl	55a4 <CC_PalPowerSaveModeSelect>
    64e4:	4606      	mov	r6, r0
    64e6:	2800      	cmp	r0, #0
    64e8:	f43f af3e 	beq.w	6368 <ProcessHashDrv+0x48>
    64ec:	4812      	ldr	r0, [pc, #72]	; (6538 <ProcessHashDrv+0x218>)
    64ee:	f7fe f91d 	bl	472c <CC_PalAbort>
    64f2:	e739      	b.n	6368 <ProcessHashDrv+0x48>
    64f4:	4e11      	ldr	r6, [pc, #68]	; (653c <ProcessHashDrv+0x21c>)
    64f6:	4630      	mov	r0, r6
    64f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    64fc:	4810      	ldr	r0, [pc, #64]	; (6540 <ProcessHashDrv+0x220>)
    64fe:	f7fe f915 	bl	472c <CC_PalAbort>
    6502:	4630      	mov	r0, r6
    6504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6508:	480e      	ldr	r0, [pc, #56]	; (6544 <ProcessHashDrv+0x224>)
    650a:	f7fe f90f 	bl	472c <CC_PalAbort>
    650e:	e7ce      	b.n	64ae <ProcessHashDrv+0x18e>
    6510:	2110      	movs	r1, #16
    6512:	f104 0008 	add.w	r0, r4, #8
    6516:	f7fe fffd 	bl	5514 <CC_PalMemSetZeroPlat>
    651a:	e7bd      	b.n	6498 <ProcessHashDrv+0x178>
    651c:	4e0a      	ldr	r6, [pc, #40]	; (6548 <ProcessHashDrv+0x228>)
    651e:	4630      	mov	r0, r6
    6520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6524:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
    6528:	e7c5      	b.n	64b6 <ProcessHashDrv+0x196>
    652a:	bf00      	nop
    652c:	20000134 	.word	0x20000134
    6530:	5002b000 	.word	0x5002b000
    6534:	00007fb8 	.word	0x00007fb8
    6538:	00007fd0 	.word	0x00007fd0
    653c:	00f30001 	.word	0x00f30001
    6540:	00008010 	.word	0x00008010
    6544:	00007ff0 	.word	0x00007ff0
    6548:	00f30003 	.word	0x00f30003

0000654c <FinishHashDrv>:
    654c:	b398      	cbz	r0, 65b6 <FinishHashDrv+0x6a>
    654e:	b470      	push	{r4, r5, r6}
    6550:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
    6554:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    6558:	ba26      	rev	r6, r4
    655a:	ba0d      	rev	r5, r1
    655c:	ba14      	rev	r4, r2
    655e:	ba19      	rev	r1, r3
    6560:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
    6564:	ba12      	rev	r2, r2
    6566:	e9c0 4104 	strd	r4, r1, [r0, #16]
    656a:	6182      	str	r2, [r0, #24]
    656c:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
    6570:	e9c0 6502 	strd	r6, r5, [r0, #8]
    6574:	ba1b      	rev	r3, r3
    6576:	ba25      	rev	r5, r4
    6578:	e9c0 3507 	strd	r3, r5, [r0, #28]
    657c:	ba14      	rev	r4, r2
    657e:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
    6582:	6a81      	ldr	r1, [r0, #40]	; 0x28
    6584:	ba12      	rev	r2, r2
    6586:	ba09      	rev	r1, r1
    6588:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
    658c:	62c2      	str	r2, [r0, #44]	; 0x2c
    658e:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
    6592:	ba1b      	rev	r3, r3
    6594:	ba25      	rev	r5, r4
    6596:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
    659a:	ba14      	rev	r4, r2
    659c:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
    65a0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    65a2:	ba12      	rev	r2, r2
    65a4:	ba09      	rev	r1, r1
    65a6:	ba1b      	rev	r3, r3
    65a8:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
    65ac:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    65b0:	2000      	movs	r0, #0
    65b2:	bc70      	pop	{r4, r5, r6}
    65b4:	4770      	bx	lr
    65b6:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
    65ba:	4770      	bx	lr

000065bc <LoadAesKey>:
    65bc:	2800      	cmp	r0, #0
    65be:	d047      	beq.n	6650 <LoadAesKey+0x94>
    65c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    65c4:	2b00      	cmp	r3, #0
    65c6:	d034      	beq.n	6632 <LoadAesKey+0x76>
    65c8:	2b03      	cmp	r3, #3
    65ca:	b510      	push	{r4, lr}
    65cc:	d013      	beq.n	65f6 <LoadAesKey+0x3a>
    65ce:	4822      	ldr	r0, [pc, #136]	; (6658 <LoadAesKey+0x9c>)
    65d0:	4c22      	ldr	r4, [pc, #136]	; (665c <LoadAesKey+0xa0>)
    65d2:	6822      	ldr	r2, [r4, #0]
    65d4:	4b22      	ldr	r3, [pc, #136]	; (6660 <LoadAesKey+0xa4>)
    65d6:	6812      	ldr	r2, [r2, #0]
    65d8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    65dc:	6822      	ldr	r2, [r4, #0]
    65de:	6852      	ldr	r2, [r2, #4]
    65e0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    65e4:	6822      	ldr	r2, [r4, #0]
    65e6:	6892      	ldr	r2, [r2, #8]
    65e8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    65ec:	6822      	ldr	r2, [r4, #0]
    65ee:	68d2      	ldr	r2, [r2, #12]
    65f0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    65f4:	bd10      	pop	{r4, pc}
    65f6:	6b01      	ldr	r1, [r0, #48]	; 0x30
    65f8:	6c00      	ldr	r0, [r0, #64]	; 0x40
    65fa:	4c18      	ldr	r4, [pc, #96]	; (665c <LoadAesKey+0xa0>)
    65fc:	f000 fba8 	bl	6d50 <kmu_validate_kdr_slot_and_size>
    6600:	2800      	cmp	r0, #0
    6602:	d1e6      	bne.n	65d2 <LoadAesKey+0x16>
    6604:	6822      	ldr	r2, [r4, #0]
    6606:	4b16      	ldr	r3, [pc, #88]	; (6660 <LoadAesKey+0xa4>)
    6608:	6812      	ldr	r2, [r2, #0]
    660a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    660e:	6822      	ldr	r2, [r4, #0]
    6610:	6852      	ldr	r2, [r2, #4]
    6612:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    6616:	6822      	ldr	r2, [r4, #0]
    6618:	6892      	ldr	r2, [r2, #8]
    661a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    661e:	6822      	ldr	r2, [r4, #0]
    6620:	68d2      	ldr	r2, [r2, #12]
    6622:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    6626:	f000 fba1 	bl	6d6c <kmu_use_kdr_key>
    662a:	2800      	cmp	r0, #0
    662c:	d1d1      	bne.n	65d2 <LoadAesKey+0x16>
    662e:	2000      	movs	r0, #0
    6630:	bd10      	pop	{r4, pc}
    6632:	4b0b      	ldr	r3, [pc, #44]	; (6660 <LoadAesKey+0xa4>)
    6634:	6902      	ldr	r2, [r0, #16]
    6636:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    663a:	6942      	ldr	r2, [r0, #20]
    663c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    6640:	6982      	ldr	r2, [r0, #24]
    6642:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    6646:	69c2      	ldr	r2, [r0, #28]
    6648:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    664c:	2000      	movs	r0, #0
    664e:	4770      	bx	lr
    6650:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
    6654:	4770      	bx	lr
    6656:	bf00      	nop
    6658:	00f10009 	.word	0x00f10009
    665c:	20000120 	.word	0x20000120
    6660:	5002b000 	.word	0x5002b000

00006664 <InitAes.part.0>:
    6664:	4a37      	ldr	r2, [pc, #220]	; (6744 <InitAes.part.0+0xe0>)
    6666:	b538      	push	{r3, r4, r5, lr}
    6668:	4604      	mov	r4, r0
    666a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    666e:	2b00      	cmp	r3, #0
    6670:	d1fb      	bne.n	666a <InitAes.part.0+0x6>
    6672:	4a34      	ldr	r2, [pc, #208]	; (6744 <InitAes.part.0+0xe0>)
    6674:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
    6678:	2b00      	cmp	r3, #0
    667a:	d1fb      	bne.n	6674 <InitAes.part.0+0x10>
    667c:	4a31      	ldr	r2, [pc, #196]	; (6744 <InitAes.part.0+0xe0>)
    667e:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
    6682:	2b00      	cmp	r3, #0
    6684:	d1fb      	bne.n	667e <InitAes.part.0+0x1a>
    6686:	4a2f      	ldr	r2, [pc, #188]	; (6744 <InitAes.part.0+0xe0>)
    6688:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
    668c:	2b00      	cmp	r3, #0
    668e:	d1fb      	bne.n	6688 <InitAes.part.0+0x24>
    6690:	4a2c      	ldr	r2, [pc, #176]	; (6744 <InitAes.part.0+0xe0>)
    6692:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
    6696:	2b00      	cmp	r3, #0
    6698:	d1fb      	bne.n	6692 <InitAes.part.0+0x2e>
    669a:	4d2a      	ldr	r5, [pc, #168]	; (6744 <InitAes.part.0+0xe0>)
    669c:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
    66a0:	2b00      	cmp	r3, #0
    66a2:	d1fb      	bne.n	669c <InitAes.part.0+0x38>
    66a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    66a8:	f7fe fea2 	bl	53f0 <CC_HalClearInterruptBit>
    66ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
    66ae:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
    66b2:	f023 0304 	bic.w	r3, r3, #4
    66b6:	2b03      	cmp	r3, #3
    66b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    66ba:	d039      	beq.n	6730 <InitAes.part.0+0xcc>
    66bc:	2b01      	cmp	r3, #1
    66be:	bf0c      	ite	eq
    66c0:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
    66c4:	f020 0020 	bicne.w	r0, r0, #32
    66c8:	f7fe fea0 	bl	540c <CC_HalMaskInterrupt>
    66cc:	4a1d      	ldr	r2, [pc, #116]	; (6744 <InitAes.part.0+0xe0>)
    66ce:	2301      	movs	r3, #1
    66d0:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
    66d4:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    66d8:	2b00      	cmp	r3, #0
    66da:	d1fb      	bne.n	66d4 <InitAes.part.0+0x70>
    66dc:	4a19      	ldr	r2, [pc, #100]	; (6744 <InitAes.part.0+0xe0>)
    66de:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
    66e2:	2b00      	cmp	r3, #0
    66e4:	d1fb      	bne.n	66de <InitAes.part.0+0x7a>
    66e6:	4917      	ldr	r1, [pc, #92]	; (6744 <InitAes.part.0+0xe0>)
    66e8:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
    66ec:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
    66f0:	2b00      	cmp	r3, #0
    66f2:	d1fb      	bne.n	66ec <InitAes.part.0+0x88>
    66f4:	4a13      	ldr	r2, [pc, #76]	; (6744 <InitAes.part.0+0xe0>)
    66f6:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
    66fa:	2b00      	cmp	r3, #0
    66fc:	d1fb      	bne.n	66f6 <InitAes.part.0+0x92>
    66fe:	6b62      	ldr	r2, [r4, #52]	; 0x34
    6700:	f022 0104 	bic.w	r1, r2, #4
    6704:	2903      	cmp	r1, #3
    6706:	bf18      	it	ne
    6708:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
    670a:	490e      	ldr	r1, [pc, #56]	; (6744 <InitAes.part.0+0xe0>)
    670c:	ea4f 0282 	mov.w	r2, r2, lsl #2
    6710:	bf18      	it	ne
    6712:	f003 0301 	andne.w	r3, r3, #1
    6716:	f002 021c 	and.w	r2, r2, #28
    671a:	431a      	orrs	r2, r3
    671c:	f8c1 24c0 	str.w	r2, [r1, #1216]	; 0x4c0
    6720:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6722:	2b07      	cmp	r3, #7
    6724:	bf04      	itt	eq
    6726:	2301      	moveq	r3, #1
    6728:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
    672c:	2000      	movs	r0, #0
    672e:	bd38      	pop	{r3, r4, r5, pc}
    6730:	2b01      	cmp	r3, #1
    6732:	bf0c      	ite	eq
    6734:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
    6738:	f020 0010 	bicne.w	r0, r0, #16
    673c:	f7fe fe66 	bl	540c <CC_HalMaskInterrupt>
    6740:	e7c4      	b.n	66cc <InitAes.part.0+0x68>
    6742:	bf00      	nop
    6744:	5002b000 	.word	0x5002b000

00006748 <write_invalid_key>:
    6748:	4a09      	ldr	r2, [pc, #36]	; (6770 <write_invalid_key+0x28>)
    674a:	4b0a      	ldr	r3, [pc, #40]	; (6774 <write_invalid_key+0x2c>)
    674c:	6811      	ldr	r1, [r2, #0]
    674e:	6809      	ldr	r1, [r1, #0]
    6750:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
    6754:	6811      	ldr	r1, [r2, #0]
    6756:	6849      	ldr	r1, [r1, #4]
    6758:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
    675c:	6811      	ldr	r1, [r2, #0]
    675e:	6889      	ldr	r1, [r1, #8]
    6760:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
    6764:	6812      	ldr	r2, [r2, #0]
    6766:	68d2      	ldr	r2, [r2, #12]
    6768:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    676c:	4770      	bx	lr
    676e:	bf00      	nop
    6770:	20000120 	.word	0x20000120
    6774:	5002b000 	.word	0x5002b000

00006778 <ProcessAesDrv>:
    6778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    677c:	b085      	sub	sp, #20
    677e:	2900      	cmp	r1, #0
    6780:	f000 80ec 	beq.w	695c <ProcessAesDrv+0x1e4>
    6784:	4690      	mov	r8, r2
    6786:	2a00      	cmp	r2, #0
    6788:	f000 80e8 	beq.w	695c <ProcessAesDrv+0x1e4>
    678c:	4605      	mov	r5, r0
    678e:	2800      	cmp	r0, #0
    6790:	f000 8129 	beq.w	69e6 <ProcessAesDrv+0x26e>
    6794:	4699      	mov	r9, r3
    6796:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    6798:	460e      	mov	r6, r1
    679a:	2b00      	cmp	r3, #0
    679c:	d152      	bne.n	6844 <ProcessAesDrv+0xcc>
    679e:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
    67a2:	d254      	bcs.n	684e <ProcessAesDrv+0xd6>
    67a4:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
    67a8:	2b04      	cmp	r3, #4
    67aa:	f000 80ff 	beq.w	69ac <ProcessAesDrv+0x234>
    67ae:	2700      	movs	r7, #0
    67b0:	48ad      	ldr	r0, [pc, #692]	; (6a68 <ProcessAesDrv+0x2f0>)
    67b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    67b6:	f7fe fec5 	bl	5544 <CC_PalMutexLock>
    67ba:	2800      	cmp	r0, #0
    67bc:	f040 80d5 	bne.w	696a <ProcessAesDrv+0x1f2>
    67c0:	2000      	movs	r0, #0
    67c2:	f7fe feef 	bl	55a4 <CC_PalPowerSaveModeSelect>
    67c6:	2800      	cmp	r0, #0
    67c8:	f040 80d8 	bne.w	697c <ProcessAesDrv+0x204>
    67cc:	48a7      	ldr	r0, [pc, #668]	; (6a6c <ProcessAesDrv+0x2f4>)
    67ce:	2301      	movs	r3, #1
    67d0:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
    67d4:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
    67d8:	2c00      	cmp	r4, #0
    67da:	d1fb      	bne.n	67d4 <ProcessAesDrv+0x5c>
    67dc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    67de:	2b03      	cmp	r3, #3
    67e0:	dc3a      	bgt.n	6858 <ProcessAesDrv+0xe0>
    67e2:	2b00      	cmp	r3, #0
    67e4:	da3b      	bge.n	685e <ProcessAesDrv+0xe6>
    67e6:	4ca2      	ldr	r4, [pc, #648]	; (6a70 <ProcessAesDrv+0x2f8>)
    67e8:	4aa0      	ldr	r2, [pc, #640]	; (6a6c <ProcessAesDrv+0x2f4>)
    67ea:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    67ee:	2b00      	cmp	r3, #0
    67f0:	d1fb      	bne.n	67ea <ProcessAesDrv+0x72>
    67f2:	2f00      	cmp	r7, #0
    67f4:	f040 80d1 	bne.w	699a <ProcessAesDrv+0x222>
    67f8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    67fa:	6dea      	ldr	r2, [r5, #92]	; 0x5c
    67fc:	f023 0304 	bic.w	r3, r3, #4
    6800:	2b03      	cmp	r3, #3
    6802:	4b9a      	ldr	r3, [pc, #616]	; (6a6c <ProcessAesDrv+0x2f4>)
    6804:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
    6808:	f000 809f 	beq.w	694a <ProcessAesDrv+0x1d2>
    680c:	2a01      	cmp	r2, #1
    680e:	bf0c      	ite	eq
    6810:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
    6814:	f040 0020 	orrne.w	r0, r0, #32
    6818:	f7fe fdf8 	bl	540c <CC_HalMaskInterrupt>
    681c:	4b93      	ldr	r3, [pc, #588]	; (6a6c <ProcessAesDrv+0x2f4>)
    681e:	2200      	movs	r2, #0
    6820:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
    6824:	2001      	movs	r0, #1
    6826:	f7fe febd 	bl	55a4 <CC_PalPowerSaveModeSelect>
    682a:	2800      	cmp	r0, #0
    682c:	f040 80b1 	bne.w	6992 <ProcessAesDrv+0x21a>
    6830:	488d      	ldr	r0, [pc, #564]	; (6a68 <ProcessAesDrv+0x2f0>)
    6832:	f7fe fe8f 	bl	5554 <CC_PalMutexUnlock>
    6836:	2800      	cmp	r0, #0
    6838:	f040 80a4 	bne.w	6984 <ProcessAesDrv+0x20c>
    683c:	4620      	mov	r0, r4
    683e:	b005      	add	sp, #20
    6840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6844:	2b01      	cmp	r3, #1
    6846:	d1ad      	bne.n	67a4 <ProcessAesDrv+0x2c>
    6848:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
    684c:	d3aa      	bcc.n	67a4 <ProcessAesDrv+0x2c>
    684e:	4c89      	ldr	r4, [pc, #548]	; (6a74 <ProcessAesDrv+0x2fc>)
    6850:	4620      	mov	r0, r4
    6852:	b005      	add	sp, #20
    6854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6858:	3b06      	subs	r3, #6
    685a:	2b01      	cmp	r3, #1
    685c:	d8c3      	bhi.n	67e6 <ProcessAesDrv+0x6e>
    685e:	6bab      	ldr	r3, [r5, #56]	; 0x38
    6860:	2b01      	cmp	r3, #1
    6862:	f200 80be 	bhi.w	69e2 <ProcessAesDrv+0x26a>
    6866:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    6868:	2b01      	cmp	r3, #1
    686a:	d87c      	bhi.n	6966 <ProcessAesDrv+0x1ee>
    686c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    686e:	2b01      	cmp	r3, #1
    6870:	f200 80e8 	bhi.w	6a44 <ProcessAesDrv+0x2cc>
    6874:	4628      	mov	r0, r5
    6876:	f7ff fef5 	bl	6664 <InitAes.part.0>
    687a:	4604      	mov	r4, r0
    687c:	2800      	cmp	r0, #0
    687e:	d1b3      	bne.n	67e8 <ProcessAesDrv+0x70>
    6880:	4628      	mov	r0, r5
    6882:	f7ff fe9b 	bl	65bc <LoadAesKey>
    6886:	4604      	mov	r4, r0
    6888:	2800      	cmp	r0, #0
    688a:	d1ad      	bne.n	67e8 <ProcessAesDrv+0x70>
    688c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    688e:	2b07      	cmp	r3, #7
    6890:	d8a9      	bhi.n	67e6 <ProcessAesDrv+0x6e>
    6892:	2201      	movs	r2, #1
    6894:	409a      	lsls	r2, r3
    6896:	f012 0f8a 	tst.w	r2, #138	; 0x8a
    689a:	f040 80d5 	bne.w	6a48 <ProcessAesDrv+0x2d0>
    689e:	f012 0f44 	tst.w	r2, #68	; 0x44
    68a2:	f040 80ba 	bne.w	6a1a <ProcessAesDrv+0x2a2>
    68a6:	07d2      	lsls	r2, r2, #31
    68a8:	d59d      	bpl.n	67e6 <ProcessAesDrv+0x6e>
    68aa:	f023 0304 	bic.w	r3, r3, #4
    68ae:	2b03      	cmp	r3, #3
    68b0:	6832      	ldr	r2, [r6, #0]
    68b2:	d00d      	beq.n	68d0 <ProcessAesDrv+0x158>
    68b4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    68b6:	f8d8 1000 	ldr.w	r1, [r8]
    68ba:	2b01      	cmp	r3, #1
    68bc:	4b6b      	ldr	r3, [pc, #428]	; (6a6c <ProcessAesDrv+0x2f4>)
    68be:	bf0b      	itete	eq
    68c0:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
    68c4:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
    68c8:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
    68cc:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
    68d0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    68d2:	2b01      	cmp	r3, #1
    68d4:	4b65      	ldr	r3, [pc, #404]	; (6a6c <ProcessAesDrv+0x2f4>)
    68d6:	bf0b      	itete	eq
    68d8:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
    68dc:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
    68e0:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
    68e4:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
    68e8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    68ea:	f023 0304 	bic.w	r3, r3, #4
    68ee:	2b03      	cmp	r3, #3
    68f0:	f000 80a2 	beq.w	6a38 <ProcessAesDrv+0x2c0>
    68f4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    68f6:	2b01      	cmp	r3, #1
    68f8:	bf14      	ite	ne
    68fa:	2020      	movne	r0, #32
    68fc:	2080      	moveq	r0, #128	; 0x80
    68fe:	f7fe fd8b 	bl	5418 <CC_HalWaitInterrupt>
    6902:	4604      	mov	r4, r0
    6904:	2800      	cmp	r0, #0
    6906:	f47f af6f 	bne.w	67e8 <ProcessAesDrv+0x70>
    690a:	4b58      	ldr	r3, [pc, #352]	; (6a6c <ProcessAesDrv+0x2f4>)
    690c:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
    6910:	2c00      	cmp	r4, #0
    6912:	d1fb      	bne.n	690c <ProcessAesDrv+0x194>
    6914:	6b69      	ldr	r1, [r5, #52]	; 0x34
    6916:	2907      	cmp	r1, #7
    6918:	d814      	bhi.n	6944 <ProcessAesDrv+0x1cc>
    691a:	2201      	movs	r2, #1
    691c:	408a      	lsls	r2, r1
    691e:	f012 0f8a 	tst.w	r2, #138	; 0x8a
    6922:	f040 80bb 	bne.w	6a9c <ProcessAesDrv+0x324>
    6926:	f012 0f44 	tst.w	r2, #68	; 0x44
    692a:	d00b      	beq.n	6944 <ProcessAesDrv+0x1cc>
    692c:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
    6930:	602a      	str	r2, [r5, #0]
    6932:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
    6936:	606a      	str	r2, [r5, #4]
    6938:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
    693c:	60aa      	str	r2, [r5, #8]
    693e:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
    6942:	60eb      	str	r3, [r5, #12]
    6944:	2301      	movs	r3, #1
    6946:	65ab      	str	r3, [r5, #88]	; 0x58
    6948:	e74e      	b.n	67e8 <ProcessAesDrv+0x70>
    694a:	2a01      	cmp	r2, #1
    694c:	bf0c      	ite	eq
    694e:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
    6952:	f040 0010 	orrne.w	r0, r0, #16
    6956:	f7fe fd59 	bl	540c <CC_HalMaskInterrupt>
    695a:	e75f      	b.n	681c <ProcessAesDrv+0xa4>
    695c:	4c46      	ldr	r4, [pc, #280]	; (6a78 <ProcessAesDrv+0x300>)
    695e:	4620      	mov	r0, r4
    6960:	b005      	add	sp, #20
    6962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6966:	4c45      	ldr	r4, [pc, #276]	; (6a7c <ProcessAesDrv+0x304>)
    6968:	e73e      	b.n	67e8 <ProcessAesDrv+0x70>
    696a:	4845      	ldr	r0, [pc, #276]	; (6a80 <ProcessAesDrv+0x308>)
    696c:	f7fd fede 	bl	472c <CC_PalAbort>
    6970:	2000      	movs	r0, #0
    6972:	f7fe fe17 	bl	55a4 <CC_PalPowerSaveModeSelect>
    6976:	2800      	cmp	r0, #0
    6978:	f43f af28 	beq.w	67cc <ProcessAesDrv+0x54>
    697c:	4841      	ldr	r0, [pc, #260]	; (6a84 <ProcessAesDrv+0x30c>)
    697e:	f7fd fed5 	bl	472c <CC_PalAbort>
    6982:	e723      	b.n	67cc <ProcessAesDrv+0x54>
    6984:	4840      	ldr	r0, [pc, #256]	; (6a88 <ProcessAesDrv+0x310>)
    6986:	f7fd fed1 	bl	472c <CC_PalAbort>
    698a:	4620      	mov	r0, r4
    698c:	b005      	add	sp, #20
    698e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6992:	483e      	ldr	r0, [pc, #248]	; (6a8c <ProcessAesDrv+0x314>)
    6994:	f7fd feca 	bl	472c <CC_PalAbort>
    6998:	e74a      	b.n	6830 <ProcessAesDrv+0xb8>
    699a:	2304      	movs	r3, #4
    699c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    69a0:	2120      	movs	r1, #32
    69a2:	f105 0010 	add.w	r0, r5, #16
    69a6:	f7fe fdb5 	bl	5514 <CC_PalMemSetZeroPlat>
    69aa:	e725      	b.n	67f8 <ProcessAesDrv+0x80>
    69ac:	6b29      	ldr	r1, [r5, #48]	; 0x30
    69ae:	6c28      	ldr	r0, [r5, #64]	; 0x40
    69b0:	f000 f9c0 	bl	6d34 <kmu_validate_slot_and_size>
    69b4:	b998      	cbnz	r0, 69de <ProcessAesDrv+0x266>
    69b6:	4f36      	ldr	r7, [pc, #216]	; (6a90 <ProcessAesDrv+0x318>)
    69b8:	4c2c      	ldr	r4, [pc, #176]	; (6a6c <ProcessAesDrv+0x2f4>)
    69ba:	683b      	ldr	r3, [r7, #0]
    69bc:	681b      	ldr	r3, [r3, #0]
    69be:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
    69c2:	683b      	ldr	r3, [r7, #0]
    69c4:	685b      	ldr	r3, [r3, #4]
    69c6:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
    69ca:	683b      	ldr	r3, [r7, #0]
    69cc:	689b      	ldr	r3, [r3, #8]
    69ce:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
    69d2:	683b      	ldr	r3, [r7, #0]
    69d4:	68db      	ldr	r3, [r3, #12]
    69d6:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
    69da:	6b29      	ldr	r1, [r5, #48]	; 0x30
    69dc:	b131      	cbz	r1, 69ec <ProcessAesDrv+0x274>
    69de:	2701      	movs	r7, #1
    69e0:	e6e6      	b.n	67b0 <ProcessAesDrv+0x38>
    69e2:	4c2c      	ldr	r4, [pc, #176]	; (6a94 <ProcessAesDrv+0x31c>)
    69e4:	e700      	b.n	67e8 <ProcessAesDrv+0x70>
    69e6:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
    69ea:	e727      	b.n	683c <ProcessAesDrv+0xc4>
    69ec:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    69ee:	9301      	str	r3, [sp, #4]
    69f0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    69f2:	9300      	str	r3, [sp, #0]
    69f4:	f105 0a10 	add.w	sl, r5, #16
    69f8:	f04f 0b10 	mov.w	fp, #16
    69fc:	f8cd a008 	str.w	sl, [sp, #8]
    6a00:	f8cd b00c 	str.w	fp, [sp, #12]
    6a04:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
    6a08:	6c28      	ldr	r0, [r5, #64]	; 0x40
    6a0a:	f000 f9b9 	bl	6d80 <kmu_derive_cmac>
    6a0e:	2800      	cmp	r0, #0
    6a10:	d151      	bne.n	6ab6 <ProcessAesDrv+0x33e>
    6a12:	2300      	movs	r3, #0
    6a14:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    6a18:	e7e1      	b.n	69de <ProcessAesDrv+0x266>
    6a1a:	4b14      	ldr	r3, [pc, #80]	; (6a6c <ProcessAesDrv+0x2f4>)
    6a1c:	682a      	ldr	r2, [r5, #0]
    6a1e:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
    6a22:	686a      	ldr	r2, [r5, #4]
    6a24:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
    6a28:	68aa      	ldr	r2, [r5, #8]
    6a2a:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
    6a2e:	68ea      	ldr	r2, [r5, #12]
    6a30:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
    6a34:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    6a36:	e738      	b.n	68aa <ProcessAesDrv+0x132>
    6a38:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    6a3a:	2b01      	cmp	r3, #1
    6a3c:	bf14      	ite	ne
    6a3e:	2010      	movne	r0, #16
    6a40:	2040      	moveq	r0, #64	; 0x40
    6a42:	e75c      	b.n	68fe <ProcessAesDrv+0x186>
    6a44:	4c14      	ldr	r4, [pc, #80]	; (6a98 <ProcessAesDrv+0x320>)
    6a46:	e6cf      	b.n	67e8 <ProcessAesDrv+0x70>
    6a48:	4b08      	ldr	r3, [pc, #32]	; (6a6c <ProcessAesDrv+0x2f4>)
    6a4a:	682a      	ldr	r2, [r5, #0]
    6a4c:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
    6a50:	686a      	ldr	r2, [r5, #4]
    6a52:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
    6a56:	68aa      	ldr	r2, [r5, #8]
    6a58:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
    6a5c:	68ea      	ldr	r2, [r5, #12]
    6a5e:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
    6a62:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    6a64:	e721      	b.n	68aa <ProcessAesDrv+0x132>
    6a66:	bf00      	nop
    6a68:	20000134 	.word	0x20000134
    6a6c:	5002b000 	.word	0x5002b000
    6a70:	00f10001 	.word	0x00f10001
    6a74:	00f10005 	.word	0x00f10005
    6a78:	00f1000b 	.word	0x00f1000b
    6a7c:	00f10003 	.word	0x00f10003
    6a80:	00007fb8 	.word	0x00007fb8
    6a84:	00007fd0 	.word	0x00007fd0
    6a88:	00008010 	.word	0x00008010
    6a8c:	00007ff0 	.word	0x00007ff0
    6a90:	20000120 	.word	0x20000120
    6a94:	00f10002 	.word	0x00f10002
    6a98:	00f10004 	.word	0x00f10004
    6a9c:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
    6aa0:	602a      	str	r2, [r5, #0]
    6aa2:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
    6aa6:	606a      	str	r2, [r5, #4]
    6aa8:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
    6aac:	60aa      	str	r2, [r5, #8]
    6aae:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
    6ab2:	60eb      	str	r3, [r5, #12]
    6ab4:	e746      	b.n	6944 <ProcessAesDrv+0x1cc>
    6ab6:	683b      	ldr	r3, [r7, #0]
    6ab8:	681b      	ldr	r3, [r3, #0]
    6aba:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
    6abe:	683b      	ldr	r3, [r7, #0]
    6ac0:	685b      	ldr	r3, [r3, #4]
    6ac2:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
    6ac6:	683b      	ldr	r3, [r7, #0]
    6ac8:	689b      	ldr	r3, [r3, #8]
    6aca:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
    6ace:	683b      	ldr	r3, [r7, #0]
    6ad0:	68db      	ldr	r3, [r3, #12]
    6ad2:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
    6ad6:	4659      	mov	r1, fp
    6ad8:	4650      	mov	r0, sl
    6ada:	f7fe fd1b 	bl	5514 <CC_PalMemSetZeroPlat>
    6ade:	e798      	b.n	6a12 <ProcessAesDrv+0x29a>

00006ae0 <FinishAesDrv>:
    6ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ae4:	b309      	cbz	r1, 6b2a <FinishAesDrv+0x4a>
    6ae6:	b302      	cbz	r2, 6b2a <FinishAesDrv+0x4a>
    6ae8:	4604      	mov	r4, r0
    6aea:	2800      	cmp	r0, #0
    6aec:	f000 80af 	beq.w	6c4e <FinishAesDrv+0x16e>
    6af0:	461d      	mov	r5, r3
    6af2:	6b43      	ldr	r3, [r0, #52]	; 0x34
    6af4:	2b07      	cmp	r3, #7
    6af6:	460e      	mov	r6, r1
    6af8:	d01b      	beq.n	6b32 <FinishAesDrv+0x52>
    6afa:	b95d      	cbnz	r5, 6b14 <FinishAesDrv+0x34>
    6afc:	2b03      	cmp	r3, #3
    6afe:	d110      	bne.n	6b22 <FinishAesDrv+0x42>
    6b00:	6d83      	ldr	r3, [r0, #88]	; 0x58
    6b02:	b973      	cbnz	r3, 6b22 <FinishAesDrv+0x42>
    6b04:	f100 0364 	add.w	r3, r0, #100	; 0x64
    6b08:	6645      	str	r5, [r0, #100]	; 0x64
    6b0a:	6685      	str	r5, [r0, #104]	; 0x68
    6b0c:	66c5      	str	r5, [r0, #108]	; 0x6c
    6b0e:	6705      	str	r5, [r0, #112]	; 0x70
    6b10:	600b      	str	r3, [r1, #0]
    6b12:	2510      	movs	r5, #16
    6b14:	462b      	mov	r3, r5
    6b16:	4631      	mov	r1, r6
    6b18:	4620      	mov	r0, r4
    6b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6b1e:	f7ff be2b 	b.w	6778 <ProcessAesDrv>
    6b22:	462f      	mov	r7, r5
    6b24:	4638      	mov	r0, r7
    6b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6b2a:	4f76      	ldr	r7, [pc, #472]	; (6d04 <FinishAesDrv+0x224>)
    6b2c:	4638      	mov	r0, r7
    6b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6b32:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    6b34:	2b00      	cmp	r3, #0
    6b36:	f040 808d 	bne.w	6c54 <FinishAesDrv+0x174>
    6b3a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    6b3e:	f080 8090 	bcs.w	6c62 <FinishAesDrv+0x182>
    6b42:	b91d      	cbnz	r5, 6b4c <FinishAesDrv+0x6c>
    6b44:	6da3      	ldr	r3, [r4, #88]	; 0x58
    6b46:	2b00      	cmp	r3, #0
    6b48:	f040 808b 	bne.w	6c62 <FinishAesDrv+0x182>
    6b4c:	486e      	ldr	r0, [pc, #440]	; (6d08 <FinishAesDrv+0x228>)
    6b4e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6b52:	f7fe fcf7 	bl	5544 <CC_PalMutexLock>
    6b56:	2800      	cmp	r0, #0
    6b58:	f040 808f 	bne.w	6c7a <FinishAesDrv+0x19a>
    6b5c:	2000      	movs	r0, #0
    6b5e:	f7fe fd21 	bl	55a4 <CC_PalPowerSaveModeSelect>
    6b62:	2800      	cmp	r0, #0
    6b64:	f040 8085 	bne.w	6c72 <FinishAesDrv+0x192>
    6b68:	4a68      	ldr	r2, [pc, #416]	; (6d0c <FinishAesDrv+0x22c>)
    6b6a:	2301      	movs	r3, #1
    6b6c:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
    6b70:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    6b74:	2b00      	cmp	r3, #0
    6b76:	d1fb      	bne.n	6b70 <FinishAesDrv+0x90>
    6b78:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6b7a:	2b03      	cmp	r3, #3
    6b7c:	dd4f      	ble.n	6c1e <FinishAesDrv+0x13e>
    6b7e:	3b06      	subs	r3, #6
    6b80:	2b01      	cmp	r3, #1
    6b82:	d84e      	bhi.n	6c22 <FinishAesDrv+0x142>
    6b84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6b86:	2b01      	cmp	r3, #1
    6b88:	d86d      	bhi.n	6c66 <FinishAesDrv+0x186>
    6b8a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    6b8c:	2b01      	cmp	r3, #1
    6b8e:	d878      	bhi.n	6c82 <FinishAesDrv+0x1a2>
    6b90:	6e23      	ldr	r3, [r4, #96]	; 0x60
    6b92:	2b01      	cmp	r3, #1
    6b94:	d877      	bhi.n	6c86 <FinishAesDrv+0x1a6>
    6b96:	4620      	mov	r0, r4
    6b98:	f7ff fd64 	bl	6664 <InitAes.part.0>
    6b9c:	4607      	mov	r7, r0
    6b9e:	2800      	cmp	r0, #0
    6ba0:	d140      	bne.n	6c24 <FinishAesDrv+0x144>
    6ba2:	4620      	mov	r0, r4
    6ba4:	f7ff fd0a 	bl	65bc <LoadAesKey>
    6ba8:	4607      	mov	r7, r0
    6baa:	2800      	cmp	r0, #0
    6bac:	d13a      	bne.n	6c24 <FinishAesDrv+0x144>
    6bae:	6b62      	ldr	r2, [r4, #52]	; 0x34
    6bb0:	2a07      	cmp	r2, #7
    6bb2:	d836      	bhi.n	6c22 <FinishAesDrv+0x142>
    6bb4:	2301      	movs	r3, #1
    6bb6:	4093      	lsls	r3, r2
    6bb8:	f013 0f8a 	tst.w	r3, #138	; 0x8a
    6bbc:	f040 8081 	bne.w	6cc2 <FinishAesDrv+0x1e2>
    6bc0:	f013 0f44 	tst.w	r3, #68	; 0x44
    6bc4:	d16f      	bne.n	6ca6 <FinishAesDrv+0x1c6>
    6bc6:	07db      	lsls	r3, r3, #31
    6bc8:	d52b      	bpl.n	6c22 <FinishAesDrv+0x142>
    6bca:	4b50      	ldr	r3, [pc, #320]	; (6d0c <FinishAesDrv+0x22c>)
    6bcc:	2201      	movs	r2, #1
    6bce:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
    6bd2:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
    6bd6:	6831      	ldr	r1, [r6, #0]
    6bd8:	2d00      	cmp	r5, #0
    6bda:	d156      	bne.n	6c8a <FinishAesDrv+0x1aa>
    6bdc:	6da1      	ldr	r1, [r4, #88]	; 0x58
    6bde:	b909      	cbnz	r1, 6be4 <FinishAesDrv+0x104>
    6be0:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    6be4:	4b49      	ldr	r3, [pc, #292]	; (6d0c <FinishAesDrv+0x22c>)
    6be6:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
    6bea:	2f00      	cmp	r7, #0
    6bec:	d1fb      	bne.n	6be6 <FinishAesDrv+0x106>
    6bee:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6bf0:	2907      	cmp	r1, #7
    6bf2:	d817      	bhi.n	6c24 <FinishAesDrv+0x144>
    6bf4:	2201      	movs	r2, #1
    6bf6:	408a      	lsls	r2, r1
    6bf8:	f012 0f8a 	tst.w	r2, #138	; 0x8a
    6bfc:	d16f      	bne.n	6cde <FinishAesDrv+0x1fe>
    6bfe:	f012 0f44 	tst.w	r2, #68	; 0x44
    6c02:	d00f      	beq.n	6c24 <FinishAesDrv+0x144>
    6c04:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
    6c08:	6022      	str	r2, [r4, #0]
    6c0a:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
    6c0e:	6062      	str	r2, [r4, #4]
    6c10:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
    6c14:	60a2      	str	r2, [r4, #8]
    6c16:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
    6c1a:	60e3      	str	r3, [r4, #12]
    6c1c:	e002      	b.n	6c24 <FinishAesDrv+0x144>
    6c1e:	2b00      	cmp	r3, #0
    6c20:	dab0      	bge.n	6b84 <FinishAesDrv+0xa4>
    6c22:	4f3b      	ldr	r7, [pc, #236]	; (6d10 <FinishAesDrv+0x230>)
    6c24:	4a39      	ldr	r2, [pc, #228]	; (6d0c <FinishAesDrv+0x22c>)
    6c26:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    6c2a:	2b00      	cmp	r3, #0
    6c2c:	d1fb      	bne.n	6c26 <FinishAesDrv+0x146>
    6c2e:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
    6c32:	2001      	movs	r0, #1
    6c34:	f7fe fcb6 	bl	55a4 <CC_PalPowerSaveModeSelect>
    6c38:	b9b8      	cbnz	r0, 6c6a <FinishAesDrv+0x18a>
    6c3a:	4833      	ldr	r0, [pc, #204]	; (6d08 <FinishAesDrv+0x228>)
    6c3c:	f7fe fc8a 	bl	5554 <CC_PalMutexUnlock>
    6c40:	2800      	cmp	r0, #0
    6c42:	f43f af6f 	beq.w	6b24 <FinishAesDrv+0x44>
    6c46:	4833      	ldr	r0, [pc, #204]	; (6d14 <FinishAesDrv+0x234>)
    6c48:	f7fd fd70 	bl	472c <CC_PalAbort>
    6c4c:	e76a      	b.n	6b24 <FinishAesDrv+0x44>
    6c4e:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
    6c52:	e767      	b.n	6b24 <FinishAesDrv+0x44>
    6c54:	2b01      	cmp	r3, #1
    6c56:	f47f af74 	bne.w	6b42 <FinishAesDrv+0x62>
    6c5a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    6c5e:	f4ff af70 	bcc.w	6b42 <FinishAesDrv+0x62>
    6c62:	4f2d      	ldr	r7, [pc, #180]	; (6d18 <FinishAesDrv+0x238>)
    6c64:	e75e      	b.n	6b24 <FinishAesDrv+0x44>
    6c66:	4f2d      	ldr	r7, [pc, #180]	; (6d1c <FinishAesDrv+0x23c>)
    6c68:	e7dc      	b.n	6c24 <FinishAesDrv+0x144>
    6c6a:	482d      	ldr	r0, [pc, #180]	; (6d20 <FinishAesDrv+0x240>)
    6c6c:	f7fd fd5e 	bl	472c <CC_PalAbort>
    6c70:	e7e3      	b.n	6c3a <FinishAesDrv+0x15a>
    6c72:	482c      	ldr	r0, [pc, #176]	; (6d24 <FinishAesDrv+0x244>)
    6c74:	f7fd fd5a 	bl	472c <CC_PalAbort>
    6c78:	e776      	b.n	6b68 <FinishAesDrv+0x88>
    6c7a:	482b      	ldr	r0, [pc, #172]	; (6d28 <FinishAesDrv+0x248>)
    6c7c:	f7fd fd56 	bl	472c <CC_PalAbort>
    6c80:	e76c      	b.n	6b5c <FinishAesDrv+0x7c>
    6c82:	4f2a      	ldr	r7, [pc, #168]	; (6d2c <FinishAesDrv+0x24c>)
    6c84:	e7ce      	b.n	6c24 <FinishAesDrv+0x144>
    6c86:	4f2a      	ldr	r7, [pc, #168]	; (6d30 <FinishAesDrv+0x250>)
    6c88:	e7cc      	b.n	6c24 <FinishAesDrv+0x144>
    6c8a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    6c8c:	2a01      	cmp	r2, #1
    6c8e:	d033      	beq.n	6cf8 <FinishAesDrv+0x218>
    6c90:	f8c3 1c30 	str.w	r1, [r3, #3120]	; 0xc30
    6c94:	2010      	movs	r0, #16
    6c96:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
    6c9a:	f7fe fbbd 	bl	5418 <CC_HalWaitInterrupt>
    6c9e:	4607      	mov	r7, r0
    6ca0:	2800      	cmp	r0, #0
    6ca2:	d09f      	beq.n	6be4 <FinishAesDrv+0x104>
    6ca4:	e7be      	b.n	6c24 <FinishAesDrv+0x144>
    6ca6:	4b19      	ldr	r3, [pc, #100]	; (6d0c <FinishAesDrv+0x22c>)
    6ca8:	6822      	ldr	r2, [r4, #0]
    6caa:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
    6cae:	6862      	ldr	r2, [r4, #4]
    6cb0:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
    6cb4:	68a2      	ldr	r2, [r4, #8]
    6cb6:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
    6cba:	68e2      	ldr	r2, [r4, #12]
    6cbc:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
    6cc0:	e783      	b.n	6bca <FinishAesDrv+0xea>
    6cc2:	4b12      	ldr	r3, [pc, #72]	; (6d0c <FinishAesDrv+0x22c>)
    6cc4:	6822      	ldr	r2, [r4, #0]
    6cc6:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
    6cca:	6862      	ldr	r2, [r4, #4]
    6ccc:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
    6cd0:	68a2      	ldr	r2, [r4, #8]
    6cd2:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
    6cd6:	68e2      	ldr	r2, [r4, #12]
    6cd8:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
    6cdc:	e775      	b.n	6bca <FinishAesDrv+0xea>
    6cde:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
    6ce2:	6022      	str	r2, [r4, #0]
    6ce4:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
    6ce8:	6062      	str	r2, [r4, #4]
    6cea:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
    6cee:	60a2      	str	r2, [r4, #8]
    6cf0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
    6cf4:	60e3      	str	r3, [r4, #12]
    6cf6:	e795      	b.n	6c24 <FinishAesDrv+0x144>
    6cf8:	f8c3 1c28 	str.w	r1, [r3, #3112]	; 0xc28
    6cfc:	2040      	movs	r0, #64	; 0x40
    6cfe:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
    6d02:	e7ca      	b.n	6c9a <FinishAesDrv+0x1ba>
    6d04:	00f1000b 	.word	0x00f1000b
    6d08:	20000134 	.word	0x20000134
    6d0c:	5002b000 	.word	0x5002b000
    6d10:	00f10001 	.word	0x00f10001
    6d14:	00008010 	.word	0x00008010
    6d18:	00f10005 	.word	0x00f10005
    6d1c:	00f10002 	.word	0x00f10002
    6d20:	00007ff0 	.word	0x00007ff0
    6d24:	00007fd0 	.word	0x00007fd0
    6d28:	00007fb8 	.word	0x00007fb8
    6d2c:	00f10003 	.word	0x00f10003
    6d30:	00f10004 	.word	0x00f10004

00006d34 <kmu_validate_slot_and_size>:
    6d34:	b929      	cbnz	r1, 6d42 <kmu_validate_slot_and_size+0xe>
    6d36:	4b04      	ldr	r3, [pc, #16]	; (6d48 <kmu_validate_slot_and_size+0x14>)
    6d38:	2800      	cmp	r0, #0
    6d3a:	bf14      	ite	ne
    6d3c:	4618      	movne	r0, r3
    6d3e:	2000      	moveq	r0, #0
    6d40:	4770      	bx	lr
    6d42:	4802      	ldr	r0, [pc, #8]	; (6d4c <kmu_validate_slot_and_size+0x18>)
    6d44:	4770      	bx	lr
    6d46:	bf00      	nop
    6d48:	00f70001 	.word	0x00f70001
    6d4c:	00f70003 	.word	0x00f70003

00006d50 <kmu_validate_kdr_slot_and_size>:
    6d50:	b929      	cbnz	r1, 6d5e <kmu_validate_kdr_slot_and_size+0xe>
    6d52:	4b04      	ldr	r3, [pc, #16]	; (6d64 <kmu_validate_kdr_slot_and_size+0x14>)
    6d54:	2800      	cmp	r0, #0
    6d56:	bf14      	ite	ne
    6d58:	4618      	movne	r0, r3
    6d5a:	2000      	moveq	r0, #0
    6d5c:	4770      	bx	lr
    6d5e:	4802      	ldr	r0, [pc, #8]	; (6d68 <kmu_validate_kdr_slot_and_size+0x18>)
    6d60:	4770      	bx	lr
    6d62:	bf00      	nop
    6d64:	00f70001 	.word	0x00f70001
    6d68:	00f70003 	.word	0x00f70003

00006d6c <kmu_use_kdr_key>:
    6d6c:	4b03      	ldr	r3, [pc, #12]	; (6d7c <kmu_use_kdr_key+0x10>)
    6d6e:	2000      	movs	r0, #0
    6d70:	2201      	movs	r2, #1
    6d72:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
    6d76:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
    6d7a:	4770      	bx	lr
    6d7c:	5002b000 	.word	0x5002b000

00006d80 <kmu_derive_cmac>:
    6d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d84:	b0cc      	sub	sp, #304	; 0x130
    6d86:	2400      	movs	r4, #0
    6d88:	9d57      	ldr	r5, [sp, #348]	; 0x15c
    6d8a:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
    6d8e:	4682      	mov	sl, r0
    6d90:	4689      	mov	r9, r1
    6d92:	4616      	mov	r6, r2
    6d94:	4621      	mov	r1, r4
    6d96:	2274      	movs	r2, #116	; 0x74
    6d98:	a80e      	add	r0, sp, #56	; 0x38
    6d9a:	461f      	mov	r7, r3
    6d9c:	f000 fa93 	bl	72c6 <memset>
    6da0:	2280      	movs	r2, #128	; 0x80
    6da2:	4621      	mov	r1, r4
    6da4:	a82c      	add	r0, sp, #176	; 0xb0
    6da6:	942b      	str	r4, [sp, #172]	; 0xac
    6da8:	f000 fa8d 	bl	72c6 <memset>
    6dac:	2384      	movs	r3, #132	; 0x84
    6dae:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
    6db2:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
    6db6:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
    6dba:	9305      	str	r3, [sp, #20]
    6dbc:	d863      	bhi.n	6e86 <kmu_derive_cmac+0x106>
    6dbe:	f7ff fcc3 	bl	6748 <write_invalid_key>
    6dc2:	ab05      	add	r3, sp, #20
    6dc4:	4630      	mov	r0, r6
    6dc6:	ae2b      	add	r6, sp, #172	; 0xac
    6dc8:	9301      	str	r3, [sp, #4]
    6dca:	9502      	str	r5, [sp, #8]
    6dcc:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
    6dd0:	4639      	mov	r1, r7
    6dd2:	9600      	str	r6, [sp, #0]
    6dd4:	f000 f862 	bl	6e9c <UtilCmacBuildDataForDerivation>
    6dd8:	2800      	cmp	r0, #0
    6dda:	d14f      	bne.n	6e7c <kmu_derive_cmac+0xfc>
    6ddc:	2303      	movs	r3, #3
    6dde:	f88d 3013 	strb.w	r3, [sp, #19]
    6de2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    6de6:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
    6dea:	2307      	movs	r3, #7
    6dec:	2200      	movs	r2, #0
    6dee:	901c      	str	r0, [sp, #112]	; 0x70
    6df0:	2110      	movs	r1, #16
    6df2:	a80e      	add	r0, sp, #56	; 0x38
    6df4:	931b      	str	r3, [sp, #108]	; 0x6c
    6df6:	2401      	movs	r4, #1
    6df8:	2301      	movs	r3, #1
    6dfa:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
    6dfe:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
    6e02:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
    6e06:	9426      	str	r4, [sp, #152]	; 0x98
    6e08:	f10d 0920 	add.w	r9, sp, #32
    6e0c:	f7fe fb82 	bl	5514 <CC_PalMemSetZeroPlat>
    6e10:	2210      	movs	r2, #16
    6e12:	9200      	str	r2, [sp, #0]
    6e14:	9905      	ldr	r1, [sp, #20]
    6e16:	f8cd 9004 	str.w	r9, [sp, #4]
    6e1a:	ab0a      	add	r3, sp, #40	; 0x28
    6e1c:	4630      	mov	r0, r6
    6e1e:	aa06      	add	r2, sp, #24
    6e20:	f7ff fa22 	bl	6268 <SetDataBuffersInfo>
    6e24:	4607      	mov	r7, r0
    6e26:	b170      	cbz	r0, 6e46 <kmu_derive_cmac+0xc6>
    6e28:	e01d      	b.n	6e66 <kmu_derive_cmac+0xe6>
    6e2a:	a90e      	add	r1, sp, #56	; 0x38
    6e2c:	eb08 0007 	add.w	r0, r8, r7
    6e30:	f7fe fb6c 	bl	550c <CC_PalMemCopyPlat>
    6e34:	2110      	movs	r1, #16
    6e36:	a80e      	add	r0, sp, #56	; 0x38
    6e38:	f7fe fb6c 	bl	5514 <CC_PalMemSetZeroPlat>
    6e3c:	3401      	adds	r4, #1
    6e3e:	1bad      	subs	r5, r5, r6
    6e40:	4437      	add	r7, r6
    6e42:	b2e4      	uxtb	r4, r4
    6e44:	d024      	beq.n	6e90 <kmu_derive_cmac+0x110>
    6e46:	2d10      	cmp	r5, #16
    6e48:	464a      	mov	r2, r9
    6e4a:	9b05      	ldr	r3, [sp, #20]
    6e4c:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
    6e50:	a906      	add	r1, sp, #24
    6e52:	a80e      	add	r0, sp, #56	; 0x38
    6e54:	462e      	mov	r6, r5
    6e56:	bf28      	it	cs
    6e58:	2610      	movcs	r6, #16
    6e5a:	f7ff fe41 	bl	6ae0 <FinishAesDrv>
    6e5e:	4632      	mov	r2, r6
    6e60:	2800      	cmp	r0, #0
    6e62:	d0e2      	beq.n	6e2a <kmu_derive_cmac+0xaa>
    6e64:	4607      	mov	r7, r0
    6e66:	a80e      	add	r0, sp, #56	; 0x38
    6e68:	2274      	movs	r2, #116	; 0x74
    6e6a:	2100      	movs	r1, #0
    6e6c:	f7fe fb50 	bl	5510 <CC_PalMemSetPlat>
    6e70:	f7ff fc6a 	bl	6748 <write_invalid_key>
    6e74:	4638      	mov	r0, r7
    6e76:	b04c      	add	sp, #304	; 0x130
    6e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6e7c:	4f05      	ldr	r7, [pc, #20]	; (6e94 <kmu_derive_cmac+0x114>)
    6e7e:	4638      	mov	r0, r7
    6e80:	b04c      	add	sp, #304	; 0x130
    6e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6e86:	4f04      	ldr	r7, [pc, #16]	; (6e98 <kmu_derive_cmac+0x118>)
    6e88:	4638      	mov	r0, r7
    6e8a:	b04c      	add	sp, #304	; 0x130
    6e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6e90:	462f      	mov	r7, r5
    6e92:	e7e8      	b.n	6e66 <kmu_derive_cmac+0xe6>
    6e94:	00f1000e 	.word	0x00f1000e
    6e98:	00f1000f 	.word	0x00f1000f

00006e9c <UtilCmacBuildDataForDerivation>:
    6e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ea0:	b082      	sub	sp, #8
    6ea2:	461e      	mov	r6, r3
    6ea4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    6ea6:	2300      	movs	r3, #0
    6ea8:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
    6eac:	9301      	str	r3, [sp, #4]
    6eae:	d83e      	bhi.n	6f2e <UtilCmacBuildDataForDerivation+0x92>
    6eb0:	00ed      	lsls	r5, r5, #3
    6eb2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    6eb6:	4617      	mov	r7, r2
    6eb8:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
    6ebc:	bf34      	ite	cc
    6ebe:	2303      	movcc	r3, #3
    6ec0:	2304      	movcs	r3, #4
    6ec2:	2a3f      	cmp	r2, #63	; 0x3f
    6ec4:	460c      	mov	r4, r1
    6ec6:	9300      	str	r3, [sp, #0]
    6ec8:	d831      	bhi.n	6f2e <UtilCmacBuildDataForDerivation+0x92>
    6eca:	b380      	cbz	r0, 6f2e <UtilCmacBuildDataForDerivation+0x92>
    6ecc:	bb66      	cbnz	r6, 6f28 <UtilCmacBuildDataForDerivation+0x8c>
    6ece:	9a08      	ldr	r2, [sp, #32]
    6ed0:	b36a      	cbz	r2, 6f2e <UtilCmacBuildDataForDerivation+0x92>
    6ed2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6ed4:	6811      	ldr	r1, [r2, #0]
    6ed6:	b351      	cbz	r1, 6f2e <UtilCmacBuildDataForDerivation+0x92>
    6ed8:	19a2      	adds	r2, r4, r6
    6eda:	4413      	add	r3, r2
    6edc:	4299      	cmp	r1, r3
    6ede:	d326      	bcc.n	6f2e <UtilCmacBuildDataForDerivation+0x92>
    6ee0:	9b08      	ldr	r3, [sp, #32]
    6ee2:	4601      	mov	r1, r0
    6ee4:	4622      	mov	r2, r4
    6ee6:	1c58      	adds	r0, r3, #1
    6ee8:	f7fe fb10 	bl	550c <CC_PalMemCopyPlat>
    6eec:	9b08      	ldr	r3, [sp, #32]
    6eee:	f104 0802 	add.w	r8, r4, #2
    6ef2:	441c      	add	r4, r3
    6ef4:	2300      	movs	r3, #0
    6ef6:	7063      	strb	r3, [r4, #1]
    6ef8:	bb26      	cbnz	r6, 6f44 <UtilCmacBuildDataForDerivation+0xa8>
    6efa:	9b08      	ldr	r3, [sp, #32]
    6efc:	9500      	str	r5, [sp, #0]
    6efe:	2dff      	cmp	r5, #255	; 0xff
    6f00:	eb03 0008 	add.w	r0, r3, r8
    6f04:	d917      	bls.n	6f36 <UtilCmacBuildDataForDerivation+0x9a>
    6f06:	022b      	lsls	r3, r5, #8
    6f08:	b29b      	uxth	r3, r3
    6f0a:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
    6f0e:	2202      	movs	r2, #2
    6f10:	a901      	add	r1, sp, #4
    6f12:	9301      	str	r3, [sp, #4]
    6f14:	f7fe fafa 	bl	550c <CC_PalMemCopyPlat>
    6f18:	f108 0302 	add.w	r3, r8, #2
    6f1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6f1e:	2000      	movs	r0, #0
    6f20:	6013      	str	r3, [r2, #0]
    6f22:	b002      	add	sp, #8
    6f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f28:	b10f      	cbz	r7, 6f2e <UtilCmacBuildDataForDerivation+0x92>
    6f2a:	2e40      	cmp	r6, #64	; 0x40
    6f2c:	d9cf      	bls.n	6ece <UtilCmacBuildDataForDerivation+0x32>
    6f2e:	480a      	ldr	r0, [pc, #40]	; (6f58 <UtilCmacBuildDataForDerivation+0xbc>)
    6f30:	b002      	add	sp, #8
    6f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f36:	2201      	movs	r2, #1
    6f38:	4669      	mov	r1, sp
    6f3a:	f7fe fae7 	bl	550c <CC_PalMemCopyPlat>
    6f3e:	f108 0301 	add.w	r3, r8, #1
    6f42:	e7eb      	b.n	6f1c <UtilCmacBuildDataForDerivation+0x80>
    6f44:	9b08      	ldr	r3, [sp, #32]
    6f46:	4632      	mov	r2, r6
    6f48:	eb03 0008 	add.w	r0, r3, r8
    6f4c:	4639      	mov	r1, r7
    6f4e:	f7fe fadd 	bl	550c <CC_PalMemCopyPlat>
    6f52:	44b0      	add	r8, r6
    6f54:	e7d1      	b.n	6efa <UtilCmacBuildDataForDerivation+0x5e>
    6f56:	bf00      	nop
    6f58:	80000006 	.word	0x80000006

00006f5c <CC_PalDataBufferAttrGet>:
    6f5c:	2000      	movs	r0, #0
    6f5e:	7018      	strb	r0, [r3, #0]
    6f60:	4770      	bx	lr
    6f62:	bf00      	nop

00006f64 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
    6f64:	4601      	mov	r1, r0
    6f66:	f240 30e7 	movw	r0, #999	; 0x3e7
    6f6a:	b508      	push	{r3, lr}
    6f6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6f70:	2300      	movs	r3, #0
    6f72:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
    6f76:	1449      	asrs	r1, r1, #17
    6f78:	f7f9 f8c2 	bl	100 <__aeabi_uldivmod>
}
    6f7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
    6f80:	f7fd b9c0 	b.w	4304 <z_impl_k_sleep>

00006f84 <arch_printk_char_out>:
}
    6f84:	2000      	movs	r0, #0
    6f86:	4770      	bx	lr

00006f88 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    6f88:	b40f      	push	{r0, r1, r2, r3}
    6f8a:	b507      	push	{r0, r1, r2, lr}
    6f8c:	a904      	add	r1, sp, #16
    6f8e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    6f92:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    6f94:	f7f9 fa7c 	bl	490 <vprintk>

	va_end(ap);
}
    6f98:	b003      	add	sp, #12
    6f9a:	f85d eb04 	ldr.w	lr, [sp], #4
    6f9e:	b004      	add	sp, #16
    6fa0:	4770      	bx	lr

00006fa2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    6fa2:	4604      	mov	r4, r0
    6fa4:	b508      	push	{r3, lr}
    6fa6:	4608      	mov	r0, r1
    6fa8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    6faa:	461a      	mov	r2, r3
    6fac:	47a0      	blx	r4
	return z_impl_z_current_get();
    6fae:	f7fd f9c3 	bl	4338 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    6fb2:	f7fa fc95 	bl	18e0 <z_impl_k_thread_abort>

00006fb6 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6fb6:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    6fb8:	f013 0307 	ands.w	r3, r3, #7
    6fbc:	d105      	bne.n	6fca <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    6fbe:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    6fc0:	2b00      	cmp	r3, #0
    6fc2:	bf0c      	ite	eq
    6fc4:	2000      	moveq	r0, #0
    6fc6:	2003      	movne	r0, #3
    6fc8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    6fca:	2b02      	cmp	r3, #2
    6fcc:	d105      	bne.n	6fda <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    6fce:	8b40      	ldrh	r0, [r0, #26]
    6fd0:	fab0 f080 	clz	r0, r0
    6fd4:	0940      	lsrs	r0, r0, #5
    6fd6:	0080      	lsls	r0, r0, #2
    6fd8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    6fda:	2b01      	cmp	r3, #1
    6fdc:	d105      	bne.n	6fea <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    6fde:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    6fe0:	2b00      	cmp	r3, #0
    6fe2:	bf0c      	ite	eq
    6fe4:	2000      	moveq	r0, #0
    6fe6:	2005      	movne	r0, #5
    6fe8:	4770      	bx	lr
	int evt = EVT_NOP;
    6fea:	2000      	movs	r0, #0
}
    6fec:	4770      	bx	lr

00006fee <validate_args>:
{
    6fee:	b510      	push	{r4, lr}
    6ff0:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    6ff2:	b100      	cbz	r0, 6ff6 <validate_args+0x8>
    6ff4:	b911      	cbnz	r1, 6ffc <validate_args+0xe>
		return -EINVAL;
    6ff6:	f06f 0015 	mvn.w	r0, #21
}
    6ffa:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    6ffc:	1d08      	adds	r0, r1, #4
    6ffe:	f000 f895 	bl	712c <sys_notify_validate>
	if ((rv == 0)
    7002:	2800      	cmp	r0, #0
    7004:	d1f9      	bne.n	6ffa <validate_args+0xc>
	    && ((cli->notify.flags
    7006:	68a3      	ldr	r3, [r4, #8]
    7008:	2b03      	cmp	r3, #3
    700a:	d9f6      	bls.n	6ffa <validate_args+0xc>
    700c:	e7f3      	b.n	6ff6 <validate_args+0x8>

0000700e <notify_one>:
{
    700e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7012:	460d      	mov	r5, r1
    7014:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    7016:	4619      	mov	r1, r3
    7018:	1d28      	adds	r0, r5, #4
{
    701a:	4690      	mov	r8, r2
    701c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    701e:	f000 f896 	bl	714e <sys_notify_finalize>
	if (cb) {
    7022:	4604      	mov	r4, r0
    7024:	b138      	cbz	r0, 7036 <notify_one+0x28>
		cb(mgr, cli, state, res);
    7026:	4633      	mov	r3, r6
    7028:	4642      	mov	r2, r8
    702a:	4629      	mov	r1, r5
    702c:	4638      	mov	r0, r7
    702e:	46a4      	mov	ip, r4
}
    7030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    7034:	4760      	bx	ip
}
    7036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000703a <transition_complete>:
{
    703a:	b410      	push	{r4}
	__asm__ volatile(
    703c:	f04f 0420 	mov.w	r4, #32
    7040:	f3ef 8211 	mrs	r2, BASEPRI
    7044:	f384 8812 	msr	BASEPRI_MAX, r4
    7048:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    704c:	6141      	str	r1, [r0, #20]
}
    704e:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    7050:	2101      	movs	r1, #1
    7052:	f7f9 ba2b 	b.w	4ac <process_event>

00007056 <onoff_manager_init>:
{
    7056:	b538      	push	{r3, r4, r5, lr}
    7058:	460c      	mov	r4, r1
	if ((mgr == NULL)
    705a:	4605      	mov	r5, r0
    705c:	b158      	cbz	r0, 7076 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    705e:	b151      	cbz	r1, 7076 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    7060:	680b      	ldr	r3, [r1, #0]
    7062:	b143      	cbz	r3, 7076 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    7064:	684b      	ldr	r3, [r1, #4]
    7066:	b133      	cbz	r3, 7076 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    7068:	221c      	movs	r2, #28
    706a:	2100      	movs	r1, #0
    706c:	f000 f92b 	bl	72c6 <memset>
    7070:	612c      	str	r4, [r5, #16]
	return 0;
    7072:	2000      	movs	r0, #0
}
    7074:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    7076:	f06f 0015 	mvn.w	r0, #21
    707a:	e7fb      	b.n	7074 <onoff_manager_init+0x1e>

0000707c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    707c:	b570      	push	{r4, r5, r6, lr}
    707e:	4605      	mov	r5, r0
    7080:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    7082:	f7ff ffb4 	bl	6fee <validate_args>

	if (rv < 0) {
    7086:	1e04      	subs	r4, r0, #0
    7088:	db15      	blt.n	70b6 <onoff_request+0x3a>
    708a:	f04f 0320 	mov.w	r3, #32
    708e:	f3ef 8211 	mrs	r2, BASEPRI
    7092:	f383 8812 	msr	BASEPRI_MAX, r3
    7096:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    709a:	8b6b      	ldrh	r3, [r5, #26]
    709c:	8b2c      	ldrh	r4, [r5, #24]
    709e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    70a2:	428b      	cmp	r3, r1
    70a4:	f004 0407 	and.w	r4, r4, #7
    70a8:	d107      	bne.n	70ba <onoff_request+0x3e>
	__asm__ volatile(
    70aa:	f382 8811 	msr	BASEPRI, r2
    70ae:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    70b2:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    70b6:	4620      	mov	r0, r4
    70b8:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    70ba:	2c02      	cmp	r4, #2
    70bc:	d10c      	bne.n	70d8 <onoff_request+0x5c>
		mgr->refs += 1U;
    70be:	3301      	adds	r3, #1
    70c0:	836b      	strh	r3, [r5, #26]
    70c2:	f382 8811 	msr	BASEPRI, r2
    70c6:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    70ca:	2300      	movs	r3, #0
    70cc:	4622      	mov	r2, r4
    70ce:	4631      	mov	r1, r6
    70d0:	4628      	mov	r0, r5
    70d2:	f7ff ff9c 	bl	700e <notify_one>
    70d6:	e7ee      	b.n	70b6 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    70d8:	2c06      	cmp	r4, #6
    70da:	d814      	bhi.n	7106 <onoff_request+0x8a>
    70dc:	e8df f004 	tbb	[pc, r4]
    70e0:	13131304 	.word	0x13131304
    70e4:	1a04      	.short	0x1a04
    70e6:	04          	.byte	0x04
    70e7:	00          	.byte	0x00
	parent->next = child;
    70e8:	2300      	movs	r3, #0
    70ea:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    70ec:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    70ee:	b93b      	cbnz	r3, 7100 <onoff_request+0x84>
	list->head = node;
    70f0:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    70f4:	b9ac      	cbnz	r4, 7122 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    70f6:	2102      	movs	r1, #2
    70f8:	4628      	mov	r0, r5
    70fa:	f7f9 f9d7 	bl	4ac <process_event>
    70fe:	e7da      	b.n	70b6 <onoff_request+0x3a>
	parent->next = child;
    7100:	601e      	str	r6, [r3, #0]
	list->tail = node;
    7102:	606e      	str	r6, [r5, #4]
}
    7104:	e7f6      	b.n	70f4 <onoff_request+0x78>
    7106:	f382 8811 	msr	BASEPRI, r2
    710a:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    710e:	f06f 0404 	mvn.w	r4, #4
    7112:	e7d0      	b.n	70b6 <onoff_request+0x3a>
    7114:	f382 8811 	msr	BASEPRI, r2
    7118:	f3bf 8f6f 	isb	sy
    711c:	f06f 0485 	mvn.w	r4, #133	; 0x85
    7120:	e7c9      	b.n	70b6 <onoff_request+0x3a>
    7122:	f382 8811 	msr	BASEPRI, r2
    7126:	f3bf 8f6f 	isb	sy
		if (notify) {
    712a:	e7c4      	b.n	70b6 <onoff_request+0x3a>

0000712c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    712c:	4603      	mov	r3, r0
    712e:	b158      	cbz	r0, 7148 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    7130:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    7132:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    7136:	2a01      	cmp	r2, #1
    7138:	d003      	beq.n	7142 <sys_notify_validate+0x16>
    713a:	2a03      	cmp	r2, #3
    713c:	d104      	bne.n	7148 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    713e:	6802      	ldr	r2, [r0, #0]
    7140:	b112      	cbz	r2, 7148 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    7142:	2000      	movs	r0, #0
    7144:	6098      	str	r0, [r3, #8]
    7146:	4770      	bx	lr
    7148:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    714c:	4770      	bx	lr

0000714e <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    714e:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    7150:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    7152:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    7156:	2a03      	cmp	r2, #3
    7158:	f04f 0200 	mov.w	r2, #0
{
    715c:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    715e:	bf0c      	ite	eq
    7160:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    7162:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    7164:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    7166:	4770      	bx	lr

00007168 <encode_uint>:
{
    7168:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    716c:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    716e:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    7170:	2b6f      	cmp	r3, #111	; 0x6f
{
    7172:	4680      	mov	r8, r0
    7174:	460f      	mov	r7, r1
    7176:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    7178:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    717c:	d029      	beq.n	71d2 <encode_uint+0x6a>
    717e:	d824      	bhi.n	71ca <encode_uint+0x62>
		return 10;
    7180:	2b58      	cmp	r3, #88	; 0x58
    7182:	bf0c      	ite	eq
    7184:	2610      	moveq	r6, #16
    7186:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    7188:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    718c:	4632      	mov	r2, r6
    718e:	2300      	movs	r3, #0
    7190:	4640      	mov	r0, r8
    7192:	4639      	mov	r1, r7
    7194:	f7f8 ffb4 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7198:	2a09      	cmp	r2, #9
    719a:	b2d4      	uxtb	r4, r2
    719c:	d81e      	bhi.n	71dc <encode_uint+0x74>
    719e:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    71a0:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    71a2:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    71a4:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    71a8:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    71ac:	d301      	bcc.n	71b2 <encode_uint+0x4a>
    71ae:	45d1      	cmp	r9, sl
    71b0:	d811      	bhi.n	71d6 <encode_uint+0x6e>
	if (conv->flag_hash) {
    71b2:	782b      	ldrb	r3, [r5, #0]
    71b4:	069b      	lsls	r3, r3, #26
    71b6:	d505      	bpl.n	71c4 <encode_uint+0x5c>
		if (radix == 8) {
    71b8:	2e08      	cmp	r6, #8
    71ba:	d115      	bne.n	71e8 <encode_uint+0x80>
			conv->altform_0 = true;
    71bc:	78ab      	ldrb	r3, [r5, #2]
    71be:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    71c2:	70ab      	strb	r3, [r5, #2]
}
    71c4:	4648      	mov	r0, r9
    71c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    71ca:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    71ce:	2b70      	cmp	r3, #112	; 0x70
    71d0:	e7d7      	b.n	7182 <encode_uint+0x1a>
	switch (specifier) {
    71d2:	2608      	movs	r6, #8
    71d4:	e7d8      	b.n	7188 <encode_uint+0x20>
		value /= radix;
    71d6:	4680      	mov	r8, r0
    71d8:	460f      	mov	r7, r1
    71da:	e7d7      	b.n	718c <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    71dc:	f1bb 0f19 	cmp.w	fp, #25
    71e0:	bf94      	ite	ls
    71e2:	3437      	addls	r4, #55	; 0x37
    71e4:	3457      	addhi	r4, #87	; 0x57
    71e6:	e7db      	b.n	71a0 <encode_uint+0x38>
		} else if (radix == 16) {
    71e8:	2e10      	cmp	r6, #16
    71ea:	d1eb      	bne.n	71c4 <encode_uint+0x5c>
			conv->altform_0c = true;
    71ec:	78ab      	ldrb	r3, [r5, #2]
    71ee:	f043 0310 	orr.w	r3, r3, #16
    71f2:	e7e6      	b.n	71c2 <encode_uint+0x5a>

000071f4 <outs>:
{
    71f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71f8:	4607      	mov	r7, r0
    71fa:	4688      	mov	r8, r1
    71fc:	4615      	mov	r5, r2
    71fe:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    7200:	4614      	mov	r4, r2
    7202:	42b4      	cmp	r4, r6
    7204:	d305      	bcc.n	7212 <outs+0x1e>
    7206:	b10e      	cbz	r6, 720c <outs+0x18>
	return (int)count;
    7208:	1b60      	subs	r0, r4, r5
    720a:	e008      	b.n	721e <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    720c:	7823      	ldrb	r3, [r4, #0]
    720e:	2b00      	cmp	r3, #0
    7210:	d0fa      	beq.n	7208 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    7212:	f814 0b01 	ldrb.w	r0, [r4], #1
    7216:	4641      	mov	r1, r8
    7218:	47b8      	blx	r7
		if (rc < 0) {
    721a:	2800      	cmp	r0, #0
    721c:	daf1      	bge.n	7202 <outs+0xe>
}
    721e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007222 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    7222:	4770      	bx	lr

00007224 <abort_function>:
{
    7224:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    7226:	2000      	movs	r0, #0
    7228:	f7f9 fe00 	bl	e2c <sys_reboot>

0000722c <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    722c:	f000 bad4 	b.w	77d8 <z_fatal_error>

00007230 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    7230:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    7232:	6800      	ldr	r0, [r0, #0]
    7234:	f000 bad0 	b.w	77d8 <z_fatal_error>

00007238 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    7238:	2100      	movs	r1, #0
    723a:	2001      	movs	r0, #1
    723c:	f7ff bff6 	b.w	722c <z_arm_fatal_error>

00007240 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    7240:	b508      	push	{r3, lr}
	handler();
    7242:	f7fa f899 	bl	1378 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    7246:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    724a:	f7fa b971 	b.w	1530 <z_arm_exc_exit>

0000724e <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    724e:	3901      	subs	r1, #1
    7250:	4603      	mov	r3, r0
    7252:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    7256:	b90a      	cbnz	r2, 725c <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    7258:	701a      	strb	r2, [r3, #0]

	return dest;
}
    725a:	4770      	bx	lr
		*d = *s;
    725c:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    7260:	e7f7      	b.n	7252 <strcpy+0x4>

00007262 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    7262:	4603      	mov	r3, r0
	size_t n = 0;
    7264:	2000      	movs	r0, #0

	while (*s != '\0') {
    7266:	5c1a      	ldrb	r2, [r3, r0]
    7268:	b902      	cbnz	r2, 726c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    726a:	4770      	bx	lr
		n++;
    726c:	3001      	adds	r0, #1
    726e:	e7fa      	b.n	7266 <strlen+0x4>

00007270 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    7270:	4603      	mov	r3, r0
	size_t n = 0;
    7272:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    7274:	5c1a      	ldrb	r2, [r3, r0]
    7276:	b10a      	cbz	r2, 727c <strnlen+0xc>
    7278:	4288      	cmp	r0, r1
    727a:	d100      	bne.n	727e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    727c:	4770      	bx	lr
		n++;
    727e:	3001      	adds	r0, #1
    7280:	e7f8      	b.n	7274 <strnlen+0x4>

00007282 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    7282:	1a43      	subs	r3, r0, r1
    7284:	4293      	cmp	r3, r2
{
    7286:	b510      	push	{r4, lr}
    7288:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    728c:	d308      	bcc.n	72a0 <memmove+0x1e>
    728e:	3901      	subs	r1, #1
	char *dest = d;
    7290:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    7292:	429a      	cmp	r2, r3
    7294:	d00b      	beq.n	72ae <memmove+0x2c>
			*dest = *src;
    7296:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    729a:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    729e:	e7f8      	b.n	7292 <memmove+0x10>
    72a0:	440a      	add	r2, r1
			dest[n] = src[n];
    72a2:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    72a6:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    72aa:	428a      	cmp	r2, r1
    72ac:	d1f9      	bne.n	72a2 <memmove+0x20>
		}
	}

	return d;
}
    72ae:	bd10      	pop	{r4, pc}

000072b0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    72b0:	b510      	push	{r4, lr}
    72b2:	1e43      	subs	r3, r0, #1
    72b4:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    72b6:	4291      	cmp	r1, r2
    72b8:	d100      	bne.n	72bc <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    72ba:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    72bc:	f811 4b01 	ldrb.w	r4, [r1], #1
    72c0:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    72c4:	e7f7      	b.n	72b6 <memcpy+0x6>

000072c6 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    72c6:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    72c8:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    72ca:	4603      	mov	r3, r0
	while (n > 0) {
    72cc:	4293      	cmp	r3, r2
    72ce:	d100      	bne.n	72d2 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    72d0:	4770      	bx	lr
		*(d_byte++) = c_byte;
    72d2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    72d6:	e7f9      	b.n	72cc <memset+0x6>

000072d8 <_stdout_hook_default>:
}
    72d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    72dc:	4770      	bx	lr

000072de <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    72de:	2806      	cmp	r0, #6
    72e0:	d108      	bne.n	72f4 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    72e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    72e6:	2201      	movs	r2, #1
    72e8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    72ec:	f3bf 8f4f 	dsb	sy
        __WFE();
    72f0:	bf20      	wfe
    while (true)
    72f2:	e7fd      	b.n	72f0 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    72f4:	4770      	bx	lr

000072f6 <pm_state_exit_post_ops>:
    72f6:	2300      	movs	r3, #0
    72f8:	f383 8811 	msr	BASEPRI, r3
    72fc:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    7300:	4770      	bx	lr

00007302 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    7302:	6903      	ldr	r3, [r0, #16]
    7304:	b2c9      	uxtb	r1, r1
    7306:	220c      	movs	r2, #12
    7308:	fb01 3302 	mla	r3, r1, r2, r3
    730c:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    730e:	f000 0007 	and.w	r0, r0, #7
    7312:	4770      	bx	lr

00007314 <set_on_state>:
	__asm__ volatile(
    7314:	f04f 0320 	mov.w	r3, #32
    7318:	f3ef 8211 	mrs	r2, BASEPRI
    731c:	f383 8812 	msr	BASEPRI_MAX, r3
    7320:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    7324:	6803      	ldr	r3, [r0, #0]
    7326:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    732a:	f043 0302 	orr.w	r3, r3, #2
    732e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    7330:	f382 8811 	msr	BASEPRI, r2
    7334:	f3bf 8f6f 	isb	sy
}
    7338:	4770      	bx	lr

0000733a <stop>:
{
    733a:	b570      	push	{r4, r5, r6, lr}
    733c:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    733e:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    7340:	f04f 0420 	mov.w	r4, #32
    7344:	f3ef 8511 	mrs	r5, BASEPRI
    7348:	f384 8812 	msr	BASEPRI_MAX, r4
    734c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    7350:	260c      	movs	r6, #12
    7352:	fb06 3401 	mla	r4, r6, r1, r3
    7356:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    7358:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    735c:	d008      	beq.n	7370 <stop+0x36>
    735e:	42a2      	cmp	r2, r4
    7360:	d006      	beq.n	7370 <stop+0x36>
	__asm__ volatile(
    7362:	f385 8811 	msr	BASEPRI, r5
    7366:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    736a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    736e:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    7370:	fb06 3301 	mla	r3, r6, r1, r3
    7374:	2201      	movs	r2, #1
    7376:	641a      	str	r2, [r3, #64]	; 0x40
    7378:	f385 8811 	msr	BASEPRI, r5
    737c:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    7380:	6843      	ldr	r3, [r0, #4]
    7382:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    7386:	685b      	ldr	r3, [r3, #4]
    7388:	4798      	blx	r3
	return 0;
    738a:	2000      	movs	r0, #0
    738c:	e7ef      	b.n	736e <stop+0x34>

0000738e <api_stop>:
	return stop(dev, subsys, CTX_API);
    738e:	2280      	movs	r2, #128	; 0x80
    7390:	f7ff bfd3 	b.w	733a <stop>

00007394 <async_start>:
{
    7394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7396:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    7398:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    739a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    739c:	f04f 0520 	mov.w	r5, #32
    73a0:	f3ef 8611 	mrs	r6, BASEPRI
    73a4:	f385 8812 	msr	BASEPRI_MAX, r5
    73a8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    73ac:	250c      	movs	r5, #12
    73ae:	fb05 4401 	mla	r4, r5, r1, r4
    73b2:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    73b4:	f005 0c07 	and.w	ip, r5, #7
    73b8:	f1bc 0f01 	cmp.w	ip, #1
    73bc:	d10c      	bne.n	73d8 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    73be:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    73c0:	f386 8811 	msr	BASEPRI, r6
    73c4:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    73c8:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    73cc:	6843      	ldr	r3, [r0, #4]
    73ce:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    73d2:	4798      	blx	r3
	return 0;
    73d4:	2000      	movs	r0, #0
}
    73d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    73d8:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    73dc:	42af      	cmp	r7, r5
    73de:	f386 8811 	msr	BASEPRI, r6
    73e2:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    73e6:	bf0c      	ite	eq
    73e8:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    73ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    73f0:	e7f1      	b.n	73d6 <async_start+0x42>

000073f2 <api_start>:
{
    73f2:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    73f4:	2480      	movs	r4, #128	; 0x80
    73f6:	9400      	str	r4, [sp, #0]
    73f8:	f7ff ffcc 	bl	7394 <async_start>
}
    73fc:	b002      	add	sp, #8
    73fe:	bd10      	pop	{r4, pc}

00007400 <onoff_started_callback>:
{
    7400:	b410      	push	{r4}
	return &data->mgr[type];
    7402:	6900      	ldr	r0, [r0, #16]
    7404:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    7406:	241c      	movs	r4, #28
    7408:	fb03 0004 	mla	r0, r3, r4, r0
    740c:	2100      	movs	r1, #0
}
    740e:	bc10      	pop	{r4}
	notify(mgr, 0);
    7410:	4710      	bx	r2

00007412 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    7412:	2000      	movs	r0, #0
    7414:	f000 b937 	b.w	7686 <nrfx_clock_start>

00007418 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    7418:	2000      	movs	r0, #0
    741a:	f000 b970 	b.w	76fe <nrfx_clock_stop>

0000741e <blocking_start_callback>:
{
    741e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    7420:	f7fc bc66 	b.w	3cf0 <z_impl_k_sem_give>

00007424 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
    7424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7426:	460f      	mov	r7, r1
    7428:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(buffer != NULL);
	int err = EINVAL;

	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
    742a:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
    742e:	2400      	movs	r4, #0
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
    7430:	42a6      	cmp	r6, r4
    7432:	d803      	bhi.n	743c <entropy_cc3xx_rng_get_entropy+0x18>
		}

		offset += chunk_size;
	}

	if (offset == length) {
    7434:	d016      	beq.n	7464 <entropy_cc3xx_rng_get_entropy+0x40>
	int err = EINVAL;
    7436:	2016      	movs	r0, #22
		err = 0;
	}

	return err;
}
    7438:	b003      	add	sp, #12
    743a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
    743c:	1b33      	subs	r3, r6, r4
    743e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    7442:	bf38      	it	cc
    7444:	461d      	movcc	r5, r3
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
    7446:	462a      	mov	r2, r5
    7448:	ab01      	add	r3, sp, #4
    744a:	1939      	adds	r1, r7, r4
    744c:	2000      	movs	r0, #0
    744e:	f7fd f9bf 	bl	47d0 <nrf_cc3xx_platform_ctr_drbg_get>
		if (ret != 0) {
    7452:	b920      	cbnz	r0, 745e <entropy_cc3xx_rng_get_entropy+0x3a>
		if (olen != chunk_size) {
    7454:	9b01      	ldr	r3, [sp, #4]
    7456:	42ab      	cmp	r3, r5
    7458:	d101      	bne.n	745e <entropy_cc3xx_rng_get_entropy+0x3a>
		offset += chunk_size;
    745a:	442c      	add	r4, r5
    745c:	e7e8      	b.n	7430 <entropy_cc3xx_rng_get_entropy+0xc>
			return -EINVAL;
    745e:	f06f 0015 	mvn.w	r0, #21
    7462:	e7e9      	b.n	7438 <entropy_cc3xx_rng_get_entropy+0x14>
		err = 0;
    7464:	2000      	movs	r0, #0
    7466:	e7e7      	b.n	7438 <entropy_cc3xx_rng_get_entropy+0x14>

00007468 <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
    7468:	2200      	movs	r2, #0
{
    746a:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
    746c:	4611      	mov	r1, r2
    746e:	4610      	mov	r0, r2
    7470:	f7fd f97e 	bl	4770 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
    7474:	2800      	cmp	r0, #0
	}

	return 0;
}
    7476:	bf18      	it	ne
    7478:	f06f 0015 	mvnne.w	r0, #21
    747c:	bd08      	pop	{r3, pc}

0000747e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    747e:	6843      	ldr	r3, [r0, #4]
    7480:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    7482:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    7486:	600b      	str	r3, [r1, #0]
}
    7488:	2000      	movs	r0, #0
    748a:	4770      	bx	lr

0000748c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    748c:	6843      	ldr	r3, [r0, #4]
    748e:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    7490:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    7494:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    7498:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    749c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    74a0:	2000      	movs	r0, #0
    74a2:	4770      	bx	lr

000074a4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    74a4:	6843      	ldr	r3, [r0, #4]
    74a6:	685b      	ldr	r3, [r3, #4]
}
    74a8:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    74aa:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    74ae:	4770      	bx	lr

000074b0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    74b0:	6843      	ldr	r3, [r0, #4]
    74b2:	685b      	ldr	r3, [r3, #4]
}
    74b4:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    74b6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    74ba:	4770      	bx	lr

000074bc <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    74bc:	6843      	ldr	r3, [r0, #4]
    74be:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    74c0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    74c4:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    74c8:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    74ca:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    74ce:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    74d2:	2000      	movs	r0, #0
    74d4:	4770      	bx	lr

000074d6 <gpio_nrfx_manage_callback>:
{
    74d6:	b510      	push	{r4, lr}
	return port->data;
    74d8:	6903      	ldr	r3, [r0, #16]
	return list->head;
    74da:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    74dc:	b1f8      	cbz	r0, 751e <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    74de:	4288      	cmp	r0, r1
    74e0:	d119      	bne.n	7516 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    74e2:	689c      	ldr	r4, [r3, #8]
	return node->next;
    74e4:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    74e6:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    74e8:	42a1      	cmp	r1, r4
    74ea:	d100      	bne.n	74ee <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    74ec:	6098      	str	r0, [r3, #8]
	parent->next = child;
    74ee:	2000      	movs	r0, #0
    74f0:	6008      	str	r0, [r1, #0]
	if (set) {
    74f2:	b12a      	cbz	r2, 7500 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    74f4:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    74f6:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    74f8:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    74fa:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    74fc:	b902      	cbnz	r2, 7500 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    74fe:	6099      	str	r1, [r3, #8]
	return 0;
    7500:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    7502:	e010      	b.n	7526 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7504:	4281      	cmp	r1, r0
    7506:	d106      	bne.n	7516 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    7508:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    750a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    750c:	6898      	ldr	r0, [r3, #8]
    750e:	4281      	cmp	r1, r0
    7510:	d1ed      	bne.n	74ee <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    7512:	609c      	str	r4, [r3, #8]
}
    7514:	e7eb      	b.n	74ee <gpio_nrfx_manage_callback+0x18>
	return node->next;
    7516:	4604      	mov	r4, r0
    7518:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    751a:	2800      	cmp	r0, #0
    751c:	d1f2      	bne.n	7504 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    751e:	2a00      	cmp	r2, #0
    7520:	d1e8      	bne.n	74f4 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    7522:	f06f 0015 	mvn.w	r0, #21
}
    7526:	bd10      	pop	{r4, pc}

00007528 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    7528:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    752a:	6843      	ldr	r3, [r0, #4]
    752c:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    752e:	7a05      	ldrb	r5, [r0, #8]
    7530:	6844      	ldr	r4, [r0, #4]
    7532:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    7536:	42a3      	cmp	r3, r4
    7538:	d302      	bcc.n	7540 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    753a:	f06f 0001 	mvn.w	r0, #1
}
    753e:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    7540:	795c      	ldrb	r4, [r3, #5]
    7542:	428c      	cmp	r4, r1
    7544:	d001      	beq.n	754a <pinctrl_lookup_state+0x22>
		(*state)++;
    7546:	3308      	adds	r3, #8
    7548:	e7f0      	b.n	752c <pinctrl_lookup_state+0x4>
			return 0;
    754a:	2000      	movs	r0, #0
    754c:	e7f7      	b.n	753e <pinctrl_lookup_state+0x16>

0000754e <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
    754e:	6902      	ldr	r2, [r0, #16]
{
    7550:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    7552:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    7556:	e883 0003 	stmia.w	r3, {r0, r1}
}
    755a:	2000      	movs	r0, #0
    755c:	4770      	bx	lr

0000755e <uarte_nrfx_err_check>:
	return config->uarte_regs;
    755e:	6843      	ldr	r3, [r0, #4]
    7560:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    7562:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    7566:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    756a:	4770      	bx	lr

0000756c <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    756c:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    756e:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    7570:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7572:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    7576:	b150      	cbz	r0, 758e <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
    7578:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    757a:	2000      	movs	r0, #0
    757c:	7812      	ldrb	r2, [r2, #0]
    757e:	700a      	strb	r2, [r1, #0]
    7580:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    7584:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7588:	2201      	movs	r2, #1
    758a:	601a      	str	r2, [r3, #0]
	return 0;
    758c:	4770      	bx	lr
		return -1;
    758e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    7592:	4770      	bx	lr

00007594 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    7594:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    7596:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7598:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    759c:	b940      	cbnz	r0, 75b0 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    759e:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    75a0:	079b      	lsls	r3, r3, #30
    75a2:	d406      	bmi.n	75b2 <is_tx_ready.isra.0+0x1e>
    75a4:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    75a8:	3800      	subs	r0, #0
    75aa:	bf18      	it	ne
    75ac:	2001      	movne	r0, #1
    75ae:	4770      	bx	lr
    75b0:	2001      	movs	r0, #1
}
    75b2:	4770      	bx	lr

000075b4 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    75b4:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    75b6:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    75b8:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    75bc:	05c9      	lsls	r1, r1, #23
    75be:	d518      	bpl.n	75f2 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    75c0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    75c4:	b1a9      	cbz	r1, 75f2 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    75c6:	f04f 0020 	mov.w	r0, #32
    75ca:	f3ef 8111 	mrs	r1, BASEPRI
    75ce:	f380 8812 	msr	BASEPRI_MAX, r0
    75d2:	f3bf 8f6f 	isb	sy
    75d6:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    75da:	b130      	cbz	r0, 75ea <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    75dc:	2000      	movs	r0, #0
    75de:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    75e2:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    75e6:	2001      	movs	r0, #1
    75e8:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    75ea:	f381 8811 	msr	BASEPRI, r1
    75ee:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    75f2:	6852      	ldr	r2, [r2, #4]
    75f4:	06d2      	lsls	r2, r2, #27
    75f6:	d515      	bpl.n	7624 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    75f8:	f04f 0120 	mov.w	r1, #32
    75fc:	f3ef 8211 	mrs	r2, BASEPRI
    7600:	f381 8812 	msr	BASEPRI_MAX, r1
    7604:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7608:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    760c:	b111      	cbz	r1, 7614 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    760e:	2100      	movs	r1, #0
    7610:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    7614:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    7618:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    761c:	f382 8811 	msr	BASEPRI, r2
    7620:	f3bf 8f6f 	isb	sy
}
    7624:	4770      	bx	lr

00007626 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    7626:	4770      	bx	lr

00007628 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    7628:	f100 0350 	add.w	r3, r0, #80	; 0x50
    762c:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    762e:	b29b      	uxth	r3, r3
    7630:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7634:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    7638:	2200      	movs	r2, #0
    763a:	601a      	str	r2, [r3, #0]
    763c:	681b      	ldr	r3, [r3, #0]
}
    763e:	4770      	bx	lr

00007640 <sys_clock_cycle_get_32>:
{
    7640:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    7642:	f7fb f98d 	bl	2960 <z_nrf_rtc_timer_read>
}
    7646:	bd08      	pop	{r3, pc}

00007648 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    7648:	b508      	push	{r3, lr}

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    764a:	2000      	movs	r0, #0
    764c:	f7fa fa5c 	bl	1b08 <sys_arch_reboot>

00007650 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
    7650:	f7fd b838 	b.w	46c4 <nrf_cc3xx_platform_init>

00007654 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
    7654:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    7656:	f7f9 fd3b 	bl	10d0 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    765a:	f7f9 fe0f 	bl	127c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
    765e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
    7662:	f7fd b82f 	b.w	46c4 <nrf_cc3xx_platform_init>

00007666 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    7666:	4700      	bx	r0

00007668 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    7668:	f000 ba16 	b.w	7a98 <z_impl_k_busy_wait>

0000766c <nrfx_clock_enable>:
{
    766c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    766e:	2000      	movs	r0, #0
    7670:	f7f9 fe5c 	bl	132c <arch_irq_is_enabled>
    7674:	b908      	cbnz	r0, 767a <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    7676:	f7f9 fe37 	bl	12e8 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    767a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    767e:	2200      	movs	r2, #0
    7680:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    7684:	bd08      	pop	{r3, pc}

00007686 <nrfx_clock_start>:
{
    7686:	b508      	push	{r3, lr}
    switch (domain)
    7688:	b110      	cbz	r0, 7690 <nrfx_clock_start+0xa>
    768a:	2801      	cmp	r0, #1
    768c:	d02c      	beq.n	76e8 <nrfx_clock_start+0x62>
}
    768e:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7690:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7694:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7698:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    769c:	03c8      	lsls	r0, r1, #15
    769e:	d40b      	bmi.n	76b8 <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    76a0:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    76a4:	07d9      	lsls	r1, r3, #31
    76a6:	d50f      	bpl.n	76c8 <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    76a8:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    76ac:	079b      	lsls	r3, r3, #30
    76ae:	d408      	bmi.n	76c2 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    76b0:	2302      	movs	r3, #2
    76b2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    76b6:	e7ea      	b.n	768e <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    76b8:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    76bc:	2b01      	cmp	r3, #1
    76be:	d004      	beq.n	76ca <nrfx_clock_start+0x44>
    76c0:	b113      	cbz	r3, 76c8 <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    76c2:	2000      	movs	r0, #0
    76c4:	f7fb fc38 	bl	2f38 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    76c8:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    76ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    76ce:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    76d2:	2300      	movs	r3, #0
    76d4:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    76d8:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    76dc:	2302      	movs	r3, #2
    76de:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    76e2:	2301      	movs	r3, #1
    76e4:	6093      	str	r3, [r2, #8]
}
    76e6:	e7d2      	b.n	768e <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    76e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    76ec:	2200      	movs	r2, #0
    76ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    76f2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    76f6:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    76fa:	6018      	str	r0, [r3, #0]
}
    76fc:	e7c7      	b.n	768e <nrfx_clock_start+0x8>

000076fe <nrfx_clock_stop>:
    clock_stop(domain);
    76fe:	f7fb bc1b 	b.w	2f38 <clock_stop>

00007702 <nrf_gpio_reconfigure>:
{
    7702:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7704:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7706:	a801      	add	r0, sp, #4
{
    7708:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    770c:	4616      	mov	r6, r2
    770e:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7710:	f7fb fcba 	bl	3088 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7714:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7716:	f1b6 0c00 	subs.w	ip, r6, #0
    771a:	bf18      	it	ne
    771c:	f04f 0c01 	movne.w	ip, #1
    7720:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7724:	1e0b      	subs	r3, r1, #0
    7726:	bf18      	it	ne
    7728:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    772a:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    772c:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7730:	bf14      	ite	ne
    7732:	f04f 0c0c 	movne.w	ip, #12
    7736:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    773a:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    773c:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7740:	bf14      	ite	ne
    7742:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    7746:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    774a:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    774c:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7750:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    7754:	bf14      	ite	ne
    7756:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    775a:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    775e:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    7762:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7766:	b101      	cbz	r1, 776a <nrf_gpio_reconfigure+0x68>
    7768:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    776a:	b10e      	cbz	r6, 7770 <nrf_gpio_reconfigure+0x6e>
    776c:	7836      	ldrb	r6, [r6, #0]
    776e:	0076      	lsls	r6, r6, #1
    7770:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7772:	b10d      	cbz	r5, 7778 <nrf_gpio_reconfigure+0x76>
    7774:	782d      	ldrb	r5, [r5, #0]
    7776:	00ad      	lsls	r5, r5, #2
    7778:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    777a:	b10c      	cbz	r4, 7780 <nrf_gpio_reconfigure+0x7e>
    777c:	7824      	ldrb	r4, [r4, #0]
    777e:	0224      	lsls	r4, r4, #8
    7780:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    7782:	b10f      	cbz	r7, 7788 <nrf_gpio_reconfigure+0x86>
    7784:	783f      	ldrb	r7, [r7, #0]
    7786:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7788:	430c      	orrs	r4, r1
    778a:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    778c:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    7790:	b003      	add	sp, #12
    7792:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007794 <nrf_gpio_cfg_sense_set>:
{
    7794:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    7796:	f10d 030f 	add.w	r3, sp, #15
    779a:	9301      	str	r3, [sp, #4]
    779c:	2300      	movs	r3, #0
{
    779e:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    77a2:	9300      	str	r3, [sp, #0]
    77a4:	461a      	mov	r2, r3
    77a6:	4619      	mov	r1, r3
    77a8:	f7ff ffab 	bl	7702 <nrf_gpio_reconfigure>
}
    77ac:	b005      	add	sp, #20
    77ae:	f85d fb04 	ldr.w	pc, [sp], #4

000077b2 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    77b2:	f7fb bfd7 	b.w	3764 <_DoInit>

000077b6 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
    77b6:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
    77b8:	f7ff fffb 	bl	77b2 <SEGGER_RTT_Init>

	return 0;
}
    77bc:	2000      	movs	r0, #0
    77be:	bd08      	pop	{r3, pc}

000077c0 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    77c0:	4770      	bx	lr

000077c2 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    77c2:	b140      	cbz	r0, 77d6 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    77c4:	68c3      	ldr	r3, [r0, #12]
    77c6:	7858      	ldrb	r0, [r3, #1]
    77c8:	f010 0001 	ands.w	r0, r0, #1
    77cc:	bf1e      	ittt	ne
    77ce:	7818      	ldrbne	r0, [r3, #0]
    77d0:	fab0 f080 	clzne	r0, r0
    77d4:	0940      	lsrne	r0, r0, #5
}
    77d6:	4770      	bx	lr

000077d8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    77d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    77da:	4605      	mov	r5, r0
    77dc:	460e      	mov	r6, r1
	__asm__ volatile(
    77de:	f04f 0320 	mov.w	r3, #32
    77e2:	f3ef 8711 	mrs	r7, BASEPRI
    77e6:	f383 8812 	msr	BASEPRI_MAX, r3
    77ea:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    77ee:	f7fc fda3 	bl	4338 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    77f2:	4631      	mov	r1, r6
    77f4:	4604      	mov	r4, r0
    77f6:	4628      	mov	r0, r5
    77f8:	f7ff ff26 	bl	7648 <k_sys_fatal_error_handler>
	__asm__ volatile(
    77fc:	f387 8811 	msr	BASEPRI, r7
    7800:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    7804:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    7806:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    780a:	f7fa b869 	b.w	18e0 <z_impl_k_thread_abort>

0000780e <z_early_memset>:
	(void) memset(dst, c, n);
    780e:	f7ff bd5a 	b.w	72c6 <memset>

00007812 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    7812:	f7ff bd4d 	b.w	72b0 <memcpy>

00007816 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7816:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    781a:	4313      	orrs	r3, r2
    781c:	f013 0303 	ands.w	r3, r3, #3
    7820:	d10c      	bne.n	783c <create_free_list+0x26>
	slab->free_list = NULL;
    7822:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    7824:	6881      	ldr	r1, [r0, #8]
    7826:	4299      	cmp	r1, r3
    7828:	d801      	bhi.n	782e <create_free_list+0x18>
	return 0;
    782a:	2000      	movs	r0, #0
    782c:	4770      	bx	lr
		*(char **)p = slab->free_list;
    782e:	6941      	ldr	r1, [r0, #20]
    7830:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    7832:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    7834:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    7836:	3301      	adds	r3, #1
		p += slab->block_size;
    7838:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    783a:	e7f3      	b.n	7824 <create_free_list+0xe>
		return -EINVAL;
    783c:	f06f 0015 	mvn.w	r0, #21
}
    7840:	4770      	bx	lr

00007842 <k_mem_slab_init>:
{
    7842:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    7844:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    7848:	2300      	movs	r3, #0
	slab->buffer = buffer;
    784a:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    784c:	6183      	str	r3, [r0, #24]
{
    784e:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    7850:	f7ff ffe1 	bl	7816 <create_free_list>
	if (rc < 0) {
    7854:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
    7856:	bfa8      	it	ge
    7858:	e9c4 4400 	strdge	r4, r4, [r4]
}
    785c:	bd10      	pop	{r4, pc}

0000785e <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    785e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7860:	4604      	mov	r4, r0
    7862:	460d      	mov	r5, r1
	__asm__ volatile(
    7864:	f04f 0320 	mov.w	r3, #32
    7868:	f3ef 8611 	mrs	r6, BASEPRI
    786c:	f383 8812 	msr	BASEPRI_MAX, r3
    7870:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    7874:	6947      	ldr	r7, [r0, #20]
    7876:	b977      	cbnz	r7, 7896 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    7878:	f000 f8b2 	bl	79e0 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    787c:	b158      	cbz	r0, 7896 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    787e:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    7880:	6142      	str	r2, [r0, #20]
    7882:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    7884:	f000 f876 	bl	7974 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    7888:	4631      	mov	r1, r6
    788a:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    788e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    7892:	f7fc bc1b 	b.w	40cc <z_reschedule>
	**(char ***) mem = slab->free_list;
    7896:	682b      	ldr	r3, [r5, #0]
    7898:	6962      	ldr	r2, [r4, #20]
    789a:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    789c:	682b      	ldr	r3, [r5, #0]
    789e:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    78a0:	69a3      	ldr	r3, [r4, #24]
    78a2:	3b01      	subs	r3, #1
    78a4:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    78a6:	f386 8811 	msr	BASEPRI, r6
    78aa:	f3bf 8f6f 	isb	sy
}
    78ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000078b0 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    78b0:	f3ef 8005 	mrs	r0, IPSR
}
    78b4:	3800      	subs	r0, #0
    78b6:	bf18      	it	ne
    78b8:	2001      	movne	r0, #1
    78ba:	4770      	bx	lr

000078bc <z_pm_save_idle_exit>:
{
    78bc:	b508      	push	{r3, lr}
	pm_system_resume();
    78be:	f7f9 fafd 	bl	ebc <pm_system_resume>
}
    78c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    78c6:	f7ff beae 	b.w	7626 <sys_clock_idle_exit>

000078ca <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    78ca:	f990 300e 	ldrsb.w	r3, [r0, #14]
    78ce:	428b      	cmp	r3, r1
    78d0:	d001      	beq.n	78d6 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    78d2:	f7fc bbb5 	b.w	4040 <z_set_prio>
}
    78d6:	2000      	movs	r0, #0
    78d8:	4770      	bx	lr

000078da <z_impl_k_mutex_init>:
{
    78da:	4603      	mov	r3, r0
	mutex->owner = NULL;
    78dc:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    78de:	e9c3 0002 	strd	r0, r0, [r3, #8]
    78e2:	e9c3 3300 	strd	r3, r3, [r3]
}
    78e6:	4770      	bx	lr

000078e8 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    78e8:	b13a      	cbz	r2, 78fa <z_impl_k_sem_init+0x12>
    78ea:	428a      	cmp	r2, r1
    78ec:	d305      	bcc.n	78fa <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    78ee:	e9c0 1202 	strd	r1, r2, [r0, #8]
    78f2:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    78f6:	2000      	movs	r0, #0
    78f8:	4770      	bx	lr
		return -EINVAL;
    78fa:	f06f 0015 	mvn.w	r0, #21
}
    78fe:	4770      	bx	lr

00007900 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    7900:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    7904:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7906:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7908:	2300      	movs	r3, #0
	node->prev = NULL;
    790a:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    790e:	4770      	bx	lr

00007910 <unpend_thread_no_timeout>:
{
    7910:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    7912:	f7ff fff5 	bl	7900 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    7916:	7b43      	ldrb	r3, [r0, #13]
    7918:	f023 0302 	bic.w	r3, r3, #2
    791c:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    791e:	2300      	movs	r3, #0
    7920:	6083      	str	r3, [r0, #8]
}
    7922:	bd08      	pop	{r3, pc}

00007924 <add_to_waitq_locked>:
{
    7924:	b538      	push	{r3, r4, r5, lr}
    7926:	4604      	mov	r4, r0
    7928:	460d      	mov	r5, r1
	unready_thread(thread);
    792a:	f7fc fb0b 	bl	3f44 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    792e:	7b63      	ldrb	r3, [r4, #13]
    7930:	f043 0302 	orr.w	r3, r3, #2
    7934:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    7936:	b1e5      	cbz	r5, 7972 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    7938:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    793a:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    793c:	429d      	cmp	r5, r3
    793e:	d109      	bne.n	7954 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    7940:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    7942:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    7946:	601c      	str	r4, [r3, #0]
	list->tail = node;
    7948:	606c      	str	r4, [r5, #4]
}
    794a:	e012      	b.n	7972 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    794c:	686a      	ldr	r2, [r5, #4]
    794e:	4293      	cmp	r3, r2
    7950:	d0f6      	beq.n	7940 <add_to_waitq_locked+0x1c>
    7952:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7954:	2b00      	cmp	r3, #0
    7956:	d0f3      	beq.n	7940 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    7958:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    795c:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    7960:	428a      	cmp	r2, r1
    7962:	d0f3      	beq.n	794c <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7964:	4291      	cmp	r1, r2
    7966:	ddf1      	ble.n	794c <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    7968:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    796a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    796e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    7970:	605c      	str	r4, [r3, #4]
}
    7972:	bd38      	pop	{r3, r4, r5, pc}

00007974 <z_ready_thread>:
{
    7974:	b510      	push	{r4, lr}
	__asm__ volatile(
    7976:	f04f 0320 	mov.w	r3, #32
    797a:	f3ef 8411 	mrs	r4, BASEPRI
    797e:	f383 8812 	msr	BASEPRI_MAX, r3
    7982:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    7986:	f7fc faa9 	bl	3edc <ready_thread>
	__asm__ volatile(
    798a:	f384 8811 	msr	BASEPRI, r4
    798e:	f3bf 8f6f 	isb	sy
}
    7992:	bd10      	pop	{r4, pc}

00007994 <z_sched_wake_thread>:
{
    7994:	b538      	push	{r3, r4, r5, lr}
    7996:	4604      	mov	r4, r0
	__asm__ volatile(
    7998:	f04f 0320 	mov.w	r3, #32
    799c:	f3ef 8511 	mrs	r5, BASEPRI
    79a0:	f383 8812 	msr	BASEPRI_MAX, r3
    79a4:	f3bf 8f6f 	isb	sy
		if (!killed) {
    79a8:	7b43      	ldrb	r3, [r0, #13]
    79aa:	f013 0f28 	tst.w	r3, #40	; 0x28
    79ae:	d10b      	bne.n	79c8 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    79b0:	6883      	ldr	r3, [r0, #8]
    79b2:	b10b      	cbz	r3, 79b8 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    79b4:	f7ff ffac 	bl	7910 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    79b8:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    79ba:	b951      	cbnz	r1, 79d2 <z_sched_wake_thread+0x3e>
    79bc:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    79c0:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
    79c2:	4620      	mov	r0, r4
    79c4:	f7fc fa8a 	bl	3edc <ready_thread>
	__asm__ volatile(
    79c8:	f385 8811 	msr	BASEPRI, r5
    79cc:	f3bf 8f6f 	isb	sy
}
    79d0:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    79d2:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    79d6:	e7f3      	b.n	79c0 <z_sched_wake_thread+0x2c>

000079d8 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    79d8:	2101      	movs	r1, #1
    79da:	3818      	subs	r0, #24
    79dc:	f7ff bfda 	b.w	7994 <z_sched_wake_thread>

000079e0 <z_unpend_first_thread>:
{
    79e0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    79e2:	f04f 0320 	mov.w	r3, #32
    79e6:	f3ef 8511 	mrs	r5, BASEPRI
    79ea:	f383 8812 	msr	BASEPRI_MAX, r3
    79ee:	f3bf 8f6f 	isb	sy
	return list->head == list;
    79f2:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    79f4:	42a0      	cmp	r0, r4
    79f6:	d00d      	beq.n	7a14 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    79f8:	b134      	cbz	r4, 7a08 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    79fa:	4620      	mov	r0, r4
    79fc:	f7ff ff88 	bl	7910 <unpend_thread_no_timeout>
    7a00:	f104 0018 	add.w	r0, r4, #24
    7a04:	f000 f81e 	bl	7a44 <z_abort_timeout>
	__asm__ volatile(
    7a08:	f385 8811 	msr	BASEPRI, r5
    7a0c:	f3bf 8f6f 	isb	sy
}
    7a10:	4620      	mov	r0, r4
    7a12:	bd38      	pop	{r3, r4, r5, pc}
    7a14:	2400      	movs	r4, #0
    7a16:	e7f7      	b.n	7a08 <z_unpend_first_thread+0x28>

00007a18 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7a18:	4603      	mov	r3, r0
    7a1a:	b920      	cbnz	r0, 7a26 <z_reschedule_irqlock+0xe>
    7a1c:	f3ef 8205 	mrs	r2, IPSR
    7a20:	b90a      	cbnz	r2, 7a26 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    7a22:	f7f9 bcc9 	b.w	13b8 <arch_swap>
    7a26:	f383 8811 	msr	BASEPRI, r3
    7a2a:	f3bf 8f6f 	isb	sy
}
    7a2e:	4770      	bx	lr

00007a30 <z_reschedule_unlocked>:
	__asm__ volatile(
    7a30:	f04f 0320 	mov.w	r3, #32
    7a34:	f3ef 8011 	mrs	r0, BASEPRI
    7a38:	f383 8812 	msr	BASEPRI_MAX, r3
    7a3c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    7a40:	f7ff bfea 	b.w	7a18 <z_reschedule_irqlock>

00007a44 <z_abort_timeout>:
{
    7a44:	b510      	push	{r4, lr}
    7a46:	f04f 0220 	mov.w	r2, #32
    7a4a:	f3ef 8411 	mrs	r4, BASEPRI
    7a4e:	f382 8812 	msr	BASEPRI_MAX, r2
    7a52:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    7a56:	6803      	ldr	r3, [r0, #0]
    7a58:	b13b      	cbz	r3, 7a6a <z_abort_timeout+0x26>
			remove_timeout(to);
    7a5a:	f7fc fd17 	bl	448c <remove_timeout>
			ret = 0;
    7a5e:	2000      	movs	r0, #0
	__asm__ volatile(
    7a60:	f384 8811 	msr	BASEPRI, r4
    7a64:	f3bf 8f6f 	isb	sy
}
    7a68:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    7a6a:	f06f 0015 	mvn.w	r0, #21
    7a6e:	e7f7      	b.n	7a60 <z_abort_timeout+0x1c>

00007a70 <z_get_next_timeout_expiry>:
{
    7a70:	b510      	push	{r4, lr}
	__asm__ volatile(
    7a72:	f04f 0320 	mov.w	r3, #32
    7a76:	f3ef 8411 	mrs	r4, BASEPRI
    7a7a:	f383 8812 	msr	BASEPRI_MAX, r3
    7a7e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    7a82:	f7fc fce3 	bl	444c <next_timeout>
	__asm__ volatile(
    7a86:	f384 8811 	msr	BASEPRI, r4
    7a8a:	f3bf 8f6f 	isb	sy
}
    7a8e:	bd10      	pop	{r4, pc}

00007a90 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    7a90:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    7a92:	f7fc fdf7 	bl	4684 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    7a96:	bd08      	pop	{r3, pc}

00007a98 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    7a98:	b108      	cbz	r0, 7a9e <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    7a9a:	f7fa b84b 	b.w	1b34 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    7a9e:	4770      	bx	lr

00007aa0 <main>:
	return sys_clock_cycle_get_64();
}

static ALWAYS_INLINE void arch_nop(void)
{
	__asm__ volatile("nop");
    7aa0:	bf00      	nop
{
	/* NOP default main() if the application does not provide one. */
	arch_nop();

	return 0;
}
    7aa2:	2000      	movs	r0, #0
    7aa4:	4770      	bx	lr

00007aa6 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    7aa6:	4770      	bx	lr
