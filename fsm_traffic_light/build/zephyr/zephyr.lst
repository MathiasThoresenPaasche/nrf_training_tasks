
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
		info->stack_size, pcnt);
#endif
}

static void thread_analyze_cb(const struct k_thread *cthread, void *user_data)
{
   0:	c0 26 00 20 a1 33 00 00 97 72 00 00 75 33 00 00     .&. .3...r..u3..
	int err;



	name = k_thread_name_get((k_tid_t)thread);
	if (!name || name[0] == '\0') {
  10:	75 33 00 00 75 33 00 00 75 33 00 00 00 00 00 00     u3..u3..u3......
	...
		union { uintptr_t x; size_t * val; } parm1 = { .val = unused_ptr };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_STACK_SPACE_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
  2c:	65 2c 00 00 75 33 00 00 00 00 00 00 f9 2b 00 00     e,..u3.......+..
		THREAD_ANALYZER_PRINT(
			THREAD_ANALYZER_FMT(
				" %-20s: unable to get stack space (%d)"),
			name, err);

		unused = 0;
  3c:	75 33 00 00                                         u3..

00000040 <_irq_vector_table>:
	}

	info.name = name;
	info.stack_size = size;
  40:	21 2d 00 00 21 2d 00 00 21 2d 00 00 21 2d 00 00     !-..!-..!-..!-..
	info.stack_used = size - unused;

#ifdef CONFIG_THREAD_RUNTIME_STATS
	ret = 0;

	if (k_thread_runtime_stats_get(thread, &info.usage) != 0) {
  50:	21 2d 00 00 21 2d 00 00 21 2d 00 00 21 2d 00 00     !-..!-..!-..!-..

	if (k_thread_runtime_stats_all_get(&rt_stats_all) != 0) {
		ret++;
	}
	if (ret == 0) {
		info.utilization = (info.usage.execution_cycles * 100U) /
  60:	21 2d 00 00 21 2d 00 00 21 2d 00 00 21 2d 00 00     !-..!-..!-..!-..
  70:	21 2d 00 00 21 2d 00 00 21 2d 00 00 21 2d 00 00     !-..!-..!-..!-..
			rt_stats_all.execution_cycles;
	}
#endif
	cb(&info);
}
  80:	21 2d 00 00 21 2d 00 00 21 2d 00 00 21 2d 00 00     !-..!-..!-..!-..
  90:	21 2d 00 00 21 2d 00 00 21 2d 00 00 21 2d 00 00     !-..!-..!-..!-..
  a0:	21 2d 00 00 21 2d 00 00 21 2d 00 00 21 2d 00 00     !-..!-..!-..!-..
  b0:	21 2d 00 00 21 2d 00 00 21 2d 00 00 21 2d 00 00     !-..!-..!-..!-..
  c0:	21 2d 00 00 21 2d 00 00 21 2d 00 00 21 2d 00 00     !-..!-..!-..!-..
  d0:	21 2d 00 00 21 2d 00 00 21 2d 00 00 21 2d 00 00     !-..!-..!-..!-..
  e0:	21 2d 00 00 21 2d 00 00 21 2d 00 00 21 2d 00 00     !-..!-..!-..!-..
  f0:	21 2d 00 00 21 2d 00 00 21 2d 00 00 21 2d 00 00     !-..!-..!-..!-..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     138:	4686      	mov	lr, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e08      	ldr	r6, [sp, #32]
     140:	4615      	mov	r5, r2
     142:	4674      	mov	r4, lr
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c2 	bne.w	2d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x163>
     14c:	4285      	cmp	r5, r0
     14e:	fab2 f282 	clz	r2, r2
     152:	d945      	bls.n	1e0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x73>
     154:	b14a      	cbz	r2, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c2 0320 	rsb	r3, r2, #32
     15a:	fa00 fc02 	lsl.w	ip, r0, r2
     15e:	fa2e f303 	lsr.w	r3, lr, r3
     162:	4095      	lsls	r5, r2
     164:	ea43 0c0c 	orr.w	ip, r3, ip
     168:	4094      	lsls	r4, r2
     16a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     16e:	b2a8      	uxth	r0, r5
     170:	fbbc f8fe 	udiv	r8, ip, lr
     174:	0c23      	lsrs	r3, r4, #16
     176:	fb0e cc18 	mls	ip, lr, r8, ip
     17a:	fb08 f900 	mul.w	r9, r8, r0
     17e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     182:	4599      	cmp	r9, r3
     184:	d928      	bls.n	1d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6b>
     186:	18eb      	adds	r3, r5, r3
     188:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     18c:	d204      	bcs.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     18e:	4599      	cmp	r9, r3
     190:	d902      	bls.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     192:	f1a8 0702 	sub.w	r7, r8, #2
     196:	442b      	add	r3, r5
     198:	eba3 0309 	sub.w	r3, r3, r9
     19c:	b2a4      	uxth	r4, r4
     19e:	fbb3 fcfe 	udiv	ip, r3, lr
     1a2:	fb0e 331c 	mls	r3, lr, ip, r3
     1a6:	fb0c f000 	mul.w	r0, ip, r0
     1aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1ae:	42a0      	cmp	r0, r4
     1b0:	d914      	bls.n	1dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6f>
     1b2:	192c      	adds	r4, r5, r4
     1b4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     1b8:	d204      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1ba:	42a0      	cmp	r0, r4
     1bc:	d902      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1be:	f1ac 0302 	sub.w	r3, ip, #2
     1c2:	442c      	add	r4, r5
     1c4:	1a24      	subs	r4, r4, r0
     1c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     1ca:	b11e      	cbz	r6, 1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     1cc:	40d4      	lsrs	r4, r2
     1ce:	2300      	movs	r3, #0
     1d0:	6034      	str	r4, [r6, #0]
     1d2:	6073      	str	r3, [r6, #4]
     1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d8:	4647      	mov	r7, r8
     1da:	e7dd      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     1dc:	4663      	mov	r3, ip
     1de:	e7f1      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e0:	bb92      	cbnz	r2, 248 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xdb>
     1e2:	1b43      	subs	r3, r0, r5
     1e4:	2101      	movs	r1, #1
     1e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1ea:	b2af      	uxth	r7, r5
     1ec:	fbb3 fcfe 	udiv	ip, r3, lr
     1f0:	0c20      	lsrs	r0, r4, #16
     1f2:	fb0e 331c 	mls	r3, lr, ip, r3
     1f6:	fb0c f807 	mul.w	r8, ip, r7
     1fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1fe:	4598      	cmp	r8, r3
     200:	d962      	bls.n	2c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15b>
     202:	18eb      	adds	r3, r5, r3
     204:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     208:	d204      	bcs.n	214 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xa7>
     20a:	4598      	cmp	r8, r3
     20c:	d902      	bls.n	214 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xa7>
     20e:	f1ac 0002 	sub.w	r0, ip, #2
     212:	442b      	add	r3, r5
     214:	eba3 0308 	sub.w	r3, r3, r8
     218:	b2a4      	uxth	r4, r4
     21a:	fbb3 fcfe 	udiv	ip, r3, lr
     21e:	fb0e 331c 	mls	r3, lr, ip, r3
     222:	fb0c f707 	mul.w	r7, ip, r7
     226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     22a:	42a7      	cmp	r7, r4
     22c:	d94e      	bls.n	2cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15f>
     22e:	192c      	adds	r4, r5, r4
     230:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     234:	d204      	bcs.n	240 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd3>
     236:	42a7      	cmp	r7, r4
     238:	d902      	bls.n	240 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd3>
     23a:	f1ac 0302 	sub.w	r3, ip, #2
     23e:	442c      	add	r4, r5
     240:	1be4      	subs	r4, r4, r7
     242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     246:	e7c0      	b.n	1ca <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5d>
     248:	f1c2 0320 	rsb	r3, r2, #32
     24c:	fa20 f103 	lsr.w	r1, r0, r3
     250:	4095      	lsls	r5, r2
     252:	4090      	lsls	r0, r2
     254:	fa2e f303 	lsr.w	r3, lr, r3
     258:	4303      	orrs	r3, r0
     25a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     25e:	b2af      	uxth	r7, r5
     260:	fbb1 fcfe 	udiv	ip, r1, lr
     264:	fb0e 101c 	mls	r0, lr, ip, r1
     268:	0c19      	lsrs	r1, r3, #16
     26a:	fb0c f807 	mul.w	r8, ip, r7
     26e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     272:	4588      	cmp	r8, r1
     274:	fa04 f402 	lsl.w	r4, r4, r2
     278:	d922      	bls.n	2c0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x153>
     27a:	1869      	adds	r1, r5, r1
     27c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     280:	d204      	bcs.n	28c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11f>
     282:	4588      	cmp	r8, r1
     284:	d902      	bls.n	28c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11f>
     286:	f1ac 0002 	sub.w	r0, ip, #2
     28a:	4429      	add	r1, r5
     28c:	eba1 0108 	sub.w	r1, r1, r8
     290:	b29b      	uxth	r3, r3
     292:	fbb1 fcfe 	udiv	ip, r1, lr
     296:	fb0e 111c 	mls	r1, lr, ip, r1
     29a:	fb0c f707 	mul.w	r7, ip, r7
     29e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2a2:	429f      	cmp	r7, r3
     2a4:	d90e      	bls.n	2c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x157>
     2a6:	18eb      	adds	r3, r5, r3
     2a8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     2ac:	d204      	bcs.n	2b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14b>
     2ae:	429f      	cmp	r7, r3
     2b0:	d902      	bls.n	2b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14b>
     2b2:	f1ac 0102 	sub.w	r1, ip, #2
     2b6:	442b      	add	r3, r5
     2b8:	1bdb      	subs	r3, r3, r7
     2ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2be:	e792      	b.n	1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     2c0:	4660      	mov	r0, ip
     2c2:	e7e3      	b.n	28c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11f>
     2c4:	4661      	mov	r1, ip
     2c6:	e7f7      	b.n	2b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14b>
     2c8:	4660      	mov	r0, ip
     2ca:	e7a3      	b.n	214 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xa7>
     2cc:	4663      	mov	r3, ip
     2ce:	e7b7      	b.n	240 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd3>
     2d0:	4283      	cmp	r3, r0
     2d2:	d906      	bls.n	2e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x175>
     2d4:	b916      	cbnz	r6, 2dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x16f>
     2d6:	2100      	movs	r1, #0
     2d8:	4608      	mov	r0, r1
     2da:	e77b      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     2dc:	e9c6 e000 	strd	lr, r0, [r6]
     2e0:	e7f9      	b.n	2d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x169>
     2e2:	fab3 f783 	clz	r7, r3
     2e6:	b98f      	cbnz	r7, 30c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc>
     2e8:	4283      	cmp	r3, r0
     2ea:	d301      	bcc.n	2f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x183>
     2ec:	4572      	cmp	r2, lr
     2ee:	d808      	bhi.n	302 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2>
     2f0:	ebbe 0402 	subs.w	r4, lr, r2
     2f4:	eb60 0303 	sbc.w	r3, r0, r3
     2f8:	2001      	movs	r0, #1
     2fa:	469c      	mov	ip, r3
     2fc:	b91e      	cbnz	r6, 306 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6>
     2fe:	2100      	movs	r1, #0
     300:	e768      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     302:	4638      	mov	r0, r7
     304:	e7fa      	b.n	2fc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x18f>
     306:	e9c6 4c00 	strd	r4, ip, [r6]
     30a:	e7f8      	b.n	2fe <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x191>
     30c:	f1c7 0c20 	rsb	ip, r7, #32
     310:	40bb      	lsls	r3, r7
     312:	fa22 f40c 	lsr.w	r4, r2, ip
     316:	431c      	orrs	r4, r3
     318:	fa2e f10c 	lsr.w	r1, lr, ip
     31c:	fa20 f30c 	lsr.w	r3, r0, ip
     320:	40b8      	lsls	r0, r7
     322:	4301      	orrs	r1, r0
     324:	ea4f 4914 	mov.w	r9, r4, lsr #16
     328:	fa0e f507 	lsl.w	r5, lr, r7
     32c:	fbb3 f8f9 	udiv	r8, r3, r9
     330:	fa1f fe84 	uxth.w	lr, r4
     334:	fb09 3018 	mls	r0, r9, r8, r3
     338:	0c0b      	lsrs	r3, r1, #16
     33a:	fb08 fa0e 	mul.w	sl, r8, lr
     33e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     342:	459a      	cmp	sl, r3
     344:	fa02 f207 	lsl.w	r2, r2, r7
     348:	d940      	bls.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     34a:	18e3      	adds	r3, r4, r3
     34c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     350:	d204      	bcs.n	35c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5c>
     352:	459a      	cmp	sl, r3
     354:	d902      	bls.n	35c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5c>
     356:	f1a8 0002 	sub.w	r0, r8, #2
     35a:	4423      	add	r3, r4
     35c:	eba3 030a 	sub.w	r3, r3, sl
     360:	b289      	uxth	r1, r1
     362:	fbb3 f8f9 	udiv	r8, r3, r9
     366:	fb09 3318 	mls	r3, r9, r8, r3
     36a:	fb08 fe0e 	mul.w	lr, r8, lr
     36e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     372:	458e      	cmp	lr, r1
     374:	d92c      	bls.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     376:	1861      	adds	r1, r4, r1
     378:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     37c:	d204      	bcs.n	388 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x88>
     37e:	458e      	cmp	lr, r1
     380:	d902      	bls.n	388 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x88>
     382:	f1a8 0302 	sub.w	r3, r8, #2
     386:	4421      	add	r1, r4
     388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     38c:	fba0 9802 	umull	r9, r8, r0, r2
     390:	eba1 010e 	sub.w	r1, r1, lr
     394:	4541      	cmp	r1, r8
     396:	46ce      	mov	lr, r9
     398:	4643      	mov	r3, r8
     39a:	d302      	bcc.n	3a2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa2>
     39c:	d106      	bne.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     39e:	454d      	cmp	r5, r9
     3a0:	d204      	bcs.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     3a2:	ebb9 0e02 	subs.w	lr, r9, r2
     3a6:	eb68 0304 	sbc.w	r3, r8, r4
     3aa:	3801      	subs	r0, #1
     3ac:	2e00      	cmp	r6, #0
     3ae:	d0a6      	beq.n	2fe <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x191>
     3b0:	ebb5 020e 	subs.w	r2, r5, lr
     3b4:	eb61 0103 	sbc.w	r1, r1, r3
     3b8:	fa01 fc0c 	lsl.w	ip, r1, ip
     3bc:	fa22 f307 	lsr.w	r3, r2, r7
     3c0:	ea4c 0303 	orr.w	r3, ip, r3
     3c4:	40f9      	lsrs	r1, r7
     3c6:	e9c6 3100 	strd	r3, r1, [r6]
     3ca:	e798      	b.n	2fe <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x191>
     3cc:	4640      	mov	r0, r8
     3ce:	e7c5      	b.n	35c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5c>
     3d0:	4643      	mov	r3, r8
     3d2:	e7d9      	b.n	388 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x88>

000003d4 <main>:
//   // return result;
//   }

void main(void)
{
  button_init(_button_callback);
     3d4:	4804      	ldr	r0, [pc, #16]	; (3e8 <CONFIG_LOG_FAILURE_REPORT_PERIOD>)
{
     3d6:	b508      	push	{r3, lr}
  button_init(_button_callback);
     3d8:	f000 f8c4 	bl	564 <button_init>
  init(&myStateMachine,INIT);
     3dc:	4803      	ldr	r0, [pc, #12]	; (3ec <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x4>)
     3de:	2100      	movs	r1, #0
     3e0:	f000 f958 	bl	694 <init>
  while(1){
     3e4:	e7fe      	b.n	3e4 <main+0x10>
     3e6:	bf00      	nop
     3e8:	000068cd 	.word	0x000068cd
     3ec:	20000890 	.word	0x20000890

000003f0 <led_mode>:
        }
    }
    led_mode(LED_ON);
    LOG_INF("led_init() complete\n");
}
void led_mode(const short mode){
     3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     3f4:	4d1c      	ldr	r5, [pc, #112]	; (468 <CONFIG_FLASH_SIZE+0x68>)
     3f6:	b086      	sub	sp, #24
     3f8:	4604      	mov	r4, r0
     3fa:	af00      	add	r7, sp, #0
    
    for (int i = 0; i < num_led; i++){
     3fc:	2600      	movs	r6, #0
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     3fe:	f04f 0801 	mov.w	r8, #1
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
     402:	6828      	ldr	r0, [r5, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     404:	7929      	ldrb	r1, [r5, #4]
     406:	6903      	ldr	r3, [r0, #16]
     408:	681b      	ldr	r3, [r3, #0]
     40a:	fa08 f101 	lsl.w	r1, r8, r1
     40e:	4219      	tst	r1, r3
     410:	d003      	beq.n	41a <CONFIG_FLASH_SIZE+0x1a>
	if (value != 0)	{
     412:	b124      	cbz	r4, 41e <CONFIG_FLASH_SIZE+0x1e>
	return api->port_clear_bits_raw(port, pins);
     414:	6883      	ldr	r3, [r0, #8]
     416:	691b      	ldr	r3, [r3, #16]
     418:	e003      	b.n	422 <CONFIG_FLASH_SIZE+0x22>
	if (value != 0)	{
     41a:	2c00      	cmp	r4, #0
     41c:	d0fa      	beq.n	414 <CONFIG_FLASH_SIZE+0x14>
	return api->port_set_bits_raw(port, pins);
     41e:	6883      	ldr	r3, [r0, #8]
     420:	68db      	ldr	r3, [r3, #12]
     422:	3601      	adds	r6, #1
	return api->port_clear_bits_raw(port, pins);
     424:	4798      	blx	r3
     426:	2e04      	cmp	r6, #4
     428:	f105 0508 	add.w	r5, r5, #8
     42c:	d1e9      	bne.n	402 <CONFIG_FLASH_SIZE+0x2>
        gpio_pin_set_dt(&leds[i],mode);
    }
    char modeStr[20];
    snprintf(modeStr, sizeof(modeStr), "%d", mode);  //
     42e:	1d3d      	adds	r5, r7, #4
     430:	4a0e      	ldr	r2, [pc, #56]	; (46c <CONFIG_FLASH_SIZE+0x6c>)
     432:	4623      	mov	r3, r4
     434:	2114      	movs	r1, #20
     436:	4628      	mov	r0, r5
     438:	f003 f930 	bl	369c <snprintf>
    LOG_INF("Led mode: %s\n", modeStr);
     43c:	b088      	sub	sp, #32
     43e:	466a      	mov	r2, sp
     440:	4b0b      	ldr	r3, [pc, #44]	; (470 <CONFIG_FLASH_SIZE+0x70>)
     442:	e9c2 3505 	strd	r3, r5, [r2, #20]
     446:	f44f 7300 	mov.w	r3, #512	; 0x200
     44a:	8393      	strh	r3, [r2, #28]
     44c:	4b09      	ldr	r3, [pc, #36]	; (474 <CONFIG_FLASH_SIZE+0x74>)
     44e:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
     452:	4809      	ldr	r0, [pc, #36]	; (478 <CONFIG_FLASH_SIZE+0x78>)
     454:	2300      	movs	r3, #0
     456:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
     45a:	f001 fd2d 	bl	1eb8 <z_impl_z_log_msg_static_create>
     45e:	3718      	adds	r7, #24
     460:	46bd      	mov	sp, r7
     462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     466:	bf00      	nop
     468:	00007e38 	.word	0x00007e38
     46c:	00008a71 	.word	0x00008a71
     470:	000080f3 	.word	0x000080f3
     474:	01000003 	.word	0x01000003
     478:	00007dc4 	.word	0x00007dc4

0000047c <led_init>:
void led_init(){
     47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     480:	b086      	sub	sp, #24
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     482:	4823      	ldr	r0, [pc, #140]	; (510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>)
     484:	f007 f98e 	bl	77a4 <z_device_is_ready>
    if (!device_is_ready(leds[0].port)) {
     488:	4603      	mov	r3, r0
     48a:	b960      	cbnz	r0, 4a6 <led_init+0x2a>
    LOG_ERR("Device is not ready!\n");
     48c:	4a21      	ldr	r2, [pc, #132]	; (514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>)
     48e:	9205      	str	r2, [sp, #20]
     490:	2202      	movs	r2, #2
     492:	9204      	str	r2, [sp, #16]
     494:	f44f 5182 	mov.w	r1, #4160	; 0x1040
     498:	aa04      	add	r2, sp, #16
     49a:	481f      	ldr	r0, [pc, #124]	; (518 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30>)
     49c:	f001 fd0c 	bl	1eb8 <z_impl_z_log_msg_static_create>
}
     4a0:	b006      	add	sp, #24
     4a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     4a6:	4c1d      	ldr	r4, [pc, #116]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
    for (int i = 0; i < num_led; i++){
     4a8:	2600      	movs	r6, #0
		data->invert |= (gpio_port_pins_t)BIT(pin);
     4aa:	2701      	movs	r7, #1
	return gpio_pin_configure(spec->port,
     4ac:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
     4ae:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
     4b0:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
     4b2:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
     4b6:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
     4ba:	f8dc 5000 	ldr.w	r5, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
     4be:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
     4c0:	bf54      	ite	pl
     4c2:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
     4c6:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
     4ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
     4ce:	fa07 fe01 	lsl.w	lr, r7, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
     4d2:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
     4d4:	bf4c      	ite	mi
     4d6:	ea45 050e 	orrmi.w	r5, r5, lr
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     4da:	ea25 050e 	bicpl.w	r5, r5, lr
     4de:	f8cc 5000 	str.w	r5, [ip]
	return api->pin_configure(port, pin, flags);
     4e2:	f8d8 3000 	ldr.w	r3, [r8]
     4e6:	4798      	blx	r3
        if (ret < 0) {
     4e8:	2800      	cmp	r0, #0
     4ea:	dbd9      	blt.n	4a0 <led_init+0x24>
    for (int i = 0; i < num_led; i++){
     4ec:	3601      	adds	r6, #1
     4ee:	2e04      	cmp	r6, #4
     4f0:	f104 0408 	add.w	r4, r4, #8
     4f4:	d1da      	bne.n	4ac <led_init+0x30>
    led_mode(LED_ON);
     4f6:	2001      	movs	r0, #1
     4f8:	f7ff ff7a 	bl	3f0 <led_mode>
    LOG_INF("led_init() complete\n");
     4fc:	4b08      	ldr	r3, [pc, #32]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     4fe:	9305      	str	r3, [sp, #20]
     500:	2302      	movs	r3, #2
     502:	9304      	str	r3, [sp, #16]
     504:	2300      	movs	r3, #0
     506:	aa04      	add	r2, sp, #16
     508:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     50c:	e7c5      	b.n	49a <led_init+0x1e>
     50e:	bf00      	nop
     510:	00007bbc 	.word	0x00007bbc
     514:	00008101 	.word	0x00008101
     518:	00007dc4 	.word	0x00007dc4
     51c:	00007e38 	.word	0x00007e38
     520:	00008117 	.word	0x00008117

00000524 <_button_pressed>:

static struct gpio_callback callbacks[NUM_BUTTONS];

static ButtonCallback button_callback;

void _button_pressed(const struct device *dev, struct gpio_callback *callback, uint32_t pins){
     524:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (callback == &callbacks[0]) {
     526:	4b0b      	ldr	r3, [pc, #44]	; (554 <_button_pressed+0x30>)
     528:	4299      	cmp	r1, r3
     52a:	d10d      	bne.n	548 <_button_pressed+0x24>
        LOG_INF("Button CARD pressed\n");
     52c:	4b0a      	ldr	r3, [pc, #40]	; (558 <_button_pressed+0x34>)
        // button_callback(CARD_BUTTON); // Notify CARD_BUTTON press
    } else if (callback == &callbacks[1]) {
        // button_callback(PUSH_BUTTON); // Notify PUSH_BUTTON press
        LOG_INF("Button PUSH pressed\n");
     52e:	9305      	str	r3, [sp, #20]
     530:	2302      	movs	r3, #2
     532:	9304      	str	r3, [sp, #16]
     534:	4809      	ldr	r0, [pc, #36]	; (55c <_button_pressed+0x38>)
     536:	2300      	movs	r3, #0
     538:	aa04      	add	r2, sp, #16
     53a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     53e:	f001 fcbb 	bl	1eb8 <z_impl_z_log_msg_static_create>
    }
}
     542:	b007      	add	sp, #28
     544:	f85d fb04 	ldr.w	pc, [sp], #4
    } else if (callback == &callbacks[1]) {
     548:	330c      	adds	r3, #12
     54a:	4299      	cmp	r1, r3
     54c:	d1f9      	bne.n	542 <_button_pressed+0x1e>
        LOG_INF("Button PUSH pressed\n");
     54e:	4b04      	ldr	r3, [pc, #16]	; (560 <_button_pressed+0x3c>)
     550:	e7ed      	b.n	52e <_button_pressed+0xa>
     552:	bf00      	nop
     554:	20000894 	.word	0x20000894
     558:	0000812c 	.word	0x0000812c
     55c:	00007dc4 	.word	0x00007dc4
     560:	00008141 	.word	0x00008141

00000564 <button_init>:


void button_init(ButtonCallback ext_callback){
     564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     568:	b086      	sub	sp, #24
     56a:	af00      	add	r7, sp, #0
    int ret;
    LOG_INF("button_init begin.");
     56c:	4b3f      	ldr	r3, [pc, #252]	; (66c <button_init+0x108>)
     56e:	617b      	str	r3, [r7, #20]
     570:	2402      	movs	r4, #2
     572:	613c      	str	r4, [r7, #16]
     574:	483e      	ldr	r0, [pc, #248]	; (670 <button_init+0x10c>)
     576:	2300      	movs	r3, #0
     578:	f107 0210 	add.w	r2, r7, #16
     57c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     580:	f001 fc9a 	bl	1eb8 <z_impl_z_log_msg_static_create>
     584:	483b      	ldr	r0, [pc, #236]	; (674 <button_init+0x110>)
     586:	f007 f90d 	bl	77a4 <z_device_is_ready>

    if (!device_is_ready(buttons[0].port)) {
     58a:	4603      	mov	r3, r0
     58c:	b950      	cbnz	r0, 5a4 <button_init+0x40>
        LOG_ERR("Device is not ready!\n");
     58e:	4a3a      	ldr	r2, [pc, #232]	; (678 <button_init+0x114>)
     590:	e9c7 4204 	strd	r4, r2, [r7, #16]
     594:	f44f 5182 	mov.w	r1, #4160	; 0x1040
     598:	f107 0210 	add.w	r2, r7, #16
     59c:	4834      	ldr	r0, [pc, #208]	; (670 <button_init+0x10c>)
     59e:	f001 fc8b 	bl	1eb8 <z_impl_z_log_msg_static_create>
        }   
        gpio_init_callback(&callbacks[i], _button_pressed, BIT(buttons[i].pin));
        gpio_add_callback(buttons[i].port, &callbacks[i]);
    }
    button_callback = ext_callback;
    LOG_INF("button_init end.");
     5a2:	e031      	b.n	608 <button_init+0xa4>
     5a4:	4c35      	ldr	r4, [pc, #212]	; (67c <button_init+0x118>)
     5a6:	4d36      	ldr	r5, [pc, #216]	; (680 <button_init+0x11c>)
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     5a8:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 684 <button_init+0x120>
    for (int i = 0; i < NUM_BUTTONS; i++){
     5ac:	2600      	movs	r6, #0
		data->invert |= (gpio_port_pins_t)BIT(pin);
     5ae:	f04f 0801 	mov.w	r8, #1
				  spec->dt_flags | extra_flags);
     5b2:	88e3      	ldrh	r3, [r4, #6]
	return gpio_pin_configure(spec->port,
     5b4:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
     5b6:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
     5b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
	struct gpio_driver_data *data =
     5bc:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
     5c0:	f8d0 a008 	ldr.w	sl, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
     5c4:	f013 0f01 	tst.w	r3, #1
     5c8:	f8dc 3000 	ldr.w	r3, [ip]
		data->invert |= (gpio_port_pins_t)BIT(pin);
     5cc:	fa08 fe01 	lsl.w	lr, r8, r1
     5d0:	bf14      	ite	ne
     5d2:	ea4e 0303 	orrne.w	r3, lr, r3
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     5d6:	ea23 030e 	biceq.w	r3, r3, lr
     5da:	f8cc 3000 	str.w	r3, [ip]
	return api->pin_configure(port, pin, flags);
     5de:	f8da 3000 	ldr.w	r3, [sl]
     5e2:	4798      	blx	r3
        if (ret < 0) {
     5e4:	2800      	cmp	r0, #0
     5e6:	da15      	bge.n	614 <button_init+0xb0>
            LOG_ERR("Button  %d GPIO_INPUT is not configured!\n",i);
     5e8:	466c      	mov	r4, sp
     5ea:	b088      	sub	sp, #32
     5ec:	466a      	mov	r2, sp
     5ee:	4b26      	ldr	r3, [pc, #152]	; (688 <button_init+0x124>)
            LOG_ERR("Button %d iterrupt is not configured!\n",i);
     5f0:	e9c2 3605 	strd	r3, r6, [r2, #20]
     5f4:	2303      	movs	r3, #3
     5f6:	f842 3f10 	str.w	r3, [r2, #16]!
     5fa:	481d      	ldr	r0, [pc, #116]	; (670 <button_init+0x10c>)
     5fc:	2300      	movs	r3, #0
     5fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
     602:	f001 fc59 	bl	1eb8 <z_impl_z_log_msg_static_create>
     606:	46a5      	mov	sp, r4
     608:	3718      	adds	r7, #24
     60a:	46bd      	mov	sp, r7
     60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (int i = 0; i < NUM_BUTTONS; i++){
     610:	2601      	movs	r6, #1
     612:	e7ce      	b.n	5b2 <button_init+0x4e>
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
     614:	6820      	ldr	r0, [r4, #0]
     616:	7921      	ldrb	r1, [r4, #4]
	return api->pin_interrupt_configure(port, pin, mode, trig);
     618:	6883      	ldr	r3, [r0, #8]
     61a:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
     61e:	f8d3 a018 	ldr.w	sl, [r3, #24]
     622:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
     626:	47d0      	blx	sl
        if (ret < 0) {
     628:	2800      	cmp	r0, #0
     62a:	da04      	bge.n	636 <button_init+0xd2>
            LOG_ERR("Button %d iterrupt is not configured!\n",i);
     62c:	466c      	mov	r4, sp
     62e:	b088      	sub	sp, #32
     630:	466a      	mov	r2, sp
     632:	4b16      	ldr	r3, [pc, #88]	; (68c <button_init+0x128>)
     634:	e7dc      	b.n	5f0 <button_init+0x8c>
        gpio_init_callback(&callbacks[i], _button_pressed, BIT(buttons[i].pin));
     636:	7923      	ldrb	r3, [r4, #4]
        gpio_add_callback(buttons[i].port, &callbacks[i]);
     638:	6820      	ldr	r0, [r4, #0]
        gpio_init_callback(&callbacks[i], _button_pressed, BIT(buttons[i].pin));
     63a:	fa08 f303 	lsl.w	r3, r8, r3
	callback->pin_mask = pin_mask;
     63e:	e9c5 9301 	strd	r9, r3, [r5, #4]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
     642:	6883      	ldr	r3, [r0, #8]
     644:	69db      	ldr	r3, [r3, #28]
     646:	b113      	cbz	r3, 64e <button_init+0xea>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
     648:	2201      	movs	r2, #1
     64a:	4629      	mov	r1, r5
     64c:	4798      	blx	r3
    for (int i = 0; i < NUM_BUTTONS; i++){
     64e:	3408      	adds	r4, #8
     650:	350c      	adds	r5, #12
     652:	2e00      	cmp	r6, #0
     654:	d0dc      	beq.n	610 <button_init+0xac>
    LOG_INF("button_init end.");
     656:	4b0e      	ldr	r3, [pc, #56]	; (690 <button_init+0x12c>)
     658:	617b      	str	r3, [r7, #20]
     65a:	2302      	movs	r3, #2
     65c:	613b      	str	r3, [r7, #16]
     65e:	2300      	movs	r3, #0
     660:	f107 0210 	add.w	r2, r7, #16
     664:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     668:	e798      	b.n	59c <button_init+0x38>
     66a:	bf00      	nop
     66c:	00008156 	.word	0x00008156
     670:	00007dc4 	.word	0x00007dc4
     674:	00007bbc 	.word	0x00007bbc
     678:	00008101 	.word	0x00008101
     67c:	00007e58 	.word	0x00007e58
     680:	20000894 	.word	0x20000894
     684:	00000525 	.word	0x00000525
     688:	00008169 	.word	0x00008169
     68c:	00008193 	.word	0x00008193
     690:	000081ba 	.word	0x000081ba

00000694 <init>:
    sm->current_state(sm, ENTRY);
}



void init(StateMachine *sm, Event ev){
     694:	b510      	push	{r4, lr}
    switch (ev)
     696:	2901      	cmp	r1, #1
void init(StateMachine *sm, Event ev){
     698:	b086      	sub	sp, #24
     69a:	4604      	mov	r4, r0
    switch (ev)
     69c:	d017      	beq.n	6ce <init+0x3a>
     69e:	2902      	cmp	r1, #2
     6a0:	d021      	beq.n	6e6 <init+0x52>
     6a2:	2302      	movs	r3, #2
     6a4:	bb29      	cbnz	r1, 6f2 <init+0x5e>
    {
    case INIT:
        LOG_INF("init INIT");
     6a6:	4a16      	ldr	r2, [pc, #88]	; (700 <init+0x6c>)
     6a8:	4816      	ldr	r0, [pc, #88]	; (704 <init+0x70>)
     6aa:	e9cd 3204 	strd	r3, r2, [sp, #16]
     6ae:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     6b2:	aa04      	add	r2, sp, #16
     6b4:	f006 f90b 	bl	68ce <z_log_msg_static_create.constprop.0>
        sm->current_state = init;
     6b8:	4b13      	ldr	r3, [pc, #76]	; (708 <init+0x74>)
     6ba:	6023      	str	r3, [r4, #0]
        led_init();
     6bc:	f7ff fede 	bl	47c <led_init>
        transition(sm,ns_green);
     6c0:	4912      	ldr	r1, [pc, #72]	; (70c <init+0x78>)
     6c2:	4620      	mov	r0, r4
        break;    
    default:
        LOG_WRN("init ERROR default");
        break;
    }
}
     6c4:	b006      	add	sp, #24
     6c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        transition(sm,ns_green);
     6ca:	f006 b903 	b.w	68d4 <transition>
        LOG_INF("init ENTRY");
     6ce:	4b10      	ldr	r3, [pc, #64]	; (710 <init+0x7c>)
     6d0:	9305      	str	r3, [sp, #20]
     6d2:	2302      	movs	r3, #2
     6d4:	9304      	str	r3, [sp, #16]
     6d6:	aa04      	add	r2, sp, #16
     6d8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
        LOG_WRN("init ERROR default");
     6dc:	4809      	ldr	r0, [pc, #36]	; (704 <init+0x70>)
     6de:	f006 f8f6 	bl	68ce <z_log_msg_static_create.constprop.0>
}
     6e2:	b006      	add	sp, #24
     6e4:	bd10      	pop	{r4, pc}
        led_mode(LED_OFF);
     6e6:	2000      	movs	r0, #0
}
     6e8:	b006      	add	sp, #24
     6ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        led_mode(LED_OFF);
     6ee:	f7ff be7f 	b.w	3f0 <led_mode>
        LOG_WRN("init ERROR default");
     6f2:	4a08      	ldr	r2, [pc, #32]	; (714 <init+0x80>)
     6f4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
     6f8:	e9cd 3204 	strd	r3, r2, [sp, #16]
     6fc:	aa04      	add	r2, sp, #16
     6fe:	e7ed      	b.n	6dc <init+0x48>
     700:	000081cb 	.word	0x000081cb
     704:	00007dc4 	.word	0x00007dc4
     708:	00000695 	.word	0x00000695
     70c:	00000719 	.word	0x00000719
     710:	000081d5 	.word	0x000081d5
     714:	000081e0 	.word	0x000081e0

00000718 <ns_green>:

void ns_green(StateMachine *sm, Event ev){
     718:	b510      	push	{r4, lr}
    switch (ev)
     71a:	3901      	subs	r1, #1
void ns_green(StateMachine *sm, Event ev){
     71c:	b086      	sub	sp, #24
     71e:	4604      	mov	r4, r0
     720:	2302      	movs	r3, #2
    switch (ev)
     722:	2903      	cmp	r1, #3
     724:	d82a      	bhi.n	77c <ns_green+0x64>
     726:	e8df f001 	tbb	[pc, r1]
     72a:	1a02      	.short	0x1a02
     72c:	2725      	.short	0x2725
    {
    case ENTRY:
        LOG_INF("ns_green ENTRY");
     72e:	4a17      	ldr	r2, [pc, #92]	; (78c <ns_green+0x74>)
     730:	4817      	ldr	r0, [pc, #92]	; (790 <ns_green+0x78>)
     732:	e9cd 3204 	strd	r3, r2, [sp, #16]
     736:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     73a:	aa04      	add	r2, sp, #16
     73c:	f006 f8c7 	bl	68ce <z_log_msg_static_create.constprop.0>
        led_mode(LED_OFF);
     740:	2000      	movs	r0, #0
     742:	f7ff fe55 	bl	3f0 <led_mode>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     746:	2100      	movs	r1, #0
     748:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     74c:	f005 fc10 	bl	5f70 <z_impl_k_sleep>
        k_msleep(SLEEP_TIME_MS);
        transition(sm, ew_green);
     750:	4910      	ldr	r1, [pc, #64]	; (794 <ns_green+0x7c>)
     752:	4620      	mov	r0, r4
        break;    
    default:
        LOG_WRN("ns_green ERROR default");
        break;
    }
}
     754:	b006      	add	sp, #24
     756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        transition(sm, ew_green);
     75a:	f006 b8bb 	b.w	68d4 <transition>
        LOG_INF("ns_green EXIT");
     75e:	4a0e      	ldr	r2, [pc, #56]	; (798 <ns_green+0x80>)
        LOG_INF("ns_green TIMER_OUT");
     760:	e9cd 3204 	strd	r3, r2, [sp, #16]
     764:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     768:	aa04      	add	r2, sp, #16
        LOG_WRN("ns_green ERROR default");
     76a:	4809      	ldr	r0, [pc, #36]	; (790 <ns_green+0x78>)
     76c:	f006 f8af 	bl	68ce <z_log_msg_static_create.constprop.0>
}
     770:	b006      	add	sp, #24
     772:	bd10      	pop	{r4, pc}
        LOG_INF("ns_green PEDESTRIAN_BUTTON");
     774:	4a09      	ldr	r2, [pc, #36]	; (79c <ns_green+0x84>)
     776:	e7f3      	b.n	760 <ns_green+0x48>
        LOG_INF("ns_green TIMER_OUT");
     778:	4a09      	ldr	r2, [pc, #36]	; (7a0 <ns_green+0x88>)
     77a:	e7f1      	b.n	760 <ns_green+0x48>
        LOG_WRN("ns_green ERROR default");
     77c:	4a09      	ldr	r2, [pc, #36]	; (7a4 <ns_green+0x8c>)
     77e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
     782:	e9cd 3204 	strd	r3, r2, [sp, #16]
     786:	aa04      	add	r2, sp, #16
     788:	e7ef      	b.n	76a <ns_green+0x52>
     78a:	bf00      	nop
     78c:	000081f3 	.word	0x000081f3
     790:	00007dc4 	.word	0x00007dc4
     794:	000007a9 	.word	0x000007a9
     798:	00008202 	.word	0x00008202
     79c:	00008210 	.word	0x00008210
     7a0:	0000822b 	.word	0x0000822b
     7a4:	0000823e 	.word	0x0000823e

000007a8 <ew_green>:

void ew_green(StateMachine *sm, Event ev){
     7a8:	b510      	push	{r4, lr}
    switch (ev)
     7aa:	3901      	subs	r1, #1
void ew_green(StateMachine *sm, Event ev){
     7ac:	b086      	sub	sp, #24
     7ae:	4604      	mov	r4, r0
     7b0:	2302      	movs	r3, #2
    switch (ev)
     7b2:	2903      	cmp	r1, #3
     7b4:	d82a      	bhi.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
     7b6:	e8df f001 	tbb	[pc, r1]
     7ba:	1a02      	.short	0x1a02
     7bc:	2725      	.short	0x2725
    {
    case ENTRY:
        LOG_INF("ew_green ENTRY");
     7be:	4a17      	ldr	r2, [pc, #92]	; (81c <CONFIG_ISR_STACK_SIZE+0x1c>)
     7c0:	4817      	ldr	r0, [pc, #92]	; (820 <CONFIG_ISR_STACK_SIZE+0x20>)
     7c2:	e9cd 3204 	strd	r3, r2, [sp, #16]
     7c6:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     7ca:	aa04      	add	r2, sp, #16
     7cc:	f006 f87f 	bl	68ce <z_log_msg_static_create.constprop.0>
        led_mode(LED_ON);
     7d0:	2001      	movs	r0, #1
     7d2:	f7ff fe0d 	bl	3f0 <led_mode>
     7d6:	2100      	movs	r1, #0
     7d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     7dc:	f005 fbc8 	bl	5f70 <z_impl_k_sleep>
        k_msleep(SLEEP_TIME_MS);
        // k_timer_start(&light_timer,K_SECONDS(3), K_NO_WAIT);
        transition(sm, ns_green);
     7e0:	4910      	ldr	r1, [pc, #64]	; (824 <CONFIG_ISR_STACK_SIZE+0x24>)
     7e2:	4620      	mov	r0, r4
        break;    
    default:
        LOG_WRN("ew_green ERROR default");
        break;
    }
}
     7e4:	b006      	add	sp, #24
     7e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        transition(sm, ns_green);
     7ea:	f006 b873 	b.w	68d4 <transition>
        LOG_INF("ew_green EXIT");
     7ee:	4a0e      	ldr	r2, [pc, #56]	; (828 <CONFIG_ISR_STACK_SIZE+0x28>)
        LOG_INF("ew_green TIMER_OUT");
     7f0:	e9cd 3204 	strd	r3, r2, [sp, #16]
     7f4:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     7f8:	aa04      	add	r2, sp, #16
        LOG_WRN("ew_green ERROR default");
     7fa:	4809      	ldr	r0, [pc, #36]	; (820 <CONFIG_ISR_STACK_SIZE+0x20>)
     7fc:	f006 f867 	bl	68ce <z_log_msg_static_create.constprop.0>
}
     800:	b006      	add	sp, #24
     802:	bd10      	pop	{r4, pc}
        LOG_INF("ew_green PEDESTRIAN_BUTTON");
     804:	4a09      	ldr	r2, [pc, #36]	; (82c <CONFIG_ISR_STACK_SIZE+0x2c>)
     806:	e7f3      	b.n	7f0 <ew_green+0x48>
        LOG_INF("ew_green TIMER_OUT");
     808:	4a09      	ldr	r2, [pc, #36]	; (830 <CONFIG_ISR_STACK_SIZE+0x30>)
     80a:	e7f1      	b.n	7f0 <ew_green+0x48>
        LOG_WRN("ew_green ERROR default");
     80c:	4a09      	ldr	r2, [pc, #36]	; (834 <CONFIG_ISR_STACK_SIZE+0x34>)
     80e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
     812:	e9cd 3204 	strd	r3, r2, [sp, #16]
     816:	aa04      	add	r2, sp, #16
     818:	e7ef      	b.n	7fa <ew_green+0x52>
     81a:	bf00      	nop
     81c:	00008255 	.word	0x00008255
     820:	00007dc4 	.word	0x00007dc4
     824:	00000719 	.word	0x00000719
     828:	00008264 	.word	0x00008264
     82c:	00008272 	.word	0x00008272
     830:	0000828d 	.word	0x0000828d
     834:	000082a0 	.word	0x000082a0

00000838 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     83c:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     83e:	0784      	lsls	r4, r0, #30
{
     840:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     842:	f002 0304 	and.w	r3, r2, #4
     846:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     848:	f3c2 03c2 	ubfx	r3, r2, #3, #3
     84c:	f103 0301 	add.w	r3, r3, #1
     850:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
     854:	9203      	str	r2, [sp, #12]
     856:	4605      	mov	r5, r0
     858:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     85a:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
     85c:	f040 81be 	bne.w	bdc <__z_interrupt_stack_SIZEOF+0x39c>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
     860:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     862:	b130      	cbz	r0, 872 <__z_interrupt_stack_SIZEOF+0x32>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     864:	2907      	cmp	r1, #7
     866:	d809      	bhi.n	87c <__z_interrupt_stack_SIZEOF+0x3c>
		return -ENOSPC;
     868:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     86c:	b011      	add	sp, #68	; 0x44
     86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     872:	f001 0607 	and.w	r6, r1, #7
     876:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     878:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
     87c:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     87e:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
     882:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
     884:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
     888:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     88c:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     88e:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     892:	464f      	mov	r7, r9
	bool parsing = false;
     894:	46cb      	mov	fp, r9
	size = sizeof(char *);
     896:	4653      	mov	r3, sl
			if (buf0 != NULL) {
     898:	b10d      	cbz	r5, 89e <__z_interrupt_stack_SIZEOF+0x5e>
				*(const char **)buf = s;
     89a:	9a00      	ldr	r2, [sp, #0]
     89c:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     89e:	9805      	ldr	r0, [sp, #20]
     8a0:	2800      	cmp	r0, #0
     8a2:	f300 80eb 	bgt.w	a7c <__z_interrupt_stack_SIZEOF+0x23c>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     8a6:	489a      	ldr	r0, [pc, #616]	; (b10 <__z_interrupt_stack_SIZEOF+0x2d0>)
     8a8:	9a00      	ldr	r2, [sp, #0]
     8aa:	4282      	cmp	r2, r0
     8ac:	d303      	bcc.n	8b6 <__z_interrupt_stack_SIZEOF+0x76>
     8ae:	4899      	ldr	r0, [pc, #612]	; (b14 <__z_interrupt_stack_SIZEOF+0x2d4>)
     8b0:	4282      	cmp	r2, r0
     8b2:	f0c0 80e3 	bcc.w	a7c <__z_interrupt_stack_SIZEOF+0x23c>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     8b6:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     8b8:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     8bc:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     8be:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     8c2:	f100 8106 	bmi.w	ad2 <__z_interrupt_stack_SIZEOF+0x292>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     8c6:	2f0f      	cmp	r7, #15
     8c8:	f200 80b4 	bhi.w	a34 <__z_interrupt_stack_SIZEOF+0x1f4>
				if (buf0 != NULL) {
     8cc:	2d00      	cmp	r5, #0
     8ce:	f000 8108 	beq.w	ae2 <__z_interrupt_stack_SIZEOF+0x2a2>
					str_ptr_pos[s_idx] = s_ptr_idx;
     8d2:	f107 0240 	add.w	r2, r7, #64	; 0x40
     8d6:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
     8da:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
     8dc:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
     8e0:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
     8e4:	9804      	ldr	r0, [sp, #16]
     8e6:	3001      	adds	r0, #1
     8e8:	9004      	str	r0, [sp, #16]
     8ea:	e0ea      	b.n	ac2 <__z_interrupt_stack_SIZEOF+0x282>
			switch (*fmt) {
     8ec:	287a      	cmp	r0, #122	; 0x7a
     8ee:	d860      	bhi.n	9b2 <__z_interrupt_stack_SIZEOF+0x172>
     8f0:	284b      	cmp	r0, #75	; 0x4b
     8f2:	d80e      	bhi.n	912 <__z_interrupt_stack_SIZEOF+0xd2>
     8f4:	2847      	cmp	r0, #71	; 0x47
     8f6:	d85c      	bhi.n	9b2 <__z_interrupt_stack_SIZEOF+0x172>
     8f8:	2829      	cmp	r0, #41	; 0x29
     8fa:	d82f      	bhi.n	95c <__z_interrupt_stack_SIZEOF+0x11c>
     8fc:	2825      	cmp	r0, #37	; 0x25
     8fe:	d055      	beq.n	9ac <__z_interrupt_stack_SIZEOF+0x16c>
     900:	d857      	bhi.n	9b2 <__z_interrupt_stack_SIZEOF+0x172>
     902:	2820      	cmp	r0, #32
     904:	d07d      	beq.n	a02 <__z_interrupt_stack_SIZEOF+0x1c2>
     906:	3823      	subs	r0, #35	; 0x23
     908:	f1d0 0b00 	rsbs	fp, r0, #0
     90c:	eb4b 0b00 	adc.w	fp, fp, r0
     910:	e077      	b.n	a02 <__z_interrupt_stack_SIZEOF+0x1c2>
     912:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
     916:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
     91a:	d84a      	bhi.n	9b2 <__z_interrupt_stack_SIZEOF+0x172>
     91c:	e8df f00c 	tbb	[pc, ip]
     920:	49494971 	.word	0x49494971
     924:	49494949 	.word	0x49494949
     928:	49494949 	.word	0x49494949
     92c:	4949494c 	.word	0x4949494c
     930:	49494949 	.word	0x49494949
     934:	4c495a49 	.word	0x4c495a49
     938:	5a5a5a4c 	.word	0x5a5a5a4c
     93c:	496e4c71 	.word	0x496e4c71
     940:	4c184971 	.word	0x4c184971
     944:	83494918 	.word	0x83494918
     948:	49494c80 	.word	0x49494c80
     94c:	494c      	.short	0x494c
     94e:	80          	.byte	0x80
     94f:	00          	.byte	0x00
     950:	2000      	movs	r0, #0
     952:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
     956:	f04f 0a04 	mov.w	sl, #4
     95a:	e039      	b.n	9d0 <__z_interrupt_stack_SIZEOF+0x190>
			switch (*fmt) {
     95c:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
     960:	fa5f fc8c 	uxtb.w	ip, ip
     964:	2201      	movs	r2, #1
     966:	fa02 fc0c 	lsl.w	ip, r2, ip
     96a:	ea1c 0f0e 	tst.w	ip, lr
     96e:	d148      	bne.n	a02 <__z_interrupt_stack_SIZEOF+0x1c2>
     970:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
     974:	d12e      	bne.n	9d4 <__z_interrupt_stack_SIZEOF+0x194>
     976:	ea1c 0b02 	ands.w	fp, ip, r2
     97a:	d042      	beq.n	a02 <__z_interrupt_stack_SIZEOF+0x1c2>
		buf = (void *) ROUND_UP(buf, align);
     97c:	3c01      	subs	r4, #1
     97e:	4454      	add	r4, sl
     980:	f1ca 0c00 	rsb	ip, sl, #0
     984:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     988:	2d00      	cmp	r5, #0
     98a:	d061      	beq.n	a50 <__z_interrupt_stack_SIZEOF+0x210>
     98c:	eba3 0c05 	sub.w	ip, r3, r5
     990:	44a4      	add	ip, r4
     992:	45b4      	cmp	ip, r6
     994:	f63f af68 	bhi.w	868 <__z_interrupt_stack_SIZEOF+0x28>
		if (is_str_arg) {
     998:	2800      	cmp	r0, #0
     99a:	d168      	bne.n	a6e <__z_interrupt_stack_SIZEOF+0x22e>
		} else if (size == sizeof(int)) {
     99c:	2b04      	cmp	r3, #4
     99e:	d147      	bne.n	a30 <__z_interrupt_stack_SIZEOF+0x1f0>
			int v = va_arg(ap, int);
     9a0:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
     9a4:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
     9a6:	3404      	adds	r4, #4
     9a8:	2304      	movs	r3, #4
     9aa:	e02a      	b.n	a02 <__z_interrupt_stack_SIZEOF+0x1c2>
				arg_idx--;
     9ac:	9a01      	ldr	r2, [sp, #4]
     9ae:	3a01      	subs	r2, #1
     9b0:	9201      	str	r2, [sp, #4]
				parsing = false;
     9b2:	f04f 0b00 	mov.w	fp, #0
				continue;
     9b6:	e024      	b.n	a02 <__z_interrupt_stack_SIZEOF+0x1c2>
				if (fmt[-1] == 'l') {
     9b8:	f811 0c01 	ldrb.w	r0, [r1, #-1]
     9bc:	286c      	cmp	r0, #108	; 0x6c
     9be:	d134      	bne.n	a2a <__z_interrupt_stack_SIZEOF+0x1ea>
					if (fmt[-2] == 'l') {
     9c0:	f811 3c02 	ldrb.w	r3, [r1, #-2]
     9c4:	2000      	movs	r0, #0
     9c6:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
     9c8:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
     9ca:	d1c4      	bne.n	956 <__z_interrupt_stack_SIZEOF+0x116>
						align = VA_STACK_ALIGN(long long);
     9cc:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
     9d0:	4653      	mov	r3, sl
     9d2:	e7d3      	b.n	97c <__z_interrupt_stack_SIZEOF+0x13c>
					v.ld = va_arg(ap, long double);
     9d4:	f108 0807 	add.w	r8, r8, #7
     9d8:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
     9dc:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
     9de:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
     9e2:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
     9e6:	b135      	cbz	r5, 9f6 <__z_interrupt_stack_SIZEOF+0x1b6>
					if (BUF_OFFSET + size > len) {
     9e8:	9806      	ldr	r0, [sp, #24]
     9ea:	4420      	add	r0, r4
     9ec:	42b0      	cmp	r0, r6
     9ee:	f63f af3b 	bhi.w	868 <__z_interrupt_stack_SIZEOF+0x28>
						*(long double *)buf = v.ld;
     9f2:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
     9f6:	3408      	adds	r4, #8
				parsing = false;
     9f8:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
     9fc:	f04f 0a08 	mov.w	sl, #8
     a00:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
     a02:	f811 0f01 	ldrb.w	r0, [r1, #1]!
     a06:	2800      	cmp	r0, #0
     a08:	d078      	beq.n	afc <__z_interrupt_stack_SIZEOF+0x2bc>
			if (!parsing) {
     a0a:	f1bb 0f00 	cmp.w	fp, #0
     a0e:	f47f af6d 	bne.w	8ec <__z_interrupt_stack_SIZEOF+0xac>
				if (*fmt == '%') {
     a12:	2825      	cmp	r0, #37	; 0x25
     a14:	d1f5      	bne.n	a02 <__z_interrupt_stack_SIZEOF+0x1c2>
					arg_idx++;
     a16:	9b01      	ldr	r3, [sp, #4]
     a18:	3301      	adds	r3, #1
     a1a:	9301      	str	r3, [sp, #4]
					parsing = true;
     a1c:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
     a20:	f04f 0a04 	mov.w	sl, #4
     a24:	e7ec      	b.n	a00 <__z_interrupt_stack_SIZEOF+0x1c0>
			switch (*fmt) {
     a26:	4658      	mov	r0, fp
     a28:	e793      	b.n	952 <__z_interrupt_stack_SIZEOF+0x112>
     a2a:	2000      	movs	r0, #0
				parsing = false;
     a2c:	4683      	mov	fp, r0
     a2e:	e7a5      	b.n	97c <__z_interrupt_stack_SIZEOF+0x13c>
		} else if (size == sizeof(long long)) {
     a30:	2b08      	cmp	r3, #8
     a32:	d002      	beq.n	a3a <__z_interrupt_stack_SIZEOF+0x1fa>
					return -EINVAL;
     a34:	f06f 0015 	mvn.w	r0, #21
     a38:	e718      	b.n	86c <__z_interrupt_stack_SIZEOF+0x2c>
			long long v = va_arg(ap, long long);
     a3a:	f108 0807 	add.w	r8, r8, #7
     a3e:	f028 0807 	bic.w	r8, r8, #7
     a42:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
     a46:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
     a4a:	3408      	adds	r4, #8
     a4c:	2308      	movs	r3, #8
     a4e:	e7d8      	b.n	a02 <__z_interrupt_stack_SIZEOF+0x1c2>
		if (is_str_arg) {
     a50:	b968      	cbnz	r0, a6e <__z_interrupt_stack_SIZEOF+0x22e>
		} else if (size == sizeof(int)) {
     a52:	2b04      	cmp	r3, #4
     a54:	d102      	bne.n	a5c <__z_interrupt_stack_SIZEOF+0x21c>
			int v = va_arg(ap, int);
     a56:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
     a5a:	e7a4      	b.n	9a6 <__z_interrupt_stack_SIZEOF+0x166>
		} else if (size == sizeof(long long)) {
     a5c:	2b08      	cmp	r3, #8
     a5e:	d1e9      	bne.n	a34 <__z_interrupt_stack_SIZEOF+0x1f4>
			long long v = va_arg(ap, long long);
     a60:	f108 0807 	add.w	r8, r8, #7
     a64:	f028 0807 	bic.w	r8, r8, #7
     a68:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
     a6c:	e7ed      	b.n	a4a <__z_interrupt_stack_SIZEOF+0x20a>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     a6e:	9a05      	ldr	r2, [sp, #20]
     a70:	3a01      	subs	r2, #1
     a72:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
     a74:	f858 2b04 	ldr.w	r2, [r8], #4
     a78:	9200      	str	r2, [sp, #0]
     a7a:	e70d      	b.n	898 <__z_interrupt_stack_SIZEOF+0x58>
			if (is_ro && !do_ro) {
     a7c:	9a03      	ldr	r2, [sp, #12]
     a7e:	0790      	lsls	r0, r2, #30
     a80:	d520      	bpl.n	ac4 <__z_interrupt_stack_SIZEOF+0x284>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     a82:	eba4 0e05 	sub.w	lr, r4, r5
     a86:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     a8a:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     a8e:	f5be 7f00 	cmp.w	lr, #512	; 0x200
     a92:	d2cf      	bcs.n	a34 <__z_interrupt_stack_SIZEOF+0x1f4>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     a94:	2f0f      	cmp	r7, #15
     a96:	d8cd      	bhi.n	a34 <__z_interrupt_stack_SIZEOF+0x1f4>
				if (buf0 != NULL) {
     a98:	b1f5      	cbz	r5, ad8 <__z_interrupt_stack_SIZEOF+0x298>
					str_ptr_pos[s_idx] = s_ptr_idx;
     a9a:	f107 0240 	add.w	r2, r7, #64	; 0x40
     a9e:	eb0d 0e02 	add.w	lr, sp, r2
     aa2:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
     aa4:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
     aa6:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
     aaa:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
     aae:	f1bc 0f00 	cmp.w	ip, #0
     ab2:	f43f af17 	beq.w	8e4 <__z_interrupt_stack_SIZEOF+0xa4>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     ab6:	f060 007f 	orn	r0, r0, #127	; 0x7f
     aba:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
     abe:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
     ac2:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
     ac4:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
     ac8:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
     aca:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
     acc:	f64f 7eda 	movw	lr, #65498	; 0xffda
     ad0:	e797      	b.n	a02 <__z_interrupt_stack_SIZEOF+0x1c2>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     ad2:	f04f 0c00 	mov.w	ip, #0
     ad6:	e7da      	b.n	a8e <__z_interrupt_stack_SIZEOF+0x24e>
				} else if (is_ro) {
     ad8:	f1bc 0f00 	cmp.w	ip, #0
     adc:	d001      	beq.n	ae2 <__z_interrupt_stack_SIZEOF+0x2a2>
					len += 1;
     ade:	3601      	adds	r6, #1
     ae0:	e7ef      	b.n	ac2 <__z_interrupt_stack_SIZEOF+0x282>
				} else if (rws_pos_en) {
     ae2:	9802      	ldr	r0, [sp, #8]
					len += 2;
     ae4:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
     ae6:	2800      	cmp	r0, #0
     ae8:	d1eb      	bne.n	ac2 <__z_interrupt_stack_SIZEOF+0x282>
					len += strlen(s) + 1 + 1;
     aea:	9800      	ldr	r0, [sp, #0]
     aec:	e9cd 3106 	strd	r3, r1, [sp, #24]
     af0:	f006 fbe5 	bl	72be <strlen>
     af4:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
     af8:	4406      	add	r6, r0
     afa:	e7e2      	b.n	ac2 <__z_interrupt_stack_SIZEOF+0x282>
	if (BUF_OFFSET / sizeof(int) > 255) {
     afc:	1b63      	subs	r3, r4, r5
     afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     b02:	d297      	bcs.n	a34 <__z_interrupt_stack_SIZEOF+0x1f4>
	if (buf0 == NULL) {
     b04:	b945      	cbnz	r5, b18 <__z_interrupt_stack_SIZEOF+0x2d8>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     b06:	f1a6 0408 	sub.w	r4, r6, #8
     b0a:	18e0      	adds	r0, r4, r3
     b0c:	e6ae      	b.n	86c <__z_interrupt_stack_SIZEOF+0x2c>
     b0e:	bf00      	nop
     b10:	00007b2c 	.word	0x00007b2c
     b14:	00008b30 	.word	0x00008b30
	if (rws_pos_en) {
     b18:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
     b1a:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     b1c:	089b      	lsrs	r3, r3, #2
     b1e:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     b20:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
     b24:	b1c2      	cbz	r2, b58 <__z_interrupt_stack_SIZEOF+0x318>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     b26:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     b28:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
     b2c:	f1b9 0f00 	cmp.w	r9, #0
     b30:	d005      	beq.n	b3e <__z_interrupt_stack_SIZEOF+0x2fe>
     b32:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
     b34:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
     b36:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
     b3a:	4297      	cmp	r7, r2
     b3c:	d10e      	bne.n	b5c <__z_interrupt_stack_SIZEOF+0x31c>
		if (BUF_OFFSET + 1 + size > len) {
     b3e:	f1c5 0301 	rsb	r3, r5, #1
     b42:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
     b46:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
     b4a:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
     b4c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
     b50:	4557      	cmp	r7, sl
     b52:	d112      	bne.n	b7a <__z_interrupt_stack_SIZEOF+0x33a>
	return BUF_OFFSET;
     b54:	1b60      	subs	r0, r4, r5
     b56:	e689      	b.n	86c <__z_interrupt_stack_SIZEOF+0x2c>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     b58:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
     b5a:	e7e5      	b.n	b28 <__z_interrupt_stack_SIZEOF+0x2e8>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     b5c:	f810 3b01 	ldrb.w	r3, [r0], #1
     b60:	0619      	lsls	r1, r3, #24
     b62:	d508      	bpl.n	b76 <__z_interrupt_stack_SIZEOF+0x336>
			if (BUF_OFFSET + 1 > len) {
     b64:	eb04 0e0c 	add.w	lr, r4, ip
     b68:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     b6e:	f63f ae7b 	bhi.w	868 <__z_interrupt_stack_SIZEOF+0x28>
			*buf++ = pos;
     b72:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
     b76:	3201      	adds	r2, #1
     b78:	e7df      	b.n	b3a <__z_interrupt_stack_SIZEOF+0x2fa>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     b7a:	f1b9 0f00 	cmp.w	r9, #0
     b7e:	d003      	beq.n	b88 <__z_interrupt_stack_SIZEOF+0x348>
     b80:	f998 2000 	ldrsb.w	r2, [r8]
     b84:	2a00      	cmp	r2, #0
     b86:	db17      	blt.n	bb8 <__z_interrupt_stack_SIZEOF+0x378>
		if (rws_pos_en) {
     b88:	9b02      	ldr	r3, [sp, #8]
     b8a:	b1d3      	cbz	r3, bc2 <__z_interrupt_stack_SIZEOF+0x382>
			*buf++ = str_ptr_arg[i];
     b8c:	f81a 200b 	ldrb.w	r2, [sl, fp]
     b90:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
     b94:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
     b96:	9b01      	ldr	r3, [sp, #4]
     b98:	1898      	adds	r0, r3, r2
     b9a:	4420      	add	r0, r4
     b9c:	42b0      	cmp	r0, r6
     b9e:	f63f ae63 	bhi.w	868 <__z_interrupt_stack_SIZEOF+0x28>
		*buf++ = str_ptr_pos[i];
     ba2:	f898 0000 	ldrb.w	r0, [r8]
     ba6:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
     baa:	9900      	ldr	r1, [sp, #0]
     bac:	9203      	str	r2, [sp, #12]
     bae:	4620      	mov	r0, r4
     bb0:	f006 fb95 	bl	72de <memcpy>
		buf += size;
     bb4:	9a03      	ldr	r2, [sp, #12]
     bb6:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
     bb8:	f10a 0a01 	add.w	sl, sl, #1
     bbc:	f108 0801 	add.w	r8, r8, #1
     bc0:	e7c6      	b.n	b50 <__z_interrupt_stack_SIZEOF+0x310>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     bc2:	f898 2000 	ldrb.w	r2, [r8]
     bc6:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
     bca:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     bcc:	9b02      	ldr	r3, [sp, #8]
     bce:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
     bd2:	9800      	ldr	r0, [sp, #0]
     bd4:	f006 fb73 	bl	72be <strlen>
     bd8:	1c42      	adds	r2, r0, #1
     bda:	e7dc      	b.n	b96 <__z_interrupt_stack_SIZEOF+0x356>
		return -EFAULT;
     bdc:	f06f 000d 	mvn.w	r0, #13
     be0:	e644      	b.n	86c <__z_interrupt_stack_SIZEOF+0x2c>
     be2:	bf00      	nop

00000be4 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
     be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     be8:	b095      	sub	sp, #84	; 0x54
     bea:	af00      	add	r7, sp, #0
     bec:	4604      	mov	r4, r0
     bee:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
     bf2:	61bb      	str	r3, [r7, #24]
     bf4:	f3cb 03c0 	ubfx	r3, fp, #3, #1
     bf8:	627a      	str	r2, [r7, #36]	; 0x24
     bfa:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
     bfc:	6239      	str	r1, [r7, #32]
     bfe:	b951      	cbnz	r1, c16 <cbprintf_package_convert+0x32>
	buf += ros_nbr;
     c00:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
     c02:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
     c04:	7880      	ldrb	r0, [r0, #2]
     c06:	eb00 0083 	add.w	r0, r0, r3, lsl #2
     c0a:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
     c0c:	6a3b      	ldr	r3, [r7, #32]
     c0e:	429e      	cmp	r6, r3
     c10:	d81a      	bhi.n	c48 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
     c12:	1b03      	subs	r3, r0, r4
     c14:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
     c16:	f894 a002 	ldrb.w	sl, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
     c1a:	78e3      	ldrb	r3, [r4, #3]
     c1c:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
     c1e:	4656      	mov	r6, sl
	ro_cpy = ros_nbr &&
     c20:	f1ba 0f00 	cmp.w	sl, #0
     c24:	d002      	beq.n	c2c <cbprintf_package_convert+0x48>
     c26:	f01b 0f01 	tst.w	fp, #1
     c2a:	d117      	bne.n	c5c <cbprintf_package_convert+0x78>
	rw_cpy = rws_nbr > 0 &&
     c2c:	697b      	ldr	r3, [r7, #20]
     c2e:	bb5b      	cbnz	r3, c88 <cbprintf_package_convert+0xa4>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
     c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     c32:	b11b      	cbz	r3, c3c <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
     c34:	69ba      	ldr	r2, [r7, #24]
     c36:	6a39      	ldr	r1, [r7, #32]
     c38:	4620      	mov	r0, r4
     c3a:	4798      	blx	r3
		}

		return in_len;
     c3c:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
     c3e:	4628      	mov	r0, r5
     c40:	3754      	adds	r7, #84	; 0x54
     c42:	46bd      	mov	sp, r7
     c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
     c48:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
     c4a:	4628      	mov	r0, r5
     c4c:	f006 fb37 	bl	72be <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
     c50:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
     c52:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
     c54:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
     c56:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
     c58:	623b      	str	r3, [r7, #32]
     c5a:	e7d7      	b.n	c0c <cbprintf_package_convert+0x28>
	rw_cpy = rws_nbr > 0 &&
     c5c:	f894 8000 	ldrb.w	r8, [r4]
     c60:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
     c62:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
     c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
     c66:	ea4f 0288 	mov.w	r2, r8, lsl #2
     c6a:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
     c6c:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
     c70:	2b00      	cmp	r3, #0
     c72:	f040 8101 	bne.w	e78 <cbprintf_package_convert+0x294>
		out_len = (int)in_len;
     c76:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
     c78:	46c1      	mov	r9, r8
     c7a:	eb0a 0308 	add.w	r3, sl, r8
	size_t strl_cnt = 0;
     c7e:	2600      	movs	r6, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
     c80:	454b      	cmp	r3, r9
     c82:	d14e      	bne.n	d22 <cbprintf_package_convert+0x13e>
     c84:	44d0      	add	r8, sl
     c86:	e013      	b.n	cb0 <cbprintf_package_convert+0xcc>
	rw_cpy = rws_nbr > 0 &&
     c88:	f01b 0f02 	tst.w	fp, #2
     c8c:	d0d0      	beq.n	c30 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
     c8e:	f894 8000 	ldrb.w	r8, [r4]
     c92:	ea4f 0388 	mov.w	r3, r8, lsl #2
     c96:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
     c98:	6863      	ldr	r3, [r4, #4]
     c9a:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
     c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
     c9e:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
     ca2:	2b00      	cmp	r3, #0
     ca4:	d178      	bne.n	d98 <cbprintf_package_convert+0x1b4>
		out_len = (int)in_len;
     ca6:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     ca8:	f1ba 0f00 	cmp.w	sl, #0
     cac:	d14e      	bne.n	d4c <cbprintf_package_convert+0x168>
	size_t strl_cnt = 0;
     cae:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
     cb0:	f01b 0f05 	tst.w	fp, #5
     cb4:	bf0c      	ite	eq
     cb6:	2302      	moveq	r3, #2
     cb8:	2301      	movne	r3, #1
     cba:	627b      	str	r3, [r7, #36]	; 0x24
     cbc:	697b      	ldr	r3, [r7, #20]
     cbe:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     cc2:	f00b 0302 	and.w	r3, fp, #2
     cc6:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
     cc8:	45d0      	cmp	r8, sl
     cca:	d0b8      	beq.n	c3e <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
     ccc:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
     cd0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
     cd4:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
     cd8:	4bac      	ldr	r3, [pc, #688]	; (f8c <cbprintf_package_convert+0x3a8>)
     cda:	4599      	cmp	r9, r3
     cdc:	d302      	bcc.n	ce4 <cbprintf_package_convert+0x100>
     cde:	4bac      	ldr	r3, [pc, #688]	; (f90 <cbprintf_package_convert+0x3ac>)
     ce0:	4599      	cmp	r9, r3
     ce2:	d339      	bcc.n	d58 <cbprintf_package_convert+0x174>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
     ce4:	693b      	ldr	r3, [r7, #16]
     ce6:	2b00      	cmp	r3, #0
     ce8:	d043      	beq.n	d72 <cbprintf_package_convert+0x18e>
     cea:	69f8      	ldr	r0, [r7, #28]
     cec:	f005 fe30 	bl	6950 <is_ptr>
     cf0:	2800      	cmp	r0, #0
     cf2:	d03e      	beq.n	d72 <cbprintf_package_convert+0x18e>
				LOG_WRN("(unsigned) char * used for %%p argument. "
     cf4:	46e9      	mov	r9, sp
     cf6:	b08a      	sub	sp, #40	; 0x28
     cf8:	466a      	mov	r2, sp
     cfa:	4ba6      	ldr	r3, [pc, #664]	; (f94 <cbprintf_package_convert+0x3b0>)
     cfc:	6153      	str	r3, [r2, #20]
     cfe:	69fb      	ldr	r3, [r7, #28]
     d00:	e9c2 3106 	strd	r3, r1, [r2, #24]
     d04:	f44f 7300 	mov.w	r3, #512	; 0x200
     d08:	8413      	strh	r3, [r2, #32]
     d0a:	4ba3      	ldr	r3, [pc, #652]	; (f98 <cbprintf_package_convert+0x3b4>)
     d0c:	f842 3f10 	str.w	r3, [r2, #16]!
     d10:	48a2      	ldr	r0, [pc, #648]	; (f9c <cbprintf_package_convert+0x3b8>)
     d12:	2300      	movs	r3, #0
     d14:	f44f 5112 	mov.w	r1, #9344	; 0x2480
     d18:	f001 f8ce 	bl	1eb8 <z_impl_z_log_msg_static_create>
				out_len -= 2;
     d1c:	3d02      	subs	r5, #2
     d1e:	46cd      	mov	sp, r9
				continue;
     d20:	e7d2      	b.n	cc8 <cbprintf_package_convert+0xe4>
				const char *str = *(const char **)&buf32[*str_pos];
     d22:	f819 2b01 	ldrb.w	r2, [r9], #1
     d26:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
     d28:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
     d2c:	f006 fac7 	bl	72be <strlen>
				if (strl && strl_cnt < strl_len) {
     d30:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
     d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
     d34:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     d36:	b13a      	cbz	r2, d48 <cbprintf_package_convert+0x164>
     d38:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
     d3c:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
     d3e:	bf3e      	ittt	cc
     d40:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
     d42:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
     d46:	3601      	addcc	r6, #1
				out_len += len;
     d48:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
     d4a:	e799      	b.n	c80 <cbprintf_package_convert+0x9c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     d4c:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
     d50:	bf1c      	itt	ne
     d52:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
     d54:	44d0      	addne	r8, sl
     d56:	e7ab      	b.n	cb0 <cbprintf_package_convert+0xcc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
     d58:	693b      	ldr	r3, [r7, #16]
     d5a:	b123      	cbz	r3, d66 <cbprintf_package_convert+0x182>
     d5c:	69f8      	ldr	r0, [r7, #28]
     d5e:	f005 fdf7 	bl	6950 <is_ptr>
     d62:	2800      	cmp	r0, #0
     d64:	d1c6      	bne.n	cf4 <cbprintf_package_convert+0x110>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
     d66:	f01b 0f01 	tst.w	fp, #1
     d6a:	d105      	bne.n	d78 <cbprintf_package_convert+0x194>
					out_len -= drop_ro_str_pos ? 2 : 1;
     d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d6e:	1aed      	subs	r5, r5, r3
     d70:	e7aa      	b.n	cc8 <cbprintf_package_convert+0xe4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     d72:	6a3b      	ldr	r3, [r7, #32]
     d74:	2b00      	cmp	r3, #0
     d76:	d0a7      	beq.n	cc8 <cbprintf_package_convert+0xe4>
		return 1 + strlen(str);
     d78:	4648      	mov	r0, r9
     d7a:	f006 faa0 	bl	72be <strlen>
				if (strl && strl_cnt < strl_len) {
     d7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
     d80:	b143      	cbz	r3, d94 <cbprintf_package_convert+0x1b0>
     d82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     d86:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
     d88:	bf3f      	itttt	cc
     d8a:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
     d8c:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
     d8e:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
     d92:	3601      	addcc	r6, #1
				out_len += (len - 1);
     d94:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
     d96:	e797      	b.n	cc8 <cbprintf_package_convert+0xe4>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     d98:	f1ba 0f00 	cmp.w	sl, #0
     d9c:	d071      	beq.n	e82 <cbprintf_package_convert+0x29e>
     d9e:	f01b 0604 	ands.w	r6, fp, #4
     da2:	d071      	beq.n	e88 <cbprintf_package_convert+0x2a4>
		keep_cnt = ros_nbr;
     da4:	46d1      	mov	r9, sl
		scpy_cnt = 0;
     da6:	2600      	movs	r6, #0
		dst = keep_str_pos;
     da8:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
     dac:	4652      	mov	r2, sl
     dae:	4641      	mov	r1, r8
     db0:	f006 fa95 	bl	72de <memcpy>
	str_pos += ros_nbr;
     db4:	697b      	ldr	r3, [r7, #20]
     db6:	005b      	lsls	r3, r3, #1
     db8:	60bb      	str	r3, [r7, #8]
     dba:	697b      	ldr	r3, [r7, #20]
     dbc:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
     dbe:	eb08 0343 	add.w	r3, r8, r3, lsl #1
     dc2:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     dc4:	f00b 0302 	and.w	r3, fp, #2
     dc8:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
     dca:	697b      	ldr	r3, [r7, #20]
     dcc:	4598      	cmp	r8, r3
     dce:	d15d      	bne.n	e8c <cbprintf_package_convert+0x2a8>
	out_desc.len = in_desc->len;
     dd0:	7823      	ldrb	r3, [r4, #0]
     dd2:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     dd4:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
     dd6:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     dda:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
     dde:	bf0c      	ite	eq
     de0:	ea4f 0159 	moveq.w	r1, r9, lsr #1
     de4:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
     de6:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     dea:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
     dec:	f040 809d 	bne.w	f2a <cbprintf_package_convert+0x346>
     df0:	f01b 0f04 	tst.w	fp, #4
     df4:	bf14      	ite	ne
     df6:	4648      	movne	r0, r9
     df8:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
     dfa:	f894 b002 	ldrb.w	fp, [r4, #2]
     dfe:	f894 8003 	ldrb.w	r8, [r4, #3]
     e02:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
     e04:	7062      	strb	r2, [r4, #1]
     e06:	70a0      	strb	r0, [r4, #2]
     e08:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
     e0a:	69ba      	ldr	r2, [r7, #24]
     e0c:	68f9      	ldr	r1, [r7, #12]
     e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e10:	4620      	mov	r0, r4
     e12:	4798      	blx	r3
	if (rv < 0) {
     e14:	1e05      	subs	r5, r0, #0
     e16:	f6ff af12 	blt.w	c3e <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
     e1a:	69fb      	ldr	r3, [r7, #28]
     e1c:	7023      	strb	r3, [r4, #0]
     e1e:	693b      	ldr	r3, [r7, #16]
     e20:	7063      	strb	r3, [r4, #1]
     e22:	f884 8003 	strb.w	r8, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
     e26:	69ba      	ldr	r2, [r7, #24]
     e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
     e2a:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
     e2e:	4649      	mov	r1, r9
     e30:	f107 0040 	add.w	r0, r7, #64	; 0x40
     e34:	4798      	blx	r3
	if (rv < 0) {
     e36:	f1b0 0800 	subs.w	r8, r0, #0
     e3a:	f2c0 80a3 	blt.w	f84 <cbprintf_package_convert+0x3a0>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
     e3e:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
     e40:	69ba      	ldr	r2, [r7, #24]
     e42:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
     e44:	eba3 010a 	sub.w	r1, r3, sl
     e48:	68fb      	ldr	r3, [r7, #12]
     e4a:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
     e4c:	68bb      	ldr	r3, [r7, #8]
     e4e:	1ac9      	subs	r1, r1, r3
     e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e52:	4798      	blx	r3
	if (rv < 0) {
     e54:	2800      	cmp	r0, #0
     e56:	f2c0 8097 	blt.w	f88 <cbprintf_package_convert+0x3a4>
	out_len += rv;
     e5a:	44a8      	add	r8, r5
	out_len += rv;
     e5c:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
     e60:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
     e64:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
     e68:	45b3      	cmp	fp, r6
     e6a:	d360      	bcc.n	f2e <cbprintf_package_convert+0x34a>
	(void)cb(NULL, 0, ctx);
     e6c:	2100      	movs	r1, #0
     e6e:	69ba      	ldr	r2, [r7, #24]
     e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e72:	4608      	mov	r0, r1
     e74:	4798      	blx	r3
	return out_len;
     e76:	e6e2      	b.n	c3e <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
     e78:	f04f 0900 	mov.w	r9, #0
     e7c:	f107 0030 	add.w	r0, r7, #48	; 0x30
     e80:	e794      	b.n	dac <cbprintf_package_convert+0x1c8>
		scpy_cnt = 0;
     e82:	4656      	mov	r6, sl
		keep_cnt = 0;
     e84:	46d1      	mov	r9, sl
     e86:	e795      	b.n	db4 <cbprintf_package_convert+0x1d0>
     e88:	46b1      	mov	r9, r6
     e8a:	e793      	b.n	db4 <cbprintf_package_convert+0x1d0>
		uint8_t arg_idx = *str_pos++;
     e8c:	f818 1b02 	ldrb.w	r1, [r8], #2
     e90:	4a3e      	ldr	r2, [pc, #248]	; (f8c <cbprintf_package_convert+0x3a8>)
		uint8_t arg_pos = *str_pos++;
     e92:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
     e96:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
     e9a:	4293      	cmp	r3, r2
     e9c:	d302      	bcc.n	ea4 <cbprintf_package_convert+0x2c0>
     e9e:	4a3c      	ldr	r2, [pc, #240]	; (f90 <cbprintf_package_convert+0x3ac>)
     ea0:	4293      	cmp	r3, r2
     ea2:	d31c      	bcc.n	ede <cbprintf_package_convert+0x2fa>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
     ea4:	693b      	ldr	r3, [r7, #16]
     ea6:	b123      	cbz	r3, eb2 <cbprintf_package_convert+0x2ce>
     ea8:	69f8      	ldr	r0, [r7, #28]
     eaa:	f005 fd51 	bl	6950 <is_ptr>
     eae:	2800      	cmp	r0, #0
     eb0:	d18b      	bne.n	dca <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     eb2:	687b      	ldr	r3, [r7, #4]
     eb4:	b9f3      	cbnz	r3, ef4 <cbprintf_package_convert+0x310>
				keep_str_pos[keep_cnt++] = arg_idx;
     eb6:	f109 0228 	add.w	r2, r9, #40	; 0x28
     eba:	f107 0028 	add.w	r0, r7, #40	; 0x28
     ebe:	4402      	add	r2, r0
     ec0:	f109 0301 	add.w	r3, r9, #1
     ec4:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
     ec8:	f107 0250 	add.w	r2, r7, #80	; 0x50
     ecc:	fa52 f383 	uxtab	r3, r2, r3
     ed0:	f109 0902 	add.w	r9, r9, #2
     ed4:	fa5f f989 	uxtb.w	r9, r9
     ed8:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
     edc:	e775      	b.n	dca <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
     ede:	693b      	ldr	r3, [r7, #16]
     ee0:	b12b      	cbz	r3, eee <cbprintf_package_convert+0x30a>
     ee2:	69f8      	ldr	r0, [r7, #28]
     ee4:	f005 fd34 	bl	6950 <is_ptr>
     ee8:	2800      	cmp	r0, #0
     eea:	f47f af6e 	bne.w	dca <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
     eee:	f01b 0f01 	tst.w	fp, #1
     ef2:	d009      	beq.n	f08 <cbprintf_package_convert+0x324>
				cpy_str_pos[scpy_cnt++] = arg_pos;
     ef4:	f106 0228 	add.w	r2, r6, #40	; 0x28
     ef8:	f107 0128 	add.w	r1, r7, #40	; 0x28
     efc:	1c73      	adds	r3, r6, #1
     efe:	1856      	adds	r6, r2, r1
     f00:	f806 5c20 	strb.w	r5, [r6, #-32]
     f04:	b2de      	uxtb	r6, r3
     f06:	e760      	b.n	dca <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     f08:	f01b 0f04 	tst.w	fp, #4
     f0c:	f43f af5d 	beq.w	dca <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
     f10:	f109 0228 	add.w	r2, r9, #40	; 0x28
     f14:	f107 0128 	add.w	r1, r7, #40	; 0x28
     f18:	f109 0301 	add.w	r3, r9, #1
     f1c:	eb02 0901 	add.w	r9, r2, r1
     f20:	f809 5c10 	strb.w	r5, [r9, #-16]
     f24:	fa5f f983 	uxtb.w	r9, r3
     f28:	e74f      	b.n	dca <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
     f2a:	2000      	movs	r0, #0
     f2c:	e765      	b.n	dfa <cbprintf_package_convert+0x216>
		uint8_t loc = cpy_str_pos[i];
     f2e:	f81b 300a 	ldrb.w	r3, [fp, sl]
     f32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
     f36:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
     f3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
     f3c:	b1fb      	cbz	r3, f7e <cbprintf_package_convert+0x39a>
     f3e:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
     f42:	69ba      	ldr	r2, [r7, #24]
     f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f46:	2101      	movs	r1, #1
     f48:	f107 002f 	add.w	r0, r7, #47	; 0x2f
     f4c:	4798      	blx	r3
		if (rv < 0) {
     f4e:	2800      	cmp	r0, #0
     f50:	db1a      	blt.n	f88 <cbprintf_package_convert+0x3a4>
		out_len += rv;
     f52:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
     f54:	f1b8 0f00 	cmp.w	r8, #0
     f58:	d106      	bne.n	f68 <cbprintf_package_convert+0x384>
     f5a:	4648      	mov	r0, r9
     f5c:	f006 f9af 	bl	72be <strlen>
     f60:	f100 0801 	add.w	r8, r0, #1
     f64:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
     f68:	69ba      	ldr	r2, [r7, #24]
     f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f6c:	4641      	mov	r1, r8
     f6e:	4648      	mov	r0, r9
     f70:	4798      	blx	r3
		if (rv < 0) {
     f72:	2800      	cmp	r0, #0
     f74:	db08      	blt.n	f88 <cbprintf_package_convert+0x3a4>
		out_len += rv;
     f76:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
     f78:	f10b 0b01 	add.w	fp, fp, #1
     f7c:	e774      	b.n	e68 <cbprintf_package_convert+0x284>
		uint16_t str_len = strl ? strl[i] : 0;
     f7e:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
     f82:	e7de      	b.n	f42 <cbprintf_package_convert+0x35e>
     f84:	4645      	mov	r5, r8
     f86:	e65a      	b.n	c3e <cbprintf_package_convert+0x5a>
     f88:	4605      	mov	r5, r0
     f8a:	e658      	b.n	c3e <cbprintf_package_convert+0x5a>
     f8c:	00007b2c 	.word	0x00007b2c
     f90:	00008b30 	.word	0x00008b30
     f94:	000082b7 	.word	0x000082b7
     f98:	01000004 	.word	0x01000004
     f9c:	00007d9c 	.word	0x00007d9c

00000fa0 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
     fa0:	4b01      	ldr	r3, [pc, #4]	; (fa8 <__printk_hook_install+0x8>)
     fa2:	6018      	str	r0, [r3, #0]
}
     fa4:	4770      	bx	lr
     fa6:	bf00      	nop
     fa8:	20000000 	.word	0x20000000

00000fac <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     fac:	b530      	push	{r4, r5, lr}
     fae:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
     fb0:	2500      	movs	r5, #0
     fb2:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
     fb6:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     fb8:	9500      	str	r5, [sp, #0]
     fba:	a903      	add	r1, sp, #12
     fbc:	4805      	ldr	r0, [pc, #20]	; (fd4 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
     fbe:	9505      	str	r5, [sp, #20]
     fc0:	f000 f918 	bl	11f4 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
     fc4:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
     fc8:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     fca:	bfb8      	it	lt
     fcc:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     fce:	b007      	add	sp, #28
     fd0:	bd30      	pop	{r4, r5, pc}
     fd2:	bf00      	nop
     fd4:	0000699f 	.word	0x0000699f

00000fd8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     fdc:	8b05      	ldrh	r5, [r0, #24]
{
     fde:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     fe0:	0728      	lsls	r0, r5, #28
{
     fe2:	4690      	mov	r8, r2
	if (processing) {
     fe4:	d411      	bmi.n	100a <CONFIG_FPROTECT_BLOCK_SIZE+0xa>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
     fe6:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     fe8:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     fec:	f040 80cd 	bne.w	118a <CONFIG_FPROTECT_BLOCK_SIZE+0x18a>
			evt = process_recheck(mgr);
     ff0:	4620      	mov	r0, r4
     ff2:	f005 fd0b 	bl	6a0c <process_recheck>
		}

		if (evt == EVT_NOP) {
     ff6:	b178      	cbz	r0, 1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
     ff8:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     ffa:	8b21      	ldrh	r1, [r4, #24]
     ffc:	2804      	cmp	r0, #4
     ffe:	d811      	bhi.n	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    1000:	e8df f000 	tbb	[pc, r0]
    1004:	856d10c3 	.word	0x856d10c3
    1008:	95          	.byte	0x95
    1009:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    100a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    100c:	bf0c      	ite	eq
    100e:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1012:	f045 0520 	orrne.w	r5, r5, #32
    1016:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1018:	f388 8811 	msr	BASEPRI, r8
    101c:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1024:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1028:	45aa      	cmp	sl, r5
    102a:	f000 80a6 	beq.w	117a <CONFIG_FPROTECT_BLOCK_SIZE+0x17a>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    102e:	2700      	movs	r7, #0
    1030:	46b9      	mov	r9, r7
    1032:	463e      	mov	r6, r7
    1034:	68a3      	ldr	r3, [r4, #8]
    1036:	2b00      	cmp	r3, #0
    1038:	f000 80bd 	beq.w	11b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b6>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    103c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1040:	8321      	strh	r1, [r4, #24]
    1042:	f388 8811 	msr	BASEPRI, r8
    1046:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    104a:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    104c:	2900      	cmp	r1, #0
    104e:	f000 80bb 	beq.w	11c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c8>
	return node->next;
    1052:	680d      	ldr	r5, [r1, #0]
    1054:	2900      	cmp	r1, #0
    1056:	f000 80b7 	beq.w	11c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c8>
		mon->callback(mgr, mon, state, res);
    105a:	f8d1 8004 	ldr.w	r8, [r1, #4]
    105e:	4633      	mov	r3, r6
    1060:	4652      	mov	r2, sl
    1062:	4620      	mov	r0, r4
    1064:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1066:	2d00      	cmp	r5, #0
    1068:	d076      	beq.n	1158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>
    106a:	682b      	ldr	r3, [r5, #0]
    106c:	4629      	mov	r1, r5
    106e:	461d      	mov	r5, r3
    1070:	e7f0      	b.n	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
    1072:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1076:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1078:	2a01      	cmp	r2, #1
    107a:	d81b      	bhi.n	10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>
	list->head = NULL;
    107c:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    107e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1082:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1084:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1086:	b289      	uxth	r1, r1
	list->tail = NULL;
    1088:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    108c:	d109      	bne.n	10a2 <CONFIG_FPROTECT_BLOCK_SIZE+0xa2>
    108e:	463b      	mov	r3, r7
    1090:	e003      	b.n	109a <CONFIG_FPROTECT_BLOCK_SIZE+0x9a>
				mgr->refs += 1U;
    1092:	8b62      	ldrh	r2, [r4, #26]
    1094:	3201      	adds	r2, #1
    1096:	8362      	strh	r2, [r4, #26]
	return node->next;
    1098:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    109a:	2b00      	cmp	r3, #0
    109c:	d1f9      	bne.n	1092 <CONFIG_FPROTECT_BLOCK_SIZE+0x92>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    109e:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    10a2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    10a4:	4620      	mov	r0, r4
    10a6:	f005 fcb1 	bl	6a0c <process_recheck>
    10aa:	2800      	cmp	r0, #0
    10ac:	d07b      	beq.n	11a6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    10ae:	f041 0120 	orr.w	r1, r1, #32
    10b2:	e077      	b.n	11a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a4>
	} else if (state == ONOFF_STATE_TO_OFF) {
    10b4:	2b04      	cmp	r3, #4
    10b6:	d10a      	bne.n	10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    10b8:	f021 0107 	bic.w	r1, r1, #7
    10bc:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    10be:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    10c0:	4620      	mov	r0, r4
    10c2:	f005 fca3 	bl	6a0c <process_recheck>
    10c6:	b110      	cbz	r0, 10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    10c8:	f041 0120 	orr.w	r1, r1, #32
    10cc:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    10ce:	8b21      	ldrh	r1, [r4, #24]
    10d0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    10d4:	45aa      	cmp	sl, r5
    10d6:	d050      	beq.n	117a <CONFIG_FPROTECT_BLOCK_SIZE+0x17a>
    10d8:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    10da:	46b9      	mov	r9, r7
    10dc:	e7aa      	b.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
			transit = mgr->transitions->start;
    10de:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    10e0:	f021 0107 	bic.w	r1, r1, #7
    10e4:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    10e8:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    10ea:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    10ee:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    10f0:	d12d      	bne.n	114e <CONFIG_FPROTECT_BLOCK_SIZE+0x14e>
		    || (transit != NULL)) {
    10f2:	f1b9 0f00 	cmp.w	r9, #0
    10f6:	d040      	beq.n	117a <CONFIG_FPROTECT_BLOCK_SIZE+0x17a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    10f8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    10fc:	8321      	strh	r1, [r4, #24]
    10fe:	f388 8811 	msr	BASEPRI, r8
    1102:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    1106:	493a      	ldr	r1, [pc, #232]	; (11f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f0>)
    1108:	4620      	mov	r0, r4
    110a:	47c8      	blx	r9
    110c:	e029      	b.n	1162 <CONFIG_FPROTECT_BLOCK_SIZE+0x162>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    110e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    1112:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1114:	f041 0104 	orr.w	r1, r1, #4
    1118:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    111a:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    111c:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1120:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1122:	d0e6      	beq.n	10f2 <CONFIG_FPROTECT_BLOCK_SIZE+0xf2>
    1124:	2700      	movs	r7, #0
		res = 0;
    1126:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1128:	f04f 0a04 	mov.w	sl, #4
    112c:	e782      	b.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    112e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    1132:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1134:	f041 0105 	orr.w	r1, r1, #5
    1138:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    113a:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    113c:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1140:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1142:	d0d6      	beq.n	10f2 <CONFIG_FPROTECT_BLOCK_SIZE+0xf2>
    1144:	2700      	movs	r7, #0
		res = 0;
    1146:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1148:	f04f 0a05 	mov.w	sl, #5
    114c:	e772      	b.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
				   && !sys_slist_is_empty(&mgr->monitors);
    114e:	2700      	movs	r7, #0
		res = 0;
    1150:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1152:	f04f 0a06 	mov.w	sl, #6
    1156:	e76d      	b.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1158:	462b      	mov	r3, r5
    115a:	e787      	b.n	106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>
			if (transit != NULL) {
    115c:	f1b9 0f00 	cmp.w	r9, #0
    1160:	d1d1      	bne.n	1106 <CONFIG_FPROTECT_BLOCK_SIZE+0x106>
	__asm__ volatile(
    1162:	f04f 0320 	mov.w	r3, #32
    1166:	f3ef 8811 	mrs	r8, BASEPRI
    116a:	f383 8812 	msr	BASEPRI_MAX, r3
    116e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1172:	8b23      	ldrh	r3, [r4, #24]
    1174:	f023 0308 	bic.w	r3, r3, #8
    1178:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    117a:	8b25      	ldrh	r5, [r4, #24]
    117c:	06ea      	lsls	r2, r5, #27
    117e:	d52e      	bpl.n	11de <CONFIG_FPROTECT_BLOCK_SIZE+0x1de>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1180:	f025 0310 	bic.w	r3, r5, #16
    1184:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1186:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    118a:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    118c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    118e:	2e00      	cmp	r6, #0
    1190:	f6bf af6f 	bge.w	1072 <CONFIG_FPROTECT_BLOCK_SIZE+0x72>
	list->head = NULL;
    1194:	2300      	movs	r3, #0
		*clients = mgr->clients;
    1196:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    1198:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    119c:	f021 0107 	bic.w	r1, r1, #7
    11a0:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    11a4:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    11a6:	8b21      	ldrh	r1, [r4, #24]
    11a8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    11ac:	45aa      	cmp	sl, r5
    11ae:	f04f 0900 	mov.w	r9, #0
    11b2:	f47f af3f 	bne.w	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
		    || !sys_slist_is_empty(&clients)
    11b6:	2f00      	cmp	r7, #0
    11b8:	d09b      	beq.n	10f2 <CONFIG_FPROTECT_BLOCK_SIZE+0xf2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    11ba:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    11be:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    11c0:	f388 8811 	msr	BASEPRI, r8
    11c4:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    11c8:	2f00      	cmp	r7, #0
    11ca:	d0c7      	beq.n	115c <CONFIG_FPROTECT_BLOCK_SIZE+0x15c>
	return node->next;
    11cc:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    11ce:	4639      	mov	r1, r7
    11d0:	4633      	mov	r3, r6
    11d2:	4652      	mov	r2, sl
    11d4:	4620      	mov	r0, r4
    11d6:	f005 fc45 	bl	6a64 <notify_one>
	list->head = node;
    11da:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    11dc:	e7f4      	b.n	11c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c8>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    11de:	06ab      	lsls	r3, r5, #26
    11e0:	f57f af1a 	bpl.w	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    11e4:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    11e8:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    11ea:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    11ee:	e6ff      	b.n	ff0 <process_event+0x18>
    11f0:	00006a91 	.word	0x00006a91

000011f4 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    11f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11f8:	4681      	mov	r9, r0
    11fa:	b095      	sub	sp, #84	; 0x54
    11fc:	468b      	mov	fp, r1
    11fe:	4617      	mov	r7, r2
    1200:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1202:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1204:	7838      	ldrb	r0, [r7, #0]
    1206:	b908      	cbnz	r0, 120c <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1208:	4628      	mov	r0, r5
    120a:	e358      	b.n	18be <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
    120c:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    120e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    1210:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    1212:	d006      	beq.n	1222 <z_cbvprintf_impl+0x2e>
			OUTC('%');
    1214:	4659      	mov	r1, fp
    1216:	47c8      	blx	r9
    1218:	2800      	cmp	r0, #0
    121a:	f2c0 8350 	blt.w	18be <z_cbvprintf_impl+0x6ca>
    121e:	3501      	adds	r5, #1
		if (bps == NULL) {
    1220:	e1fb      	b.n	161a <z_cbvprintf_impl+0x426>
		} state = {
    1222:	2218      	movs	r2, #24
    1224:	2100      	movs	r1, #0
    1226:	a80e      	add	r0, sp, #56	; 0x38
    1228:	f006 f864 	bl	72f4 <memset>
	if (*sp == '%') {
    122c:	787b      	ldrb	r3, [r7, #1]
    122e:	2b25      	cmp	r3, #37	; 0x25
    1230:	d07d      	beq.n	132e <z_cbvprintf_impl+0x13a>
    1232:	2300      	movs	r3, #0
    1234:	1c78      	adds	r0, r7, #1
    1236:	4698      	mov	r8, r3
    1238:	469e      	mov	lr, r3
    123a:	469c      	mov	ip, r3
    123c:	461e      	mov	r6, r3
    123e:	4601      	mov	r1, r0
		switch (*sp) {
    1240:	f810 2b01 	ldrb.w	r2, [r0], #1
    1244:	2a2b      	cmp	r2, #43	; 0x2b
    1246:	f000 80a1 	beq.w	138c <z_cbvprintf_impl+0x198>
    124a:	f200 8098 	bhi.w	137e <z_cbvprintf_impl+0x18a>
    124e:	2a20      	cmp	r2, #32
    1250:	f000 809f 	beq.w	1392 <z_cbvprintf_impl+0x19e>
    1254:	2a23      	cmp	r2, #35	; 0x23
    1256:	f000 809f 	beq.w	1398 <z_cbvprintf_impl+0x1a4>
    125a:	b12b      	cbz	r3, 1268 <z_cbvprintf_impl+0x74>
    125c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1264:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1268:	f1b8 0f00 	cmp.w	r8, #0
    126c:	d005      	beq.n	127a <z_cbvprintf_impl+0x86>
    126e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1272:	f043 0320 	orr.w	r3, r3, #32
    1276:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    127a:	f1be 0f00 	cmp.w	lr, #0
    127e:	d005      	beq.n	128c <z_cbvprintf_impl+0x98>
    1280:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1284:	f043 0310 	orr.w	r3, r3, #16
    1288:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    128c:	f1bc 0f00 	cmp.w	ip, #0
    1290:	d005      	beq.n	129e <z_cbvprintf_impl+0xaa>
    1292:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1296:	f043 0308 	orr.w	r3, r3, #8
    129a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    129e:	b12e      	cbz	r6, 12ac <z_cbvprintf_impl+0xb8>
    12a0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    12a4:	f043 0304 	orr.w	r3, r3, #4
    12a8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    12ac:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    12b0:	f003 0044 	and.w	r0, r3, #68	; 0x44
    12b4:	2844      	cmp	r0, #68	; 0x44
    12b6:	d103      	bne.n	12c0 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    12b8:	f36f 1386 	bfc	r3, #6, #1
    12bc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    12c0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    12c4:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    12c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    12ca:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    12ce:	d17f      	bne.n	13d0 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
    12d0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    12d4:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
    12d8:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    12da:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    12de:	781a      	ldrb	r2, [r3, #0]
    12e0:	2a2e      	cmp	r2, #46	; 0x2e
    12e2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    12e6:	bf0c      	ite	eq
    12e8:	2101      	moveq	r1, #1
    12ea:	2100      	movne	r1, #0
    12ec:	f361 0241 	bfi	r2, r1, #1, #1
    12f0:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    12f4:	d178      	bne.n	13e8 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
    12f6:	785a      	ldrb	r2, [r3, #1]
    12f8:	2a2a      	cmp	r2, #42	; 0x2a
    12fa:	d06e      	beq.n	13da <z_cbvprintf_impl+0x1e6>
	++sp;
    12fc:	3301      	adds	r3, #1
	size_t val = 0;
    12fe:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1300:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1304:	4619      	mov	r1, r3
    1306:	f811 0b01 	ldrb.w	r0, [r1], #1
    130a:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    130e:	2e09      	cmp	r6, #9
    1310:	f240 8095 	bls.w	143e <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    1314:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    1318:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    131a:	f3c1 0040 	ubfx	r0, r1, #1, #1
    131e:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    1322:	460a      	mov	r2, r1
    1324:	f360 0241 	bfi	r2, r0, #1, #1
    1328:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    132c:	e05c      	b.n	13e8 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
    132e:	1cba      	adds	r2, r7, #2
    1330:	9203      	str	r2, [sp, #12]
    1332:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    1336:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    133a:	07da      	lsls	r2, r3, #31
    133c:	f140 812e 	bpl.w	159c <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
    1340:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    1344:	f1b8 0f00 	cmp.w	r8, #0
    1348:	da07      	bge.n	135a <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
    134a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    134e:	f042 0204 	orr.w	r2, r2, #4
    1352:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
    1356:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    135a:	075e      	lsls	r6, r3, #29
    135c:	f140 8127 	bpl.w	15ae <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
    1360:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    1364:	f1ba 0f00 	cmp.w	sl, #0
    1368:	f280 8126 	bge.w	15b8 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
    136c:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    1370:	f36f 0341 	bfc	r3, #1, #1
    1374:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    1378:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    137c:	e11c      	b.n	15b8 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
    137e:	2a2d      	cmp	r2, #45	; 0x2d
    1380:	d00d      	beq.n	139e <z_cbvprintf_impl+0x1aa>
    1382:	2a30      	cmp	r2, #48	; 0x30
    1384:	f47f af69 	bne.w	125a <z_cbvprintf_impl+0x66>
    1388:	2301      	movs	r3, #1
	} while (loop);
    138a:	e758      	b.n	123e <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    138c:	f04f 0c01 	mov.w	ip, #1
    1390:	e755      	b.n	123e <z_cbvprintf_impl+0x4a>
    1392:	f04f 0e01 	mov.w	lr, #1
    1396:	e752      	b.n	123e <z_cbvprintf_impl+0x4a>
    1398:	f04f 0801 	mov.w	r8, #1
    139c:	e74f      	b.n	123e <z_cbvprintf_impl+0x4a>
    139e:	2601      	movs	r6, #1
    13a0:	e74d      	b.n	123e <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    13a2:	fb0e 6202 	mla	r2, lr, r2, r6
    13a6:	3a30      	subs	r2, #48	; 0x30
    13a8:	4603      	mov	r3, r0
    13aa:	4618      	mov	r0, r3
    13ac:	f810 6b01 	ldrb.w	r6, [r0], #1
    13b0:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    13b4:	f1bc 0f09 	cmp.w	ip, #9
    13b8:	d9f3      	bls.n	13a2 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
    13ba:	4299      	cmp	r1, r3
    13bc:	d08f      	beq.n	12de <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    13be:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    13c2:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    13c4:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    13c6:	f362 0141 	bfi	r1, r2, #1, #1
    13ca:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    13ce:	e786      	b.n	12de <z_cbvprintf_impl+0xea>
    13d0:	460b      	mov	r3, r1
	size_t val = 0;
    13d2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    13d4:	f04f 0e0a 	mov.w	lr, #10
    13d8:	e7e7      	b.n	13aa <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
    13da:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    13de:	f042 0204 	orr.w	r2, r2, #4
    13e2:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    13e6:	3302      	adds	r3, #2
	switch (*sp) {
    13e8:	781a      	ldrb	r2, [r3, #0]
    13ea:	2a6c      	cmp	r2, #108	; 0x6c
    13ec:	d047      	beq.n	147e <z_cbvprintf_impl+0x28a>
    13ee:	d82b      	bhi.n	1448 <z_cbvprintf_impl+0x254>
    13f0:	2a68      	cmp	r2, #104	; 0x68
    13f2:	d031      	beq.n	1458 <z_cbvprintf_impl+0x264>
    13f4:	2a6a      	cmp	r2, #106	; 0x6a
    13f6:	d04b      	beq.n	1490 <z_cbvprintf_impl+0x29c>
    13f8:	2a4c      	cmp	r2, #76	; 0x4c
    13fa:	d051      	beq.n	14a0 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
    13fc:	461a      	mov	r2, r3
    13fe:	f812 3b01 	ldrb.w	r3, [r2], #1
    1402:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
    1404:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    1406:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
    140a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
    140e:	f200 80be 	bhi.w	158e <z_cbvprintf_impl+0x39a>
    1412:	2b6d      	cmp	r3, #109	; 0x6d
    1414:	d851      	bhi.n	14ba <z_cbvprintf_impl+0x2c6>
    1416:	2b69      	cmp	r3, #105	; 0x69
    1418:	f200 80b9 	bhi.w	158e <z_cbvprintf_impl+0x39a>
    141c:	2b57      	cmp	r3, #87	; 0x57
    141e:	d867      	bhi.n	14f0 <z_cbvprintf_impl+0x2fc>
    1420:	2b41      	cmp	r3, #65	; 0x41
    1422:	d003      	beq.n	142c <z_cbvprintf_impl+0x238>
    1424:	3b45      	subs	r3, #69	; 0x45
    1426:	2b02      	cmp	r3, #2
    1428:	f200 80b1 	bhi.w	158e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    142c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1430:	2204      	movs	r2, #4
    1432:	f362 0302 	bfi	r3, r2, #0, #3
    1436:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    143a:	2301      	movs	r3, #1
			break;
    143c:	e073      	b.n	1526 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
    143e:	fb0c 0202 	mla	r2, ip, r2, r0
    1442:	3a30      	subs	r2, #48	; 0x30
    1444:	460b      	mov	r3, r1
    1446:	e75d      	b.n	1304 <z_cbvprintf_impl+0x110>
	switch (*sp) {
    1448:	2a74      	cmp	r2, #116	; 0x74
    144a:	d025      	beq.n	1498 <z_cbvprintf_impl+0x2a4>
    144c:	2a7a      	cmp	r2, #122	; 0x7a
    144e:	d1d5      	bne.n	13fc <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
    1450:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1454:	2106      	movs	r1, #6
    1456:	e00c      	b.n	1472 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
    1458:	785a      	ldrb	r2, [r3, #1]
    145a:	2a68      	cmp	r2, #104	; 0x68
    145c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1460:	d106      	bne.n	1470 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
    1462:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1464:	f361 02c6 	bfi	r2, r1, #3, #4
    1468:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    146c:	3302      	adds	r3, #2
    146e:	e7c5      	b.n	13fc <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
    1470:	2102      	movs	r1, #2
    1472:	f361 02c6 	bfi	r2, r1, #3, #4
    1476:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    147a:	3301      	adds	r3, #1
    147c:	e7be      	b.n	13fc <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
    147e:	785a      	ldrb	r2, [r3, #1]
    1480:	2a6c      	cmp	r2, #108	; 0x6c
    1482:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1486:	d101      	bne.n	148c <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
    1488:	2104      	movs	r1, #4
    148a:	e7eb      	b.n	1464 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
    148c:	2103      	movs	r1, #3
    148e:	e7f0      	b.n	1472 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
    1490:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1494:	2105      	movs	r1, #5
    1496:	e7ec      	b.n	1472 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
    1498:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    149c:	2107      	movs	r1, #7
    149e:	e7e8      	b.n	1472 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
    14a0:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    14a4:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    14a8:	f022 0202 	bic.w	r2, r2, #2
    14ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    14b0:	f042 0202 	orr.w	r2, r2, #2
    14b4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    14b8:	e7df      	b.n	147a <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
    14ba:	3b6e      	subs	r3, #110	; 0x6e
    14bc:	b2d9      	uxtb	r1, r3
    14be:	2301      	movs	r3, #1
    14c0:	408b      	lsls	r3, r1
    14c2:	f240 4182 	movw	r1, #1154	; 0x482
    14c6:	420b      	tst	r3, r1
    14c8:	d137      	bne.n	153a <z_cbvprintf_impl+0x346>
    14ca:	f013 0f24 	tst.w	r3, #36	; 0x24
    14ce:	d151      	bne.n	1574 <z_cbvprintf_impl+0x380>
    14d0:	07d8      	lsls	r0, r3, #31
    14d2:	d55c      	bpl.n	158e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    14d4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    14d8:	2103      	movs	r1, #3
    14da:	f361 0302 	bfi	r3, r1, #0, #3
    14de:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    14e2:	f002 0378 	and.w	r3, r2, #120	; 0x78
    14e6:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    14ea:	424b      	negs	r3, r1
    14ec:	414b      	adcs	r3, r1
    14ee:	e01a      	b.n	1526 <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
    14f0:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    14f4:	b2c9      	uxtb	r1, r1
    14f6:	2001      	movs	r0, #1
    14f8:	fa00 f101 	lsl.w	r1, r0, r1
    14fc:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    1500:	d194      	bne.n	142c <z_cbvprintf_impl+0x238>
    1502:	f640 0601 	movw	r6, #2049	; 0x801
    1506:	4231      	tst	r1, r6
    1508:	d11d      	bne.n	1546 <z_cbvprintf_impl+0x352>
    150a:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    150e:	d03e      	beq.n	158e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    1510:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1514:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1518:	f002 0278 	and.w	r2, r2, #120	; 0x78
    151c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    151e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    1522:	d034      	beq.n	158e <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
    1524:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    1526:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    152a:	f3c2 0140 	ubfx	r1, r2, #1, #1
    152e:	430b      	orrs	r3, r1
    1530:	f363 0241 	bfi	r2, r3, #1, #1
    1534:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    1538:	e6fd      	b.n	1336 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    153a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    153e:	2102      	movs	r1, #2
    1540:	f361 0302 	bfi	r3, r1, #0, #3
    1544:	e7e8      	b.n	1518 <z_cbvprintf_impl+0x324>
    1546:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
    154a:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    154c:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1550:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1554:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1556:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    155a:	bf02      	ittt	eq
    155c:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    1560:	f041 0101 	orreq.w	r1, r1, #1
    1564:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    1568:	2b63      	cmp	r3, #99	; 0x63
    156a:	d1db      	bne.n	1524 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    156c:	1e13      	subs	r3, r2, #0
    156e:	bf18      	it	ne
    1570:	2301      	movne	r3, #1
    1572:	e7d8      	b.n	1526 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    1574:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1578:	2103      	movs	r1, #3
    157a:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    157e:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1582:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    1586:	bf14      	ite	ne
    1588:	2301      	movne	r3, #1
    158a:	2300      	moveq	r3, #0
    158c:	e7cb      	b.n	1526 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
    158e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1592:	f043 0301 	orr.w	r3, r3, #1
    1596:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    159a:	e7c3      	b.n	1524 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
    159c:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    15a0:	2a00      	cmp	r2, #0
			width = conv->width_value;
    15a2:	bfb4      	ite	lt
    15a4:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
    15a8:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
    15ac:	e6d5      	b.n	135a <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
    15ae:	0798      	lsls	r0, r3, #30
    15b0:	f57f aee2 	bpl.w	1378 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
    15b4:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
    15b8:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
    15bc:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    15be:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    15c2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
    15c6:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    15ca:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    15cc:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    15d0:	d133      	bne.n	163a <z_cbvprintf_impl+0x446>
			switch (length_mod) {
    15d2:	1ecb      	subs	r3, r1, #3
    15d4:	2b04      	cmp	r3, #4
    15d6:	d804      	bhi.n	15e2 <z_cbvprintf_impl+0x3ee>
    15d8:	e8df f003 	tbb	[pc, r3]
    15dc:	21464621 	.word	0x21464621
    15e0:	21          	.byte	0x21
    15e1:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    15e2:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    15e4:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    15e6:	ea4f 72e3 	mov.w	r2, r3, asr #31
    15ea:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    15ee:	d11c      	bne.n	162a <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
    15f0:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    15f4:	17da      	asrs	r2, r3, #31
    15f6:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    15fa:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    15fc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1600:	f013 0603 	ands.w	r6, r3, #3
    1604:	d050      	beq.n	16a8 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
    1606:	9b03      	ldr	r3, [sp, #12]
    1608:	463a      	mov	r2, r7
    160a:	4659      	mov	r1, fp
    160c:	4648      	mov	r0, r9
    160e:	f005 fb1c 	bl	6c4a <outs>
    1612:	2800      	cmp	r0, #0
    1614:	f2c0 8153 	blt.w	18be <z_cbvprintf_impl+0x6ca>
    1618:	4405      	add	r5, r0
			continue;
    161a:	9f03      	ldr	r7, [sp, #12]
    161c:	e5f2      	b.n	1204 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    161e:	f854 3b04 	ldr.w	r3, [r4], #4
    1622:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    1624:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    1628:	e7e8      	b.n	15fc <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
    162a:	2902      	cmp	r1, #2
    162c:	d1e5      	bne.n	15fa <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
    162e:	b21a      	sxth	r2, r3
    1630:	f343 33c0 	sbfx	r3, r3, #15, #1
    1634:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    1638:	e7df      	b.n	15fa <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
    163a:	2b02      	cmp	r3, #2
    163c:	d124      	bne.n	1688 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
    163e:	1ecb      	subs	r3, r1, #3
    1640:	2b04      	cmp	r3, #4
    1642:	d804      	bhi.n	164e <z_cbvprintf_impl+0x45a>
    1644:	e8df f003 	tbb	[pc, r3]
    1648:	18101018 	.word	0x18101018
    164c:	18          	.byte	0x18
    164d:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    164e:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    1650:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1654:	f04f 0200 	mov.w	r2, #0
    1658:	d014      	beq.n	1684 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
    165a:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    165c:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    1660:	d1cc      	bne.n	15fc <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
    1662:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    1664:	930e      	str	r3, [sp, #56]	; 0x38
    1666:	e7c9      	b.n	15fc <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
    1668:	3407      	adds	r4, #7
    166a:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    166e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    1672:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    1676:	e7c1      	b.n	15fc <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
    1678:	f854 3b04 	ldr.w	r3, [r4], #4
    167c:	930e      	str	r3, [sp, #56]	; 0x38
    167e:	2300      	movs	r3, #0
    1680:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    1682:	e7bb      	b.n	15fc <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
    1684:	b2db      	uxtb	r3, r3
    1686:	e7cd      	b.n	1624 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    1688:	2b04      	cmp	r3, #4
    168a:	d108      	bne.n	169e <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
    168c:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    168e:	f024 0407 	bic.w	r4, r4, #7
    1692:	e9d4 2300 	ldrd	r2, r3, [r4]
    1696:	3408      	adds	r4, #8
    1698:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    169c:	e7ae      	b.n	15fc <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
    169e:	2b03      	cmp	r3, #3
    16a0:	d1ac      	bne.n	15fc <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
    16a2:	f854 3b04 	ldr.w	r3, [r4], #4
    16a6:	e7dd      	b.n	1664 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
    16a8:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    16ac:	2878      	cmp	r0, #120	; 0x78
    16ae:	d8b4      	bhi.n	161a <z_cbvprintf_impl+0x426>
    16b0:	2862      	cmp	r0, #98	; 0x62
    16b2:	d81c      	bhi.n	16ee <z_cbvprintf_impl+0x4fa>
    16b4:	2825      	cmp	r0, #37	; 0x25
    16b6:	f43f adad 	beq.w	1214 <z_cbvprintf_impl+0x20>
    16ba:	2858      	cmp	r0, #88	; 0x58
    16bc:	d1ad      	bne.n	161a <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
    16be:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    16c2:	9300      	str	r3, [sp, #0]
    16c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    16c8:	ab08      	add	r3, sp, #32
    16ca:	aa10      	add	r2, sp, #64	; 0x40
    16cc:	f005 fa77 	bl	6bbe <encode_uint>
			if (precision >= 0) {
    16d0:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    16d4:	4607      	mov	r7, r0
			if (precision >= 0) {
    16d6:	f280 809a 	bge.w	180e <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
    16da:	2f00      	cmp	r7, #0
    16dc:	d09d      	beq.n	161a <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    16de:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    16e2:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    16e4:	2e00      	cmp	r6, #0
    16e6:	f000 80c1 	beq.w	186c <z_cbvprintf_impl+0x678>
			nj_len += 1U;
    16ea:	3001      	adds	r0, #1
    16ec:	e0be      	b.n	186c <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
    16ee:	3863      	subs	r0, #99	; 0x63
    16f0:	2815      	cmp	r0, #21
    16f2:	d892      	bhi.n	161a <z_cbvprintf_impl+0x426>
    16f4:	a201      	add	r2, pc, #4	; (adr r2, 16fc <z_cbvprintf_impl+0x508>)
    16f6:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    16fa:	bf00      	nop
    16fc:	000017d1 	.word	0x000017d1
    1700:	000017e3 	.word	0x000017e3
    1704:	0000161b 	.word	0x0000161b
    1708:	0000161b 	.word	0x0000161b
    170c:	0000161b 	.word	0x0000161b
    1710:	0000161b 	.word	0x0000161b
    1714:	000017e3 	.word	0x000017e3
    1718:	0000161b 	.word	0x0000161b
    171c:	0000161b 	.word	0x0000161b
    1720:	0000161b 	.word	0x0000161b
    1724:	0000161b 	.word	0x0000161b
    1728:	00001871 	.word	0x00001871
    172c:	00001809 	.word	0x00001809
    1730:	0000182f 	.word	0x0000182f
    1734:	0000161b 	.word	0x0000161b
    1738:	0000161b 	.word	0x0000161b
    173c:	00001755 	.word	0x00001755
    1740:	0000161b 	.word	0x0000161b
    1744:	00001809 	.word	0x00001809
    1748:	0000161b 	.word	0x0000161b
    174c:	0000161b 	.word	0x0000161b
    1750:	00001809 	.word	0x00001809
			if (precision >= 0) {
    1754:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    1758:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    175a:	db35      	blt.n	17c8 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
    175c:	4651      	mov	r1, sl
    175e:	4638      	mov	r0, r7
    1760:	f005 fdb4 	bl	72cc <strnlen>
			bpe = bps + len;
    1764:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    1768:	2f00      	cmp	r7, #0
    176a:	f43f af56 	beq.w	161a <z_cbvprintf_impl+0x426>
		char sign = 0;
    176e:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    1770:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1774:	f013 0210 	ands.w	r2, r3, #16
    1778:	9205      	str	r2, [sp, #20]
    177a:	f000 8093 	beq.w	18a4 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
    177e:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    1780:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    1782:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    1784:	bf48      	it	mi
    1786:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    1788:	9204      	str	r2, [sp, #16]
    178a:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    178c:	bf48      	it	mi
    178e:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    1790:	f1b8 0f00 	cmp.w	r8, #0
    1794:	f340 80a0 	ble.w	18d8 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
    1798:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    179c:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    17a0:	f3c2 0380 	ubfx	r3, r2, #2, #1
    17a4:	0750      	lsls	r0, r2, #29
    17a6:	9306      	str	r3, [sp, #24]
    17a8:	f100 8096 	bmi.w	18d8 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
    17ac:	0651      	lsls	r1, r2, #25
    17ae:	f140 8089 	bpl.w	18c4 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
    17b2:	b13e      	cbz	r6, 17c4 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    17b4:	4659      	mov	r1, fp
    17b6:	4630      	mov	r0, r6
    17b8:	47c8      	blx	r9
    17ba:	2800      	cmp	r0, #0
    17bc:	db7f      	blt.n	18be <z_cbvprintf_impl+0x6ca>
    17be:	9b06      	ldr	r3, [sp, #24]
    17c0:	3501      	adds	r5, #1
    17c2:	461e      	mov	r6, r3
					pad = '0';
    17c4:	2230      	movs	r2, #48	; 0x30
    17c6:	e07e      	b.n	18c6 <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
    17c8:	4638      	mov	r0, r7
    17ca:	f005 fd78 	bl	72be <strlen>
    17ce:	e7c9      	b.n	1764 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    17d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    17d2:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
    17d6:	2600      	movs	r6, #0
			bps = buf;
    17d8:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    17da:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
    17de:	2001      	movs	r0, #1
    17e0:	e7c6      	b.n	1770 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
    17e2:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    17e4:	bf5c      	itt	pl
    17e6:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    17ea:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    17ec:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
    17f0:	bf48      	it	mi
    17f2:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    17f4:	2b00      	cmp	r3, #0
    17f6:	f6bf af62 	bge.w	16be <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
    17fa:	4252      	negs	r2, r2
    17fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1800:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
    1804:	262d      	movs	r6, #45	; 0x2d
    1806:	e75a      	b.n	16be <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
    1808:	2600      	movs	r6, #0
    180a:	e758      	b.n	16be <z_cbvprintf_impl+0x4ca>
		char sign = 0;
    180c:	2600      	movs	r6, #0
				conv->flag_zero = false;
    180e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    1812:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1816:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    1818:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    181c:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    181e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    1822:	f67f af5a 	bls.w	16da <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
    1826:	ebaa 0303 	sub.w	r3, sl, r3
    182a:	9311      	str	r3, [sp, #68]	; 0x44
    182c:	e755      	b.n	16da <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
    182e:	980e      	ldr	r0, [sp, #56]	; 0x38
    1830:	b390      	cbz	r0, 1898 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1832:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1836:	9300      	str	r3, [sp, #0]
    1838:	aa10      	add	r2, sp, #64	; 0x40
    183a:	ab08      	add	r3, sp, #32
    183c:	2100      	movs	r1, #0
    183e:	f005 f9be 	bl	6bbe <encode_uint>
				conv->altform_0c = true;
    1842:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    1846:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    184a:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    184e:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    1852:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1856:	4607      	mov	r7, r0
				conv->altform_0c = true;
    1858:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    185c:	dad6      	bge.n	180c <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
    185e:	2800      	cmp	r0, #0
    1860:	f43f aedb 	beq.w	161a <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    1864:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1868:	1a18      	subs	r0, r3, r0
		char sign = 0;
    186a:	2600      	movs	r6, #0
    186c:	469a      	mov	sl, r3
    186e:	e77f      	b.n	1770 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
    1870:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    1872:	2907      	cmp	r1, #7
    1874:	f63f aed1 	bhi.w	161a <z_cbvprintf_impl+0x426>
    1878:	e8df f001 	tbb	[pc, r1]
    187c:	0c06040c 	.word	0x0c06040c
    1880:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    1884:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    1886:	e6c8      	b.n	161a <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
    1888:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    188a:	e6c6      	b.n	161a <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
    188c:	17ea      	asrs	r2, r5, #31
    188e:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    1892:	e6c2      	b.n	161a <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1894:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    1896:	e6c0      	b.n	161a <z_cbvprintf_impl+0x426>
    1898:	4f2e      	ldr	r7, [pc, #184]	; (1954 <z_cbvprintf_impl+0x760>)
		char sign = 0;
    189a:	4606      	mov	r6, r0
			bpe = bps + 5;
    189c:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    18a0:	2005      	movs	r0, #5
    18a2:	e765      	b.n	1770 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
    18a4:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    18a6:	bf48      	it	mi
    18a8:	3001      	addmi	r0, #1
    18aa:	e769      	b.n	1780 <z_cbvprintf_impl+0x58c>
    18ac:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    18ae:	4610      	mov	r0, r2
    18b0:	9206      	str	r2, [sp, #24]
    18b2:	4659      	mov	r1, fp
    18b4:	47c8      	blx	r9
    18b6:	2800      	cmp	r0, #0
    18b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    18bc:	da04      	bge.n	18c8 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
    18be:	b015      	add	sp, #84	; 0x54
    18c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    18c4:	2220      	movs	r2, #32
					pad = '0';
    18c6:	4643      	mov	r3, r8
				while (width-- > 0) {
    18c8:	4619      	mov	r1, r3
    18ca:	2900      	cmp	r1, #0
    18cc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    18d0:	dcec      	bgt.n	18ac <z_cbvprintf_impl+0x6b8>
    18d2:	4445      	add	r5, r8
    18d4:	1a6d      	subs	r5, r5, r1
    18d6:	4698      	mov	r8, r3
		if (sign != 0) {
    18d8:	b12e      	cbz	r6, 18e6 <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
    18da:	4659      	mov	r1, fp
    18dc:	4630      	mov	r0, r6
    18de:	47c8      	blx	r9
    18e0:	2800      	cmp	r0, #0
    18e2:	dbec      	blt.n	18be <z_cbvprintf_impl+0x6ca>
    18e4:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    18e6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    18ea:	06da      	lsls	r2, r3, #27
    18ec:	d401      	bmi.n	18f2 <z_cbvprintf_impl+0x6fe>
    18ee:	071b      	lsls	r3, r3, #28
    18f0:	d505      	bpl.n	18fe <z_cbvprintf_impl+0x70a>
				OUTC('0');
    18f2:	4659      	mov	r1, fp
    18f4:	2030      	movs	r0, #48	; 0x30
    18f6:	47c8      	blx	r9
    18f8:	2800      	cmp	r0, #0
    18fa:	dbe0      	blt.n	18be <z_cbvprintf_impl+0x6ca>
    18fc:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    18fe:	9b05      	ldr	r3, [sp, #20]
    1900:	b133      	cbz	r3, 1910 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
    1902:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    1906:	4659      	mov	r1, fp
    1908:	47c8      	blx	r9
    190a:	2800      	cmp	r0, #0
    190c:	dbd7      	blt.n	18be <z_cbvprintf_impl+0x6ca>
    190e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1910:	9e04      	ldr	r6, [sp, #16]
    1912:	442e      	add	r6, r5
    1914:	e005      	b.n	1922 <z_cbvprintf_impl+0x72e>
				OUTC('0');
    1916:	4659      	mov	r1, fp
    1918:	2030      	movs	r0, #48	; 0x30
    191a:	47c8      	blx	r9
    191c:	2800      	cmp	r0, #0
    191e:	dbce      	blt.n	18be <z_cbvprintf_impl+0x6ca>
    1920:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1922:	1b73      	subs	r3, r6, r5
    1924:	2b00      	cmp	r3, #0
    1926:	dcf6      	bgt.n	1916 <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
    1928:	4653      	mov	r3, sl
    192a:	463a      	mov	r2, r7
    192c:	4659      	mov	r1, fp
    192e:	4648      	mov	r0, r9
    1930:	f005 f98b 	bl	6c4a <outs>
    1934:	2800      	cmp	r0, #0
    1936:	dbc2      	blt.n	18be <z_cbvprintf_impl+0x6ca>
    1938:	4405      	add	r5, r0
		while (width > 0) {
    193a:	44a8      	add	r8, r5
    193c:	eba8 0305 	sub.w	r3, r8, r5
    1940:	2b00      	cmp	r3, #0
    1942:	f77f ae6a 	ble.w	161a <z_cbvprintf_impl+0x426>
			OUTC(' ');
    1946:	4659      	mov	r1, fp
    1948:	2020      	movs	r0, #32
    194a:	47c8      	blx	r9
    194c:	2800      	cmp	r0, #0
    194e:	dbb6      	blt.n	18be <z_cbvprintf_impl+0x6ca>
    1950:	3501      	adds	r5, #1
			--width;
    1952:	e7f3      	b.n	193c <z_cbvprintf_impl+0x748>
    1954:	0000836b 	.word	0x0000836b

00001958 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1958:	b508      	push	{r3, lr}
    195a:	4604      	mov	r4, r0
	__asm__ volatile(
    195c:	f04f 0220 	mov.w	r2, #32
    1960:	f3ef 8311 	mrs	r3, BASEPRI
    1964:	f382 8812 	msr	BASEPRI_MAX, r2
    1968:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
    196c:	f002 fe4c 	bl	4608 <sys_clock_disable>
	}

	sys_arch_reboot(type);
    1970:	4620      	mov	r0, r4
    1972:	f001 fedd 	bl	3730 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1976:	4803      	ldr	r0, [pc, #12]	; (1984 <sys_reboot+0x2c>)
    1978:	f005 f824 	bl	69c4 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    197c:	f001 f838 	bl	29f0 <arch_cpu_idle>
    1980:	e7fc      	b.n	197c <sys_reboot+0x24>
    1982:	bf00      	nop
    1984:	00008371 	.word	0x00008371

00001988 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1988:	f002 be86 	b.w	4698 <SystemInit>

0000198c <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    198c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    1990:	f8df 8058 	ldr.w	r8, [pc, #88]	; 19ec <activate_foreach_backend+0x60>
{
    1994:	4604      	mov	r4, r0
	while (mask_cpy) {
    1996:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    1998:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
    199c:	b914      	cbnz	r4, 19a4 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    199e:	4638      	mov	r0, r7
    19a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    19a4:	fa94 f5a4 	rbit	r5, r4
    19a8:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    19ac:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    19b0:	012e      	lsls	r6, r5, #4
    19b2:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    19b6:	ea6f 0a03 	mvn.w	sl, r3
    19ba:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    19be:	7b2b      	ldrb	r3, [r5, #12]
    19c0:	2b00      	cmp	r3, #0
    19c2:	d0eb      	beq.n	199c <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    19c4:	f858 3006 	ldr.w	r3, [r8, r6]
    19c8:	691b      	ldr	r3, [r3, #16]
    19ca:	b94b      	cbnz	r3, 19e0 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    19cc:	4446      	add	r6, r8
			log_backend_enable(backend,
    19ce:	2204      	movs	r2, #4
    19d0:	6873      	ldr	r3, [r6, #4]
    19d2:	4628      	mov	r0, r5
    19d4:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    19d6:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    19da:	f000 fa59 	bl	1e90 <log_backend_enable>
    19de:	e7dd      	b.n	199c <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    19e0:	4628      	mov	r0, r5
    19e2:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    19e4:	2800      	cmp	r0, #0
    19e6:	d1d9      	bne.n	199c <activate_foreach_backend+0x10>
    19e8:	e7f0      	b.n	19cc <activate_foreach_backend+0x40>
    19ea:	bf00      	nop
    19ec:	00007e04 	.word	0x00007e04

000019f0 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    19f0:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    19f2:	4910      	ldr	r1, [pc, #64]	; (1a34 <enable_logger+0x44>)
    19f4:	4810      	ldr	r0, [pc, #64]	; (1a38 <enable_logger+0x48>)
{
    19f6:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    19f8:	2200      	movs	r2, #0
    19fa:	f006 f85a 	bl	7ab2 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    19fe:	4d0f      	ldr	r5, [pc, #60]	; (1a3c <enable_logger+0x4c>)
    1a00:	490f      	ldr	r1, [pc, #60]	; (1a40 <enable_logger+0x50>)
    1a02:	2200      	movs	r2, #0
    1a04:	2300      	movs	r3, #0
    1a06:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1a0a:	2400      	movs	r4, #0
    1a0c:	230e      	movs	r3, #14
    1a0e:	e9cd 3403 	strd	r3, r4, [sp, #12]
    1a12:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1a16:	4b0b      	ldr	r3, [pc, #44]	; (1a44 <enable_logger+0x54>)
    1a18:	9400      	str	r4, [sp, #0]
    1a1a:	f44f 7240 	mov.w	r2, #768	; 0x300
    1a1e:	4628      	mov	r0, r5
    1a20:	f003 fe38 	bl	5694 <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    1a24:	4908      	ldr	r1, [pc, #32]	; (1a48 <enable_logger+0x58>)
    1a26:	4628      	mov	r0, r5
    1a28:	f005 ff1f 	bl	786a <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    1a2c:	4620      	mov	r0, r4
    1a2e:	b009      	add	sp, #36	; 0x24
    1a30:	bd30      	pop	{r4, r5, pc}
    1a32:	bf00      	nop
    1a34:	00001a4d 	.word	0x00001a4d
    1a38:	20000698 	.word	0x20000698
    1a3c:	200001f0 	.word	0x200001f0
    1a40:	200015c0 	.word	0x200015c0
    1a44:	00001d3d 	.word	0x00001d3d
    1a48:	000083aa 	.word	0x000083aa

00001a4c <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1a4c:	4801      	ldr	r0, [pc, #4]	; (1a54 <log_process_thread_timer_expiry_fn+0x8>)
    1a4e:	f003 bf83 	b.w	5958 <z_impl_k_sem_give>
    1a52:	bf00      	nop
    1a54:	200001dc 	.word	0x200001dc

00001a58 <z_log_init>:
{
    1a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1a5c:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
    1a5e:	481f      	ldr	r0, [pc, #124]	; (1adc <z_log_init+0x84>)
{
    1a60:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    1a62:	f005 fb72 	bl	714a <atomic_inc>
    1a66:	4606      	mov	r6, r0
    1a68:	2800      	cmp	r0, #0
    1a6a:	d030      	beq.n	1ace <z_log_init+0x76>
	uint32_t mask = 0;
    1a6c:	2500      	movs	r5, #0
}
    1a6e:	4628      	mov	r0, r5
    1a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    1a74:	7b23      	ldrb	r3, [r4, #12]
    1a76:	b173      	cbz	r3, 1a96 <z_log_init+0x3e>
	if (backend->api->init) {
    1a78:	6823      	ldr	r3, [r4, #0]
    1a7a:	68db      	ldr	r3, [r3, #12]
    1a7c:	b10b      	cbz	r3, 1a82 <z_log_init+0x2a>
		backend->api->init(backend);
    1a7e:	4620      	mov	r0, r4
    1a80:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    1a82:	6823      	ldr	r3, [r4, #0]
    1a84:	691b      	ldr	r3, [r3, #16]
    1a86:	b9d3      	cbnz	r3, 1abe <z_log_init+0x66>
				log_backend_enable(backend,
    1a88:	6863      	ldr	r3, [r4, #4]
    1a8a:	2204      	movs	r2, #4
    1a8c:	6819      	ldr	r1, [r3, #0]
    1a8e:	4620      	mov	r0, r4
    1a90:	f000 f9fe 	bl	1e90 <log_backend_enable>
			i++;
    1a94:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1a96:	3410      	adds	r4, #16
    1a98:	454c      	cmp	r4, r9
    1a9a:	d3eb      	bcc.n	1a74 <z_log_init+0x1c>
	if (blocking) {
    1a9c:	f1b8 0f00 	cmp.w	r8, #0
    1aa0:	d0e5      	beq.n	1a6e <z_log_init+0x16>
		while (mask) {
    1aa2:	2d00      	cmp	r5, #0
    1aa4:	d0e2      	beq.n	1a6c <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
    1aa6:	4628      	mov	r0, r5
    1aa8:	f7ff ff70 	bl	198c <activate_foreach_backend>
    1aac:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    1aae:	2f00      	cmp	r7, #0
    1ab0:	d0f7      	beq.n	1aa2 <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
    1ab2:	2100      	movs	r1, #0
    1ab4:	f44f 70a4 	mov.w	r0, #328	; 0x148
    1ab8:	f004 fa5a 	bl	5f70 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1abc:	e7f1      	b.n	1aa2 <z_log_init+0x4a>
		return backend->api->is_ready(backend);
    1abe:	4620      	mov	r0, r4
    1ac0:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    1ac2:	2800      	cmp	r0, #0
    1ac4:	d0e0      	beq.n	1a88 <z_log_init+0x30>
				mask |= BIT(i);
    1ac6:	fa0a f306 	lsl.w	r3, sl, r6
    1aca:	431d      	orrs	r5, r3
    1acc:	e7e2      	b.n	1a94 <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1ace:	4c04      	ldr	r4, [pc, #16]	; (1ae0 <z_log_init+0x88>)
    1ad0:	f8df 9010 	ldr.w	r9, [pc, #16]	; 1ae4 <z_log_init+0x8c>
	uint32_t mask = 0;
    1ad4:	4605      	mov	r5, r0
				mask |= BIT(i);
    1ad6:	f04f 0a01 	mov.w	sl, #1
    1ada:	e7dd      	b.n	1a98 <z_log_init+0x40>
    1adc:	200008bc 	.word	0x200008bc
    1ae0:	00007e04 	.word	0x00007e04
    1ae4:	00007e24 	.word	0x00007e24

00001ae8 <log_format_func_t_get>:
}
    1ae8:	4b01      	ldr	r3, [pc, #4]	; (1af0 <log_format_func_t_get+0x8>)
    1aea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1aee:	4770      	bx	lr
    1af0:	00007e7c 	.word	0x00007e7c

00001af4 <log_set_timestamp_func>:
{
    1af4:	b508      	push	{r3, lr}
    1af6:	4603      	mov	r3, r0
    1af8:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    1afa:	b12b      	cbz	r3, 1b08 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    1afc:	4a04      	ldr	r2, [pc, #16]	; (1b10 <log_set_timestamp_func+0x1c>)
    1afe:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    1b00:	f000 fc78 	bl	23f4 <log_output_timestamp_freq_set>
	return 0;
    1b04:	2000      	movs	r0, #0
}
    1b06:	bd08      	pop	{r3, pc}
		return -EINVAL;
    1b08:	f06f 0015 	mvn.w	r0, #21
    1b0c:	e7fb      	b.n	1b06 <log_set_timestamp_func+0x12>
    1b0e:	bf00      	nop
    1b10:	20000004 	.word	0x20000004

00001b14 <z_log_notify_backend_enabled>:
{
    1b14:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    1b16:	4c04      	ldr	r4, [pc, #16]	; (1b28 <z_log_notify_backend_enabled+0x14>)
    1b18:	7823      	ldrb	r3, [r4, #0]
    1b1a:	b913      	cbnz	r3, 1b22 <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    1b1c:	4803      	ldr	r0, [pc, #12]	; (1b2c <z_log_notify_backend_enabled+0x18>)
    1b1e:	f003 ff1b 	bl	5958 <z_impl_k_sem_give>
	backend_attached = true;
    1b22:	2301      	movs	r3, #1
    1b24:	7023      	strb	r3, [r4, #0]
}
    1b26:	bd10      	pop	{r4, pc}
    1b28:	20001168 	.word	0x20001168
    1b2c:	200001dc 	.word	0x200001dc

00001b30 <z_log_dropped>:
{
    1b30:	b510      	push	{r4, lr}
    1b32:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    1b34:	4808      	ldr	r0, [pc, #32]	; (1b58 <z_log_dropped+0x28>)
    1b36:	f005 fb08 	bl	714a <atomic_inc>
	if (buffered) {
    1b3a:	b15c      	cbz	r4, 1b54 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1b3c:	f3bf 8f5b 	dmb	ish
    1b40:	4b06      	ldr	r3, [pc, #24]	; (1b5c <z_log_dropped+0x2c>)
    1b42:	e853 1f00 	ldrex	r1, [r3]
    1b46:	3901      	subs	r1, #1
    1b48:	e843 1200 	strex	r2, r1, [r3]
    1b4c:	2a00      	cmp	r2, #0
    1b4e:	d1f8      	bne.n	1b42 <z_log_dropped+0x12>
    1b50:	f3bf 8f5b 	dmb	ish
}
    1b54:	bd10      	pop	{r4, pc}
    1b56:	bf00      	nop
    1b58:	200008b4 	.word	0x200008b4
    1b5c:	200008b8 	.word	0x200008b8

00001b60 <z_log_dropped_read_and_clear>:
}
    1b60:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1b62:	4b06      	ldr	r3, [pc, #24]	; (1b7c <z_log_dropped_read_and_clear+0x1c>)
    1b64:	f3bf 8f5b 	dmb	ish
    1b68:	4601      	mov	r1, r0
    1b6a:	e853 0f00 	ldrex	r0, [r3]
    1b6e:	e843 1200 	strex	r2, r1, [r3]
    1b72:	2a00      	cmp	r2, #0
    1b74:	d1f9      	bne.n	1b6a <z_log_dropped_read_and_clear+0xa>
    1b76:	f3bf 8f5b 	dmb	ish
    1b7a:	4770      	bx	lr
    1b7c:	200008b4 	.word	0x200008b4

00001b80 <dropped_notify>:
{
    1b80:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    1b82:	f7ff ffed 	bl	1b60 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1b86:	4c08      	ldr	r4, [pc, #32]	; (1ba8 <dropped_notify+0x28>)
    1b88:	4e08      	ldr	r6, [pc, #32]	; (1bac <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
    1b8a:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1b8c:	42b4      	cmp	r4, r6
    1b8e:	d300      	bcc.n	1b92 <dropped_notify+0x12>
}
    1b90:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    1b92:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1b94:	795b      	ldrb	r3, [r3, #5]
    1b96:	b12b      	cbz	r3, 1ba4 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
    1b98:	6823      	ldr	r3, [r4, #0]
    1b9a:	685b      	ldr	r3, [r3, #4]
    1b9c:	b113      	cbz	r3, 1ba4 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
    1b9e:	4629      	mov	r1, r5
    1ba0:	4620      	mov	r0, r4
    1ba2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1ba4:	3410      	adds	r4, #16
    1ba6:	e7f1      	b.n	1b8c <dropped_notify+0xc>
    1ba8:	00007e04 	.word	0x00007e04
    1bac:	00007e24 	.word	0x00007e24

00001bb0 <z_log_msg_init>:
{
    1bb0:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    1bb2:	4c04      	ldr	r4, [pc, #16]	; (1bc4 <z_log_msg_init+0x14>)
    1bb4:	4904      	ldr	r1, [pc, #16]	; (1bc8 <z_log_msg_init+0x18>)
    1bb6:	4620      	mov	r0, r4
    1bb8:	f005 f958 	bl	6e6c <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    1bbc:	4b03      	ldr	r3, [pc, #12]	; (1bcc <z_log_msg_init+0x1c>)
    1bbe:	601c      	str	r4, [r3, #0]
}
    1bc0:	bd10      	pop	{r4, pc}
    1bc2:	bf00      	nop
    1bc4:	2000013c 	.word	0x2000013c
    1bc8:	00007e68 	.word	0x00007e68
    1bcc:	200008ac 	.word	0x200008ac

00001bd0 <log_core_init>:
	panic_mode = false;
    1bd0:	4a08      	ldr	r2, [pc, #32]	; (1bf4 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    1bd2:	4809      	ldr	r0, [pc, #36]	; (1bf8 <log_core_init+0x28>)
{
    1bd4:	b508      	push	{r3, lr}
	panic_mode = false;
    1bd6:	2300      	movs	r3, #0
    1bd8:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1bda:	4a08      	ldr	r2, [pc, #32]	; (1bfc <log_core_init+0x2c>)
    1bdc:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    1bde:	4a08      	ldr	r2, [pc, #32]	; (1c00 <log_core_init+0x30>)
		log_set_timestamp_func(default_get_timestamp,
    1be0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	buffered_cnt = 0;
    1be4:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    1be6:	f7ff ff85 	bl	1af4 <log_set_timestamp_func>
}
    1bea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    1bee:	f7ff bfdf 	b.w	1bb0 <z_log_msg_init>
    1bf2:	bf00      	nop
    1bf4:	20001169 	.word	0x20001169
    1bf8:	00007147 	.word	0x00007147
    1bfc:	200008b4 	.word	0x200008b4
    1c00:	200008b8 	.word	0x200008b8

00001c04 <z_log_msg_alloc>:
{
    1c04:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    1c06:	2200      	movs	r2, #0
    1c08:	4801      	ldr	r0, [pc, #4]	; (1c10 <z_log_msg_alloc+0xc>)
    1c0a:	2300      	movs	r3, #0
    1c0c:	f005 b94f 	b.w	6eae <mpsc_pbuf_alloc>
    1c10:	2000013c 	.word	0x2000013c

00001c14 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    1c14:	4801      	ldr	r0, [pc, #4]	; (1c1c <z_log_msg_local_claim+0x8>)
    1c16:	f005 b9e8 	b.w	6fea <mpsc_pbuf_claim>
    1c1a:	bf00      	nop
    1c1c:	2000013c 	.word	0x2000013c

00001c20 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    1c20:	4b02      	ldr	r3, [pc, #8]	; (1c2c <z_log_msg_free+0xc>)
{
    1c22:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    1c24:	6818      	ldr	r0, [r3, #0]
    1c26:	f005 ba32 	b.w	708e <mpsc_pbuf_free>
    1c2a:	bf00      	nop
    1c2c:	200008ac 	.word	0x200008ac

00001c30 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    1c30:	4801      	ldr	r0, [pc, #4]	; (1c38 <z_log_msg_pending+0x8>)
    1c32:	f005 ba68 	b.w	7106 <mpsc_pbuf_is_pending>
    1c36:	bf00      	nop
    1c38:	2000013c 	.word	0x2000013c

00001c3c <z_impl_log_process>:
{
    1c3c:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    1c3e:	4b28      	ldr	r3, [pc, #160]	; (1ce0 <z_impl_log_process+0xa4>)
    1c40:	7818      	ldrb	r0, [r3, #0]
    1c42:	2800      	cmp	r0, #0
    1c44:	d04b      	beq.n	1cde <z_impl_log_process+0xa2>
	return z_log_msg_local_claim();
    1c46:	f7ff ffe5 	bl	1c14 <z_log_msg_local_claim>
	if (msg) {
    1c4a:	4605      	mov	r5, r0
    1c4c:	b190      	cbz	r0, 1c74 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1c4e:	f3bf 8f5b 	dmb	ish
    1c52:	4b24      	ldr	r3, [pc, #144]	; (1ce4 <z_impl_log_process+0xa8>)
    1c54:	e853 1f00 	ldrex	r1, [r3]
    1c58:	3901      	subs	r1, #1
    1c5a:	e843 1200 	strex	r2, r1, [r3]
    1c5e:	2a00      	cmp	r2, #0
    1c60:	d1f8      	bne.n	1c54 <z_impl_log_process+0x18>
    1c62:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1c66:	4c20      	ldr	r4, [pc, #128]	; (1ce8 <z_impl_log_process+0xac>)
    1c68:	4e20      	ldr	r6, [pc, #128]	; (1cec <z_impl_log_process+0xb0>)
    1c6a:	42b4      	cmp	r4, r6
    1c6c:	d32d      	bcc.n	1cca <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
    1c6e:	4628      	mov	r0, r5
    1c70:	f7ff ffd6 	bl	1c20 <z_log_msg_free>
	return dropped_cnt > 0;
    1c74:	4b1e      	ldr	r3, [pc, #120]	; (1cf0 <z_impl_log_process+0xb4>)
    1c76:	4c1f      	ldr	r4, [pc, #124]	; (1cf4 <z_impl_log_process+0xb8>)
		if ((dropped_pend || unordered_pend) &&
    1c78:	681b      	ldr	r3, [r3, #0]
    1c7a:	2b00      	cmp	r3, #0
    1c7c:	dd19      	ble.n	1cb2 <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
    1c7e:	f005 ff12 	bl	7aa6 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    1c82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1c86:	fba0 0302 	umull	r0, r3, r0, r2
    1c8a:	fb02 3101 	mla	r1, r2, r1, r3
    1c8e:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    1c90:	e9d4 2000 	ldrd	r2, r0, [r4]
    1c94:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    1c98:	1a9b      	subs	r3, r3, r2
    1c9a:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
    1c9e:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    1ca2:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    1ca6:	4293      	cmp	r3, r2
    1ca8:	f171 0100 	sbcs.w	r1, r1, #0
    1cac:	d301      	bcc.n	1cb2 <z_impl_log_process+0x76>
				dropped_notify();
    1cae:	f7ff ff67 	bl	1b80 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    1cb2:	e9d4 3200 	ldrd	r3, r2, [r4]
    1cb6:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    1cba:	f142 0200 	adc.w	r2, r2, #0
    1cbe:	e9c4 3200 	strd	r3, r2, [r4]
}
    1cc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    1cc6:	f7ff bfb3 	b.w	1c30 <z_log_msg_pending>
	return backend->cb->active;
    1cca:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    1ccc:	795b      	ldrb	r3, [r3, #5]
    1cce:	b123      	cbz	r3, 1cda <z_impl_log_process+0x9e>
	backend->api->process(backend, msg);
    1cd0:	6823      	ldr	r3, [r4, #0]
    1cd2:	4629      	mov	r1, r5
    1cd4:	681b      	ldr	r3, [r3, #0]
    1cd6:	4620      	mov	r0, r4
    1cd8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1cda:	3410      	adds	r4, #16
    1cdc:	e7c5      	b.n	1c6a <z_impl_log_process+0x2e>
}
    1cde:	bd70      	pop	{r4, r5, r6, pc}
    1ce0:	20001168 	.word	0x20001168
    1ce4:	200008b8 	.word	0x200008b8
    1ce8:	00007e04 	.word	0x00007e04
    1cec:	00007e24 	.word	0x00007e24
    1cf0:	200008b4 	.word	0x200008b4
    1cf4:	20000690 	.word	0x20000690

00001cf8 <z_impl_log_panic>:
{
    1cf8:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    1cfa:	4d0d      	ldr	r5, [pc, #52]	; (1d30 <z_impl_log_panic+0x38>)
    1cfc:	7829      	ldrb	r1, [r5, #0]
    1cfe:	b961      	cbnz	r1, 1d1a <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
    1d00:	2001      	movs	r0, #1
    1d02:	f7ff fea9 	bl	1a58 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1d06:	4c0b      	ldr	r4, [pc, #44]	; (1d34 <z_impl_log_panic+0x3c>)
    1d08:	4e0b      	ldr	r6, [pc, #44]	; (1d38 <z_impl_log_panic+0x40>)
    1d0a:	42b4      	cmp	r4, r6
    1d0c:	d306      	bcc.n	1d1c <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    1d0e:	f7ff ff95 	bl	1c3c <z_impl_log_process>
		while (log_process() == true) {
    1d12:	2800      	cmp	r0, #0
    1d14:	d1fb      	bne.n	1d0e <z_impl_log_panic+0x16>
	panic_mode = true;
    1d16:	2301      	movs	r3, #1
    1d18:	702b      	strb	r3, [r5, #0]
}
    1d1a:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    1d1c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1d1e:	795b      	ldrb	r3, [r3, #5]
    1d20:	b11b      	cbz	r3, 1d2a <z_impl_log_panic+0x32>
	backend->api->panic(backend);
    1d22:	6823      	ldr	r3, [r4, #0]
    1d24:	4620      	mov	r0, r4
    1d26:	689b      	ldr	r3, [r3, #8]
    1d28:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1d2a:	3410      	adds	r4, #16
    1d2c:	e7ed      	b.n	1d0a <z_impl_log_panic+0x12>
    1d2e:	bf00      	nop
    1d30:	20001169 	.word	0x20001169
    1d34:	00007e04 	.word	0x00007e04
    1d38:	00007e24 	.word	0x00007e24

00001d3c <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    1d3c:	2100      	movs	r1, #0
{
    1d3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
    1d42:	4608      	mov	r0, r1
    1d44:	f7ff fe88 	bl	1a58 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1d48:	4604      	mov	r4, r0
    1d4a:	b348      	cbz	r0, 1da0 <log_process_thread_func+0x64>
    1d4c:	f240 6867 	movw	r8, #1639	; 0x667
    1d50:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    1d54:	f004 f926 	bl	5fa4 <z_impl_z_current_get>
	proc_tid = process_tid;
    1d58:	4b1a      	ldr	r3, [pc, #104]	; (1dc4 <log_process_thread_func+0x88>)
    1d5a:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1d5c:	b130      	cbz	r0, 1d6c <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    1d5e:	4b1a      	ldr	r3, [pc, #104]	; (1dc8 <log_process_thread_func+0x8c>)
	    process_tid &&
    1d60:	681b      	ldr	r3, [r3, #0]
    1d62:	2b09      	cmp	r3, #9
    1d64:	dd02      	ble.n	1d6c <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    1d66:	4819      	ldr	r0, [pc, #100]	; (1dcc <log_process_thread_func+0x90>)
    1d68:	f003 fdf6 	bl	5958 <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1d6c:	4f18      	ldr	r7, [pc, #96]	; (1dd0 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
    1d6e:	f8df a05c 	ldr.w	sl, [pc, #92]	; 1dcc <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1d72:	2500      	movs	r5, #0
		if (activate_mask) {
    1d74:	b144      	cbz	r4, 1d88 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
    1d76:	4620      	mov	r0, r4
    1d78:	f7ff fe08 	bl	198c <activate_foreach_backend>
			if (!activate_mask) {
    1d7c:	4604      	mov	r4, r0
    1d7e:	b918      	cbnz	r0, 1d88 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
    1d80:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    1d84:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    1d88:	f7ff ff58 	bl	1c3c <z_impl_log_process>
		if (log_process() == false) {
    1d8c:	4606      	mov	r6, r0
    1d8e:	b928      	cbnz	r0, 1d9c <log_process_thread_func+0x60>
			if (processed_any) {
    1d90:	b9b5      	cbnz	r5, 1dc0 <log_process_thread_func+0x84>
    1d92:	4642      	mov	r2, r8
    1d94:	464b      	mov	r3, r9
    1d96:	4650      	mov	r0, sl
    1d98:	f003 fe00 	bl	599c <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1d9c:	4635      	mov	r5, r6
    1d9e:	e7e9      	b.n	1d74 <log_process_thread_func+0x38>
    1da0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    1da4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    1da8:	e7d4      	b.n	1d54 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    1daa:	682b      	ldr	r3, [r5, #0]
    1dac:	699b      	ldr	r3, [r3, #24]
    1dae:	b11b      	cbz	r3, 1db8 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
    1db0:	2200      	movs	r2, #0
    1db2:	4611      	mov	r1, r2
    1db4:	4628      	mov	r0, r5
    1db6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1db8:	3510      	adds	r5, #16
    1dba:	42bd      	cmp	r5, r7
    1dbc:	d3f5      	bcc.n	1daa <log_process_thread_func+0x6e>
    1dbe:	e7e8      	b.n	1d92 <log_process_thread_func+0x56>
    1dc0:	4d04      	ldr	r5, [pc, #16]	; (1dd4 <log_process_thread_func+0x98>)
    1dc2:	e7fa      	b.n	1dba <log_process_thread_func+0x7e>
    1dc4:	200008b0 	.word	0x200008b0
    1dc8:	200008b8 	.word	0x200008b8
    1dcc:	200001dc 	.word	0x200001dc
    1dd0:	00007e24 	.word	0x00007e24
    1dd4:	00007e04 	.word	0x00007e04

00001dd8 <z_log_msg_post_finalize>:
{
    1dd8:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    1dda:	4818      	ldr	r0, [pc, #96]	; (1e3c <z_log_msg_post_finalize+0x64>)
    1ddc:	f005 f9b5 	bl	714a <atomic_inc>
	if (panic_mode) {
    1de0:	4b17      	ldr	r3, [pc, #92]	; (1e40 <z_log_msg_post_finalize+0x68>)
    1de2:	781b      	ldrb	r3, [r3, #0]
    1de4:	b17b      	cbz	r3, 1e06 <z_log_msg_post_finalize+0x2e>
    1de6:	f04f 0320 	mov.w	r3, #32
    1dea:	f3ef 8411 	mrs	r4, BASEPRI
    1dee:	f383 8812 	msr	BASEPRI_MAX, r3
    1df2:	f3bf 8f6f 	isb	sy
    1df6:	f7ff ff21 	bl	1c3c <z_impl_log_process>
	__asm__ volatile(
    1dfa:	f384 8811 	msr	BASEPRI, r4
    1dfe:	f3bf 8f6f 	isb	sy
}
    1e02:	b002      	add	sp, #8
    1e04:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    1e06:	4b0f      	ldr	r3, [pc, #60]	; (1e44 <z_log_msg_post_finalize+0x6c>)
    1e08:	681b      	ldr	r3, [r3, #0]
    1e0a:	2b00      	cmp	r3, #0
    1e0c:	d0f9      	beq.n	1e02 <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
    1e0e:	b950      	cbnz	r0, 1e26 <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
    1e10:	2200      	movs	r2, #0
    1e12:	2300      	movs	r3, #0
    1e14:	e9cd 2300 	strd	r2, r3, [sp]
    1e18:	480b      	ldr	r0, [pc, #44]	; (1e48 <z_log_msg_post_finalize+0x70>)
    1e1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1e1e:	2300      	movs	r3, #0
    1e20:	f004 faf6 	bl	6410 <z_impl_k_timer_start>
    1e24:	e7ed      	b.n	1e02 <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1e26:	280a      	cmp	r0, #10
    1e28:	d1eb      	bne.n	1e02 <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
    1e2a:	4807      	ldr	r0, [pc, #28]	; (1e48 <z_log_msg_post_finalize+0x70>)
    1e2c:	f005 fe4d 	bl	7aca <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1e30:	4806      	ldr	r0, [pc, #24]	; (1e4c <z_log_msg_post_finalize+0x74>)
}
    1e32:	b002      	add	sp, #8
    1e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1e38:	f003 bd8e 	b.w	5958 <z_impl_k_sem_give>
    1e3c:	200008b8 	.word	0x200008b8
    1e40:	20001169 	.word	0x20001169
    1e44:	200008b0 	.word	0x200008b0
    1e48:	20000698 	.word	0x20000698
    1e4c:	200001dc 	.word	0x200001dc

00001e50 <z_log_msg_commit>:
{
    1e50:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    1e52:	4b06      	ldr	r3, [pc, #24]	; (1e6c <z_log_msg_commit+0x1c>)
    1e54:	681b      	ldr	r3, [r3, #0]
{
    1e56:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1e58:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    1e5a:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    1e5c:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    1e5e:	4804      	ldr	r0, [pc, #16]	; (1e70 <z_log_msg_commit+0x20>)
    1e60:	f005 f8a3 	bl	6faa <mpsc_pbuf_commit>
}
    1e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    1e68:	f7ff bfb6 	b.w	1dd8 <z_log_msg_post_finalize>
    1e6c:	20000004 	.word	0x20000004
    1e70:	2000013c 	.word	0x2000013c

00001e74 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    1e74:	4a04      	ldr	r2, [pc, #16]	; (1e88 <log_source_name_get+0x14>)
    1e76:	4b05      	ldr	r3, [pc, #20]	; (1e8c <log_source_name_get+0x18>)
    1e78:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    1e7a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    1e7e:	bf34      	ite	cc
    1e80:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    1e84:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    1e86:	4770      	bx	lr
    1e88:	00007d84 	.word	0x00007d84
    1e8c:	00007e04 	.word	0x00007e04

00001e90 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1e90:	4b08      	ldr	r3, [pc, #32]	; (1eb4 <log_backend_enable+0x24>)
    1e92:	1ac3      	subs	r3, r0, r3
{
    1e94:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    1e96:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
    1e98:	6844      	ldr	r4, [r0, #4]
    1e9a:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    1e9c:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    1e9e:	6843      	ldr	r3, [r0, #4]
    1ea0:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
    1ea2:	6843      	ldr	r3, [r0, #4]
    1ea4:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1ea6:	6843      	ldr	r3, [r0, #4]
    1ea8:	2201      	movs	r2, #1
    1eaa:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    1eac:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    1eae:	f7ff be31 	b.w	1b14 <z_log_notify_backend_enabled>
    1eb2:	bf00      	nop
    1eb4:	00007e04 	.word	0x00007e04

00001eb8 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    1eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ebc:	b08f      	sub	sp, #60	; 0x3c
    1ebe:	af04      	add	r7, sp, #16
    1ec0:	f3c1 284a 	ubfx	r8, r1, #9, #11
    1ec4:	60b8      	str	r0, [r7, #8]
    1ec6:	460d      	mov	r5, r1
    1ec8:	4691      	mov	r9, r2
    1eca:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    1ecc:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    1ece:	f1b8 0f00 	cmp.w	r8, #0
    1ed2:	d063      	beq.n	1f9c <z_impl_z_log_msg_static_create+0xe4>
	struct z_cbprintf_buf_desc buf_desc = {
    1ed4:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
    1ed6:	f107 0314 	add.w	r3, r7, #20
    1eda:	f04f 0b04 	mov.w	fp, #4
    1ede:	f04f 0a0a 	mov.w	sl, #10
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    1ee2:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
    1ee6:	e9c7 6607 	strd	r6, r6, [r7, #28]
    1eea:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
    1eec:	9301      	str	r3, [sp, #4]
    1eee:	f8cd b008 	str.w	fp, [sp, #8]
    1ef2:	f8cd a000 	str.w	sl, [sp]
    1ef6:	f107 031c 	add.w	r3, r7, #28
    1efa:	68f9      	ldr	r1, [r7, #12]
    1efc:	4632      	mov	r2, r6
    1efe:	4648      	mov	r0, r9
    1f00:	f7fe fe70 	bl	be4 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
    1f04:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    1f08:	4603      	mov	r3, r0
    1f0a:	d31c      	bcc.n	1f46 <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    1f0c:	466c      	mov	r4, sp
    1f0e:	b08a      	sub	sp, #40	; 0x28
    1f10:	f8d9 1004 	ldr.w	r1, [r9, #4]
    1f14:	ab04      	add	r3, sp, #16
    1f16:	4826      	ldr	r0, [pc, #152]	; (1fb0 <z_impl_z_log_msg_static_create+0xf8>)
    1f18:	e9c3 0105 	strd	r0, r1, [r3, #20]
    1f1c:	f240 71ff 	movw	r1, #2047	; 0x7ff
    1f20:	61d9      	str	r1, [r3, #28]
    1f22:	461a      	mov	r2, r3
    1f24:	f44f 7100 	mov.w	r1, #512	; 0x200
    1f28:	8419      	strh	r1, [r3, #32]
    1f2a:	4b22      	ldr	r3, [pc, #136]	; (1fb4 <z_impl_z_log_msg_static_create+0xfc>)
    1f2c:	f842 3f10 	str.w	r3, [r2, #16]!
    1f30:	4821      	ldr	r0, [pc, #132]	; (1fb8 <z_impl_z_log_msg_static_create+0x100>)
    1f32:	4633      	mov	r3, r6
    1f34:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    1f38:	f7ff ffbe 	bl	1eb8 <z_impl_z_log_msg_static_create>
    1f3c:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
    1f3e:	372c      	adds	r7, #44	; 0x2c
    1f40:	46bd      	mov	sp, r7
    1f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
    1f46:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    1f4a:	f104 0017 	add.w	r0, r4, #23
    1f4e:	4418      	add	r0, r3
    1f50:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    1f54:	0880      	lsrs	r0, r0, #2
    1f56:	603b      	str	r3, [r7, #0]
    1f58:	f7ff fe54 	bl	1c04 <z_log_msg_alloc>
    1f5c:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
    1f60:	4604      	mov	r4, r0
    1f62:	b190      	cbz	r0, 1f8a <z_impl_z_log_msg_static_create+0xd2>
	struct z_cbprintf_buf_desc buf_desc = {
    1f64:	683b      	ldr	r3, [r7, #0]
	return cbprintf_package_convert(in_packaged, in_len,
    1f66:	4a15      	ldr	r2, [pc, #84]	; (1fbc <z_impl_z_log_msg_static_create+0x104>)
	struct z_cbprintf_buf_desc buf_desc = {
    1f68:	e9c7 3608 	strd	r3, r6, [r7, #32]
						    msg->data, out_desc.package_len,
    1f6c:	f100 0110 	add.w	r1, r0, #16
	return cbprintf_package_convert(in_packaged, in_len,
    1f70:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
    1f74:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    1f76:	e9cd a300 	strd	sl, r3, [sp]
    1f7a:	f8cd b008 	str.w	fp, [sp, #8]
    1f7e:	68f9      	ldr	r1, [r7, #12]
    1f80:	f107 031c 	add.w	r3, r7, #28
    1f84:	4648      	mov	r0, r9
    1f86:	f7fe fe2d 	bl	be4 <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
    1f8a:	f368 2553 	bfi	r5, r8, #9, #11
    1f8e:	687b      	ldr	r3, [r7, #4]
    1f90:	68b9      	ldr	r1, [r7, #8]
    1f92:	462a      	mov	r2, r5
    1f94:	4620      	mov	r0, r4
    1f96:	f005 f90e 	bl	71b6 <z_log_msg_finalize>
    1f9a:	e7d0      	b.n	1f3e <z_impl_z_log_msg_static_create+0x86>
    1f9c:	f104 0017 	add.w	r0, r4, #23
    1fa0:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    1fa4:	0880      	lsrs	r0, r0, #2
    1fa6:	f7ff fe2d 	bl	1c04 <z_log_msg_alloc>
    1faa:	4604      	mov	r4, r0
    1fac:	e7ed      	b.n	1f8a <z_impl_z_log_msg_static_create+0xd2>
    1fae:	bf00      	nop
    1fb0:	000083bf 	.word	0x000083bf
    1fb4:	01000004 	.word	0x01000004
    1fb8:	00007db4 	.word	0x00007db4
    1fbc:	0000718b 	.word	0x0000718b

00001fc0 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    1fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fc4:	b087      	sub	sp, #28
    1fc6:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
    1fca:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
    1fce:	4604      	mov	r4, r0
    1fd0:	460f      	mov	r7, r1
    1fd2:	4693      	mov	fp, r2
    1fd4:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    1fd6:	b3a6      	cbz	r6, 2042 <z_impl_z_log_msg_runtime_vcreate+0x82>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    1fd8:	2110      	movs	r1, #16
    1fda:	f8cd 9000 	str.w	r9, [sp]
    1fde:	4633      	mov	r3, r6
    1fe0:	4652      	mov	r2, sl
    1fe2:	2000      	movs	r0, #0
		va_copy(ap2, ap);
    1fe4:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    1fe8:	f7fe fc26 	bl	838 <cbvprintf_package>
    1fec:	4601      	mov	r1, r0
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    1fee:	f105 0017 	add.w	r0, r5, #23
    1ff2:	4408      	add	r0, r1
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    1ff4:	4b14      	ldr	r3, [pc, #80]	; (2048 <z_impl_z_log_msg_runtime_vcreate+0x88>)
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    1ff6:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
    1ff8:	f004 0407 	and.w	r4, r4, #7
    1ffc:	f00b 0b07 	and.w	fp, fp, #7
    2000:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    2002:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
    2006:	ea03 2341 	and.w	r3, r3, r1, lsl #9
    200a:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
    200e:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
    2010:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
    2012:	f7ff fdf7 	bl	1c04 <z_log_msg_alloc>
	struct log_msg_desc desc =
    2016:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    201a:	4605      	mov	r5, r0
    201c:	b140      	cbz	r0, 2030 <z_impl_z_log_msg_runtime_vcreate+0x70>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    201e:	b13e      	cbz	r6, 2030 <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    2020:	9903      	ldr	r1, [sp, #12]
    2022:	f8cd 9000 	str.w	r9, [sp]
    2026:	4633      	mov	r3, r6
    2028:	4652      	mov	r2, sl
    202a:	3010      	adds	r0, #16
    202c:	f7fe fc04 	bl	838 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    2030:	4643      	mov	r3, r8
    2032:	4622      	mov	r2, r4
    2034:	4639      	mov	r1, r7
    2036:	4628      	mov	r0, r5
	}
}
    2038:	b007      	add	sp, #28
    203a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
    203e:	f005 b8ba 	b.w	71b6 <z_log_msg_finalize>
		plen = 0;
    2042:	4631      	mov	r1, r6
    2044:	e7d3      	b.n	1fee <z_impl_z_log_msg_runtime_vcreate+0x2e>
    2046:	bf00      	nop
    2048:	000ffe00 	.word	0x000ffe00

0000204c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    204c:	b40e      	push	{r1, r2, r3}
    204e:	b503      	push	{r0, r1, lr}
    2050:	ab03      	add	r3, sp, #12
    2052:	4601      	mov	r1, r0
    2054:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    2058:	4804      	ldr	r0, [pc, #16]	; (206c <print_formatted+0x20>)
	va_start(args, fmt);
    205a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    205c:	f005 f8d1 	bl	7202 <cbvprintf>
	va_end(args);

	return length;
}
    2060:	b002      	add	sp, #8
    2062:	f85d eb04 	ldr.w	lr, [sp], #4
    2066:	b003      	add	sp, #12
    2068:	4770      	bx	lr
    206a:	bf00      	nop
    206c:	0000722b 	.word	0x0000722b

00002070 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2070:	06ca      	lsls	r2, r1, #27
    2072:	d405      	bmi.n	2080 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2074:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    2076:	bf4c      	ite	mi
    2078:	4902      	ldrmi	r1, [pc, #8]	; (2084 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    207a:	4903      	ldrpl	r1, [pc, #12]	; (2088 <newline_print+0x18>)
    207c:	f7ff bfe6 	b.w	204c <print_formatted>
	}
}
    2080:	4770      	bx	lr
    2082:	bf00      	nop
    2084:	000083ff 	.word	0x000083ff
    2088:	000083fe 	.word	0x000083fe

0000208c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    208c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2090:	b089      	sub	sp, #36	; 0x24
    2092:	469b      	mov	fp, r3
    2094:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2098:	9304      	str	r3, [sp, #16]
    209a:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    209e:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    20a0:	9b04      	ldr	r3, [sp, #16]
{
    20a2:	9206      	str	r2, [sp, #24]
    20a4:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    20a8:	4604      	mov	r4, r0
    20aa:	460d      	mov	r5, r1
	if (!raw_string) {
    20ac:	2b00      	cmp	r3, #0
    20ae:	f000 8087 	beq.w	21c0 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    20b2:	f006 0308 	and.w	r3, r6, #8
    20b6:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    20b8:	f005 f865 	bl	7186 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    20bc:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    20c0:	4602      	mov	r2, r0
    20c2:	2800      	cmp	r0, #0
    20c4:	d04b      	beq.n	215e <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    20c6:	4986      	ldr	r1, [pc, #536]	; (22e0 <log_output_process+0x254>)
    20c8:	4620      	mov	r0, r4
    20ca:	f7ff ffbf 	bl	204c <print_formatted>
    20ce:	4680      	mov	r8, r0
	if (stamp) {
    20d0:	f1ba 0f00 	cmp.w	sl, #0
    20d4:	d008      	beq.n	20e8 <log_output_process+0x5c>
	if (!format) {
    20d6:	f016 0f44 	tst.w	r6, #68	; 0x44
    20da:	d142      	bne.n	2162 <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    20dc:	4981      	ldr	r1, [pc, #516]	; (22e4 <log_output_process+0x258>)
    20de:	462a      	mov	r2, r5
    20e0:	4620      	mov	r0, r4
    20e2:	f7ff ffb3 	bl	204c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    20e6:	4480      	add	r8, r0
	if (color) {
    20e8:	f006 0301 	and.w	r3, r6, #1
    20ec:	b15b      	cbz	r3, 2106 <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    20ee:	4b7e      	ldr	r3, [pc, #504]	; (22e8 <log_output_process+0x25c>)
    20f0:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    20f2:	497e      	ldr	r1, [pc, #504]	; (22ec <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
    20f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    20f8:	4b7d      	ldr	r3, [pc, #500]	; (22f0 <log_output_process+0x264>)
    20fa:	4620      	mov	r0, r4
    20fc:	2a00      	cmp	r2, #0
    20fe:	bf08      	it	eq
    2100:	461a      	moveq	r2, r3
    2102:	f7ff ffa3 	bl	204c <print_formatted>
	if (level_on) {
    2106:	f006 0308 	and.w	r3, r6, #8
    210a:	2b00      	cmp	r3, #0
    210c:	d055      	beq.n	21ba <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    210e:	4b79      	ldr	r3, [pc, #484]	; (22f4 <log_output_process+0x268>)
    2110:	9a04      	ldr	r2, [sp, #16]
    2112:	4979      	ldr	r1, [pc, #484]	; (22f8 <log_output_process+0x26c>)
    2114:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2118:	4620      	mov	r0, r4
    211a:	f7ff ff97 	bl	204c <print_formatted>
    211e:	4605      	mov	r5, r0
	if (domain) {
    2120:	9b06      	ldr	r3, [sp, #24]
    2122:	b12b      	cbz	r3, 2130 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    2124:	4975      	ldr	r1, [pc, #468]	; (22fc <log_output_process+0x270>)
    2126:	461a      	mov	r2, r3
    2128:	4620      	mov	r0, r4
    212a:	f7ff ff8f 	bl	204c <print_formatted>
    212e:	4405      	add	r5, r0
	if (source) {
    2130:	f1bb 0f00 	cmp.w	fp, #0
    2134:	d005      	beq.n	2142 <log_output_process+0xb6>
		total += print_formatted(output,
    2136:	4972      	ldr	r1, [pc, #456]	; (2300 <log_output_process+0x274>)
    2138:	465a      	mov	r2, fp
    213a:	4620      	mov	r0, r4
    213c:	f7ff ff86 	bl	204c <print_formatted>
    2140:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    2142:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    2144:	f1b9 0f00 	cmp.w	r9, #0
    2148:	d149      	bne.n	21de <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    214a:	2f00      	cmp	r7, #0
    214c:	d14f      	bne.n	21ee <log_output_process+0x162>
	if (color) {
    214e:	07f3      	lsls	r3, r6, #31
    2150:	f100 80c0 	bmi.w	22d4 <log_output_process+0x248>
	newline_print(output, flags);
    2154:	4631      	mov	r1, r6
    2156:	4620      	mov	r0, r4
    2158:	f7ff ff8a 	bl	2070 <newline_print>
}
    215c:	e0b4      	b.n	22c8 <log_output_process+0x23c>
	uint32_t length = 0U;
    215e:	4680      	mov	r8, r0
    2160:	e7b6      	b.n	20d0 <log_output_process+0x44>
	} else if (freq != 0U) {
    2162:	4b68      	ldr	r3, [pc, #416]	; (2304 <log_output_process+0x278>)
    2164:	6818      	ldr	r0, [r3, #0]
    2166:	2800      	cmp	r0, #0
    2168:	d0bd      	beq.n	20e6 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    216a:	4b67      	ldr	r3, [pc, #412]	; (2308 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    216c:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    2170:	681b      	ldr	r3, [r3, #0]
    2172:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    2176:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    217a:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    217e:	fb00 5513 	mls	r5, r0, r3, r5
    2182:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
    2186:	fb0e f505 	mul.w	r5, lr, r5
    218a:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
    218e:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2190:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    2194:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2198:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
    219c:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    21a0:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
    21a4:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    21a6:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    21aa:	4958      	ldr	r1, [pc, #352]	; (230c <log_output_process+0x280>)
    21ac:	e9cd c501 	strd	ip, r5, [sp, #4]
    21b0:	4652      	mov	r2, sl
    21b2:	4620      	mov	r0, r4
    21b4:	f7ff ff4a 	bl	204c <print_formatted>
    21b8:	e795      	b.n	20e6 <log_output_process+0x5a>
	int total = 0;
    21ba:	f006 0508 	and.w	r5, r6, #8
    21be:	e7af      	b.n	2120 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    21c0:	f1bb 0f01 	cmp.w	fp, #1
    21c4:	d106      	bne.n	21d4 <log_output_process+0x148>
	if (package) {
    21c6:	f1b9 0f00 	cmp.w	r9, #0
    21ca:	d164      	bne.n	2296 <log_output_process+0x20a>
	if (data_len) {
    21cc:	2f00      	cmp	r7, #0
    21ce:	d07b      	beq.n	22c8 <log_output_process+0x23c>
		prefix_offset = 0;
    21d0:	2500      	movs	r5, #0
    21d2:	e00c      	b.n	21ee <log_output_process+0x162>
	if (package) {
    21d4:	f1b9 0f00 	cmp.w	r9, #0
    21d8:	d0f8      	beq.n	21cc <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    21da:	484d      	ldr	r0, [pc, #308]	; (2310 <log_output_process+0x284>)
    21dc:	e05c      	b.n	2298 <log_output_process+0x20c>
		cb = out_func;
    21de:	484d      	ldr	r0, [pc, #308]	; (2314 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    21e0:	494d      	ldr	r1, [pc, #308]	; (2318 <log_output_process+0x28c>)
    21e2:	464b      	mov	r3, r9
    21e4:	4622      	mov	r2, r4
    21e6:	f004 fb82 	bl	68ee <cbpprintf_external>
	if (data_len) {
    21ea:	2f00      	cmp	r7, #0
    21ec:	d068      	beq.n	22c0 <log_output_process+0x234>
		print_formatted(output, " ");
    21ee:	f8df 912c 	ldr.w	r9, [pc, #300]	; 231c <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    21f2:	f8df a12c 	ldr.w	sl, [pc, #300]	; 2320 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    21f6:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    21f8:	4631      	mov	r1, r6
    21fa:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    21fc:	46b8      	mov	r8, r7
    21fe:	bf28      	it	cs
    2200:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    2204:	f7ff ff34 	bl	2070 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    2208:	f04f 0b00 	mov.w	fp, #0
    220c:	455d      	cmp	r5, fp
    220e:	dc45      	bgt.n	229c <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
    2210:	9b05      	ldr	r3, [sp, #20]
    2212:	4651      	mov	r1, sl
    2214:	781a      	ldrb	r2, [r3, #0]
    2216:	4620      	mov	r0, r4
    2218:	f7ff ff18 	bl	204c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    221c:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    2220:	f01b 0f07 	tst.w	fp, #7
    2224:	d103      	bne.n	222e <log_output_process+0x1a2>
			print_formatted(output, " ");
    2226:	4649      	mov	r1, r9
    2228:	4620      	mov	r0, r4
    222a:	f7ff ff0f 	bl	204c <print_formatted>
		if (i < length) {
    222e:	45d8      	cmp	r8, fp
    2230:	d93b      	bls.n	22aa <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
    2232:	9b05      	ldr	r3, [sp, #20]
    2234:	4651      	mov	r1, sl
    2236:	f813 200b 	ldrb.w	r2, [r3, fp]
    223a:	4620      	mov	r0, r4
    223c:	f7ff ff06 	bl	204c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2240:	f10b 0b01 	add.w	fp, fp, #1
    2244:	f1bb 0f10 	cmp.w	fp, #16
    2248:	d1ea      	bne.n	2220 <log_output_process+0x194>
	print_formatted(output, "|");
    224a:	4936      	ldr	r1, [pc, #216]	; (2324 <log_output_process+0x298>)
    224c:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    224e:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    2252:	f7ff fefb 	bl	204c <print_formatted>
		if (i < length) {
    2256:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    2258:	9b05      	ldr	r3, [sp, #20]
    225a:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    225c:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    2260:	295f      	cmp	r1, #95	; 0x5f
    2262:	bf28      	it	cs
    2264:	222e      	movcs	r2, #46	; 0x2e
    2266:	4930      	ldr	r1, [pc, #192]	; (2328 <log_output_process+0x29c>)
    2268:	4620      	mov	r0, r4
    226a:	f7ff feef 	bl	204c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    226e:	f10b 0b01 	add.w	fp, fp, #1
    2272:	f1bb 0f10 	cmp.w	fp, #16
    2276:	d01d      	beq.n	22b4 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
    2278:	f01b 0f07 	tst.w	fp, #7
    227c:	d103      	bne.n	2286 <log_output_process+0x1fa>
			print_formatted(output, " ");
    227e:	4649      	mov	r1, r9
    2280:	4620      	mov	r0, r4
    2282:	f7ff fee3 	bl	204c <print_formatted>
		if (i < length) {
    2286:	45d8      	cmp	r8, fp
    2288:	465a      	mov	r2, fp
    228a:	d8e5      	bhi.n	2258 <log_output_process+0x1cc>
			print_formatted(output, " ");
    228c:	4649      	mov	r1, r9
    228e:	4620      	mov	r0, r4
    2290:	f7ff fedc 	bl	204c <print_formatted>
    2294:	e7eb      	b.n	226e <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    2296:	481f      	ldr	r0, [pc, #124]	; (2314 <log_output_process+0x288>)
		prefix_offset = 0;
    2298:	9d04      	ldr	r5, [sp, #16]
    229a:	e7a1      	b.n	21e0 <log_output_process+0x154>
		print_formatted(output, " ");
    229c:	4649      	mov	r1, r9
    229e:	4620      	mov	r0, r4
    22a0:	f7ff fed4 	bl	204c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    22a4:	f10b 0b01 	add.w	fp, fp, #1
    22a8:	e7b0      	b.n	220c <log_output_process+0x180>
			print_formatted(output, "   ");
    22aa:	4920      	ldr	r1, [pc, #128]	; (232c <log_output_process+0x2a0>)
    22ac:	4620      	mov	r0, r4
    22ae:	f7ff fecd 	bl	204c <print_formatted>
    22b2:	e7c5      	b.n	2240 <log_output_process+0x1b4>
		data += length;
    22b4:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    22b6:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    22ba:	4443      	add	r3, r8
    22bc:	9305      	str	r3, [sp, #20]
	} while (len);
    22be:	d19a      	bne.n	21f6 <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    22c0:	9b04      	ldr	r3, [sp, #16]
    22c2:	2b00      	cmp	r3, #0
    22c4:	f47f af43 	bne.w	214e <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    22c8:	4620      	mov	r0, r4
}
    22ca:	b009      	add	sp, #36	; 0x24
    22cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    22d0:	f004 bf9e 	b.w	7210 <log_output_flush>
		print_formatted(output, "%s", log_color);
    22d4:	4a06      	ldr	r2, [pc, #24]	; (22f0 <log_output_process+0x264>)
    22d6:	4905      	ldr	r1, [pc, #20]	; (22ec <log_output_process+0x260>)
    22d8:	4620      	mov	r0, r4
    22da:	f7ff feb7 	bl	204c <print_formatted>
}
    22de:	e739      	b.n	2154 <log_output_process+0xc8>
    22e0:	00008406 	.word	0x00008406
    22e4:	0000840a 	.word	0x0000840a
    22e8:	00007e8c 	.word	0x00007e8c
    22ec:	0000842f 	.word	0x0000842f
    22f0:	00008401 	.word	0x00008401
    22f4:	00007ea0 	.word	0x00007ea0
    22f8:	00008432 	.word	0x00008432
    22fc:	00008438 	.word	0x00008438
    2300:	0000843c 	.word	0x0000843c
    2304:	200008c4 	.word	0x200008c4
    2308:	200008c0 	.word	0x200008c0
    230c:	00008413 	.word	0x00008413
    2310:	00007261 	.word	0x00007261
    2314:	0000722b 	.word	0x0000722b
    2318:	00007203 	.word	0x00007203
    231c:	00008449 	.word	0x00008449
    2320:	00008441 	.word	0x00008441
    2324:	0000844b 	.word	0x0000844b
    2328:	0000844d 	.word	0x0000844d
    232c:	00008447 	.word	0x00008447

00002330 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    2330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    2334:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    2336:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    2338:	688e      	ldr	r6, [r1, #8]
    233a:	b086      	sub	sp, #24
    233c:	4605      	mov	r5, r0
    233e:	460c      	mov	r4, r1
    2340:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
    2342:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    2346:	b15b      	cbz	r3, 2360 <log_output_msg_process+0x30>
    2348:	4a13      	ldr	r2, [pc, #76]	; (2398 <log_output_msg_process+0x68>)
    234a:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    234c:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    2350:	2900      	cmp	r1, #0
    2352:	db1f      	blt.n	2394 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    2354:	7820      	ldrb	r0, [r4, #0]
    2356:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    235a:	f7ff fd8b 	bl	1e74 <log_source_name_get>
    235e:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    2360:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
    2362:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    2364:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    2368:	9700      	str	r7, [sp, #0]
    236a:	f3c2 224a 	ubfx	r2, r2, #9, #11
    236e:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    2370:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
    2374:	f3c0 100b 	ubfx	r0, r0, #4, #12
    2378:	bf08      	it	eq
    237a:	2100      	moveq	r1, #0
    237c:	e9cd 0803 	strd	r0, r8, [sp, #12]
    2380:	e9cd 1401 	strd	r1, r4, [sp, #4]
    2384:	2200      	movs	r2, #0
    2386:	4631      	mov	r1, r6
    2388:	4628      	mov	r0, r5
    238a:	f7ff fe7f 	bl	208c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    238e:	b006      	add	sp, #24
    2390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    2394:	2300      	movs	r3, #0
    2396:	e7e3      	b.n	2360 <log_output_msg_process+0x30>
    2398:	00007d84 	.word	0x00007d84

0000239c <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    239c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    239e:	f242 730f 	movw	r3, #9999	; 0x270f
    23a2:	428b      	cmp	r3, r1
    23a4:	bf28      	it	cs
    23a6:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    23a8:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    23aa:	4a0f      	ldr	r2, [pc, #60]	; (23e8 <log_output_dropped_process+0x4c>)
{
    23ac:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    23ae:	2105      	movs	r1, #5
    23b0:	4668      	mov	r0, sp
    23b2:	f004 fb14 	bl	69de <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    23b6:	6863      	ldr	r3, [r4, #4]
    23b8:	490c      	ldr	r1, [pc, #48]	; (23ec <log_output_dropped_process+0x50>)
    23ba:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    23bc:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    23be:	220b      	movs	r2, #11
    23c0:	4628      	mov	r0, r5
    23c2:	f004 ff11 	bl	71e8 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    23c6:	6863      	ldr	r3, [r4, #4]
    23c8:	4632      	mov	r2, r6
    23ca:	4669      	mov	r1, sp
    23cc:	4628      	mov	r0, r5
    23ce:	685b      	ldr	r3, [r3, #4]
    23d0:	f004 ff0a 	bl	71e8 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    23d4:	6863      	ldr	r3, [r4, #4]
    23d6:	4906      	ldr	r1, [pc, #24]	; (23f0 <log_output_dropped_process+0x54>)
    23d8:	685b      	ldr	r3, [r3, #4]
    23da:	221b      	movs	r2, #27
    23dc:	4628      	mov	r0, r5
    23de:	f004 ff03 	bl	71e8 <buffer_write>
		     output->control_block->ctx);
}
    23e2:	b002      	add	sp, #8
    23e4:	bd70      	pop	{r4, r5, r6, pc}
    23e6:	bf00      	nop
    23e8:	00008a71 	.word	0x00008a71
    23ec:	0000846c 	.word	0x0000846c
    23f0:	00008450 	.word	0x00008450

000023f4 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    23f4:	4a07      	ldr	r2, [pc, #28]	; (2414 <log_output_timestamp_freq_set+0x20>)
    23f6:	2100      	movs	r1, #0
    23f8:	2301      	movs	r3, #1
    23fa:	4290      	cmp	r0, r2
    23fc:	d806      	bhi.n	240c <log_output_timestamp_freq_set+0x18>
    23fe:	4a06      	ldr	r2, [pc, #24]	; (2418 <log_output_timestamp_freq_set+0x24>)
    2400:	b901      	cbnz	r1, 2404 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    2402:	2301      	movs	r3, #1
    2404:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    2406:	4b05      	ldr	r3, [pc, #20]	; (241c <log_output_timestamp_freq_set+0x28>)
    2408:	6018      	str	r0, [r3, #0]
}
    240a:	4770      	bx	lr
		frequency /= 2U;
    240c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    240e:	005b      	lsls	r3, r3, #1
    2410:	2101      	movs	r1, #1
    2412:	e7f2      	b.n	23fa <log_output_timestamp_freq_set+0x6>
    2414:	000f4240 	.word	0x000f4240
    2418:	200008c0 	.word	0x200008c0
    241c:	200008c4 	.word	0x200008c4

00002420 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    2420:	4b01      	ldr	r3, [pc, #4]	; (2428 <log_backend_rtt_init+0x8>)
    2422:	2201      	movs	r2, #1
    2424:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    2426:	4770      	bx	lr
    2428:	2000116a 	.word	0x2000116a

0000242c <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    242c:	4b01      	ldr	r3, [pc, #4]	; (2434 <format_set+0x8>)
	return 0;
}
    242e:	2000      	movs	r0, #0
	log_format_current = log_type;
    2430:	6019      	str	r1, [r3, #0]
}
    2432:	4770      	bx	lr
    2434:	200008dc 	.word	0x200008dc

00002438 <panic>:
	panic_mode = true;
    2438:	4b02      	ldr	r3, [pc, #8]	; (2444 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    243a:	4803      	ldr	r0, [pc, #12]	; (2448 <panic+0x10>)
    243c:	2201      	movs	r2, #1
    243e:	701a      	strb	r2, [r3, #0]
    2440:	f004 bee6 	b.w	7210 <log_output_flush>
    2444:	2000116b 	.word	0x2000116b
    2448:	00007ed0 	.word	0x00007ed0

0000244c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    244c:	4801      	ldr	r0, [pc, #4]	; (2454 <dropped+0x8>)
    244e:	f7ff bfa5 	b.w	239c <log_output_dropped_process>
    2452:	bf00      	nop
    2454:	00007ed0 	.word	0x00007ed0

00002458 <process>:
{
    2458:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    245a:	4b06      	ldr	r3, [pc, #24]	; (2474 <process+0x1c>)
    245c:	6818      	ldr	r0, [r3, #0]
{
    245e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2460:	f7ff fb42 	bl	1ae8 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    2464:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2466:	4603      	mov	r3, r0
}
    2468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    246c:	4802      	ldr	r0, [pc, #8]	; (2478 <process+0x20>)
    246e:	220f      	movs	r2, #15
    2470:	4718      	bx	r3
    2472:	bf00      	nop
    2474:	200008dc 	.word	0x200008dc
    2478:	00007ed0 	.word	0x00007ed0

0000247c <on_failed_write>:
	if (retry_cnt == 0) {
    247c:	b910      	cbnz	r0, 2484 <on_failed_write+0x8>
		host_present = false;
    247e:	4b07      	ldr	r3, [pc, #28]	; (249c <on_failed_write+0x20>)
    2480:	7018      	strb	r0, [r3, #0]
}
    2482:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    2484:	4b06      	ldr	r3, [pc, #24]	; (24a0 <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
    2486:	781b      	ldrb	r3, [r3, #0]
    2488:	b11b      	cbz	r3, 2492 <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
    248a:	f241 3088 	movw	r0, #5000	; 0x1388
    248e:	f005 bb0c 	b.w	7aaa <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    2492:	20a4      	movs	r0, #164	; 0xa4
    2494:	2100      	movs	r1, #0
    2496:	f003 bd6b 	b.w	5f70 <z_impl_k_sleep>
    249a:	bf00      	nop
    249c:	2000116a 	.word	0x2000116a
    24a0:	2000116b 	.word	0x2000116b

000024a4 <data_out_block_mode>:
{
    24a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    24a8:	f8df 9074 	ldr.w	r9, [pc, #116]	; 2520 <data_out_block_mode+0x7c>
    24ac:	4f1d      	ldr	r7, [pc, #116]	; (2524 <data_out_block_mode+0x80>)
{
    24ae:	4680      	mov	r8, r0
    24b0:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    24b2:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    24b4:	f899 5000 	ldrb.w	r5, [r9]
    24b8:	b995      	cbnz	r5, 24e0 <data_out_block_mode+0x3c>
			RTT_LOCK();
    24ba:	f002 fea3 	bl	5204 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    24be:	4628      	mov	r0, r5
    24c0:	4632      	mov	r2, r6
    24c2:	4641      	mov	r1, r8
    24c4:	f002 fe4c 	bl	5160 <SEGGER_RTT_WriteSkipNoLock>
    24c8:	4605      	mov	r5, r0
			RTT_UNLOCK();
    24ca:	f002 fea5 	bl	5218 <zephyr_rtt_mutex_unlock>
		if (ret) {
    24ce:	b1e5      	cbz	r5, 250a <data_out_block_mode+0x66>
	host_present = true;
    24d0:	2301      	movs	r3, #1
    24d2:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
    24d4:	f899 3000 	ldrb.w	r3, [r9]
    24d8:	b973      	cbnz	r3, 24f8 <data_out_block_mode+0x54>
}
    24da:	4630      	mov	r0, r6
    24dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    24e0:	4632      	mov	r2, r6
    24e2:	4641      	mov	r1, r8
    24e4:	2000      	movs	r0, #0
    24e6:	f002 fe3b 	bl	5160 <SEGGER_RTT_WriteSkipNoLock>
    24ea:	4605      	mov	r5, r0
    24ec:	e7ef      	b.n	24ce <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
    24ee:	4620      	mov	r0, r4
    24f0:	f7ff ffc4 	bl	247c <on_failed_write>
    24f4:	1e65      	subs	r5, r4, #1
    24f6:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    24f8:	2000      	movs	r0, #0
    24fa:	f002 fe79 	bl	51f0 <SEGGER_RTT_HasDataUp>
    24fe:	2800      	cmp	r0, #0
    2500:	d0eb      	beq.n	24da <data_out_block_mode+0x36>
    2502:	783b      	ldrb	r3, [r7, #0]
    2504:	2b00      	cmp	r3, #0
    2506:	d1f2      	bne.n	24ee <data_out_block_mode+0x4a>
    2508:	e7e7      	b.n	24da <data_out_block_mode+0x36>
		} else if (host_present) {
    250a:	783b      	ldrb	r3, [r7, #0]
    250c:	2b00      	cmp	r3, #0
    250e:	d0e4      	beq.n	24da <data_out_block_mode+0x36>
			retry_cnt--;
    2510:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
    2512:	4620      	mov	r0, r4
    2514:	f7ff ffb2 	bl	247c <on_failed_write>
	} while ((ret == 0) && host_present);
    2518:	783b      	ldrb	r3, [r7, #0]
    251a:	2b00      	cmp	r3, #0
    251c:	d1ca      	bne.n	24b4 <data_out_block_mode+0x10>
    251e:	e7dc      	b.n	24da <data_out_block_mode+0x36>
    2520:	2000116b 	.word	0x2000116b
    2524:	2000116a 	.word	0x2000116a

00002528 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    2528:	4b01      	ldr	r3, [pc, #4]	; (2530 <format_set+0x8>)
	return 0;
}
    252a:	2000      	movs	r0, #0
	log_format_current = log_type;
    252c:	6019      	str	r1, [r3, #0]
}
    252e:	4770      	bx	lr
    2530:	200008f4 	.word	0x200008f4

00002534 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
    2534:	4b02      	ldr	r3, [pc, #8]	; (2540 <panic+0xc>)
	log_output_flush(output);
    2536:	4803      	ldr	r0, [pc, #12]	; (2544 <panic+0x10>)
    2538:	2201      	movs	r2, #1
    253a:	701a      	strb	r2, [r3, #0]
    253c:	f004 be68 	b.w	7210 <log_output_flush>
    2540:	2000117d 	.word	0x2000117d
    2544:	00007efc 	.word	0x00007efc

00002548 <dropped>:
	log_output_dropped_process(output, cnt);
    2548:	4801      	ldr	r0, [pc, #4]	; (2550 <dropped+0x8>)
    254a:	f7ff bf27 	b.w	239c <log_output_dropped_process>
    254e:	bf00      	nop
    2550:	00007efc 	.word	0x00007efc

00002554 <process>:
{
    2554:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2556:	4b06      	ldr	r3, [pc, #24]	; (2570 <process+0x1c>)
    2558:	6818      	ldr	r0, [r3, #0]
{
    255a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    255c:	f7ff fac4 	bl	1ae8 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    2560:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2562:	4603      	mov	r3, r0
}
    2564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    2568:	4802      	ldr	r0, [pc, #8]	; (2574 <process+0x20>)
    256a:	220f      	movs	r2, #15
    256c:	4718      	bx	r3
    256e:	bf00      	nop
    2570:	200008f4 	.word	0x200008f4
    2574:	00007efc 	.word	0x00007efc

00002578 <char_out>:
{
    2578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    257a:	4f07      	ldr	r7, [pc, #28]	; (2598 <char_out+0x20>)
    257c:	460d      	mov	r5, r1
    257e:	4604      	mov	r4, r0
    2580:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    2582:	42b4      	cmp	r4, r6
    2584:	d101      	bne.n	258a <char_out+0x12>
}
    2586:	4628      	mov	r0, r5
    2588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    258a:	f814 1b01 	ldrb.w	r1, [r4], #1
    258e:	68bb      	ldr	r3, [r7, #8]
    2590:	4801      	ldr	r0, [pc, #4]	; (2598 <char_out+0x20>)
    2592:	685b      	ldr	r3, [r3, #4]
    2594:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    2596:	e7f4      	b.n	2582 <char_out+0xa>
    2598:	00007bd4 	.word	0x00007bd4

0000259c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    259c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    25a0:	4605      	mov	r5, r0
	__asm__ volatile(
    25a2:	f04f 0320 	mov.w	r3, #32
    25a6:	f3ef 8611 	mrs	r6, BASEPRI
    25aa:	f383 8812 	msr	BASEPRI_MAX, r3
    25ae:	f3bf 8f6f 	isb	sy
	return list->head;
    25b2:	4b0e      	ldr	r3, [pc, #56]	; (25ec <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    25b4:	4f0e      	ldr	r7, [pc, #56]	; (25f0 <pm_state_notify+0x54>)
    25b6:	681c      	ldr	r4, [r3, #0]
    25b8:	f8df 8038 	ldr.w	r8, [pc, #56]	; 25f4 <pm_state_notify+0x58>
    25bc:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    25c0:	b92c      	cbnz	r4, 25ce <pm_state_notify+0x32>
	__asm__ volatile(
    25c2:	f386 8811 	msr	BASEPRI, r6
    25c6:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    25ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    25ce:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    25d2:	2d00      	cmp	r5, #0
    25d4:	bf18      	it	ne
    25d6:	4613      	movne	r3, r2
		if (callback) {
    25d8:	b12b      	cbz	r3, 25e6 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    25da:	f898 2010 	ldrb.w	r2, [r8, #16]
    25de:	fb09 f202 	mul.w	r2, r9, r2
    25e2:	5cb8      	ldrb	r0, [r7, r2]
    25e4:	4798      	blx	r3
	return node->next;
    25e6:	6824      	ldr	r4, [r4, #0]
    25e8:	e7ea      	b.n	25c0 <pm_state_notify+0x24>
    25ea:	bf00      	nop
    25ec:	20000910 	.word	0x20000910
    25f0:	20000904 	.word	0x20000904
    25f4:	20000830 	.word	0x20000830

000025f8 <pm_system_resume>:

void pm_system_resume(void)
{
    25f8:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    25fa:	4b19      	ldr	r3, [pc, #100]	; (2660 <pm_system_resume+0x68>)
    25fc:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    25fe:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2602:	f004 031f 	and.w	r3, r4, #31
    2606:	2201      	movs	r2, #1
    2608:	409a      	lsls	r2, r3
    260a:	4b16      	ldr	r3, [pc, #88]	; (2664 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    260c:	0961      	lsrs	r1, r4, #5
    260e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2612:	43d0      	mvns	r0, r2
    2614:	e853 1f00 	ldrex	r1, [r3]
    2618:	ea01 0500 	and.w	r5, r1, r0
    261c:	e843 5600 	strex	r6, r5, [r3]
    2620:	2e00      	cmp	r6, #0
    2622:	d1f7      	bne.n	2614 <pm_system_resume+0x1c>
    2624:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2628:	420a      	tst	r2, r1
    262a:	d013      	beq.n	2654 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    262c:	4b0e      	ldr	r3, [pc, #56]	; (2668 <pm_system_resume+0x70>)
    262e:	4d0f      	ldr	r5, [pc, #60]	; (266c <pm_system_resume+0x74>)
    2630:	b18b      	cbz	r3, 2656 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    2632:	230c      	movs	r3, #12
    2634:	4363      	muls	r3, r4
    2636:	18ea      	adds	r2, r5, r3
    2638:	5ce8      	ldrb	r0, [r5, r3]
    263a:	7851      	ldrb	r1, [r2, #1]
    263c:	f004 fe7f 	bl	733e <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    2640:	2000      	movs	r0, #0
    2642:	f7ff ffab 	bl	259c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    2646:	230c      	movs	r3, #12
    2648:	435c      	muls	r4, r3
    264a:	192a      	adds	r2, r5, r4
    264c:	2300      	movs	r3, #0
    264e:	512b      	str	r3, [r5, r4]
    2650:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    2654:	bd70      	pop	{r4, r5, r6, pc}
    2656:	f383 8811 	msr	BASEPRI, r3
    265a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    265e:	e7ef      	b.n	2640 <pm_system_resume+0x48>
    2660:	20000830 	.word	0x20000830
    2664:	20000918 	.word	0x20000918
    2668:	0000733f 	.word	0x0000733f
    266c:	20000904 	.word	0x20000904

00002670 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    2670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    2674:	4b35      	ldr	r3, [pc, #212]	; (274c <pm_system_suspend+0xdc>)
{
    2676:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    2678:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    267a:	f04f 0320 	mov.w	r3, #32
    267e:	f3ef 8811 	mrs	r8, BASEPRI
    2682:	f383 8812 	msr	BASEPRI_MAX, r3
    2686:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    268a:	240c      	movs	r4, #12
    268c:	4b30      	ldr	r3, [pc, #192]	; (2750 <pm_system_suspend+0xe0>)
    268e:	4e31      	ldr	r6, [pc, #196]	; (2754 <pm_system_suspend+0xe4>)
    2690:	436c      	muls	r4, r5
    2692:	191a      	adds	r2, r3, r4
    2694:	5d19      	ldrb	r1, [r3, r4]
    2696:	2900      	cmp	r1, #0
    2698:	d04c      	beq.n	2734 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    269a:	ca07      	ldmia	r2, {r0, r1, r2}
    269c:	eb06 0c04 	add.w	ip, r6, r4
    26a0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    26a4:	2200      	movs	r2, #0
    26a6:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    26a8:	f388 8811 	msr	BASEPRI, r8
    26ac:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    26b0:	230c      	movs	r3, #12
    26b2:	436b      	muls	r3, r5
    26b4:	18f2      	adds	r2, r6, r3
    26b6:	5cf0      	ldrb	r0, [r6, r3]
    26b8:	2800      	cmp	r0, #0
    26ba:	d039      	beq.n	2730 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    26bc:	1c7b      	adds	r3, r7, #1
    26be:	d010      	beq.n	26e2 <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
    26c0:	f8d2 c008 	ldr.w	ip, [r2, #8]
    26c4:	4c24      	ldr	r4, [pc, #144]	; (2758 <pm_system_suspend+0xe8>)
    26c6:	4a25      	ldr	r2, [pc, #148]	; (275c <pm_system_suspend+0xec>)
    26c8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    26cc:	2100      	movs	r1, #0
    26ce:	fbec 4100 	umlal	r4, r1, ip, r0
    26d2:	2300      	movs	r3, #0
    26d4:	4620      	mov	r0, r4
    26d6:	f7fd fd13 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    26da:	2101      	movs	r1, #1
    26dc:	1a38      	subs	r0, r7, r0
    26de:	f001 ff57 	bl	4590 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    26e2:	f003 fb8b 	bl	5dfc <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    26e6:	2001      	movs	r0, #1
    26e8:	f7ff ff58 	bl	259c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    26ec:	f3bf 8f5b 	dmb	ish
    26f0:	4b1b      	ldr	r3, [pc, #108]	; (2760 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    26f2:	096a      	lsrs	r2, r5, #5
    26f4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    26f8:	f005 011f 	and.w	r1, r5, #31
    26fc:	2201      	movs	r2, #1
    26fe:	408a      	lsls	r2, r1
    2700:	e853 0f00 	ldrex	r0, [r3]
    2704:	4310      	orrs	r0, r2
    2706:	e843 0100 	strex	r1, r0, [r3]
    270a:	2900      	cmp	r1, #0
    270c:	d1f8      	bne.n	2700 <pm_system_suspend+0x90>
    270e:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    2712:	4b14      	ldr	r3, [pc, #80]	; (2764 <pm_system_suspend+0xf4>)
    2714:	b13b      	cbz	r3, 2726 <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    2716:	230c      	movs	r3, #12
    2718:	fb03 f005 	mul.w	r0, r3, r5
    271c:	1833      	adds	r3, r6, r0
    271e:	5c30      	ldrb	r0, [r6, r0]
    2720:	7859      	ldrb	r1, [r3, #1]
    2722:	f004 fe00 	bl	7326 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    2726:	f7ff ff67 	bl	25f8 <pm_system_resume>
	k_sched_unlock();
    272a:	f003 fb7b 	bl	5e24 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    272e:	2001      	movs	r0, #1
}
    2730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    2734:	4601      	mov	r1, r0
    2736:	4628      	mov	r0, r5
    2738:	f000 f816 	bl	2768 <pm_policy_next_state>
		if (info != NULL) {
    273c:	2800      	cmp	r0, #0
    273e:	d0b3      	beq.n	26a8 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    2740:	c807      	ldmia	r0, {r0, r1, r2}
    2742:	4434      	add	r4, r6
    2744:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    2748:	e7ae      	b.n	26a8 <pm_system_suspend+0x38>
    274a:	bf00      	nop
    274c:	20000830 	.word	0x20000830
    2750:	200008f8 	.word	0x200008f8
    2754:	20000904 	.word	0x20000904
    2758:	000f423f 	.word	0x000f423f
    275c:	000f4240 	.word	0x000f4240
    2760:	20000918 	.word	0x20000918
    2764:	00007327 	.word	0x00007327

00002768 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    2768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    276c:	b085      	sub	sp, #20
    276e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2770:	a903      	add	r1, sp, #12
    2772:	f000 f843 	bl	27fc <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2776:	4b1e      	ldr	r3, [pc, #120]	; (27f0 <pm_policy_next_state+0x88>)
    2778:	9d03      	ldr	r5, [sp, #12]
    277a:	f8d3 a000 	ldr.w	sl, [r3]
    277e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 27f4 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2782:	1e43      	subs	r3, r0, #1
    2784:	b21b      	sxth	r3, r3
    2786:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    278a:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    278c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    2790:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    2794:	f04f 0b00 	mov.w	fp, #0
    2798:	b924      	cbnz	r4, 27a4 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    279a:	46a1      	mov	r9, r4
}
    279c:	4648      	mov	r0, r9
    279e:	b005      	add	sp, #20
    27a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27a4:	6868      	ldr	r0, [r5, #4]
    27a6:	4a14      	ldr	r2, [pc, #80]	; (27f8 <pm_policy_next_state+0x90>)
    27a8:	46c4      	mov	ip, r8
    27aa:	4659      	mov	r1, fp
    27ac:	fbe0 c107 	umlal	ip, r1, r0, r7
    27b0:	2300      	movs	r3, #0
    27b2:	4660      	mov	r0, ip
    27b4:	f7fd fca4 	bl	100 <__aeabi_uldivmod>
    27b8:	9001      	str	r0, [sp, #4]
    27ba:	68a8      	ldr	r0, [r5, #8]
    27bc:	4a0e      	ldr	r2, [pc, #56]	; (27f8 <pm_policy_next_state+0x90>)
    27be:	46c4      	mov	ip, r8
    27c0:	4659      	mov	r1, fp
    27c2:	fbe0 c107 	umlal	ip, r1, r0, r7
    27c6:	2300      	movs	r3, #0
    27c8:	4660      	mov	r0, ip
    27ca:	f7fd fc99 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    27ce:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
    27d2:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    27d4:	d001      	beq.n	27da <pm_policy_next_state+0x72>
    27d6:	4582      	cmp	sl, r0
    27d8:	d905      	bls.n	27e6 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    27da:	1c73      	adds	r3, r6, #1
    27dc:	d0de      	beq.n	279c <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    27de:	9b01      	ldr	r3, [sp, #4]
    27e0:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    27e2:	42b0      	cmp	r0, r6
    27e4:	d9da      	bls.n	279c <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    27e6:	3c01      	subs	r4, #1
    27e8:	b2a4      	uxth	r4, r4
    27ea:	3d0c      	subs	r5, #12
    27ec:	e7d4      	b.n	2798 <pm_policy_next_state+0x30>
    27ee:	bf00      	nop
    27f0:	20000008 	.word	0x20000008
    27f4:	000f423f 	.word	0x000f423f
    27f8:	000f4240 	.word	0x000f4240

000027fc <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    27fc:	b908      	cbnz	r0, 2802 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    27fe:	4b02      	ldr	r3, [pc, #8]	; (2808 <pm_state_cpu_get_all+0xc>)
    2800:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    2802:	2000      	movs	r0, #0
    2804:	4770      	bx	lr
    2806:	bf00      	nop
    2808:	00007f0c 	.word	0x00007f0c

0000280c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    280c:	4801      	ldr	r0, [pc, #4]	; (2814 <nrf_cc3xx_platform_abort_init+0x8>)
    280e:	f003 beb5 	b.w	657c <nrf_cc3xx_platform_set_abort>
    2812:	bf00      	nop
    2814:	00007f0c 	.word	0x00007f0c

00002818 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2818:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    281a:	4604      	mov	r4, r0
    281c:	b918      	cbnz	r0, 2826 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    281e:	4b0f      	ldr	r3, [pc, #60]	; (285c <mutex_free_platform+0x44>)
    2820:	480f      	ldr	r0, [pc, #60]	; (2860 <mutex_free_platform+0x48>)
    2822:	685b      	ldr	r3, [r3, #4]
    2824:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2826:	6861      	ldr	r1, [r4, #4]
    2828:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    282c:	d00f      	beq.n	284e <mutex_free_platform+0x36>
    282e:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    2832:	d00c      	beq.n	284e <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2834:	4d0b      	ldr	r5, [pc, #44]	; (2864 <mutex_free_platform+0x4c>)
    2836:	42a9      	cmp	r1, r5
    2838:	d009      	beq.n	284e <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    283a:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    283e:	d007      	beq.n	2850 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2840:	4809      	ldr	r0, [pc, #36]	; (2868 <mutex_free_platform+0x50>)
    2842:	4621      	mov	r1, r4
    2844:	f004 ffe1 	bl	780a <k_mem_slab_free>
        mutex->mutex = NULL;
    2848:	2300      	movs	r3, #0
    284a:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    284c:	6065      	str	r5, [r4, #4]
}
    284e:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2850:	6820      	ldr	r0, [r4, #0]
    2852:	2214      	movs	r2, #20
    2854:	f004 fd4e 	bl	72f4 <memset>
    2858:	e7f8      	b.n	284c <mutex_free_platform+0x34>
    285a:	bf00      	nop
    285c:	200000d4 	.word	0x200000d4
    2860:	000084c5 	.word	0x000084c5
    2864:	a95c5f2c 	.word	0xa95c5f2c
    2868:	20000e1c 	.word	0x20000e1c

0000286c <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    286c:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    286e:	b320      	cbz	r0, 28ba <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    2870:	6843      	ldr	r3, [r0, #4]
    2872:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    2876:	d110      	bne.n	289a <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2878:	2201      	movs	r2, #1
    287a:	6803      	ldr	r3, [r0, #0]
    287c:	f3bf 8f5b 	dmb	ish
    2880:	e853 1f00 	ldrex	r1, [r3]
    2884:	2900      	cmp	r1, #0
    2886:	d103      	bne.n	2890 <mutex_lock_platform+0x24>
    2888:	e843 2000 	strex	r0, r2, [r3]
    288c:	2800      	cmp	r0, #0
    288e:	d1f7      	bne.n	2880 <mutex_lock_platform+0x14>
    2890:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2894:	d10d      	bne.n	28b2 <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    2896:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    2898:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    289a:	4a09      	ldr	r2, [pc, #36]	; (28c0 <mutex_lock_platform+0x54>)
    289c:	4293      	cmp	r3, r2
    289e:	d00a      	beq.n	28b6 <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
    28a0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    28a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    28a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    28aa:	f002 ff9d 	bl	57e8 <z_impl_k_mutex_lock>
        if (ret == 0) {
    28ae:	2800      	cmp	r0, #0
    28b0:	d0f1      	beq.n	2896 <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    28b2:	4804      	ldr	r0, [pc, #16]	; (28c4 <mutex_lock_platform+0x58>)
    28b4:	e7f0      	b.n	2898 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    28b6:	4804      	ldr	r0, [pc, #16]	; (28c8 <mutex_lock_platform+0x5c>)
    28b8:	e7ee      	b.n	2898 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    28ba:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    28be:	e7eb      	b.n	2898 <mutex_lock_platform+0x2c>
    28c0:	a95c5f2c 	.word	0xa95c5f2c
    28c4:	ffff8fe9 	.word	0xffff8fe9
    28c8:	ffff8fea 	.word	0xffff8fea

000028cc <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    28cc:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    28ce:	b1d8      	cbz	r0, 2908 <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    28d0:	6843      	ldr	r3, [r0, #4]
    28d2:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    28d6:	d110      	bne.n	28fa <mutex_unlock_platform+0x2e>
    28d8:	2200      	movs	r2, #0
    28da:	6803      	ldr	r3, [r0, #0]
    28dc:	f3bf 8f5b 	dmb	ish
    28e0:	e853 1f00 	ldrex	r1, [r3]
    28e4:	2901      	cmp	r1, #1
    28e6:	d103      	bne.n	28f0 <mutex_unlock_platform+0x24>
    28e8:	e843 2000 	strex	r0, r2, [r3]
    28ec:	2800      	cmp	r0, #0
    28ee:	d1f7      	bne.n	28e0 <mutex_unlock_platform+0x14>
    28f0:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    28f4:	d10b      	bne.n	290e <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    28f6:	2000      	movs	r0, #0
    }
}
    28f8:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    28fa:	4a07      	ldr	r2, [pc, #28]	; (2918 <mutex_unlock_platform+0x4c>)
    28fc:	4293      	cmp	r3, r2
    28fe:	d008      	beq.n	2912 <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2900:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    2902:	f002 ffeb 	bl	58dc <z_impl_k_mutex_unlock>
    2906:	e7f6      	b.n	28f6 <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2908:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    290c:	e7f4      	b.n	28f8 <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    290e:	4803      	ldr	r0, [pc, #12]	; (291c <mutex_unlock_platform+0x50>)
    2910:	e7f2      	b.n	28f8 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2912:	4803      	ldr	r0, [pc, #12]	; (2920 <mutex_unlock_platform+0x54>)
    2914:	e7f0      	b.n	28f8 <mutex_unlock_platform+0x2c>
    2916:	bf00      	nop
    2918:	a95c5f2c 	.word	0xa95c5f2c
    291c:	ffff8fe9 	.word	0xffff8fe9
    2920:	ffff8fea 	.word	0xffff8fea

00002924 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2924:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2926:	4604      	mov	r4, r0
    2928:	b918      	cbnz	r0, 2932 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    292a:	4b1d      	ldr	r3, [pc, #116]	; (29a0 <mutex_init_platform+0x7c>)
    292c:	481d      	ldr	r0, [pc, #116]	; (29a4 <mutex_init_platform+0x80>)
    292e:	685b      	ldr	r3, [r3, #4]
    2930:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2932:	6863      	ldr	r3, [r4, #4]
    2934:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    2938:	d02f      	beq.n	299a <mutex_init_platform+0x76>
    293a:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    293e:	d02c      	beq.n	299a <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    2940:	4a19      	ldr	r2, [pc, #100]	; (29a8 <mutex_init_platform+0x84>)
    2942:	4293      	cmp	r3, r2
    2944:	d119      	bne.n	297a <mutex_init_platform+0x56>
    2946:	6823      	ldr	r3, [r4, #0]
    2948:	bb03      	cbnz	r3, 298c <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    294a:	4818      	ldr	r0, [pc, #96]	; (29ac <mutex_init_platform+0x88>)
    294c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2954:	4621      	mov	r1, r4
    2956:	f002 fde9 	bl	552c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    295a:	b908      	cbnz	r0, 2960 <mutex_init_platform+0x3c>
    295c:	6823      	ldr	r3, [r4, #0]
    295e:	b91b      	cbnz	r3, 2968 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    2960:	4b0f      	ldr	r3, [pc, #60]	; (29a0 <mutex_init_platform+0x7c>)
    2962:	4813      	ldr	r0, [pc, #76]	; (29b0 <mutex_init_platform+0x8c>)
    2964:	685b      	ldr	r3, [r3, #4]
    2966:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2968:	6820      	ldr	r0, [r4, #0]
    296a:	2214      	movs	r2, #20
    296c:	2100      	movs	r1, #0
    296e:	f004 fcc1 	bl	72f4 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2972:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    2976:	6063      	str	r3, [r4, #4]
    2978:	e008      	b.n	298c <mutex_init_platform+0x68>
    switch(flags){
    297a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    297e:	d80d      	bhi.n	299c <mutex_init_platform+0x78>
    2980:	2b3a      	cmp	r3, #58	; 0x3a
    2982:	d003      	beq.n	298c <mutex_init_platform+0x68>
    2984:	f640 62ba 	movw	r2, #3770	; 0xeba
    2988:	4293      	cmp	r3, r2
    298a:	d1de      	bne.n	294a <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    298c:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    298e:	f004 ff82 	bl	7896 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2992:	6863      	ldr	r3, [r4, #4]
    2994:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    2998:	6063      	str	r3, [r4, #4]
}
    299a:	bd10      	pop	{r4, pc}
    switch(flags){
    299c:	4a05      	ldr	r2, [pc, #20]	; (29b4 <mutex_init_platform+0x90>)
    299e:	e7f3      	b.n	2988 <mutex_init_platform+0x64>
    29a0:	200000d4 	.word	0x200000d4
    29a4:	000084c5 	.word	0x000084c5
    29a8:	a95c5f2c 	.word	0xa95c5f2c
    29ac:	20000e1c 	.word	0x20000e1c
    29b0:	000084eb 	.word	0x000084eb
    29b4:	3a00003a 	.word	0x3a00003a

000029b8 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    29b8:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    29ba:	4906      	ldr	r1, [pc, #24]	; (29d4 <nrf_cc3xx_platform_mutex_init+0x1c>)
    29bc:	4806      	ldr	r0, [pc, #24]	; (29d8 <nrf_cc3xx_platform_mutex_init+0x20>)
    29be:	2340      	movs	r3, #64	; 0x40
    29c0:	2214      	movs	r2, #20
    29c2:	f004 ff14 	bl	77ee <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    29c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    29ca:	4904      	ldr	r1, [pc, #16]	; (29dc <nrf_cc3xx_platform_mutex_init+0x24>)
    29cc:	4804      	ldr	r0, [pc, #16]	; (29e0 <nrf_cc3xx_platform_mutex_init+0x28>)
    29ce:	f003 be47 	b.w	6660 <nrf_cc3xx_platform_set_mutexes>
    29d2:	bf00      	nop
    29d4:	2000091c 	.word	0x2000091c
    29d8:	20000e1c 	.word	0x20000e1c
    29dc:	00007f14 	.word	0x00007f14
    29e0:	00007f28 	.word	0x00007f28

000029e4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    29e4:	4901      	ldr	r1, [pc, #4]	; (29ec <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    29e6:	2210      	movs	r2, #16
	str	r2, [r1]
    29e8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    29ea:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    29ec:	e000ed10 	.word	0xe000ed10

000029f0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    29f0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    29f2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    29f4:	f380 8811 	msr	BASEPRI, r0
	isb
    29f8:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    29fc:	f3bf 8f4f 	dsb	sy
    2a00:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2a02:	b662      	cpsie	i
	isb
    2a04:	f3bf 8f6f 	isb	sy

	bx	lr
    2a08:	4770      	bx	lr
    2a0a:	bf00      	nop

00002a0c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2a0c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2a0e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2a10:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    2a14:	f3bf 8f4f 	dsb	sy
    2a18:	bf20      	wfe

	msr	BASEPRI, r0
    2a1a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2a1e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2a20:	4770      	bx	lr
    2a22:	bf00      	nop

00002a24 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2a28:	4681      	mov	r9, r0
    2a2a:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    2a2c:	460c      	mov	r4, r1
    2a2e:	2900      	cmp	r1, #0
    2a30:	d04c      	beq.n	2acc <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2a32:	466e      	mov	r6, sp
    2a34:	b08a      	sub	sp, #40	; 0x28
    2a36:	e9d1 1200 	ldrd	r1, r2, [r1]
    2a3a:	68a3      	ldr	r3, [r4, #8]
    2a3c:	466d      	mov	r5, sp
    2a3e:	4827      	ldr	r0, [pc, #156]	; (2adc <z_arm_fatal_error+0xb8>)
    2a40:	46a8      	mov	r8, r5
    2a42:	f04f 0a05 	mov.w	sl, #5
    2a46:	e9c5 0105 	strd	r0, r1, [r5, #20]
    2a4a:	e9c5 2307 	strd	r2, r3, [r5, #28]
    2a4e:	f848 af10 	str.w	sl, [r8, #16]!
    2a52:	4823      	ldr	r0, [pc, #140]	; (2ae0 <z_arm_fatal_error+0xbc>)
    2a54:	4642      	mov	r2, r8
    2a56:	2300      	movs	r3, #0
    2a58:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    2a5c:	f7ff fa2c 	bl	1eb8 <z_impl_z_log_msg_static_create>
    2a60:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2a62:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    2a66:	6963      	ldr	r3, [r4, #20]
    2a68:	46ad      	mov	sp, r5
    2a6a:	481e      	ldr	r0, [pc, #120]	; (2ae4 <z_arm_fatal_error+0xc0>)
    2a6c:	f8c5 a010 	str.w	sl, [r5, #16]
    2a70:	e9c5 0105 	strd	r0, r1, [r5, #20]
    2a74:	e9c5 2307 	strd	r2, r3, [r5, #28]
    2a78:	4819      	ldr	r0, [pc, #100]	; (2ae0 <z_arm_fatal_error+0xbc>)
    2a7a:	2300      	movs	r3, #0
    2a7c:	4642      	mov	r2, r8
    2a7e:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    2a82:	f7ff fa19 	bl	1eb8 <z_impl_z_log_msg_static_create>
    2a86:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2a88:	b088      	sub	sp, #32
    2a8a:	69e3      	ldr	r3, [r4, #28]
    2a8c:	466d      	mov	r5, sp
    2a8e:	4a16      	ldr	r2, [pc, #88]	; (2ae8 <z_arm_fatal_error+0xc4>)
    2a90:	46a8      	mov	r8, r5
    2a92:	f04f 0a03 	mov.w	sl, #3
    2a96:	e9c5 2305 	strd	r2, r3, [r5, #20]
    2a9a:	f848 af10 	str.w	sl, [r8, #16]!
    2a9e:	4810      	ldr	r0, [pc, #64]	; (2ae0 <z_arm_fatal_error+0xbc>)
    2aa0:	2300      	movs	r3, #0
    2aa2:	4642      	mov	r2, r8
    2aa4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2aa8:	f7ff fa06 	bl	1eb8 <z_impl_z_log_msg_static_create>
    2aac:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2aae:	69a3      	ldr	r3, [r4, #24]
    2ab0:	46ad      	mov	sp, r5
    2ab2:	4a0e      	ldr	r2, [pc, #56]	; (2aec <z_arm_fatal_error+0xc8>)
    2ab4:	f8c5 a010 	str.w	sl, [r5, #16]
    2ab8:	e9c5 2305 	strd	r2, r3, [r5, #20]
    2abc:	4808      	ldr	r0, [pc, #32]	; (2ae0 <z_arm_fatal_error+0xbc>)
    2abe:	2300      	movs	r3, #0
    2ac0:	4642      	mov	r2, r8
    2ac2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2ac6:	f7ff f9f7 	bl	1eb8 <z_impl_z_log_msg_static_create>
    2aca:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2acc:	4621      	mov	r1, r4
    2ace:	4648      	mov	r0, r9
    2ad0:	f002 fba8 	bl	5224 <z_fatal_error>
}
    2ad4:	46bd      	mov	sp, r7
    2ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2ada:	bf00      	nop
    2adc:	00008518 	.word	0x00008518
    2ae0:	00007ddc 	.word	0x00007ddc
    2ae4:	00008547 	.word	0x00008547
    2ae8:	00008576 	.word	0x00008576
    2aec:	00008585 	.word	0x00008585

00002af0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2af0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2af2:	2800      	cmp	r0, #0
    2af4:	db07      	blt.n	2b06 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2af6:	4a04      	ldr	r2, [pc, #16]	; (2b08 <arch_irq_enable+0x18>)
    2af8:	0941      	lsrs	r1, r0, #5
    2afa:	2301      	movs	r3, #1
    2afc:	f000 001f 	and.w	r0, r0, #31
    2b00:	4083      	lsls	r3, r0
    2b02:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    2b06:	4770      	bx	lr
    2b08:	e000e100 	.word	0xe000e100

00002b0c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    2b0c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2b0e:	2800      	cmp	r0, #0
    2b10:	db0c      	blt.n	2b2c <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2b12:	0943      	lsrs	r3, r0, #5
    2b14:	4906      	ldr	r1, [pc, #24]	; (2b30 <arch_irq_disable+0x24>)
    2b16:	f000 001f 	and.w	r0, r0, #31
    2b1a:	3320      	adds	r3, #32
    2b1c:	2201      	movs	r2, #1
    2b1e:	4082      	lsls	r2, r0
    2b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2b24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2b28:	f3bf 8f6f 	isb	sy
}
    2b2c:	4770      	bx	lr
    2b2e:	bf00      	nop
    2b30:	e000e100 	.word	0xe000e100

00002b34 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2b34:	4b05      	ldr	r3, [pc, #20]	; (2b4c <arch_irq_is_enabled+0x18>)
    2b36:	0942      	lsrs	r2, r0, #5
    2b38:	f000 001f 	and.w	r0, r0, #31
    2b3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2b40:	2301      	movs	r3, #1
    2b42:	fa03 f000 	lsl.w	r0, r3, r0
}
    2b46:	4010      	ands	r0, r2
    2b48:	4770      	bx	lr
    2b4a:	bf00      	nop
    2b4c:	e000e100 	.word	0xe000e100

00002b50 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2b50:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2b52:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2b54:	bfa8      	it	ge
    2b56:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    2b5a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2b5e:	bfb8      	it	lt
    2b60:	4b06      	ldrlt	r3, [pc, #24]	; (2b7c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2b62:	ea4f 1141 	mov.w	r1, r1, lsl #5
    2b66:	bfac      	ite	ge
    2b68:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2b6c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2b70:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2b72:	bfb4      	ite	lt
    2b74:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2b76:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    2b7a:	4770      	bx	lr
    2b7c:	e000ed14 	.word	0xe000ed14

00002b80 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2b80:	bf30      	wfi
    b z_SysNmiOnReset
    2b82:	f7ff bffd 	b.w	2b80 <z_SysNmiOnReset>
    2b86:	bf00      	nop

00002b88 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2b88:	4a0b      	ldr	r2, [pc, #44]	; (2bb8 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2b8a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2b8c:	4b0b      	ldr	r3, [pc, #44]	; (2bbc <z_arm_prep_c+0x34>)
    2b8e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2b92:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    2b94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2b98:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2b9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2ba0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2ba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2ba8:	f002 fbf8 	bl	539c <z_bss_zero>
	z_data_copy();
    2bac:	f003 fa64 	bl	6078 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2bb0:	f000 fbea 	bl	3388 <z_arm_interrupt_init>
	z_cstart();
    2bb4:	f002 fc38 	bl	5428 <z_cstart>
    2bb8:	00000000 	.word	0x00000000
    2bbc:	e000ed00 	.word	0xe000ed00

00002bc0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2bc0:	4a0a      	ldr	r2, [pc, #40]	; (2bec <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2bc2:	490b      	ldr	r1, [pc, #44]	; (2bf0 <arch_swap+0x30>)
	_current->arch.basepri = key;
    2bc4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2bc6:	6809      	ldr	r1, [r1, #0]
    2bc8:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2bcc:	4909      	ldr	r1, [pc, #36]	; (2bf4 <arch_swap+0x34>)
	_current->arch.basepri = key;
    2bce:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2bd2:	684b      	ldr	r3, [r1, #4]
    2bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2bd8:	604b      	str	r3, [r1, #4]
    2bda:	2300      	movs	r3, #0
    2bdc:	f383 8811 	msr	BASEPRI, r3
    2be0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2be4:	6893      	ldr	r3, [r2, #8]
}
    2be6:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
    2bea:	4770      	bx	lr
    2bec:	20000830 	.word	0x20000830
    2bf0:	00008030 	.word	0x00008030
    2bf4:	e000ed00 	.word	0xe000ed00

00002bf8 <z_arm_pendsv>:

SECTION_FUNC(TEXT, z_arm_pendsv)

#ifdef CONFIG_INSTRUMENT_THREAD_SWITCHING
    /* Register the context switch */
    push {r0, lr}
    2bf8:	b501      	push	{r0, lr}
    bl z_thread_mark_switched_out
    2bfa:	f004 fe3b 	bl	7874 <z_thread_mark_switched_out>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0, r1}
    mov lr, r1
#else
    pop {r0, lr}
    2bfe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2c02:	4916      	ldr	r1, [pc, #88]	; (2c5c <z_arm_pendsv+0x64>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2c04:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2c06:	f04f 0040 	mov.w	r0, #64	; 0x40
    add r0, r2
    2c0a:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2c0c:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2c10:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2c14:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2c16:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2c1a:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2c1e:	4f10      	ldr	r7, [pc, #64]	; (2c60 <z_arm_pendsv+0x68>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2c20:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2c24:	6aca      	ldr	r2, [r1, #44]	; 0x2c

    str r2, [r1, #_kernel_offset_to_current]
    2c26:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2c28:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2c2a:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    movs r3, #0
    2c2e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2c30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2c34:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2c38:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2c3a:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2c3c:	f000 fc48 	bl	34d0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2c40:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2c44:	f102 0040 	add.w	r0, r2, #64	; 0x40
    ldmia r0, {v1-v8, ip}
    2c48:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2c4c:	f38c 8809 	msr	PSP, ip
    pop {r2, lr}
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#ifdef CONFIG_INSTRUMENT_THREAD_SWITCHING
    /* Register the context switch */
    push {r0, lr}
    2c50:	b501      	push	{r0, lr}
    bl z_thread_mark_switched_in
    2c52:	f002 fda7 	bl	57a4 <z_thread_mark_switched_in>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0, r1}
    mov lr, r1
#else
    pop {r0, lr}
    2c56:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2c5a:	4770      	bx	lr
    ldr r1, =_kernel
    2c5c:	20000830 	.word	0x20000830
    ldr v4, =_SCS_ICSR
    2c60:	e000ed04 	.word	0xe000ed04

00002c64 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2c64:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2c68:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2c6a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2c6e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2c72:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2c74:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2c78:	2902      	cmp	r1, #2
    beq _oops
    2c7a:	d0ff      	beq.n	2c7c <_oops>

00002c7c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2c7c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    2c7e:	f004 fb02 	bl	7286 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    2c82:	bd01      	pop	{r0, pc}

00002c84 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2c84:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2c88:	9b00      	ldr	r3, [sp, #0]
    2c8a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    2c8e:	490a      	ldr	r1, [pc, #40]	; (2cb8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    2c90:	9b01      	ldr	r3, [sp, #4]
    2c92:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2c96:	9b02      	ldr	r3, [sp, #8]
    2c98:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    2c9c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2ca0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2ca4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    2ca8:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2cac:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2cae:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2cb0:	6602      	str	r2, [r0, #96]	; 0x60
	thread->arch.basepri = 0;
    2cb2:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2cb6:	4770      	bx	lr
    2cb8:	000069f9 	.word	0x000069f9

00002cbc <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2cbc:	4a0a      	ldr	r2, [pc, #40]	; (2ce8 <z_check_thread_stack_fail+0x2c>)
{
    2cbe:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    2cc0:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    2cc2:	b178      	cbz	r0, 2ce4 <z_check_thread_stack_fail+0x28>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2cc4:	f113 0f16 	cmn.w	r3, #22
    2cc8:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    2ccc:	d005      	beq.n	2cda <z_check_thread_stack_fail+0x1e>
    2cce:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    2cd2:	429a      	cmp	r2, r3
    2cd4:	d805      	bhi.n	2ce2 <z_check_thread_stack_fail+0x26>
    2cd6:	4283      	cmp	r3, r0
    2cd8:	d203      	bcs.n	2ce2 <z_check_thread_stack_fail+0x26>
		return 0;
    2cda:	4281      	cmp	r1, r0
    2cdc:	bf28      	it	cs
    2cde:	2000      	movcs	r0, #0
    2ce0:	4770      	bx	lr
    2ce2:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    2ce4:	4770      	bx	lr
    2ce6:	bf00      	nop
    2ce8:	20000830 	.word	0x20000830

00002cec <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2cec:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2cee:	4b0b      	ldr	r3, [pc, #44]	; (2d1c <arch_switch_to_main_thread+0x30>)
{
    2cf0:	4604      	mov	r4, r0
	_current = main_thread;
    2cf2:	6098      	str	r0, [r3, #8]
{
    2cf4:	460e      	mov	r6, r1
    2cf6:	4615      	mov	r5, r2

	z_arm_tls_ptr = main_thread->tls;
#endif

#ifdef CONFIG_INSTRUMENT_THREAD_SWITCHING
	z_thread_mark_switched_in();
    2cf8:	f002 fd54 	bl	57a4 <z_thread_mark_switched_in>
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    2cfc:	4620      	mov	r0, r4
    2cfe:	f000 fbe7 	bl	34d0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2d02:	4628      	mov	r0, r5
    2d04:	f386 8809 	msr	PSP, r6
    2d08:	2100      	movs	r1, #0
    2d0a:	b663      	cpsie	if
    2d0c:	f381 8811 	msr	BASEPRI, r1
    2d10:	f3bf 8f6f 	isb	sy
    2d14:	2200      	movs	r2, #0
    2d16:	2300      	movs	r3, #0
    2d18:	f003 fe6e 	bl	69f8 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2d1c:	20000830 	.word	0x20000830

00002d20 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2d20:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2d22:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2d24:	4a0b      	ldr	r2, [pc, #44]	; (2d54 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2d26:	6a90      	ldr	r0, [r2, #40]	; 0x28
	cmp r0, #0
    2d28:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2d2a:	bf1e      	ittt	ne
	movne	r1, #0
    2d2c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2d2e:	6291      	strne	r1, [r2, #40]	; 0x28
		blne	z_pm_save_idle_exit
    2d30:	f004 fda2 	blne	7878 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2d34:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2d36:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2d3a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2d3e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2d42:	4905      	ldr	r1, [pc, #20]	; (2d58 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2d44:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2d46:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2d48:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2d4a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2d4e:	4903      	ldr	r1, [pc, #12]	; (2d5c <_isr_wrapper+0x3c>)
	bx r1
    2d50:	4708      	bx	r1
    2d52:	0000      	.short	0x0000
	ldr r2, =_kernel
    2d54:	20000830 	.word	0x20000830
	ldr r1, =_sw_isr_table
    2d58:	00007bec 	.word	0x00007bec
	ldr r1, =z_arm_int_exit
    2d5c:	00002d61 	.word	0x00002d61

00002d60 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2d60:	4b04      	ldr	r3, [pc, #16]	; (2d74 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2d62:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2d64:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
	cmp r0, r1
    2d66:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2d68:	d003      	beq.n	2d72 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2d6a:	4903      	ldr	r1, [pc, #12]	; (2d78 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2d70:	600a      	str	r2, [r1, #0]

00002d72 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2d72:	4770      	bx	lr
	ldr r3, =_kernel
    2d74:	20000830 	.word	0x20000830
	ldr r1, =_SCS_ICSR
    2d78:	e000ed04 	.word	0xe000ed04

00002d7c <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d80:	b086      	sub	sp, #24
    2d82:	4606      	mov	r6, r0
    2d84:	af00      	add	r7, sp, #0
    2d86:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
    2d88:	4b47      	ldr	r3, [pc, #284]	; (2ea8 <bus_fault.constprop.0+0x12c>)
    2d8a:	617b      	str	r3, [r7, #20]
    2d8c:	2402      	movs	r4, #2
    2d8e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2d92:	4846      	ldr	r0, [pc, #280]	; (2eac <bus_fault.constprop.0+0x130>)
    2d94:	613c      	str	r4, [r7, #16]
    2d96:	f107 0210 	add.w	r2, r7, #16
    2d9a:	f004 fa83 	bl	72a4 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2d9e:	4b44      	ldr	r3, [pc, #272]	; (2eb0 <bus_fault.constprop.0+0x134>)
    2da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2da2:	04d9      	lsls	r1, r3, #19
    2da4:	d56d      	bpl.n	2e82 <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
    2da6:	4b43      	ldr	r3, [pc, #268]	; (2eb4 <bus_fault.constprop.0+0x138>)
    2da8:	4840      	ldr	r0, [pc, #256]	; (2eac <bus_fault.constprop.0+0x130>)
    2daa:	e9c7 4304 	strd	r4, r3, [r7, #16]
    2dae:	f107 0210 	add.w	r2, r7, #16
    2db2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2db6:	f004 fa75 	bl	72a4 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
    2dba:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2dbc:	4b3c      	ldr	r3, [pc, #240]	; (2eb0 <bus_fault.constprop.0+0x134>)
    2dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2dc0:	051a      	lsls	r2, r3, #20
    2dc2:	d50b      	bpl.n	2ddc <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    2dc4:	4b3c      	ldr	r3, [pc, #240]	; (2eb8 <bus_fault.constprop.0+0x13c>)
    2dc6:	617b      	str	r3, [r7, #20]
    2dc8:	2302      	movs	r3, #2
    2dca:	4838      	ldr	r0, [pc, #224]	; (2eac <bus_fault.constprop.0+0x130>)
    2dcc:	613b      	str	r3, [r7, #16]
    2dce:	f107 0210 	add.w	r2, r7, #16
    2dd2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2dd6:	f004 fa65 	bl	72a4 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    2dda:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2ddc:	4c34      	ldr	r4, [pc, #208]	; (2eb0 <bus_fault.constprop.0+0x134>)
    2dde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2de0:	059b      	lsls	r3, r3, #22
    2de2:	d523      	bpl.n	2e2c <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
    2de4:	46e8      	mov	r8, sp
    2de6:	4b35      	ldr	r3, [pc, #212]	; (2ebc <bus_fault.constprop.0+0x140>)
    2de8:	617b      	str	r3, [r7, #20]
    2dea:	2302      	movs	r3, #2
    2dec:	482f      	ldr	r0, [pc, #188]	; (2eac <bus_fault.constprop.0+0x130>)
    2dee:	613b      	str	r3, [r7, #16]
    2df0:	f107 0210 	add.w	r2, r7, #16
    2df4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2df8:	f004 fa54 	bl	72a4 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2dfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2dfe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2e00:	0410      	lsls	r0, r2, #16
    2e02:	d512      	bpl.n	2e2a <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2e04:	b088      	sub	sp, #32
    2e06:	466a      	mov	r2, sp
    2e08:	492d      	ldr	r1, [pc, #180]	; (2ec0 <bus_fault.constprop.0+0x144>)
    2e0a:	4828      	ldr	r0, [pc, #160]	; (2eac <bus_fault.constprop.0+0x130>)
    2e0c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2e10:	2303      	movs	r3, #3
    2e12:	f842 3f10 	str.w	r3, [r2, #16]!
    2e16:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2e1a:	f004 fa43 	bl	72a4 <z_log_msg_static_create.constprop.0>
    2e1e:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    2e20:	b11e      	cbz	r6, 2e2a <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2e22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2e24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2e28:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    2e2a:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2e2c:	4b20      	ldr	r3, [pc, #128]	; (2eb0 <bus_fault.constprop.0+0x134>)
    2e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e30:	0559      	lsls	r1, r3, #21
    2e32:	d50b      	bpl.n	2e4c <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
    2e34:	4b23      	ldr	r3, [pc, #140]	; (2ec4 <bus_fault.constprop.0+0x148>)
    2e36:	617b      	str	r3, [r7, #20]
    2e38:	2302      	movs	r3, #2
    2e3a:	481c      	ldr	r0, [pc, #112]	; (2eac <bus_fault.constprop.0+0x130>)
    2e3c:	613b      	str	r3, [r7, #16]
    2e3e:	f107 0210 	add.w	r2, r7, #16
    2e42:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2e46:	f004 fa2d 	bl	72a4 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    2e4a:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2e4c:	4b18      	ldr	r3, [pc, #96]	; (2eb0 <bus_fault.constprop.0+0x134>)
    2e4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2e50:	05d2      	lsls	r2, r2, #23
    2e52:	d518      	bpl.n	2e86 <bus_fault.constprop.0+0x10a>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
    2e54:	4b1c      	ldr	r3, [pc, #112]	; (2ec8 <bus_fault.constprop.0+0x14c>)
    2e56:	617b      	str	r3, [r7, #20]
    2e58:	2302      	movs	r3, #2
    2e5a:	4814      	ldr	r0, [pc, #80]	; (2eac <bus_fault.constprop.0+0x130>)
    2e5c:	613b      	str	r3, [r7, #16]
    2e5e:	f107 0210 	add.w	r2, r7, #16
    2e62:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2e66:	f004 fa1d 	bl	72a4 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    2e6a:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2e6c:	4a10      	ldr	r2, [pc, #64]	; (2eb0 <bus_fault.constprop.0+0x134>)
    2e6e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2e70:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2e74:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
    2e76:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    2e78:	2300      	movs	r3, #0
    2e7a:	702b      	strb	r3, [r5, #0]
}
    2e7c:	46bd      	mov	sp, r7
    2e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    2e82:	2016      	movs	r0, #22
    2e84:	e79a      	b.n	2dbc <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e88:	049b      	lsls	r3, r3, #18
    2e8a:	d5ef      	bpl.n	2e6c <bus_fault.constprop.0+0xf0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2e8c:	4b0f      	ldr	r3, [pc, #60]	; (2ecc <bus_fault.constprop.0+0x150>)
    2e8e:	617b      	str	r3, [r7, #20]
    2e90:	2302      	movs	r3, #2
    2e92:	4806      	ldr	r0, [pc, #24]	; (2eac <bus_fault.constprop.0+0x130>)
    2e94:	613b      	str	r3, [r7, #16]
    2e96:	f107 0210 	add.w	r2, r7, #16
    2e9a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2e9e:	f004 fa01 	bl	72a4 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    2ea2:	201c      	movs	r0, #28
    2ea4:	e7e2      	b.n	2e6c <bus_fault.constprop.0+0xf0>
    2ea6:	bf00      	nop
    2ea8:	000085b3 	.word	0x000085b3
    2eac:	00007ddc 	.word	0x00007ddc
    2eb0:	e000ed00 	.word	0xe000ed00
    2eb4:	000085c9 	.word	0x000085c9
    2eb8:	000085da 	.word	0x000085da
    2ebc:	000085ed 	.word	0x000085ed
    2ec0:	00008606 	.word	0x00008606
    2ec4:	0000861b 	.word	0x0000861b
    2ec8:	00008636 	.word	0x00008636
    2ecc:	0000864e 	.word	0x0000864e

00002ed0 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    2ed0:	b510      	push	{r4, lr}
    2ed2:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    2ed4:	4b36      	ldr	r3, [pc, #216]	; (2fb0 <usage_fault.constprop.0+0xe0>)
    2ed6:	4837      	ldr	r0, [pc, #220]	; (2fb4 <usage_fault.constprop.0+0xe4>)
    2ed8:	9305      	str	r3, [sp, #20]
    2eda:	aa04      	add	r2, sp, #16
    2edc:	2402      	movs	r4, #2
    2ede:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2ee2:	9404      	str	r4, [sp, #16]
    2ee4:	f004 f9de 	bl	72a4 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2ee8:	4b33      	ldr	r3, [pc, #204]	; (2fb8 <usage_fault.constprop.0+0xe8>)
    2eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2eec:	019a      	lsls	r2, r3, #6
    2eee:	d55d      	bpl.n	2fac <usage_fault.constprop.0+0xdc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
    2ef0:	4b32      	ldr	r3, [pc, #200]	; (2fbc <usage_fault.constprop.0+0xec>)
    2ef2:	4830      	ldr	r0, [pc, #192]	; (2fb4 <usage_fault.constprop.0+0xe4>)
    2ef4:	aa04      	add	r2, sp, #16
    2ef6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2efa:	e9cd 4304 	strd	r4, r3, [sp, #16]
    2efe:	f004 f9d1 	bl	72a4 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
    2f02:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2f04:	4b2c      	ldr	r3, [pc, #176]	; (2fb8 <usage_fault.constprop.0+0xe8>)
    2f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f08:	01db      	lsls	r3, r3, #7
    2f0a:	d50a      	bpl.n	2f22 <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
    2f0c:	4b2c      	ldr	r3, [pc, #176]	; (2fc0 <usage_fault.constprop.0+0xf0>)
    2f0e:	4829      	ldr	r0, [pc, #164]	; (2fb4 <usage_fault.constprop.0+0xe4>)
    2f10:	9305      	str	r3, [sp, #20]
    2f12:	aa04      	add	r2, sp, #16
    2f14:	2302      	movs	r3, #2
    2f16:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2f1a:	9304      	str	r3, [sp, #16]
    2f1c:	f004 f9c2 	bl	72a4 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    2f20:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2f22:	4b25      	ldr	r3, [pc, #148]	; (2fb8 <usage_fault.constprop.0+0xe8>)
    2f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f26:	031c      	lsls	r4, r3, #12
    2f28:	d50a      	bpl.n	2f40 <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
    2f2a:	4b26      	ldr	r3, [pc, #152]	; (2fc4 <usage_fault.constprop.0+0xf4>)
    2f2c:	4821      	ldr	r0, [pc, #132]	; (2fb4 <usage_fault.constprop.0+0xe4>)
    2f2e:	9305      	str	r3, [sp, #20]
    2f30:	aa04      	add	r2, sp, #16
    2f32:	2302      	movs	r3, #2
    2f34:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2f38:	9304      	str	r3, [sp, #16]
    2f3a:	f004 f9b3 	bl	72a4 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    2f3e:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2f40:	4b1d      	ldr	r3, [pc, #116]	; (2fb8 <usage_fault.constprop.0+0xe8>)
    2f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f44:	0359      	lsls	r1, r3, #13
    2f46:	d50a      	bpl.n	2f5e <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    2f48:	4b1f      	ldr	r3, [pc, #124]	; (2fc8 <usage_fault.constprop.0+0xf8>)
    2f4a:	481a      	ldr	r0, [pc, #104]	; (2fb4 <usage_fault.constprop.0+0xe4>)
    2f4c:	9305      	str	r3, [sp, #20]
    2f4e:	aa04      	add	r2, sp, #16
    2f50:	2302      	movs	r3, #2
    2f52:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2f56:	9304      	str	r3, [sp, #16]
    2f58:	f004 f9a4 	bl	72a4 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    2f5c:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2f5e:	4b16      	ldr	r3, [pc, #88]	; (2fb8 <usage_fault.constprop.0+0xe8>)
    2f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f62:	039a      	lsls	r2, r3, #14
    2f64:	d50a      	bpl.n	2f7c <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2f66:	4b19      	ldr	r3, [pc, #100]	; (2fcc <usage_fault.constprop.0+0xfc>)
    2f68:	4812      	ldr	r0, [pc, #72]	; (2fb4 <usage_fault.constprop.0+0xe4>)
    2f6a:	9305      	str	r3, [sp, #20]
    2f6c:	aa04      	add	r2, sp, #16
    2f6e:	2302      	movs	r3, #2
    2f70:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2f74:	9304      	str	r3, [sp, #16]
    2f76:	f004 f995 	bl	72a4 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    2f7a:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2f7c:	4b0e      	ldr	r3, [pc, #56]	; (2fb8 <usage_fault.constprop.0+0xe8>)
    2f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f80:	03db      	lsls	r3, r3, #15
    2f82:	d50a      	bpl.n	2f9a <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2f84:	4b12      	ldr	r3, [pc, #72]	; (2fd0 <usage_fault.constprop.0+0x100>)
    2f86:	480b      	ldr	r0, [pc, #44]	; (2fb4 <usage_fault.constprop.0+0xe4>)
    2f88:	9305      	str	r3, [sp, #20]
    2f8a:	aa04      	add	r2, sp, #16
    2f8c:	2302      	movs	r3, #2
    2f8e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2f92:	9304      	str	r3, [sp, #16]
    2f94:	f004 f986 	bl	72a4 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    2f98:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2f9a:	4a07      	ldr	r2, [pc, #28]	; (2fb8 <usage_fault.constprop.0+0xe8>)
    2f9c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2f9e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2fa2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    2fa6:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    2fa8:	b006      	add	sp, #24
    2faa:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    2fac:	201d      	movs	r0, #29
    2fae:	e7a9      	b.n	2f04 <usage_fault.constprop.0+0x34>
    2fb0:	0000867d 	.word	0x0000867d
    2fb4:	00007ddc 	.word	0x00007ddc
    2fb8:	e000ed00 	.word	0xe000ed00
    2fbc:	00008695 	.word	0x00008695
    2fc0:	000086a8 	.word	0x000086a8
    2fc4:	000086c2 	.word	0x000086c2
    2fc8:	000086e0 	.word	0x000086e0
    2fcc:	00008705 	.word	0x00008705
    2fd0:	0000871f 	.word	0x0000871f

00002fd4 <mem_manage_fault>:
{
    2fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2fd8:	b086      	sub	sp, #24
    2fda:	4681      	mov	r9, r0
    2fdc:	af00      	add	r7, sp, #0
    2fde:	468a      	mov	sl, r1
    2fe0:	4690      	mov	r8, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    2fe2:	4b51      	ldr	r3, [pc, #324]	; (3128 <mem_manage_fault+0x154>)
    2fe4:	617b      	str	r3, [r7, #20]
    2fe6:	2402      	movs	r4, #2
    2fe8:	4850      	ldr	r0, [pc, #320]	; (312c <mem_manage_fault+0x158>)
    2fea:	613c      	str	r4, [r7, #16]
    2fec:	f107 0210 	add.w	r2, r7, #16
    2ff0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2ff4:	f004 f956 	bl	72a4 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2ff8:	4b4d      	ldr	r3, [pc, #308]	; (3130 <mem_manage_fault+0x15c>)
    2ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ffc:	06de      	lsls	r6, r3, #27
    2ffe:	d545      	bpl.n	308c <mem_manage_fault+0xb8>
		PR_FAULT_INFO("  Stacking error (context area might be"
    3000:	4b4c      	ldr	r3, [pc, #304]	; (3134 <mem_manage_fault+0x160>)
    3002:	484a      	ldr	r0, [pc, #296]	; (312c <mem_manage_fault+0x158>)
    3004:	e9c7 4304 	strd	r4, r3, [r7, #16]
    3008:	f107 0210 	add.w	r2, r7, #16
    300c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_STACKING;
    3010:	2411      	movs	r4, #17
		PR_FAULT_INFO("  Stacking error (context area might be"
    3012:	f004 f947 	bl	72a4 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3016:	4b46      	ldr	r3, [pc, #280]	; (3130 <mem_manage_fault+0x15c>)
    3018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    301a:	071d      	lsls	r5, r3, #28
    301c:	d50b      	bpl.n	3036 <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Unstacking error");
    301e:	4b46      	ldr	r3, [pc, #280]	; (3138 <mem_manage_fault+0x164>)
    3020:	617b      	str	r3, [r7, #20]
    3022:	2302      	movs	r3, #2
    3024:	4841      	ldr	r0, [pc, #260]	; (312c <mem_manage_fault+0x158>)
    3026:	613b      	str	r3, [r7, #16]
    3028:	f107 0210 	add.w	r2, r7, #16
    302c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_UNSTACKING;
    3030:	2412      	movs	r4, #18
		PR_FAULT_INFO("  Unstacking error");
    3032:	f004 f937 	bl	72a4 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3036:	4d3e      	ldr	r5, [pc, #248]	; (3130 <mem_manage_fault+0x15c>)
    3038:	6aab      	ldr	r3, [r5, #40]	; 0x28
    303a:	0798      	lsls	r0, r3, #30
    303c:	d528      	bpl.n	3090 <mem_manage_fault+0xbc>
		PR_FAULT_INFO("  Data Access Violation");
    303e:	466c      	mov	r4, sp
    3040:	4b3e      	ldr	r3, [pc, #248]	; (313c <mem_manage_fault+0x168>)
    3042:	617b      	str	r3, [r7, #20]
    3044:	2302      	movs	r3, #2
    3046:	613b      	str	r3, [r7, #16]
    3048:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    304c:	4837      	ldr	r0, [pc, #220]	; (312c <mem_manage_fault+0x158>)
    304e:	f107 0210 	add.w	r2, r7, #16
    3052:	f004 f927 	bl	72a4 <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    3056:	6b6e      	ldr	r6, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3058:	6aab      	ldr	r3, [r5, #40]	; 0x28
    305a:	0619      	lsls	r1, r3, #24
    305c:	d560      	bpl.n	3120 <mem_manage_fault+0x14c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    305e:	b088      	sub	sp, #32
    3060:	466a      	mov	r2, sp
    3062:	4b37      	ldr	r3, [pc, #220]	; (3140 <mem_manage_fault+0x16c>)
    3064:	4831      	ldr	r0, [pc, #196]	; (312c <mem_manage_fault+0x158>)
    3066:	e9c2 3605 	strd	r3, r6, [r2, #20]
    306a:	2303      	movs	r3, #3
    306c:	f842 3f10 	str.w	r3, [r2, #16]!
    3070:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3074:	f004 f916 	bl	72a4 <z_log_msg_static_create.constprop.0>
    3078:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
    307a:	f1ba 0f00 	cmp.w	sl, #0
    307e:	d003      	beq.n	3088 <mem_manage_fault+0xb4>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3080:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3086:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    3088:	2413      	movs	r4, #19
    308a:	e003      	b.n	3094 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    308c:	2410      	movs	r4, #16
    308e:	e7c2      	b.n	3016 <mem_manage_fault+0x42>
	uint32_t mmfar = -EINVAL;
    3090:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3094:	4b26      	ldr	r3, [pc, #152]	; (3130 <mem_manage_fault+0x15c>)
    3096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3098:	07da      	lsls	r2, r3, #31
    309a:	d50b      	bpl.n	30b4 <mem_manage_fault+0xe0>
		PR_FAULT_INFO("  Instruction Access Violation");
    309c:	4b29      	ldr	r3, [pc, #164]	; (3144 <mem_manage_fault+0x170>)
    309e:	617b      	str	r3, [r7, #20]
    30a0:	2302      	movs	r3, #2
    30a2:	4822      	ldr	r0, [pc, #136]	; (312c <mem_manage_fault+0x158>)
    30a4:	613b      	str	r3, [r7, #16]
    30a6:	f107 0210 	add.w	r2, r7, #16
    30aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    30ae:	2414      	movs	r4, #20
		PR_FAULT_INFO("  Instruction Access Violation");
    30b0:	f004 f8f8 	bl	72a4 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    30b4:	4b1e      	ldr	r3, [pc, #120]	; (3130 <mem_manage_fault+0x15c>)
    30b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30b8:	069b      	lsls	r3, r3, #26
    30ba:	d50b      	bpl.n	30d4 <mem_manage_fault+0x100>
		PR_FAULT_INFO(
    30bc:	4b22      	ldr	r3, [pc, #136]	; (3148 <mem_manage_fault+0x174>)
    30be:	617b      	str	r3, [r7, #20]
    30c0:	2302      	movs	r3, #2
    30c2:	481a      	ldr	r0, [pc, #104]	; (312c <mem_manage_fault+0x158>)
    30c4:	613b      	str	r3, [r7, #16]
    30c6:	f107 0210 	add.w	r2, r7, #16
    30ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    30ce:	2415      	movs	r4, #21
		PR_FAULT_INFO(
    30d0:	f004 f8e8 	bl	72a4 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    30d4:	4b16      	ldr	r3, [pc, #88]	; (3130 <mem_manage_fault+0x15c>)
    30d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    30d8:	06d5      	lsls	r5, r2, #27
    30da:	d402      	bmi.n	30e2 <mem_manage_fault+0x10e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    30dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    30de:	0790      	lsls	r0, r2, #30
    30e0:	d50a      	bpl.n	30f8 <mem_manage_fault+0x124>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    30e2:	685b      	ldr	r3, [r3, #4]
    30e4:	0519      	lsls	r1, r3, #20
    30e6:	d507      	bpl.n	30f8 <mem_manage_fault+0x124>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    30e8:	4649      	mov	r1, r9
    30ea:	4630      	mov	r0, r6
    30ec:	f7ff fde6 	bl	2cbc <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    30f0:	b110      	cbz	r0, 30f8 <mem_manage_fault+0x124>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    30f2:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    30f6:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    30f8:	4b0d      	ldr	r3, [pc, #52]	; (3130 <mem_manage_fault+0x15c>)
    30fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    30fc:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    30fe:	bf42      	ittt	mi
    3100:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    3102:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    3106:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    310a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    310e:	629a      	str	r2, [r3, #40]	; 0x28
}
    3110:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
    3112:	2300      	movs	r3, #0
}
    3114:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    3116:	f888 3000 	strb.w	r3, [r8]
}
    311a:	46bd      	mov	sp, r7
    311c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
    3120:	f06f 0615 	mvn.w	r6, #21
    3124:	e7b0      	b.n	3088 <mem_manage_fault+0xb4>
    3126:	bf00      	nop
    3128:	0000874a 	.word	0x0000874a
    312c:	00007ddc 	.word	0x00007ddc
    3130:	e000ed00 	.word	0xe000ed00
    3134:	00008760 	.word	0x00008760
    3138:	000085da 	.word	0x000085da
    313c:	00008793 	.word	0x00008793
    3140:	000087ab 	.word	0x000087ab
    3144:	000087c1 	.word	0x000087c1
    3148:	0000864e 	.word	0x0000864e

0000314c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    314c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3150:	4b77      	ldr	r3, [pc, #476]	; (3330 <z_arm_fault+0x1e4>)
{
    3152:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3154:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    3158:	af00      	add	r7, sp, #0
    315a:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    315c:	f3c8 0408 	ubfx	r4, r8, #0, #9
    3160:	2600      	movs	r6, #0
    3162:	f386 8811 	msr	BASEPRI, r6
    3166:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    316a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    316e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    3172:	d10e      	bne.n	3192 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3174:	f002 030c 	and.w	r3, r2, #12
    3178:	2b08      	cmp	r3, #8
    317a:	d119      	bne.n	31b0 <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    317c:	4b6d      	ldr	r3, [pc, #436]	; (3334 <z_arm_fault+0x1e8>)
    317e:	61fb      	str	r3, [r7, #28]
    3180:	2302      	movs	r3, #2
    3182:	486d      	ldr	r0, [pc, #436]	; (3338 <z_arm_fault+0x1ec>)
    3184:	61bb      	str	r3, [r7, #24]
    3186:	f107 0218 	add.w	r2, r7, #24
    318a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    318e:	f004 f889 	bl	72a4 <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
    3192:	2600      	movs	r6, #0
		return NULL;
    3194:	4635      	mov	r5, r6
	*recoverable = false;
    3196:	2300      	movs	r3, #0
    3198:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    319a:	1ee3      	subs	r3, r4, #3
    319c:	2b09      	cmp	r3, #9
    319e:	f200 80a6 	bhi.w	32ee <z_arm_fault+0x1a2>
    31a2:	e8df f003 	tbb	[pc, r3]
    31a6:	990a      	.short	0x990a
    31a8:	a4a4959c 	.word	0xa4a4959c
    31ac:	9fa4a4a4 	.word	0x9fa4a4a4
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    31b0:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    31b2:	bf4c      	ite	mi
    31b4:	460d      	movmi	r5, r1
			*nested_exc = true;
    31b6:	2601      	movpl	r6, #1
    31b8:	e7ed      	b.n	3196 <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
    31ba:	46e9      	mov	r9, sp
    31bc:	4b5f      	ldr	r3, [pc, #380]	; (333c <z_arm_fault+0x1f0>)
    31be:	61fb      	str	r3, [r7, #28]
    31c0:	f04f 0802 	mov.w	r8, #2
    31c4:	f107 0218 	add.w	r2, r7, #24
    31c8:	485b      	ldr	r0, [pc, #364]	; (3338 <z_arm_fault+0x1ec>)
    31ca:	f8c7 8018 	str.w	r8, [r7, #24]
    31ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    31d2:	f004 f867 	bl	72a4 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    31d6:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    31d8:	4c55      	ldr	r4, [pc, #340]	; (3330 <z_arm_fault+0x1e4>)
	*recoverable = false;
    31da:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    31dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    31de:	079a      	lsls	r2, r3, #30
    31e0:	d50b      	bpl.n	31fa <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
    31e2:	4b57      	ldr	r3, [pc, #348]	; (3340 <z_arm_fault+0x1f4>)
		PR_EXC("  Debug event");
    31e4:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
    31e8:	4853      	ldr	r0, [pc, #332]	; (3338 <z_arm_fault+0x1ec>)
    31ea:	f107 0218 	add.w	r2, r7, #24
    31ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    31f2:	f004 f857 	bl	72a4 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    31f6:	2400      	movs	r4, #0
    31f8:	e041      	b.n	327e <z_arm_fault+0x132>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    31fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    31fc:	2b00      	cmp	r3, #0
    31fe:	da01      	bge.n	3204 <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
    3200:	4b50      	ldr	r3, [pc, #320]	; (3344 <z_arm_fault+0x1f8>)
    3202:	e7ef      	b.n	31e4 <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3204:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3206:	005b      	lsls	r3, r3, #1
    3208:	d5f5      	bpl.n	31f6 <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
    320a:	4b4f      	ldr	r3, [pc, #316]	; (3348 <z_arm_fault+0x1fc>)
    320c:	484a      	ldr	r0, [pc, #296]	; (3338 <z_arm_fault+0x1ec>)
    320e:	e9c7 8306 	strd	r8, r3, [r7, #24]
    3212:	f107 0218 	add.w	r2, r7, #24
    3216:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    321a:	f004 f843 	bl	72a4 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    321e:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    3220:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    3222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3226:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    3228:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    322c:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    3230:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    3232:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    3236:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    323a:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    323c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3240:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3244:	f64d 7302 	movw	r3, #57090	; 0xdf02
    3248:	429a      	cmp	r2, r3
    324a:	d008      	beq.n	325e <z_arm_fault+0x112>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    324c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    324e:	b2db      	uxtb	r3, r3
    3250:	b38b      	cbz	r3, 32b6 <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
    3252:	1dfa      	adds	r2, r7, #7
    3254:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    3256:	4628      	mov	r0, r5
    3258:	f7ff febc 	bl	2fd4 <mem_manage_fault>
    325c:	e03a      	b.n	32d4 <z_arm_fault+0x188>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    325e:	b088      	sub	sp, #32
    3260:	682b      	ldr	r3, [r5, #0]
    3262:	466a      	mov	r2, sp
    3264:	4939      	ldr	r1, [pc, #228]	; (334c <z_arm_fault+0x200>)
    3266:	4834      	ldr	r0, [pc, #208]	; (3338 <z_arm_fault+0x1ec>)
    3268:	e9c2 1305 	strd	r1, r3, [r2, #20]
    326c:	2303      	movs	r3, #3
    326e:	f842 3f10 	str.w	r3, [r2, #16]!
    3272:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3276:	f004 f815 	bl	72a4 <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
    327a:	682c      	ldr	r4, [r5, #0]
    327c:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    327e:	79fb      	ldrb	r3, [r7, #7]
    3280:	b9ab      	cbnz	r3, 32ae <z_arm_fault+0x162>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3282:	2220      	movs	r2, #32
    3284:	4629      	mov	r1, r5
    3286:	f107 0008 	add.w	r0, r7, #8
    328a:	f004 f828 	bl	72de <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3290:	2e00      	cmp	r6, #0
    3292:	d047      	beq.n	3324 <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3294:	f3c3 0208 	ubfx	r2, r3, #0, #9
    3298:	b922      	cbnz	r2, 32a4 <z_arm_fault+0x158>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    329a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    329e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    32a2:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    32a4:	f107 0108 	add.w	r1, r7, #8
    32a8:	4620      	mov	r0, r4
    32aa:	f7ff fbbb 	bl	2a24 <z_arm_fatal_error>
}
    32ae:	372c      	adds	r7, #44	; 0x2c
    32b0:	46bd      	mov	sp, r7
    32b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    32b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    32b8:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    32bc:	d004      	beq.n	32c8 <z_arm_fault+0x17c>
			reason = bus_fault(esf, 1, recoverable);
    32be:	1df9      	adds	r1, r7, #7
    32c0:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    32c2:	f7ff fd5b 	bl	2d7c <bus_fault.constprop.0>
    32c6:	e005      	b.n	32d4 <z_arm_fault+0x188>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    32c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    32ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    32ce:	d392      	bcc.n	31f6 <z_arm_fault+0xaa>
			reason = usage_fault(esf);
    32d0:	f7ff fdfe 	bl	2ed0 <usage_fault.constprop.0>
    32d4:	4604      	mov	r4, r0
    32d6:	e7d2      	b.n	327e <z_arm_fault+0x132>
		reason = mem_manage_fault(esf, 0, recoverable);
    32d8:	1dfa      	adds	r2, r7, #7
    32da:	2100      	movs	r1, #0
    32dc:	e7bb      	b.n	3256 <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
    32de:	1df9      	adds	r1, r7, #7
    32e0:	2000      	movs	r0, #0
    32e2:	e7ee      	b.n	32c2 <z_arm_fault+0x176>
	PR_FAULT_INFO(
    32e4:	4b1a      	ldr	r3, [pc, #104]	; (3350 <z_arm_fault+0x204>)
    32e6:	61fb      	str	r3, [r7, #28]
    32e8:	2302      	movs	r3, #2
    32ea:	61bb      	str	r3, [r7, #24]
    32ec:	e77c      	b.n	31e8 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
    32ee:	4a19      	ldr	r2, [pc, #100]	; (3354 <z_arm_fault+0x208>)
    32f0:	4b19      	ldr	r3, [pc, #100]	; (3358 <z_arm_fault+0x20c>)
    32f2:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    32f6:	46e8      	mov	r8, sp
    32f8:	b08a      	sub	sp, #40	; 0x28
    32fa:	bf18      	it	ne
    32fc:	4613      	movne	r3, r2
    32fe:	466a      	mov	r2, sp
    3300:	4916      	ldr	r1, [pc, #88]	; (335c <z_arm_fault+0x210>)
    3302:	480d      	ldr	r0, [pc, #52]	; (3338 <z_arm_fault+0x1ec>)
    3304:	e9c2 1305 	strd	r1, r3, [r2, #20]
    3308:	f44f 7300 	mov.w	r3, #512	; 0x200
    330c:	8413      	strh	r3, [r2, #32]
    330e:	3c10      	subs	r4, #16
    3310:	4b13      	ldr	r3, [pc, #76]	; (3360 <z_arm_fault+0x214>)
    3312:	61d4      	str	r4, [r2, #28]
    3314:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    3318:	f842 3f10 	str.w	r3, [r2, #16]!
    331c:	f003 ffc2 	bl	72a4 <z_log_msg_static_create.constprop.0>
    3320:	46c5      	mov	sp, r8
}
    3322:	e768      	b.n	31f6 <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3324:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3328:	f023 0301 	bic.w	r3, r3, #1
    332c:	e7b9      	b.n	32a2 <z_arm_fault+0x156>
    332e:	bf00      	nop
    3330:	e000ed00 	.word	0xe000ed00
    3334:	0000880e 	.word	0x0000880e
    3338:	00007ddc 	.word	0x00007ddc
    333c:	00008839 	.word	0x00008839
    3340:	00008850 	.word	0x00008850
    3344:	00008871 	.word	0x00008871
    3348:	0000887f 	.word	0x0000887f
    334c:	0000889e 	.word	0x0000889e
    3350:	000088ba 	.word	0x000088ba
    3354:	000087f5 	.word	0x000087f5
    3358:	000087e0 	.word	0x000087e0
    335c:	000088de 	.word	0x000088de
    3360:	01000004 	.word	0x01000004

00003364 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3364:	4a02      	ldr	r2, [pc, #8]	; (3370 <z_arm_fault_init+0xc>)
    3366:	6953      	ldr	r3, [r2, #20]
    3368:	f043 0310 	orr.w	r3, r3, #16
    336c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    336e:	4770      	bx	lr
    3370:	e000ed00 	.word	0xe000ed00

00003374 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3374:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3378:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    337c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    337e:	4672      	mov	r2, lr
	bl z_arm_fault
    3380:	f7ff fee4 	bl	314c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3384:	bd01      	pop	{r0, pc}
    3386:	bf00      	nop

00003388 <z_arm_interrupt_init>:
    3388:	4804      	ldr	r0, [pc, #16]	; (339c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    338a:	2300      	movs	r3, #0
    338c:	2120      	movs	r1, #32
    338e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3390:	3301      	adds	r3, #1
    3392:	2b30      	cmp	r3, #48	; 0x30
    3394:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3398:	d1f9      	bne.n	338e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    339a:	4770      	bx	lr
    339c:	e000e100 	.word	0xe000e100

000033a0 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    33a0:	2000      	movs	r0, #0
    msr CONTROL, r0
    33a2:	f380 8814 	msr	CONTROL, r0
    isb
    33a6:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    33aa:	f7fe faed 	bl	1988 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    33ae:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    33b0:	4911      	ldr	r1, [pc, #68]	; (33f8 <__start+0x58>)
    str r0, [r1]
    33b2:	6008      	str	r0, [r1, #0]
    dsb
    33b4:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    33b8:	4810      	ldr	r0, [pc, #64]	; (33fc <__start+0x5c>)
    msr msp, r0
    33ba:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    33be:	f000 f833 	bl	3428 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    33c2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    33c4:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
    33c8:	480d      	ldr	r0, [pc, #52]	; (3400 <__start+0x60>)
    ldr r1, =0xaa
    33ca:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    33ce:	f44f 6204 	mov.w	r2, #2112	; 0x840
    bl z_early_memset
    33d2:	f004 f9f2 	bl	77ba <z_early_memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    33d6:	480a      	ldr	r0, [pc, #40]	; (3400 <__start+0x60>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    33d8:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    33dc:	1840      	adds	r0, r0, r1
    msr PSP, r0
    33de:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    33e2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    33e6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    33e8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    33ea:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    33ee:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    33f2:	f7ff fbc9 	bl	2b88 <z_arm_prep_c>
    33f6:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    33f8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    33fc:	200026c0 	.word	0x200026c0
    ldr r0, =z_interrupt_stacks
    3400:	20001900 	.word	0x20001900

00003404 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    3404:	4907      	ldr	r1, [pc, #28]	; (3424 <z_arm_clear_arm_mpu_config+0x20>)
    3406:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    340a:	2300      	movs	r3, #0
	int num_regions =
    340c:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    3410:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    3412:	4293      	cmp	r3, r2
    3414:	db00      	blt.n	3418 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    3416:	4770      	bx	lr
  MPU->RNR = rnr;
    3418:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    341c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    3420:	3301      	adds	r3, #1
    3422:	e7f6      	b.n	3412 <z_arm_clear_arm_mpu_config+0xe>
    3424:	e000ed00 	.word	0xe000ed00

00003428 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    3428:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    342a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    342c:	2300      	movs	r3, #0
    342e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    3432:	f7ff ffe7 	bl	3404 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    3436:	4b14      	ldr	r3, [pc, #80]	; (3488 <z_arm_init_arch_hw_at_boot+0x60>)
    3438:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    343c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    3440:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    3444:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    3448:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    344c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    3450:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    3454:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    3458:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    345c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3460:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    3464:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    3468:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    346c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    3470:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    3474:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    3478:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    347c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    347e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3482:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3486:	bd08      	pop	{r3, pc}
    3488:	e000e100 	.word	0xe000e100

0000348c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    348c:	4b08      	ldr	r3, [pc, #32]	; (34b0 <z_impl_k_thread_abort+0x24>)
    348e:	689b      	ldr	r3, [r3, #8]
    3490:	4283      	cmp	r3, r0
    3492:	d10b      	bne.n	34ac <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3494:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3498:	b143      	cbz	r3, 34ac <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    349a:	4b06      	ldr	r3, [pc, #24]	; (34b4 <z_impl_k_thread_abort+0x28>)
    349c:	685a      	ldr	r2, [r3, #4]
    349e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    34a2:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    34a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    34a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    34aa:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    34ac:	f002 bd80 	b.w	5fb0 <z_thread_abort>
    34b0:	20000830 	.word	0x20000830
    34b4:	e000ed00 	.word	0xe000ed00

000034b8 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    34b8:	4b02      	ldr	r3, [pc, #8]	; (34c4 <z_arm_configure_static_mpu_regions+0xc>)
    34ba:	4a03      	ldr	r2, [pc, #12]	; (34c8 <z_arm_configure_static_mpu_regions+0x10>)
    34bc:	4803      	ldr	r0, [pc, #12]	; (34cc <z_arm_configure_static_mpu_regions+0x14>)
    34be:	2101      	movs	r1, #1
    34c0:	f000 b894 	b.w	35ec <arm_core_mpu_configure_static_mpu_regions>
    34c4:	20040000 	.word	0x20040000
    34c8:	20000000 	.word	0x20000000
    34cc:	00007f38 	.word	0x00007f38

000034d0 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    34d0:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    34d4:	4b05      	ldr	r3, [pc, #20]	; (34ec <z_arm_configure_dynamic_mpu_regions+0x1c>)
		guard_start = thread->stack_info.start - guard_size;
    34d6:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    34d8:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    34da:	4a05      	ldr	r2, [pc, #20]	; (34f0 <z_arm_configure_dynamic_mpu_regions+0x20>)
    34dc:	2140      	movs	r1, #64	; 0x40
    34de:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    34e2:	4618      	mov	r0, r3
    34e4:	2101      	movs	r1, #1
    34e6:	f000 b88b 	b.w	3600 <arm_core_mpu_configure_dynamic_mpu_regions>
    34ea:	bf00      	nop
    34ec:	20000e38 	.word	0x20000e38
    34f0:	150b0000 	.word	0x150b0000

000034f4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    34f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    34f8:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 35b0 <mpu_configure_regions+0xbc>
    34fc:	469c      	mov	ip, r3
    34fe:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
    3500:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
    3502:	2300      	movs	r3, #0
    3504:	428b      	cmp	r3, r1
    3506:	da1a      	bge.n	353e <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    3508:	6844      	ldr	r4, [r0, #4]
    350a:	2c00      	cmp	r4, #0
    350c:	d04d      	beq.n	35aa <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    350e:	f1bc 0f00 	cmp.w	ip, #0
    3512:	d01d      	beq.n	3550 <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    3514:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    3516:	4234      	tst	r4, r6
    3518:	d015      	beq.n	3546 <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    351a:	466c      	mov	r4, sp
    351c:	b088      	sub	sp, #32
    351e:	466a      	mov	r2, sp
    3520:	4924      	ldr	r1, [pc, #144]	; (35b4 <mpu_configure_regions+0xc0>)
    3522:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3526:	2303      	movs	r3, #3
    3528:	f842 3f10 	str.w	r3, [r2, #16]!
    352c:	4822      	ldr	r0, [pc, #136]	; (35b8 <mpu_configure_regions+0xc4>)
    352e:	2300      	movs	r3, #0
    3530:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3534:	f7fe fcc0 	bl	1eb8 <z_impl_z_log_msg_static_create>
			return -EINVAL;
    3538:	f06f 0515 	mvn.w	r5, #21
    353c:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    353e:	4628      	mov	r0, r5
    3540:	46bd      	mov	sp, r7
    3542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
    3546:	2c1f      	cmp	r4, #31
    3548:	d9e7      	bls.n	351a <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
    354a:	6802      	ldr	r2, [r0, #0]
		&&
    354c:	4216      	tst	r6, r2
    354e:	d1e4      	bne.n	351a <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    3550:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    3552:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3554:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3556:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
    355a:	d914      	bls.n	3586 <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
    355c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    3560:	d813      	bhi.n	358a <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    3562:	3c01      	subs	r4, #1
    3564:	fab4 f484 	clz	r4, r4
    3568:	f1c4 041f 	rsb	r4, r4, #31
    356c:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    356e:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3572:	ea46 0604 	orr.w	r6, r6, r4
    3576:	d90a      	bls.n	358e <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3578:	466c      	mov	r4, sp
    357a:	b088      	sub	sp, #32
    357c:	466a      	mov	r2, sp
    357e:	4b0f      	ldr	r3, [pc, #60]	; (35bc <mpu_configure_regions+0xc8>)
    3580:	e9c2 3505 	strd	r3, r5, [r2, #20]
    3584:	e7cf      	b.n	3526 <mpu_configure_regions+0x32>
		return REGION_32B;
    3586:	2408      	movs	r4, #8
    3588:	e7f1      	b.n	356e <mpu_configure_regions+0x7a>
		return REGION_4G;
    358a:	243e      	movs	r4, #62	; 0x3e
    358c:	e7ef      	b.n	356e <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    358e:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    3592:	432a      	orrs	r2, r5
    3594:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3598:	f046 0601 	orr.w	r6, r6, #1
    359c:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    35a0:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
    35a4:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    35a6:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    35aa:	3301      	adds	r3, #1
    35ac:	300c      	adds	r0, #12
    35ae:	e7a9      	b.n	3504 <mpu_configure_regions+0x10>
    35b0:	e000ed00 	.word	0xe000ed00
    35b4:	000088f5 	.word	0x000088f5
    35b8:	00007dd4 	.word	0x00007dd4
    35bc:	00008918 	.word	0x00008918

000035c0 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    35c0:	4b04      	ldr	r3, [pc, #16]	; (35d4 <arm_core_mpu_enable+0x14>)
    35c2:	2205      	movs	r2, #5
    35c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    35c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    35cc:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    35d0:	4770      	bx	lr
    35d2:	bf00      	nop
    35d4:	e000ed00 	.word	0xe000ed00

000035d8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    35d8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    35dc:	4b02      	ldr	r3, [pc, #8]	; (35e8 <arm_core_mpu_disable+0x10>)
    35de:	2200      	movs	r2, #0
    35e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    35e4:	4770      	bx	lr
    35e6:	bf00      	nop
    35e8:	e000ed00 	.word	0xe000ed00

000035ec <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    35ec:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    35ee:	4c03      	ldr	r4, [pc, #12]	; (35fc <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    35f0:	2301      	movs	r3, #1
    35f2:	7822      	ldrb	r2, [r4, #0]
    35f4:	f7ff ff7e 	bl	34f4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    35f8:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    35fa:	bd10      	pop	{r4, pc}
    35fc:	2000117e 	.word	0x2000117e

00003600 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    3600:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    3602:	4a09      	ldr	r2, [pc, #36]	; (3628 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    3604:	2300      	movs	r3, #0
    3606:	7812      	ldrb	r2, [r2, #0]
    3608:	f7ff ff74 	bl	34f4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    360c:	f110 0f16 	cmn.w	r0, #22
    3610:	d003      	beq.n	361a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    3612:	4b06      	ldr	r3, [pc, #24]	; (362c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    3614:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    3616:	2807      	cmp	r0, #7
    3618:	dd00      	ble.n	361c <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    361a:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    361c:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    3620:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    3624:	3001      	adds	r0, #1
    3626:	e7f6      	b.n	3616 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    3628:	2000117e 	.word	0x2000117e
    362c:	e000ed00 	.word	0xe000ed00

00003630 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3630:	4914      	ldr	r1, [pc, #80]	; (3684 <z_arm_mpu_init+0x54>)
    3632:	6808      	ldr	r0, [r1, #0]
    3634:	2808      	cmp	r0, #8
{
    3636:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    3638:	d821      	bhi.n	367e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    363a:	f7ff ffcd 	bl	35d8 <arm_core_mpu_disable>
    363e:	4c12      	ldr	r4, [pc, #72]	; (3688 <z_arm_mpu_init+0x58>)
    3640:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3642:	2200      	movs	r2, #0
    3644:	4290      	cmp	r0, r2
    3646:	f101 010c 	add.w	r1, r1, #12
    364a:	d105      	bne.n	3658 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    364c:	4b0f      	ldr	r3, [pc, #60]	; (368c <z_arm_mpu_init+0x5c>)
    364e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    3650:	f7ff ffb6 	bl	35c0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3654:	2000      	movs	r0, #0
}
    3656:	bd10      	pop	{r4, pc}
    3658:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    365c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    3660:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    3664:	4313      	orrs	r3, r2
    3666:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    366a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    366e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    3672:	f043 0301 	orr.w	r3, r3, #1
    3676:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    367a:	3201      	adds	r2, #1
    367c:	e7e2      	b.n	3644 <z_arm_mpu_init+0x14>
		return -1;
    367e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3682:	e7e8      	b.n	3656 <z_arm_mpu_init+0x26>
    3684:	00007f44 	.word	0x00007f44
    3688:	e000ed00 	.word	0xe000ed00
    368c:	2000117e 	.word	0x2000117e

00003690 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    3690:	4b01      	ldr	r3, [pc, #4]	; (3698 <__stdout_hook_install+0x8>)
    3692:	6018      	str	r0, [r3, #0]
}
    3694:	4770      	bx	lr
    3696:	bf00      	nop
    3698:	2000002c 	.word	0x2000002c

0000369c <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
    369c:	b40c      	push	{r2, r3}
    369e:	b510      	push	{r4, lr}
    36a0:	b086      	sub	sp, #24

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    36a2:	b909      	cbnz	r1, 36a8 <snprintf+0xc>
		str = &dummy; /* write final NUL to dummy, can't change *s */
    36a4:	f10d 000b 	add.w	r0, sp, #11
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    36a8:	2400      	movs	r4, #0
	}

	p.ptr = str;
	p.len = (int) len;
    36aa:	e9cd 0104 	strd	r0, r1, [sp, #16]

	va_start(vargs, format);
    36ae:	ab09      	add	r3, sp, #36	; 0x24
    36b0:	9a08      	ldr	r2, [sp, #32]
    36b2:	9400      	str	r4, [sp, #0]
    36b4:	a904      	add	r1, sp, #16
    36b6:	4805      	ldr	r0, [pc, #20]	; (36cc <snprintf+0x30>)
    36b8:	9303      	str	r3, [sp, #12]
    36ba:	f7fd fd9b 	bl	11f4 <z_cbvprintf_impl>
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
    36be:	9b04      	ldr	r3, [sp, #16]
    36c0:	701c      	strb	r4, [r3, #0]
	return r;
}
    36c2:	b006      	add	sp, #24
    36c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    36c8:	b002      	add	sp, #8
    36ca:	4770      	bx	lr
    36cc:	0000730d 	.word	0x0000730d

000036d0 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(void)
{
    36d0:	b510      	push	{r4, lr}
	__asm__ volatile(
    36d2:	f04f 0320 	mov.w	r3, #32
    36d6:	f3ef 8011 	mrs	r0, BASEPRI
    36da:	f383 8812 	msr	BASEPRI_MAX, r3
    36de:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    36e2:	4a11      	ldr	r2, [pc, #68]	; (3728 <nordicsemi_nrf52_init+0x58>)
    36e4:	2301      	movs	r3, #1
    36e6:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    36ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    36ee:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    36f2:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    36f6:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    36fa:	2c08      	cmp	r4, #8
    36fc:	d108      	bne.n	3710 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    36fe:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    3702:	2905      	cmp	r1, #5
    3704:	d804      	bhi.n	3710 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    3706:	4c09      	ldr	r4, [pc, #36]	; (372c <nordicsemi_nrf52_init+0x5c>)
    3708:	5c61      	ldrb	r1, [r4, r1]
    370a:	b109      	cbz	r1, 3710 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    370c:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    3710:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3714:	2201      	movs	r2, #1
    3716:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    371a:	f380 8811 	msr	BASEPRI, r0
    371e:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3722:	2000      	movs	r0, #0
    3724:	bd10      	pop	{r4, pc}
    3726:	bf00      	nop
    3728:	4001e000 	.word	0x4001e000
    372c:	0000894d 	.word	0x0000894d

00003730 <sys_arch_reboot>:
    *p_gpregret = val;
    3730:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3734:	b2c0      	uxtb	r0, r0
    3736:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    373a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    373e:	4905      	ldr	r1, [pc, #20]	; (3754 <sys_arch_reboot+0x24>)
    3740:	4b05      	ldr	r3, [pc, #20]	; (3758 <sys_arch_reboot+0x28>)
    3742:	68ca      	ldr	r2, [r1, #12]
    3744:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3748:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    374a:	60cb      	str	r3, [r1, #12]
    374c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3750:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3752:	e7fd      	b.n	3750 <sys_arch_reboot+0x20>
    3754:	e000ed00 	.word	0xe000ed00
    3758:	05fa0004 	.word	0x05fa0004

0000375c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    375c:	b120      	cbz	r0, 3768 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    375e:	4b03      	ldr	r3, [pc, #12]	; (376c <arch_busy_wait+0x10>)
    3760:	0180      	lsls	r0, r0, #6
    3762:	f043 0301 	orr.w	r3, r3, #1
    3766:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    3768:	4770      	bx	lr
    376a:	bf00      	nop
    376c:	00007e30 	.word	0x00007e30

00003770 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    3770:	4b08      	ldr	r3, [pc, #32]	; (3794 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3772:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3774:	1ac3      	subs	r3, r0, r3
{
    3776:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3778:	4907      	ldr	r1, [pc, #28]	; (3798 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    377a:	109b      	asrs	r3, r3, #2
{
    377c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    377e:	4359      	muls	r1, r3
    3780:	4806      	ldr	r0, [pc, #24]	; (379c <onoff_stop+0x2c>)
    3782:	2240      	movs	r2, #64	; 0x40
    3784:	f003 fdfd 	bl	7382 <stop>
	notify(mgr, res);
    3788:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    378a:	4601      	mov	r1, r0
	notify(mgr, res);
    378c:	4620      	mov	r0, r4
}
    378e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    3792:	4718      	bx	r3
    3794:	20000e58 	.word	0x20000e58
    3798:	b6db6db7 	.word	0xb6db6db7
    379c:	00007b8c 	.word	0x00007b8c

000037a0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    37a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    37a2:	4c0c      	ldr	r4, [pc, #48]	; (37d4 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    37a4:	4a0c      	ldr	r2, [pc, #48]	; (37d8 <onoff_start+0x38>)
    37a6:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    37a8:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    37aa:	9300      	str	r3, [sp, #0]
{
    37ac:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    37ae:	460b      	mov	r3, r1
    37b0:	490a      	ldr	r1, [pc, #40]	; (37dc <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    37b2:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    37b4:	4361      	muls	r1, r4
{
    37b6:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    37b8:	4809      	ldr	r0, [pc, #36]	; (37e0 <onoff_start+0x40>)
    37ba:	f003 fe0e 	bl	73da <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    37be:	1e01      	subs	r1, r0, #0
    37c0:	da05      	bge.n	37ce <onoff_start+0x2e>
		notify(mgr, err);
    37c2:	4630      	mov	r0, r6
    37c4:	462b      	mov	r3, r5
	}
}
    37c6:	b002      	add	sp, #8
    37c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    37cc:	4718      	bx	r3
}
    37ce:	b002      	add	sp, #8
    37d0:	bd70      	pop	{r4, r5, r6, pc}
    37d2:	bf00      	nop
    37d4:	20000e58 	.word	0x20000e58
    37d8:	00007445 	.word	0x00007445
    37dc:	b6db6db7 	.word	0xb6db6db7
    37e0:	00007b8c 	.word	0x00007b8c

000037e4 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    37e4:	2200      	movs	r2, #0
{
    37e6:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    37e8:	2101      	movs	r1, #1
{
    37ea:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    37ec:	4610      	mov	r0, r2
    37ee:	f7ff f9af 	bl	2b50 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    37f2:	480f      	ldr	r0, [pc, #60]	; (3830 <clk_init+0x4c>)
    37f4:	f001 f8d2 	bl	499c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    37f8:	4b0e      	ldr	r3, [pc, #56]	; (3834 <clk_init+0x50>)
    37fa:	4298      	cmp	r0, r3
    37fc:	d115      	bne.n	382a <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    37fe:	f003 ff26 	bl	764e <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    3802:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    3804:	490c      	ldr	r1, [pc, #48]	; (3838 <clk_init+0x54>)
    3806:	4630      	mov	r0, r6
    3808:	f003 f950 	bl	6aac <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    380c:	2800      	cmp	r0, #0
    380e:	db0b      	blt.n	3828 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3810:	2501      	movs	r5, #1
    3812:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    3814:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    3816:	4908      	ldr	r1, [pc, #32]	; (3838 <clk_init+0x54>)
    3818:	f104 001c 	add.w	r0, r4, #28
    381c:	f003 f946 	bl	6aac <onoff_manager_init>
		if (err < 0) {
    3820:	2800      	cmp	r0, #0
    3822:	db01      	blt.n	3828 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3824:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    3826:	2000      	movs	r0, #0
}
    3828:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    382a:	f06f 0004 	mvn.w	r0, #4
    382e:	e7fb      	b.n	3828 <clk_init+0x44>
    3830:	00003871 	.word	0x00003871
    3834:	0bad0000 	.word	0x0bad0000
    3838:	00007f64 	.word	0x00007f64

0000383c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    383c:	b570      	push	{r4, r5, r6, lr}
    383e:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    3840:	230c      	movs	r3, #12
    3842:	4809      	ldr	r0, [pc, #36]	; (3868 <clkstarted_handle.constprop.0+0x2c>)
    3844:	434b      	muls	r3, r1
    3846:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    3848:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    384c:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    384e:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    3850:	4418      	add	r0, r3
	sub_data->cb = NULL;
    3852:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    3854:	f003 fd82 	bl	735c <set_on_state>
	if (callback) {
    3858:	b12d      	cbz	r5, 3866 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    385a:	4632      	mov	r2, r6
    385c:	462b      	mov	r3, r5
    385e:	4803      	ldr	r0, [pc, #12]	; (386c <clkstarted_handle.constprop.0+0x30>)
}
    3860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    3864:	4718      	bx	r3
}
    3866:	bd70      	pop	{r4, r5, r6, pc}
    3868:	20000e58 	.word	0x20000e58
    386c:	00007b8c 	.word	0x00007b8c

00003870 <clock_event_handler>:
	switch (event) {
    3870:	b110      	cbz	r0, 3878 <clock_event_handler+0x8>
    3872:	2801      	cmp	r0, #1
    3874:	d004      	beq.n	3880 <clock_event_handler+0x10>
    3876:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3878:	4b03      	ldr	r3, [pc, #12]	; (3888 <clock_event_handler+0x18>)
    387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    387c:	075b      	lsls	r3, r3, #29
    387e:	d101      	bne.n	3884 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3880:	f7ff bfdc 	b.w	383c <clkstarted_handle.constprop.0>
}
    3884:	4770      	bx	lr
    3886:	bf00      	nop
    3888:	20000e58 	.word	0x20000e58

0000388c <generic_hfclk_start>:
{
    388c:	b508      	push	{r3, lr}
	__asm__ volatile(
    388e:	f04f 0320 	mov.w	r3, #32
    3892:	f3ef 8111 	mrs	r1, BASEPRI
    3896:	f383 8812 	msr	BASEPRI_MAX, r3
    389a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    389e:	4a12      	ldr	r2, [pc, #72]	; (38e8 <generic_hfclk_start+0x5c>)
    38a0:	6813      	ldr	r3, [r2, #0]
    38a2:	f043 0002 	orr.w	r0, r3, #2
    38a6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    38a8:	07da      	lsls	r2, r3, #31
    38aa:	d408      	bmi.n	38be <generic_hfclk_start+0x32>
	__asm__ volatile(
    38ac:	f381 8811 	msr	BASEPRI, r1
    38b0:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    38b4:	2001      	movs	r0, #1
}
    38b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    38ba:	f003 bed5 	b.w	7668 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    38be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    38c2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    38c6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    38ca:	07d3      	lsls	r3, r2, #31
    38cc:	d5ee      	bpl.n	38ac <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    38ce:	4807      	ldr	r0, [pc, #28]	; (38ec <generic_hfclk_start+0x60>)
    38d0:	f003 fd44 	bl	735c <set_on_state>
    38d4:	f381 8811 	msr	BASEPRI, r1
    38d8:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    38dc:	2000      	movs	r0, #0
}
    38de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    38e2:	f7ff bfab 	b.w	383c <clkstarted_handle.constprop.0>
    38e6:	bf00      	nop
    38e8:	20000ea8 	.word	0x20000ea8
    38ec:	20000e98 	.word	0x20000e98

000038f0 <api_blocking_start>:
{
    38f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    38f2:	2200      	movs	r2, #0
    38f4:	2301      	movs	r3, #1
    38f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    38fa:	4a09      	ldr	r2, [pc, #36]	; (3920 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    38fc:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3900:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3902:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3906:	f003 fd96 	bl	7436 <api_start>
	if (err < 0) {
    390a:	2800      	cmp	r0, #0
    390c:	db05      	blt.n	391a <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    390e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3912:	2300      	movs	r3, #0
    3914:	4668      	mov	r0, sp
    3916:	f002 f841 	bl	599c <z_impl_k_sem_take>
}
    391a:	b005      	add	sp, #20
    391c:	f85d fb04 	ldr.w	pc, [sp], #4
    3920:	00007463 	.word	0x00007463

00003924 <generic_hfclk_stop>:
{
    3924:	b510      	push	{r4, lr}
	__asm__ volatile(
    3926:	f04f 0320 	mov.w	r3, #32
    392a:	f3ef 8411 	mrs	r4, BASEPRI
    392e:	f383 8812 	msr	BASEPRI_MAX, r3
    3932:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    3936:	4a07      	ldr	r2, [pc, #28]	; (3954 <generic_hfclk_stop+0x30>)
    3938:	6813      	ldr	r3, [r2, #0]
    393a:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    393e:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    3940:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    3942:	d402      	bmi.n	394a <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    3944:	2001      	movs	r0, #1
    3946:	f003 fecb 	bl	76e0 <nrfx_clock_stop>
	__asm__ volatile(
    394a:	f384 8811 	msr	BASEPRI, r4
    394e:	f3bf 8f6f 	isb	sy
}
    3952:	bd10      	pop	{r4, pc}
    3954:	20000ea8 	.word	0x20000ea8

00003958 <z_nrf_clock_control_lf_on>:
{
    3958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    395c:	4938      	ldr	r1, [pc, #224]	; (3a40 <z_nrf_clock_control_lf_on+0xe8>)
    395e:	f3bf 8f5b 	dmb	ish
    3962:	4607      	mov	r7, r0
    3964:	2201      	movs	r2, #1
    3966:	e851 3f00 	ldrex	r3, [r1]
    396a:	e841 2000 	strex	r0, r2, [r1]
    396e:	2800      	cmp	r0, #0
    3970:	d1f9      	bne.n	3966 <z_nrf_clock_control_lf_on+0xe>
    3972:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    3976:	b933      	cbnz	r3, 3986 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    3978:	4932      	ldr	r1, [pc, #200]	; (3a44 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    397a:	4833      	ldr	r0, [pc, #204]	; (3a48 <z_nrf_clock_control_lf_on+0xf0>)
    397c:	604b      	str	r3, [r1, #4]
    397e:	60cb      	str	r3, [r1, #12]
    3980:	608a      	str	r2, [r1, #8]
    3982:	f003 f8a6 	bl	6ad2 <onoff_request>
	switch (start_mode) {
    3986:	1e7b      	subs	r3, r7, #1
    3988:	2b01      	cmp	r3, #1
    398a:	d82b      	bhi.n	39e4 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    398c:	2f01      	cmp	r7, #1
    398e:	d107      	bne.n	39a0 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3990:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3994:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    3998:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    399c:	2b01      	cmp	r3, #1
    399e:	d021      	beq.n	39e4 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    39a0:	f003 ff5d 	bl	785e <k_is_in_isr>
    39a4:	4605      	mov	r5, r0
    39a6:	b9f8      	cbnz	r0, 39e8 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
    39a8:	4b28      	ldr	r3, [pc, #160]	; (3a4c <z_nrf_clock_control_lf_on+0xf4>)
    39aa:	781b      	ldrb	r3, [r3, #0]
    39ac:	b1e3      	cbz	r3, 39e8 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    39ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    39b2:	2202      	movs	r2, #2
    39b4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    39b8:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    39ba:	f8df 8094 	ldr.w	r8, [pc, #148]	; 3a50 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    39be:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    39c2:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    39c6:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    39ca:	03d2      	lsls	r2, r2, #15
    39cc:	d516      	bpl.n	39fc <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    39ce:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    39d2:	2b01      	cmp	r3, #1
    39d4:	d001      	beq.n	39da <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    39d6:	2f01      	cmp	r7, #1
    39d8:	d110      	bne.n	39fc <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    39da:	b35d      	cbz	r5, 3a34 <z_nrf_clock_control_lf_on+0xdc>
    39dc:	f386 8811 	msr	BASEPRI, r6
    39e0:	f3bf 8f6f 	isb	sy
}
    39e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    39e8:	f04f 0320 	mov.w	r3, #32
    39ec:	f3ef 8611 	mrs	r6, BASEPRI
    39f0:	f383 8812 	msr	BASEPRI_MAX, r3
    39f4:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    39f8:	2501      	movs	r5, #1
    39fa:	e7de      	b.n	39ba <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    39fc:	b1ad      	cbz	r5, 3a2a <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    39fe:	4630      	mov	r0, r6
    3a00:	f7ff f804 	bl	2a0c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    3a04:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3a08:	2b00      	cmp	r3, #0
    3a0a:	d1da      	bne.n	39c2 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3a0c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    3a10:	2a00      	cmp	r2, #0
    3a12:	d0d6      	beq.n	39c2 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a14:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3a18:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    3a1c:	2301      	movs	r3, #1
    3a1e:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    3a22:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3a26:	60a3      	str	r3, [r4, #8]
}
    3a28:	e7cb      	b.n	39c2 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    3a2a:	2100      	movs	r1, #0
    3a2c:	2021      	movs	r0, #33	; 0x21
    3a2e:	f002 fa9f 	bl	5f70 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3a32:	e7e7      	b.n	3a04 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    3a34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a38:	2202      	movs	r2, #2
    3a3a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3a3e:	e7d1      	b.n	39e4 <z_nrf_clock_control_lf_on+0x8c>
    3a40:	20000e54 	.word	0x20000e54
    3a44:	20000e44 	.word	0x20000e44
    3a48:	20000e74 	.word	0x20000e74
    3a4c:	20001591 	.word	0x20001591
    3a50:	e000e100 	.word	0xe000e100

00003a54 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    3a54:	b508      	push	{r3, lr}
    3a56:	4807      	ldr	r0, [pc, #28]	; (3a74 <uart_console_init+0x20>)
    3a58:	f003 fea4 	bl	77a4 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    3a5c:	b138      	cbz	r0, 3a6e <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    3a5e:	4806      	ldr	r0, [pc, #24]	; (3a78 <uart_console_init+0x24>)
    3a60:	f7ff fe16 	bl	3690 <__stdout_hook_install>
	__printk_hook_install(console_out);
    3a64:	4804      	ldr	r0, [pc, #16]	; (3a78 <uart_console_init+0x24>)
    3a66:	f7fd fa9b 	bl	fa0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    3a6a:	2000      	movs	r0, #0
}
    3a6c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    3a6e:	f06f 0012 	mvn.w	r0, #18
    3a72:	e7fb      	b.n	3a6c <uart_console_init+0x18>
    3a74:	00007bd4 	.word	0x00007bd4
    3a78:	00003a7d 	.word	0x00003a7d

00003a7c <console_out>:
	if ('\n' == c) {
    3a7c:	280a      	cmp	r0, #10
{
    3a7e:	b538      	push	{r3, r4, r5, lr}
    3a80:	4d07      	ldr	r5, [pc, #28]	; (3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>)
    3a82:	4604      	mov	r4, r0
	if ('\n' == c) {
    3a84:	d104      	bne.n	3a90 <console_out+0x14>
    3a86:	68ab      	ldr	r3, [r5, #8]
    3a88:	210d      	movs	r1, #13
    3a8a:	685b      	ldr	r3, [r3, #4]
    3a8c:	4628      	mov	r0, r5
    3a8e:	4798      	blx	r3
    3a90:	68ab      	ldr	r3, [r5, #8]
    3a92:	4803      	ldr	r0, [pc, #12]	; (3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>)
    3a94:	685b      	ldr	r3, [r3, #4]
    3a96:	b2e1      	uxtb	r1, r4
    3a98:	4798      	blx	r3
}
    3a9a:	4620      	mov	r0, r4
    3a9c:	bd38      	pop	{r3, r4, r5, pc}
    3a9e:	bf00      	nop
    3aa0:	00007bd4 	.word	0x00007bd4

00003aa4 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    3aa4:	b530      	push	{r4, r5, lr}
	return port->config;
    3aa6:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3aa8:	7b05      	ldrb	r5, [r0, #12]
    3aaa:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    3aae:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    3ab2:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3ab4:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    3ab8:	d105      	bne.n	3ac6 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    3aba:	4620      	mov	r0, r4
    3abc:	f001 f9f0 	bl	4ea0 <nrfx_gpiote_trigger_disable>

		return 0;
    3ac0:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    3ac2:	b005      	add	sp, #20
    3ac4:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    3ac6:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    3ac8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    3acc:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    3ad0:	d114      	bne.n	3afc <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    3ad2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    3ad6:	bf0c      	ite	eq
    3ad8:	2304      	moveq	r3, #4
    3ada:	2305      	movne	r3, #5
    3adc:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3ae0:	2300      	movs	r3, #0
    3ae2:	4619      	mov	r1, r3
    3ae4:	aa02      	add	r2, sp, #8
    3ae6:	4620      	mov	r0, r4
    3ae8:	f001 f818 	bl	4b1c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3aec:	4b1f      	ldr	r3, [pc, #124]	; (3b6c <gpio_nrfx_pin_interrupt_configure+0xc8>)
    3aee:	4298      	cmp	r0, r3
    3af0:	d139      	bne.n	3b66 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    3af2:	2101      	movs	r1, #1
    3af4:	4620      	mov	r0, r4
    3af6:	f001 f98b 	bl	4e10 <nrfx_gpiote_trigger_enable>
	return 0;
    3afa:	e7e1      	b.n	3ac0 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    3afc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    3b00:	d026      	beq.n	3b50 <gpio_nrfx_pin_interrupt_configure+0xac>
    3b02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    3b06:	bf14      	ite	ne
    3b08:	2301      	movne	r3, #1
    3b0a:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    3b0c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    3b10:	6883      	ldr	r3, [r0, #8]
    3b12:	40cb      	lsrs	r3, r1
    3b14:	07d9      	lsls	r1, r3, #31
    3b16:	d4e3      	bmi.n	3ae0 <gpio_nrfx_pin_interrupt_configure+0x3c>
    3b18:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    3b1c:	d1e0      	bne.n	3ae0 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    3b1e:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
    3b20:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    3b22:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
    3b26:	4a12      	ldr	r2, [pc, #72]	; (3b70 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3b28:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    3b2c:	bf18      	it	ne
    3b2e:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    3b36:	07db      	lsls	r3, r3, #31
    3b38:	d4d2      	bmi.n	3ae0 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3b3a:	f10d 0507 	add.w	r5, sp, #7
    3b3e:	4629      	mov	r1, r5
    3b40:	4620      	mov	r0, r4
    3b42:	f001 f911 	bl	4d68 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    3b46:	4b0b      	ldr	r3, [pc, #44]	; (3b74 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    3b48:	4298      	cmp	r0, r3
    3b4a:	d003      	beq.n	3b54 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
    3b4c:	9503      	str	r5, [sp, #12]
    3b4e:	e7c7      	b.n	3ae0 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    3b50:	2303      	movs	r3, #3
    3b52:	e7db      	b.n	3b0c <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    3b54:	4628      	mov	r0, r5
    3b56:	f001 f955 	bl	4e04 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    3b5a:	4b04      	ldr	r3, [pc, #16]	; (3b6c <gpio_nrfx_pin_interrupt_configure+0xc8>)
    3b5c:	4298      	cmp	r0, r3
    3b5e:	d0f5      	beq.n	3b4c <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
    3b60:	f06f 000b 	mvn.w	r0, #11
    3b64:	e7ad      	b.n	3ac2 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    3b66:	f06f 0015 	mvn.w	r0, #21
    3b6a:	e7aa      	b.n	3ac2 <gpio_nrfx_pin_interrupt_configure+0x1e>
    3b6c:	0bad0000 	.word	0x0bad0000
    3b70:	50000300 	.word	0x50000300
    3b74:	0bad0004 	.word	0x0bad0004

00003b78 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3b78:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    3b7a:	f001 f933 	bl	4de4 <nrfx_gpiote_is_init>
    3b7e:	4604      	mov	r4, r0
    3b80:	b968      	cbnz	r0, 3b9e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    3b82:	f001 f907 	bl	4d94 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    3b86:	4b08      	ldr	r3, [pc, #32]	; (3ba8 <gpio_nrfx_init+0x30>)
    3b88:	4298      	cmp	r0, r3
    3b8a:	d10a      	bne.n	3ba2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    3b8c:	4807      	ldr	r0, [pc, #28]	; (3bac <gpio_nrfx_init+0x34>)
    3b8e:	4621      	mov	r1, r4
    3b90:	f001 f8e4 	bl	4d5c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3b94:	4622      	mov	r2, r4
    3b96:	2105      	movs	r1, #5
    3b98:	2006      	movs	r0, #6
    3b9a:	f7fe ffd9 	bl	2b50 <z_arm_irq_priority_set>
		return 0;
    3b9e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    3ba0:	bd10      	pop	{r4, pc}
		return -EIO;
    3ba2:	f06f 0004 	mvn.w	r0, #4
    3ba6:	e7fb      	b.n	3ba0 <gpio_nrfx_init+0x28>
    3ba8:	0bad0000 	.word	0x0bad0000
    3bac:	00003bb1 	.word	0x00003bb1

00003bb0 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3bb0:	0942      	lsrs	r2, r0, #5
{
    3bb2:	b570      	push	{r4, r5, r6, lr}
    3bb4:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3bb6:	d002      	beq.n	3bbe <nrfx_gpio_handler+0xe>
    3bb8:	2a01      	cmp	r2, #1
    3bba:	d017      	beq.n	3bec <nrfx_gpio_handler+0x3c>
}
    3bbc:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3bbe:	4e0d      	ldr	r6, [pc, #52]	; (3bf4 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    3bc0:	6932      	ldr	r2, [r6, #16]
    3bc2:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3bc4:	2900      	cmp	r1, #0
    3bc6:	d0f9      	beq.n	3bbc <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    3bc8:	f003 031f 	and.w	r3, r3, #31
    3bcc:	2501      	movs	r5, #1
    3bce:	680c      	ldr	r4, [r1, #0]
    3bd0:	409d      	lsls	r5, r3
    3bd2:	2900      	cmp	r1, #0
    3bd4:	d0f2      	beq.n	3bbc <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    3bd6:	688a      	ldr	r2, [r1, #8]
    3bd8:	402a      	ands	r2, r5
    3bda:	d002      	beq.n	3be2 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    3bdc:	684b      	ldr	r3, [r1, #4]
    3bde:	4630      	mov	r0, r6
    3be0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3be2:	b12c      	cbz	r4, 3bf0 <nrfx_gpio_handler+0x40>
    3be4:	6823      	ldr	r3, [r4, #0]
    3be6:	4621      	mov	r1, r4
    3be8:	461c      	mov	r4, r3
    3bea:	e7f2      	b.n	3bd2 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3bec:	4e02      	ldr	r6, [pc, #8]	; (3bf8 <nrfx_gpio_handler+0x48>)
    3bee:	e7e7      	b.n	3bc0 <nrfx_gpio_handler+0x10>
    3bf0:	4623      	mov	r3, r4
    3bf2:	e7f8      	b.n	3be6 <nrfx_gpio_handler+0x36>
    3bf4:	00007bbc 	.word	0x00007bbc
    3bf8:	00007ba4 	.word	0x00007ba4

00003bfc <gpio_nrfx_pin_configure>:
{
    3bfc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    3c00:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3c02:	7b3b      	ldrb	r3, [r7, #12]
    3c04:	f001 051f 	and.w	r5, r1, #31
    3c08:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    3c0c:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3c0e:	4628      	mov	r0, r5
    3c10:	f10d 0103 	add.w	r1, sp, #3
{
    3c14:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3c16:	f001 f8a7 	bl	4d68 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    3c1a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3c1e:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    3c20:	d10b      	bne.n	3c3a <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    3c22:	4628      	mov	r0, r5
    3c24:	f001 f964 	bl	4ef0 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    3c28:	4b3d      	ldr	r3, [pc, #244]	; (3d20 <gpio_nrfx_pin_configure+0x124>)
    3c2a:	4598      	cmp	r8, r3
    3c2c:	d103      	bne.n	3c36 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    3c2e:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3c32:	f001 f8e1 	bl	4df8 <nrfx_gpiote_channel_free>
		return 0;
    3c36:	2000      	movs	r0, #0
    3c38:	e00c      	b.n	3c54 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    3c3a:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3c3c:	4619      	mov	r1, r3
    3c3e:	aa02      	add	r2, sp, #8
    3c40:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    3c42:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3c46:	f000 ff69 	bl	4b1c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3c4a:	4b35      	ldr	r3, [pc, #212]	; (3d20 <gpio_nrfx_pin_configure+0x124>)
    3c4c:	4298      	cmp	r0, r3
    3c4e:	d004      	beq.n	3c5a <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    3c50:	f06f 0015 	mvn.w	r0, #21
}
    3c54:	b004      	add	sp, #16
    3c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    3c5a:	4580      	cmp	r8, r0
    3c5c:	d103      	bne.n	3c66 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    3c5e:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3c62:	f001 f8c9 	bl	4df8 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    3c66:	03a3      	lsls	r3, r4, #14
    3c68:	d54b      	bpl.n	3d02 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3c6a:	f240 3306 	movw	r3, #774	; 0x306
    3c6e:	4023      	ands	r3, r4
    3c70:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    3c74:	d019      	beq.n	3caa <gpio_nrfx_pin_configure+0xae>
    3c76:	d80c      	bhi.n	3c92 <gpio_nrfx_pin_configure+0x96>
    3c78:	2b06      	cmp	r3, #6
    3c7a:	d017      	beq.n	3cac <gpio_nrfx_pin_configure+0xb0>
    3c7c:	d804      	bhi.n	3c88 <gpio_nrfx_pin_configure+0x8c>
    3c7e:	b1ab      	cbz	r3, 3cac <gpio_nrfx_pin_configure+0xb0>
    3c80:	2b02      	cmp	r3, #2
    3c82:	d1e5      	bne.n	3c50 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    3c84:	2304      	movs	r3, #4
    3c86:	e011      	b.n	3cac <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    3c8c:	d1e0      	bne.n	3c50 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    3c8e:	2301      	movs	r3, #1
    3c90:	e00c      	b.n	3cac <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3c92:	f240 2202 	movw	r2, #514	; 0x202
    3c96:	4293      	cmp	r3, r2
    3c98:	d027      	beq.n	3cea <gpio_nrfx_pin_configure+0xee>
    3c9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    3c9e:	d026      	beq.n	3cee <gpio_nrfx_pin_configure+0xf2>
    3ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3ca4:	d1d4      	bne.n	3c50 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    3ca6:	2302      	movs	r3, #2
    3ca8:	e000      	b.n	3cac <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    3caa:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    3cac:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    3cb0:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    3cb4:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    3cb8:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    3cba:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    3cbe:	bf54      	ite	pl
    3cc0:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    3cc4:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3cc6:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    3cc8:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3ccc:	d511      	bpl.n	3cf2 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    3cce:	687a      	ldr	r2, [r7, #4]
    3cd0:	2301      	movs	r3, #1
    3cd2:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    3cd4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    3cd8:	2200      	movs	r2, #0
    3cda:	a901      	add	r1, sp, #4
    3cdc:	4628      	mov	r0, r5
    3cde:	f000 ffcb 	bl	4c78 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3ce2:	4b0f      	ldr	r3, [pc, #60]	; (3d20 <gpio_nrfx_pin_configure+0x124>)
    3ce4:	4298      	cmp	r0, r3
    3ce6:	d0a6      	beq.n	3c36 <gpio_nrfx_pin_configure+0x3a>
    3ce8:	e7b2      	b.n	3c50 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    3cea:	2305      	movs	r3, #5
    3cec:	e7de      	b.n	3cac <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3cee:	2303      	movs	r3, #3
    3cf0:	e7dc      	b.n	3cac <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3cf2:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    3cf4:	bf41      	itttt	mi
    3cf6:	2301      	movmi	r3, #1
    3cf8:	687a      	ldrmi	r2, [r7, #4]
    3cfa:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    3cfc:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    3d00:	e7ea      	b.n	3cd8 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    3d02:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3d04:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    3d08:	bf54      	ite	pl
    3d0a:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    3d0e:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3d10:	461a      	mov	r2, r3
    3d12:	a901      	add	r1, sp, #4
    3d14:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    3d16:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3d1a:	f000 feff 	bl	4b1c <nrfx_gpiote_input_configure>
    3d1e:	e7e0      	b.n	3ce2 <gpio_nrfx_pin_configure+0xe6>
    3d20:	0bad0000 	.word	0x0bad0000

00003d24 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    3d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        case 1: return NRF_P1;
    3d28:	4e5a      	ldr	r6, [pc, #360]	; (3e94 <pinctrl_configure_pins+0x170>)
    3d2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3d2e:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    3d30:	4281      	cmp	r1, r0
    3d32:	d102      	bne.n	3d3a <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    3d34:	2000      	movs	r0, #0
}
    3d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    3d3a:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    3d3c:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    3d40:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
    3d44:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    3d46:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
    3d4a:	bf08      	it	eq
    3d4c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
    3d50:	2c22      	cmp	r4, #34	; 0x22
    3d52:	f200 809b 	bhi.w	3e8c <pinctrl_configure_pins+0x168>
    3d56:	e8df f004 	tbb	[pc, r4]
    3d5a:	2412      	.short	0x2412
    3d5c:	402c4429 	.word	0x402c4429
    3d60:	99999944 	.word	0x99999944
    3d64:	99704799 	.word	0x99704799
    3d68:	99999999 	.word	0x99999999
    3d6c:	99999999 	.word	0x99999999
    3d70:	817e7b73 	.word	0x817e7b73
    3d74:	84999999 	.word	0x84999999
    3d78:	93908d8a 	.word	0x93908d8a
    3d7c:	96          	.byte	0x96
    3d7d:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
    3d7e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
    3d82:	ea4f 1c53 	mov.w	ip, r3, lsr #5
        case 1: return NRF_P1;
    3d86:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
    3d8a:	f003 041f 	and.w	r4, r3, #31
        case 1: return NRF_P1;
    3d8e:	bf14      	ite	ne
    3d90:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
    3d94:	46b4      	moveq	ip, r6
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3d96:	fa07 f404 	lsl.w	r4, r7, r4
    p_reg->OUTSET = set_mask;
    3d9a:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    3d9e:	2401      	movs	r4, #1
    3da0:	e002      	b.n	3da8 <pinctrl_configure_pins+0x84>
			NRF_PSEL_UART(reg, RXD) = pin;
    3da2:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    3da6:	2400      	movs	r4, #0
    3da8:	46a6      	mov	lr, r4
    3daa:	e024      	b.n	3df6 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
    3dac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    3db0:	e7e7      	b.n	3d82 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    3db2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    3db6:	2400      	movs	r4, #0
    return pin_number >> 5;
    3db8:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
    3dbc:	f1be 0f01 	cmp.w	lr, #1
    3dc0:	bf14      	ite	ne
    3dc2:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
    3dc6:	46b6      	moveq	lr, r6
    *p_pin = pin_number & 0x1F;
    3dc8:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3dcc:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    3dd0:	f8ce c50c 	str.w	ip, [lr, #1292]	; 0x50c
    3dd4:	f04f 0e01 	mov.w	lr, #1
    3dd8:	e00d      	b.n	3df6 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    3dda:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    3dde:	2401      	movs	r4, #1
    3de0:	e7ea      	b.n	3db8 <pinctrl_configure_pins+0x94>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    3de2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    3de6:	e7de      	b.n	3da6 <pinctrl_configure_pins+0x82>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    3de8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    3dec:	2d00      	cmp	r5, #0
    3dee:	d1da      	bne.n	3da6 <pinctrl_configure_pins+0x82>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    3df0:	2400      	movs	r4, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    3df2:	46a6      	mov	lr, r4
				drive = NRF_DRIVE_S0D1;
    3df4:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    3df6:	f850 cb04 	ldr.w	ip, [r0], #4
    3dfa:	f40c 5800 	and.w	r8, ip, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    3dfe:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    3e02:	ea4f 2505 	mov.w	r5, r5, lsl #8
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    3e06:	f3cc 18c1 	ubfx	r8, ip, #7, #2
    *p_pin = pin_number & 0x1F;
    3e0a:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
    3e0e:	ea4f 1353 	mov.w	r3, r3, lsr #5
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    3e12:	bf1c      	itt	ne
    3e14:	2401      	movne	r4, #1
    3e16:	f04f 0e00 	movne.w	lr, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3e1a:	ea45 0588 	orr.w	r5, r5, r8, lsl #2
        case 0: return NRF_P0;
    3e1e:	2b01      	cmp	r3, #1
    3e20:	bf0c      	ite	eq
    3e22:	4633      	moveq	r3, r6
    3e24:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3e28:	ea45 050e 	orr.w	r5, r5, lr
    reg->PIN_CNF[pin_number] = cnf;
    3e2c:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3e30:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    3e34:	f843 502c 	str.w	r5, [r3, ip, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    3e38:	e77a      	b.n	3d30 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    3e3a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    3e3e:	e7d5      	b.n	3dec <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    3e40:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    3e44:	6804      	ldr	r4, [r0, #0]
    3e46:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
    3e4a:	2c00      	cmp	r4, #0
    3e4c:	d0c7      	beq.n	3dde <pinctrl_configure_pins+0xba>
    3e4e:	e798      	b.n	3d82 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    3e50:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    3e54:	e7f6      	b.n	3e44 <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    3e56:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    3e5a:	e7f3      	b.n	3e44 <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    3e5c:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    3e60:	e7f0      	b.n	3e44 <pinctrl_configure_pins+0x120>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    3e62:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    3e66:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    3e68:	f04f 0e00 	mov.w	lr, #0
    3e6c:	e7c3      	b.n	3df6 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    3e6e:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    3e72:	e786      	b.n	3d82 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    3e74:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
    3e78:	e7f5      	b.n	3e66 <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    3e7a:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
    3e7e:	e7f2      	b.n	3e66 <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    3e80:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
    3e84:	e7ef      	b.n	3e66 <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    3e86:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
    3e8a:	e7ec      	b.n	3e66 <pinctrl_configure_pins+0x142>
		switch (NRF_GET_FUN(pins[i])) {
    3e8c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3e90:	e751      	b.n	3d36 <pinctrl_configure_pins+0x12>
    3e92:	bf00      	nop
    3e94:	50000300 	.word	0x50000300

00003e98 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    3e98:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    3e9a:	794b      	ldrb	r3, [r1, #5]
    3e9c:	2b01      	cmp	r3, #1
    3e9e:	d026      	beq.n	3eee <uarte_nrfx_configure+0x56>
    3ea0:	2b03      	cmp	r3, #3
    3ea2:	d121      	bne.n	3ee8 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    3ea4:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3ea6:	798b      	ldrb	r3, [r1, #6]
    3ea8:	2b03      	cmp	r3, #3
    3eaa:	d11d      	bne.n	3ee8 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3eac:	79ce      	ldrb	r6, [r1, #7]
    3eae:	b10e      	cbz	r6, 3eb4 <uarte_nrfx_configure+0x1c>
    3eb0:	2e01      	cmp	r6, #1
    3eb2:	d119      	bne.n	3ee8 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3eb4:	790a      	ldrb	r2, [r1, #4]
    3eb6:	b112      	cbz	r2, 3ebe <uarte_nrfx_configure+0x26>
    3eb8:	2a02      	cmp	r2, #2
    3eba:	d115      	bne.n	3ee8 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3ebc:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3ebe:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3ec0:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    3ec2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    3ec6:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
    3ec8:	d067      	beq.n	3f9a <uarte_nrfx_configure+0x102>
    3eca:	d82d      	bhi.n	3f28 <uarte_nrfx_configure+0x90>
    3ecc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3ed0:	d066      	beq.n	3fa0 <uarte_nrfx_configure+0x108>
    3ed2:	d816      	bhi.n	3f02 <uarte_nrfx_configure+0x6a>
    3ed4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3ed8:	d064      	beq.n	3fa4 <uarte_nrfx_configure+0x10c>
    3eda:	d80a      	bhi.n	3ef2 <uarte_nrfx_configure+0x5a>
    3edc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3ee0:	d063      	beq.n	3faa <uarte_nrfx_configure+0x112>
    3ee2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3ee6:	d063      	beq.n	3fb0 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
    3ee8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3eec:	e054      	b.n	3f98 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    3eee:	2500      	movs	r5, #0
    3ef0:	e7d9      	b.n	3ea6 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    3ef2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3ef6:	d05e      	beq.n	3fb6 <uarte_nrfx_configure+0x11e>
    3ef8:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3efc:	d1f4      	bne.n	3ee8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3efe:	4b38      	ldr	r3, [pc, #224]	; (3fe0 <uarte_nrfx_configure+0x148>)
    3f00:	e03c      	b.n	3f7c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3f02:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3f06:	d059      	beq.n	3fbc <uarte_nrfx_configure+0x124>
    3f08:	d807      	bhi.n	3f1a <uarte_nrfx_configure+0x82>
    3f0a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3f0e:	d057      	beq.n	3fc0 <uarte_nrfx_configure+0x128>
    3f10:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3f14:	d1e8      	bne.n	3ee8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    3f16:	4b33      	ldr	r3, [pc, #204]	; (3fe4 <uarte_nrfx_configure+0x14c>)
    3f18:	e030      	b.n	3f7c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3f1a:	f647 2412 	movw	r4, #31250	; 0x7a12
    3f1e:	42a3      	cmp	r3, r4
    3f20:	d1e2      	bne.n	3ee8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3f22:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3f26:	e029      	b.n	3f7c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3f28:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3f2c:	d04a      	beq.n	3fc4 <uarte_nrfx_configure+0x12c>
    3f2e:	d813      	bhi.n	3f58 <uarte_nrfx_configure+0xc0>
    3f30:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3f34:	d049      	beq.n	3fca <uarte_nrfx_configure+0x132>
    3f36:	d809      	bhi.n	3f4c <uarte_nrfx_configure+0xb4>
    3f38:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    3f3c:	42a3      	cmp	r3, r4
    3f3e:	d046      	beq.n	3fce <uarte_nrfx_configure+0x136>
    3f40:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3f44:	d1d0      	bne.n	3ee8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3f46:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3f4a:	e017      	b.n	3f7c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3f4c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3f50:	d1ca      	bne.n	3ee8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    3f52:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3f56:	e011      	b.n	3f7c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3f58:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3f5c:	d03a      	beq.n	3fd4 <uarte_nrfx_configure+0x13c>
    3f5e:	d808      	bhi.n	3f72 <uarte_nrfx_configure+0xda>
    3f60:	4c21      	ldr	r4, [pc, #132]	; (3fe8 <uarte_nrfx_configure+0x150>)
    3f62:	42a3      	cmp	r3, r4
    3f64:	d039      	beq.n	3fda <uarte_nrfx_configure+0x142>
    3f66:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3f6a:	d1bd      	bne.n	3ee8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3f6c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3f70:	e004      	b.n	3f7c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3f72:	4c1e      	ldr	r4, [pc, #120]	; (3fec <uarte_nrfx_configure+0x154>)
    3f74:	42a3      	cmp	r3, r4
    3f76:	d1b7      	bne.n	3ee8 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3f78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    3f7c:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3f7e:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
    3f82:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
    3f84:	4335      	orrs	r5, r6
    3f86:	681b      	ldr	r3, [r3, #0]
    3f88:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3f8a:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    3f8e:	c903      	ldmia	r1, {r0, r1}
    3f90:	1d23      	adds	r3, r4, #4
    3f92:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    3f96:	2000      	movs	r0, #0
}
    3f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3f9a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3f9e:	e7ed      	b.n	3f7c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3fa0:	4b13      	ldr	r3, [pc, #76]	; (3ff0 <uarte_nrfx_configure+0x158>)
    3fa2:	e7eb      	b.n	3f7c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3fa4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3fa8:	e7e8      	b.n	3f7c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    3faa:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3fae:	e7e5      	b.n	3f7c <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3fb0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3fb4:	e7e2      	b.n	3f7c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3fb6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3fba:	e7df      	b.n	3f7c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3fbc:	4b0d      	ldr	r3, [pc, #52]	; (3ff4 <uarte_nrfx_configure+0x15c>)
    3fbe:	e7dd      	b.n	3f7c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3fc0:	4b0d      	ldr	r3, [pc, #52]	; (3ff8 <uarte_nrfx_configure+0x160>)
    3fc2:	e7db      	b.n	3f7c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3fc4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3fc8:	e7d8      	b.n	3f7c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3fca:	4b0c      	ldr	r3, [pc, #48]	; (3ffc <uarte_nrfx_configure+0x164>)
    3fcc:	e7d6      	b.n	3f7c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3fce:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3fd2:	e7d3      	b.n	3f7c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3fd4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3fd8:	e7d0      	b.n	3f7c <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3fda:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3fde:	e7cd      	b.n	3f7c <uarte_nrfx_configure+0xe4>
    3fe0:	0013b000 	.word	0x0013b000
    3fe4:	004ea000 	.word	0x004ea000
    3fe8:	0003d090 	.word	0x0003d090
    3fec:	000f4240 	.word	0x000f4240
    3ff0:	00275000 	.word	0x00275000
    3ff4:	0075c000 	.word	0x0075c000
    3ff8:	003af000 	.word	0x003af000
    3ffc:	013a9000 	.word	0x013a9000

00004000 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    4000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4004:	2200      	movs	r2, #0
    4006:	b087      	sub	sp, #28
    4008:	4680      	mov	r8, r0
    400a:	2101      	movs	r1, #1
    400c:	2002      	movs	r0, #2
    400e:	f7fe fd9f 	bl	2b50 <z_arm_irq_priority_set>
    4012:	2002      	movs	r0, #2
    4014:	f7fe fd6c 	bl	2af0 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
    4018:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    401c:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    4020:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    4022:	2100      	movs	r1, #0
    4024:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    4028:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    402c:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    4030:	466a      	mov	r2, sp
    4032:	4648      	mov	r0, r9
    4034:	f003 fa6d 	bl	7512 <pinctrl_lookup_state>
	if (ret < 0) {
    4038:	1e05      	subs	r5, r0, #0
    403a:	db25      	blt.n	4088 <uarte_0_init+0x88>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    403c:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    403e:	f8d9 2000 	ldr.w	r2, [r9]
    4042:	7919      	ldrb	r1, [r3, #4]
    4044:	6818      	ldr	r0, [r3, #0]
    4046:	f7ff fe6d 	bl	3d24 <pinctrl_configure_pins>
	if (err < 0) {
    404a:	1e05      	subs	r5, r0, #0
    404c:	db1c      	blt.n	4088 <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    404e:	1d31      	adds	r1, r6, #4
    4050:	4640      	mov	r0, r8
    4052:	f7ff ff21 	bl	3e98 <uarte_nrfx_configure>
	if (err) {
    4056:	4605      	mov	r5, r0
    4058:	b9b0      	cbnz	r0, 4088 <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    405a:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    405c:	0799      	lsls	r1, r3, #30
    405e:	d52b      	bpl.n	40b8 <uarte_0_init+0xb8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    4060:	f106 0018 	add.w	r0, r6, #24
    4064:	f001 f846 	bl	50f4 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    4068:	4b27      	ldr	r3, [pc, #156]	; (4108 <uarte_0_init+0x108>)
    406a:	4298      	cmp	r0, r3
    406c:	d010      	beq.n	4090 <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
    406e:	4b27      	ldr	r3, [pc, #156]	; (410c <uarte_0_init+0x10c>)
    4070:	9305      	str	r3, [sp, #20]
    4072:	2302      	movs	r3, #2
    4074:	9304      	str	r3, [sp, #16]
    4076:	4826      	ldr	r0, [pc, #152]	; (4110 <uarte_0_init+0x110>)
    4078:	462b      	mov	r3, r5
    407a:	aa04      	add	r2, sp, #16
    407c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
    4080:	f06f 0504 	mvn.w	r5, #4
    4084:	f7fd ff18 	bl	1eb8 <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
    4088:	4628      	mov	r0, r5
    408a:	b007      	add	sp, #28
    408c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    4090:	7e33      	ldrb	r3, [r6, #24]
    4092:	00db      	lsls	r3, r3, #3
    4094:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4098:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    409c:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    40a0:	f504 7190 	add.w	r1, r4, #288	; 0x120
    40a4:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    40a8:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    40ac:	7e32      	ldrb	r2, [r6, #24]
    40ae:	2301      	movs	r3, #1
    40b0:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
    40b2:	4a18      	ldr	r2, [pc, #96]	; (4114 <uarte_0_init+0x114>)
    40b4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    40b8:	2308      	movs	r3, #8
    40ba:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    40be:	7a3b      	ldrb	r3, [r7, #8]
    40c0:	b953      	cbnz	r3, 40d8 <uarte_0_init+0xd8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    40c2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    40c6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    40ca:	6973      	ldr	r3, [r6, #20]
    40cc:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    40d0:	2301      	movs	r3, #1
    40d2:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    40d6:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    40d8:	687b      	ldr	r3, [r7, #4]
    40da:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    40dc:	bf5c      	itt	pl
    40de:	f44f 7380 	movpl.w	r3, #256	; 0x100
    40e2:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    40e6:	687b      	ldr	r3, [r7, #4]
    40e8:	06db      	lsls	r3, r3, #27
    40ea:	bf44      	itt	mi
    40ec:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    40f0:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    40f4:	6933      	ldr	r3, [r6, #16]
    40f6:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    40fa:	2300      	movs	r3, #0
    40fc:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4100:	2301      	movs	r3, #1
    4102:	60a3      	str	r3, [r4, #8]
    4104:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    4106:	e7bf      	b.n	4088 <uarte_0_init+0x88>
    4108:	0bad0000 	.word	0x0bad0000
    410c:	0000899c 	.word	0x0000899c
    4110:	00007dfc 	.word	0x00007dfc
    4114:	4001f000 	.word	0x4001f000

00004118 <uarte_nrfx_poll_out>:
{
    4118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    411a:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    411c:	6907      	ldr	r7, [r0, #16]
{
    411e:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4120:	f003 fb9d 	bl	785e <k_is_in_isr>
    4124:	b9b0      	cbnz	r0, 4154 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    4126:	4b2e      	ldr	r3, [pc, #184]	; (41e0 <uarte_nrfx_poll_out+0xc8>)
    4128:	781b      	ldrb	r3, [r3, #0]
    412a:	b19b      	cbz	r3, 4154 <uarte_nrfx_poll_out+0x3c>
{
    412c:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    412e:	6860      	ldr	r0, [r4, #4]
    4130:	f003 fa25 	bl	757e <is_tx_ready.isra.0>
    4134:	bb00      	cbnz	r0, 4178 <uarte_nrfx_poll_out+0x60>
    4136:	2001      	movs	r0, #1
    4138:	f003 fa87 	bl	764a <nrfx_busy_wait>
    413c:	3e01      	subs	r6, #1
    413e:	d1f6      	bne.n	412e <uarte_nrfx_poll_out+0x16>
    4140:	2100      	movs	r1, #0
    4142:	2021      	movs	r0, #33	; 0x21
    4144:	f001 ff14 	bl	5f70 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4148:	e7f0      	b.n	412c <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    414a:	f386 8811 	msr	BASEPRI, r6
    414e:	f3bf 8f6f 	isb	sy
}
    4152:	e7f5      	b.n	4140 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    4154:	f04f 0320 	mov.w	r3, #32
    4158:	f3ef 8611 	mrs	r6, BASEPRI
    415c:	f383 8812 	msr	BASEPRI_MAX, r3
    4160:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    4164:	6860      	ldr	r0, [r4, #4]
    4166:	4631      	mov	r1, r6
    4168:	f003 fa09 	bl	757e <is_tx_ready.isra.0>
    416c:	b990      	cbnz	r0, 4194 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    416e:	f386 8811 	msr	BASEPRI, r6
    4172:	f3bf 8f6f 	isb	sy
}
    4176:	e7ed      	b.n	4154 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    4178:	f04f 0320 	mov.w	r3, #32
    417c:	f3ef 8611 	mrs	r6, BASEPRI
    4180:	f383 8812 	msr	BASEPRI_MAX, r3
    4184:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    4188:	6860      	ldr	r0, [r4, #4]
    418a:	4631      	mov	r1, r6
    418c:	f003 f9f7 	bl	757e <is_tx_ready.isra.0>
    4190:	2800      	cmp	r0, #0
    4192:	d0da      	beq.n	414a <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    4194:	693b      	ldr	r3, [r7, #16]
    4196:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    4198:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    419a:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    419c:	6813      	ldr	r3, [r2, #0]
    419e:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    41a2:	2001      	movs	r0, #1
    41a4:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    41a8:	2000      	movs	r0, #0
    41aa:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    41ae:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    41b2:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    41b6:	6852      	ldr	r2, [r2, #4]
    41b8:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    41bc:	06d2      	lsls	r2, r2, #27
    41be:	d508      	bpl.n	41d2 <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
    41c0:	6862      	ldr	r2, [r4, #4]
    41c2:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    41c4:	2008      	movs	r0, #8
    41c6:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    41ca:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    41ce:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    41d2:	2201      	movs	r2, #1
    41d4:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    41d6:	f381 8811 	msr	BASEPRI, r1
    41da:	f3bf 8f6f 	isb	sy
}
    41de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41e0:	20001591 	.word	0x20001591

000041e4 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    41e4:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    41e6:	2301      	movs	r3, #1
    41e8:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    41ea:	4a0e      	ldr	r2, [pc, #56]	; (4224 <compare_int_lock+0x40>)
    41ec:	f3bf 8f5b 	dmb	ish
    41f0:	43dc      	mvns	r4, r3
    41f2:	e852 1f00 	ldrex	r1, [r2]
    41f6:	ea01 0504 	and.w	r5, r1, r4
    41fa:	e842 5600 	strex	r6, r5, [r2]
    41fe:	2e00      	cmp	r6, #0
    4200:	d1f7      	bne.n	41f2 <compare_int_lock+0xe>
    4202:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4206:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    420a:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    420c:	4806      	ldr	r0, [pc, #24]	; (4228 <compare_int_lock+0x44>)
    420e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    4212:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4216:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    421a:	420b      	tst	r3, r1
}
    421c:	bf14      	ite	ne
    421e:	2001      	movne	r0, #1
    4220:	2000      	moveq	r0, #0
    4222:	bd70      	pop	{r4, r5, r6, pc}
    4224:	20000ec8 	.word	0x20000ec8
    4228:	40011000 	.word	0x40011000

0000422c <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    422c:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    422e:	490e      	ldr	r1, [pc, #56]	; (4268 <sys_clock_timeout_handler+0x3c>)
    4230:	e9d1 3400 	ldrd	r3, r4, [r1]
    4234:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    4236:	18c3      	adds	r3, r0, r3
    4238:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    423c:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    4240:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    4244:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    4248:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    424c:	d209      	bcs.n	4262 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    424e:	4b07      	ldr	r3, [pc, #28]	; (426c <sys_clock_timeout_handler+0x40>)
    4250:	681b      	ldr	r3, [r3, #0]
    4252:	0a1a      	lsrs	r2, r3, #8
    4254:	061b      	lsls	r3, r3, #24
    4256:	199c      	adds	r4, r3, r6
    4258:	4b05      	ldr	r3, [pc, #20]	; (4270 <sys_clock_timeout_handler+0x44>)
    425a:	f142 0500 	adc.w	r5, r2, #0
    425e:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    4262:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    4264:	f001 bfde 	b.w	6224 <sys_clock_announce>
    4268:	200006e0 	.word	0x200006e0
    426c:	20000ecc 	.word	0x20000ecc
    4270:	200006e8 	.word	0x200006e8

00004274 <compare_int_unlock>:
	if (key) {
    4274:	b311      	cbz	r1, 42bc <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4276:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    427a:	2301      	movs	r3, #1
    427c:	4a10      	ldr	r2, [pc, #64]	; (42c0 <compare_int_unlock+0x4c>)
    427e:	4083      	lsls	r3, r0
    4280:	e852 cf00 	ldrex	ip, [r2]
    4284:	ea4c 0c03 	orr.w	ip, ip, r3
    4288:	e842 c100 	strex	r1, ip, [r2]
    428c:	2900      	cmp	r1, #0
    428e:	d1f7      	bne.n	4280 <compare_int_unlock+0xc>
    4290:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    4294:	4a0b      	ldr	r2, [pc, #44]	; (42c4 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4296:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    429a:	4083      	lsls	r3, r0
    429c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    42a0:	4b09      	ldr	r3, [pc, #36]	; (42c8 <compare_int_unlock+0x54>)
    42a2:	f3bf 8f5b 	dmb	ish
    42a6:	681b      	ldr	r3, [r3, #0]
    42a8:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    42ac:	40c3      	lsrs	r3, r0
    42ae:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    42b0:	bf42      	ittt	mi
    42b2:	4b06      	ldrmi	r3, [pc, #24]	; (42cc <compare_int_unlock+0x58>)
    42b4:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    42b8:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    42bc:	4770      	bx	lr
    42be:	bf00      	nop
    42c0:	20000ec8 	.word	0x20000ec8
    42c4:	40011000 	.word	0x40011000
    42c8:	20000ec4 	.word	0x20000ec4
    42cc:	e000e100 	.word	0xe000e100

000042d0 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    42d0:	4b0d      	ldr	r3, [pc, #52]	; (4308 <z_nrf_rtc_timer_read+0x38>)
    42d2:	6818      	ldr	r0, [r3, #0]
    42d4:	0a01      	lsrs	r1, r0, #8
    42d6:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    42d8:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    42dc:	4b0b      	ldr	r3, [pc, #44]	; (430c <z_nrf_rtc_timer_read+0x3c>)
    42de:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    42e2:	1818      	adds	r0, r3, r0
    42e4:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    42e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    42ec:	d20a      	bcs.n	4304 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    42ee:	4b08      	ldr	r3, [pc, #32]	; (4310 <z_nrf_rtc_timer_read+0x40>)
    42f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    42f4:	4290      	cmp	r0, r2
    42f6:	eb71 0303 	sbcs.w	r3, r1, r3
    42fa:	d203      	bcs.n	4304 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    42fc:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4300:	f141 0100 	adc.w	r1, r1, #0
}
    4304:	4770      	bx	lr
    4306:	bf00      	nop
    4308:	20000ecc 	.word	0x20000ecc
    430c:	40011000 	.word	0x40011000
    4310:	200006e8 	.word	0x200006e8

00004314 <compare_set>:
{
    4314:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4318:	4616      	mov	r6, r2
    431a:	461f      	mov	r7, r3
    431c:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    431e:	f7ff ff61 	bl	41e4 <compare_int_lock>
    4322:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    4324:	f7ff ffd4 	bl	42d0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    4328:	42b0      	cmp	r0, r6
    432a:	eb71 0307 	sbcs.w	r3, r1, r7
    432e:	d251      	bcs.n	43d4 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    4330:	4b3a      	ldr	r3, [pc, #232]	; (441c <compare_set+0x108>)
    4332:	1a30      	subs	r0, r6, r0
    4334:	eb67 0101 	sbc.w	r1, r7, r1
    4338:	4298      	cmp	r0, r3
    433a:	f171 0100 	sbcs.w	r1, r1, #0
    433e:	d26a      	bcs.n	4416 <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    4340:	4b37      	ldr	r3, [pc, #220]	; (4420 <compare_set+0x10c>)
    4342:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    4346:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    434a:	429f      	cmp	r7, r3
    434c:	bf08      	it	eq
    434e:	4296      	cmpeq	r6, r2
    4350:	d04e      	beq.n	43f0 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    4352:	4934      	ldr	r1, [pc, #208]	; (4424 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4354:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4358:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    435c:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4360:	00ad      	lsls	r5, r5, #2
    4362:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    4366:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4368:	b2ad      	uxth	r5, r5
    436a:	f003 f952 	bl	7612 <event_clear>
	return absolute_time & COUNTER_MAX;
    436e:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    4372:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    4376:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    437a:	4a2b      	ldr	r2, [pc, #172]	; (4428 <compare_set+0x114>)
    437c:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    437e:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    4382:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    4384:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    4388:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    438a:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    438e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    4392:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    4396:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    439a:	f06f 0002 	mvn.w	r0, #2
    439e:	eba0 0008 	sub.w	r0, r0, r8
    43a2:	4460      	add	r0, ip
    43a4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    43a8:	4290      	cmp	r0, r2
    43aa:	d921      	bls.n	43f0 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    43ac:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    43ae:	b160      	cbz	r0, 43ca <compare_set+0xb6>
     return p_reg->COUNTER;
    43b0:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    43b4:	eba8 000b 	sub.w	r0, r8, fp
    43b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    43bc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    43c0:	d916      	bls.n	43f0 <compare_set+0xdc>
					event_clear(chan);
    43c2:	4620      	mov	r0, r4
    43c4:	f003 f925 	bl	7612 <event_clear>
    43c8:	4a17      	ldr	r2, [pc, #92]	; (4428 <compare_set+0x114>)
			cc_val = now + cc_inc;
    43ca:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    43ce:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    43d2:	e7d9      	b.n	4388 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    43d4:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    43d6:	4a15      	ldr	r2, [pc, #84]	; (442c <compare_set+0x118>)
    43d8:	f3bf 8f5b 	dmb	ish
    43dc:	40a3      	lsls	r3, r4
    43de:	e852 0f00 	ldrex	r0, [r2]
    43e2:	4318      	orrs	r0, r3
    43e4:	e842 0100 	strex	r1, r0, [r2]
    43e8:	2900      	cmp	r1, #0
    43ea:	d1f8      	bne.n	43de <compare_set+0xca>
    43ec:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    43f0:	490b      	ldr	r1, [pc, #44]	; (4420 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    43f2:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    43f4:	0123      	lsls	r3, r4, #4
    43f6:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    43fa:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    43fe:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    4400:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4402:	6053      	str	r3, [r2, #4]
	return ret;
    4404:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    4406:	4620      	mov	r0, r4
    4408:	9900      	ldr	r1, [sp, #0]
    440a:	f7ff ff33 	bl	4274 <compare_int_unlock>
}
    440e:	4628      	mov	r0, r5
    4410:	b003      	add	sp, #12
    4412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    4416:	f06f 0515 	mvn.w	r5, #21
    441a:	e7f4      	b.n	4406 <compare_set+0xf2>
    441c:	00800001 	.word	0x00800001
    4420:	200006d0 	.word	0x200006d0
    4424:	40011000 	.word	0x40011000
    4428:	007ffffd 	.word	0x007ffffd
    442c:	20000ec4 	.word	0x20000ec4

00004430 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    4430:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
    4432:	4c1b      	ldr	r4, [pc, #108]	; (44a0 <sys_clock_driver_init+0x70>)
    4434:	4b1b      	ldr	r3, [pc, #108]	; (44a4 <sys_clock_driver_init+0x74>)
    4436:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    443a:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    443e:	4b1a      	ldr	r3, [pc, #104]	; (44a8 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    4440:	2500      	movs	r5, #0
    4442:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4446:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    444a:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    444e:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    4452:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4456:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    445a:	4b14      	ldr	r3, [pc, #80]	; (44ac <sys_clock_driver_init+0x7c>)
    445c:	2602      	movs	r6, #2
    445e:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    4462:	2101      	movs	r1, #1
    4464:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    4468:	2011      	movs	r0, #17
    446a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    446e:	462a      	mov	r2, r5
    4470:	f7fe fb6e 	bl	2b50 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    4474:	2011      	movs	r0, #17
    4476:	f7fe fb3b 	bl	2af0 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    447a:	4a0d      	ldr	r2, [pc, #52]	; (44b0 <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    447c:	2301      	movs	r3, #1
    447e:	60a3      	str	r3, [r4, #8]
    4480:	6023      	str	r3, [r4, #0]
    4482:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    4484:	4b0b      	ldr	r3, [pc, #44]	; (44b4 <sys_clock_driver_init+0x84>)
    4486:	4a0c      	ldr	r2, [pc, #48]	; (44b8 <sys_clock_driver_init+0x88>)
    4488:	9300      	str	r3, [sp, #0]
    448a:	9501      	str	r5, [sp, #4]
    448c:	2300      	movs	r3, #0
    448e:	4628      	mov	r0, r5
    4490:	f7ff ff40 	bl	4314 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    4494:	4630      	mov	r0, r6
    4496:	f7ff fa5f 	bl	3958 <z_nrf_clock_control_lf_on>

	return 0;
}
    449a:	4628      	mov	r0, r5
    449c:	b002      	add	sp, #8
    449e:	bd70      	pop	{r4, r5, r6, pc}
    44a0:	40011000 	.word	0x40011000
    44a4:	000f0003 	.word	0x000f0003
    44a8:	200006d0 	.word	0x200006d0
    44ac:	e000e100 	.word	0xe000e100
    44b0:	20000ec8 	.word	0x20000ec8
    44b4:	0000422d 	.word	0x0000422d
    44b8:	007fffff 	.word	0x007fffff

000044bc <rtc_nrf_isr>:
{
    44bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    44c0:	4c2f      	ldr	r4, [pc, #188]	; (4580 <rtc_nrf_isr+0xc4>)
    44c2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    44c6:	0799      	lsls	r1, r3, #30
    44c8:	d50b      	bpl.n	44e2 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    44ca:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    44ce:	b143      	cbz	r3, 44e2 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    44d0:	4a2c      	ldr	r2, [pc, #176]	; (4584 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    44d2:	2300      	movs	r3, #0
    44d4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    44d8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    44dc:	6813      	ldr	r3, [r2, #0]
    44de:	3301      	adds	r3, #1
    44e0:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    44e2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    44e6:	03da      	lsls	r2, r3, #15
    44e8:	d52a      	bpl.n	4540 <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    44ea:	f3bf 8f5b 	dmb	ish
    44ee:	4b26      	ldr	r3, [pc, #152]	; (4588 <rtc_nrf_isr+0xcc>)
    44f0:	e853 2f00 	ldrex	r2, [r3]
    44f4:	f022 0101 	bic.w	r1, r2, #1
    44f8:	e843 1000 	strex	r0, r1, [r3]
    44fc:	2800      	cmp	r0, #0
    44fe:	d1f7      	bne.n	44f0 <rtc_nrf_isr+0x34>
    4500:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    4504:	07d3      	lsls	r3, r2, #31
    4506:	d402      	bmi.n	450e <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4508:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    450c:	b1c3      	cbz	r3, 4540 <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    450e:	2500      	movs	r5, #0
    4510:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    4514:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    4518:	f7ff feda 	bl	42d0 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    451c:	f04f 0320 	mov.w	r3, #32
    4520:	f3ef 8211 	mrs	r2, BASEPRI
    4524:	f383 8812 	msr	BASEPRI_MAX, r3
    4528:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    452c:	4b17      	ldr	r3, [pc, #92]	; (458c <rtc_nrf_isr+0xd0>)
    452e:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    4532:	42b0      	cmp	r0, r6
    4534:	41b9      	sbcs	r1, r7
    4536:	d206      	bcs.n	4546 <rtc_nrf_isr+0x8a>
	__asm__ volatile(
    4538:	f382 8811 	msr	BASEPRI, r2
    453c:	f3bf 8f6f 	isb	sy
}
    4540:	b003      	add	sp, #12
    4542:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4546:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    454a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    454e:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    4552:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    4556:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    4558:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    455c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4560:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    4564:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    4568:	f382 8811 	msr	BASEPRI, r2
    456c:	f3bf 8f6f 	isb	sy
		if (handler) {
    4570:	2900      	cmp	r1, #0
    4572:	d0e5      	beq.n	4540 <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
    4574:	9000      	str	r0, [sp, #0]
    4576:	4632      	mov	r2, r6
    4578:	463b      	mov	r3, r7
    457a:	4628      	mov	r0, r5
    457c:	4788      	blx	r1
    457e:	e7df      	b.n	4540 <rtc_nrf_isr+0x84>
    4580:	40011000 	.word	0x40011000
    4584:	20000ecc 	.word	0x20000ecc
    4588:	20000ec4 	.word	0x20000ec4
    458c:	200006d0 	.word	0x200006d0

00004590 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    4590:	1c43      	adds	r3, r0, #1
{
    4592:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    4594:	d022      	beq.n	45dc <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    4596:	2801      	cmp	r0, #1
    4598:	dd22      	ble.n	45e0 <sys_clock_set_timeout+0x50>
    459a:	4a12      	ldr	r2, [pc, #72]	; (45e4 <sys_clock_set_timeout+0x54>)
    459c:	4b12      	ldr	r3, [pc, #72]	; (45e8 <sys_clock_set_timeout+0x58>)
    459e:	4290      	cmp	r0, r2
    45a0:	bfd4      	ite	le
    45a2:	4604      	movle	r4, r0
    45a4:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    45a6:	f7ff fe93 	bl	42d0 <z_nrf_rtc_timer_read>
    45aa:	4b10      	ldr	r3, [pc, #64]	; (45ec <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    45ac:	490e      	ldr	r1, [pc, #56]	; (45e8 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    45ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    45b2:	1a80      	subs	r0, r0, r2
		cyc = 0;
    45b4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    45b8:	bf28      	it	cs
    45ba:	2400      	movcs	r4, #0
	cyc += unannounced;
    45bc:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    45be:	428c      	cmp	r4, r1
    45c0:	bf28      	it	cs
    45c2:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    45c4:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    45c6:	490a      	ldr	r1, [pc, #40]	; (45f0 <sys_clock_set_timeout+0x60>)
    45c8:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    45ca:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    45ce:	9001      	str	r0, [sp, #4]
    45d0:	f143 0300 	adc.w	r3, r3, #0
    45d4:	f7ff fe9e 	bl	4314 <compare_set>
}
    45d8:	b002      	add	sp, #8
    45da:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    45dc:	4c02      	ldr	r4, [pc, #8]	; (45e8 <sys_clock_set_timeout+0x58>)
    45de:	e7e2      	b.n	45a6 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    45e0:	2401      	movs	r4, #1
    45e2:	e7e0      	b.n	45a6 <sys_clock_set_timeout+0x16>
    45e4:	007ffffe 	.word	0x007ffffe
    45e8:	007fffff 	.word	0x007fffff
    45ec:	200006e0 	.word	0x200006e0
    45f0:	0000422d 	.word	0x0000422d

000045f4 <sys_clock_elapsed>:
{
    45f4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    45f6:	f7ff fe6b 	bl	42d0 <z_nrf_rtc_timer_read>
    45fa:	4b02      	ldr	r3, [pc, #8]	; (4604 <sys_clock_elapsed+0x10>)
    45fc:	681b      	ldr	r3, [r3, #0]
}
    45fe:	1ac0      	subs	r0, r0, r3
    4600:	bd08      	pop	{r3, pc}
    4602:	bf00      	nop
    4604:	200006e0 	.word	0x200006e0

00004608 <sys_clock_disable>:
{
    4608:	b510      	push	{r4, lr}
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    460a:	4c08      	ldr	r4, [pc, #32]	; (462c <sys_clock_disable+0x24>)
    460c:	2301      	movs	r3, #1
    460e:	6063      	str	r3, [r4, #4]
	irq_disable(RTC_IRQn);
    4610:	2011      	movs	r0, #17
    4612:	f7fe fa7b 	bl	2b0c <arch_irq_disable>
    p_reg->INTENCLR = mask;
    4616:	4b06      	ldr	r3, [pc, #24]	; (4630 <sys_clock_disable+0x28>)
    4618:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    461c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    4620:	4b04      	ldr	r3, [pc, #16]	; (4634 <sys_clock_disable+0x2c>)
    4622:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4626:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    462a:	bd10      	pop	{r4, pc}
    462c:	40011000 	.word	0x40011000
    4630:	000f0003 	.word	0x000f0003
    4634:	e000e100 	.word	0xe000e100

00004638 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    4638:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    463a:	f7fd fb5d 	bl	1cf8 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    463e:	4b07      	ldr	r3, [pc, #28]	; (465c <k_sys_fatal_error_handler+0x24>)
    4640:	9305      	str	r3, [sp, #20]
    4642:	2302      	movs	r3, #2
    4644:	9304      	str	r3, [sp, #16]
    4646:	4806      	ldr	r0, [pc, #24]	; (4660 <k_sys_fatal_error_handler+0x28>)
    4648:	2300      	movs	r3, #0
    464a:	aa04      	add	r2, sp, #16
    464c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4650:	f7fd fc32 	bl	1eb8 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
    4654:	2000      	movs	r0, #0
    4656:	f7ff f86b 	bl	3730 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    465a:	bf00      	nop
    465c:	000089d9 	.word	0x000089d9
    4660:	00007dac 	.word	0x00007dac

00004664 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4664:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    4668:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    466c:	2a08      	cmp	r2, #8
    466e:	d106      	bne.n	467e <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4670:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    4674:	2b05      	cmp	r3, #5
    4676:	d802      	bhi.n	467e <nrf52_errata_103+0x1a>
    4678:	4a02      	ldr	r2, [pc, #8]	; (4684 <nrf52_errata_103+0x20>)
    467a:	5cd0      	ldrb	r0, [r2, r3]
    467c:	4770      	bx	lr
                        return false;
    467e:	2000      	movs	r0, #0
}
    4680:	4770      	bx	lr
    4682:	bf00      	nop
    4684:	000089fc 	.word	0x000089fc

00004688 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    4688:	4a02      	ldr	r2, [pc, #8]	; (4694 <nvmc_wait+0xc>)
    468a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    468e:	2b00      	cmp	r3, #0
    4690:	d0fb      	beq.n	468a <nvmc_wait+0x2>
}
    4692:	4770      	bx	lr
    4694:	4001e000 	.word	0x4001e000

00004698 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    4698:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    469a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    469e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    46a2:	2a08      	cmp	r2, #8
    46a4:	d14e      	bne.n	4744 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    46a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    46aa:	2100      	movs	r1, #0
    46ac:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    46b0:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    46b4:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    46b8:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    46bc:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    46c0:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    46c4:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    46c8:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    46cc:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    46d0:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    46d4:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    46d8:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    46dc:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    46e0:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    46e4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    46e8:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    46ec:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    46f0:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    46f4:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    46f8:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    46fc:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    4700:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    4704:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    4708:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    470c:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    4710:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4714:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    4718:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    471c:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    4720:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4724:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    4728:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    472c:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    4730:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4734:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    4738:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    473c:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    4740:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    4744:	f7ff ff8e 	bl	4664 <nrf52_errata_103>
    4748:	b118      	cbz	r0, 4752 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    474a:	4b3a      	ldr	r3, [pc, #232]	; (4834 <SystemInit+0x19c>)
    474c:	4a3a      	ldr	r2, [pc, #232]	; (4838 <SystemInit+0x1a0>)
    474e:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    4752:	f7ff ff87 	bl	4664 <nrf52_errata_103>
    4756:	b118      	cbz	r0, 4760 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    4758:	4b38      	ldr	r3, [pc, #224]	; (483c <SystemInit+0x1a4>)
    475a:	22fb      	movs	r2, #251	; 0xfb
    475c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    4760:	f7ff ff80 	bl	4664 <nrf52_errata_103>
    4764:	b170      	cbz	r0, 4784 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    4766:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    476a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    476e:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    4772:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    4776:	f022 020f 	bic.w	r2, r2, #15
    477a:	f003 030f 	and.w	r3, r3, #15
    477e:	4313      	orrs	r3, r2
    4780:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    4784:	f7ff ff6e 	bl	4664 <nrf52_errata_103>
    4788:	b120      	cbz	r0, 4794 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    478a:	4b2d      	ldr	r3, [pc, #180]	; (4840 <SystemInit+0x1a8>)
    478c:	f44f 7200 	mov.w	r2, #512	; 0x200
    4790:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4794:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    4798:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    479c:	2b08      	cmp	r3, #8
    479e:	d11a      	bne.n	47d6 <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    47a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    47a4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    47a8:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    47aa:	bf44      	itt	mi
    47ac:	f06f 0201 	mvnmi.w	r2, #1
    47b0:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    47b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    47b8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    47bc:	2b05      	cmp	r3, #5
    47be:	d802      	bhi.n	47c6 <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    47c0:	4a20      	ldr	r2, [pc, #128]	; (4844 <SystemInit+0x1ac>)
    47c2:	5cd3      	ldrb	r3, [r2, r3]
    47c4:	b13b      	cbz	r3, 47d6 <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    47c6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    47ca:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    47ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    47d2:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    47d6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    47da:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    47de:	2a00      	cmp	r2, #0
    47e0:	db03      	blt.n	47ea <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    47e2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    47e6:	2b00      	cmp	r3, #0
    47e8:	da22      	bge.n	4830 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    47ea:	4917      	ldr	r1, [pc, #92]	; (4848 <SystemInit+0x1b0>)
    47ec:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    47ee:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    47f2:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    47f6:	2412      	movs	r4, #18
    nvmc_wait();
    47f8:	f7ff ff46 	bl	4688 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    47fc:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    4800:	f7ff ff42 	bl	4688 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    4804:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    4808:	f7ff ff3e 	bl	4688 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    480c:	2300      	movs	r3, #0
    480e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4812:	f7ff ff39 	bl	4688 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    4816:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    481a:	490c      	ldr	r1, [pc, #48]	; (484c <SystemInit+0x1b4>)
    481c:	4b0c      	ldr	r3, [pc, #48]	; (4850 <SystemInit+0x1b8>)
    481e:	68ca      	ldr	r2, [r1, #12]
    4820:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4824:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4826:	60cb      	str	r3, [r1, #12]
    4828:	f3bf 8f4f 	dsb	sy
    __NOP();
    482c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    482e:	e7fd      	b.n	482c <SystemInit+0x194>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    4830:	bd10      	pop	{r4, pc}
    4832:	bf00      	nop
    4834:	40005000 	.word	0x40005000
    4838:	00038148 	.word	0x00038148
    483c:	4000f000 	.word	0x4000f000
    4840:	40029000 	.word	0x40029000
    4844:	000089f6 	.word	0x000089f6
    4848:	4001e000 	.word	0x4001e000
    484c:	e000ed00 	.word	0xe000ed00
    4850:	05fa0004 	.word	0x05fa0004

00004854 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    4854:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    4856:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    4858:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    485a:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    485e:	fab2 f382 	clz	r3, r2
    4862:	f1c3 031f 	rsb	r3, r3, #31
    4866:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    4868:	fa05 f403 	lsl.w	r4, r5, r3
    486c:	ea22 0404 	bic.w	r4, r2, r4
    4870:	e850 6f00 	ldrex	r6, [r0]
    4874:	4296      	cmp	r6, r2
    4876:	d104      	bne.n	4882 <nrfx_flag32_alloc+0x2e>
    4878:	e840 4c00 	strex	ip, r4, [r0]
    487c:	f1bc 0f00 	cmp.w	ip, #0
    4880:	d1f6      	bne.n	4870 <nrfx_flag32_alloc+0x1c>
    4882:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4886:	d1e7      	bne.n	4858 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    4888:	4801      	ldr	r0, [pc, #4]	; (4890 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    488a:	700b      	strb	r3, [r1, #0]
}
    488c:	bd70      	pop	{r4, r5, r6, pc}
    488e:	bf00      	nop
    4890:	0bad0000 	.word	0x0bad0000

00004894 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    4894:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    4896:	6803      	ldr	r3, [r0, #0]
    4898:	40cb      	lsrs	r3, r1
    489a:	07db      	lsls	r3, r3, #31
    489c:	d414      	bmi.n	48c8 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    489e:	2301      	movs	r3, #1
    48a0:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    48a2:	6802      	ldr	r2, [r0, #0]
    48a4:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    48a8:	ea43 0102 	orr.w	r1, r3, r2
    48ac:	e850 4f00 	ldrex	r4, [r0]
    48b0:	4294      	cmp	r4, r2
    48b2:	d104      	bne.n	48be <nrfx_flag32_free+0x2a>
    48b4:	e840 1c00 	strex	ip, r1, [r0]
    48b8:	f1bc 0f00 	cmp.w	ip, #0
    48bc:	d1f6      	bne.n	48ac <nrfx_flag32_free+0x18>
    48be:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    48c2:	d1ee      	bne.n	48a2 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    48c4:	4801      	ldr	r0, [pc, #4]	; (48cc <nrfx_flag32_free+0x38>)
}
    48c6:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    48c8:	4801      	ldr	r0, [pc, #4]	; (48d0 <nrfx_flag32_free+0x3c>)
    48ca:	e7fc      	b.n	48c6 <nrfx_flag32_free+0x32>
    48cc:	0bad0000 	.word	0x0bad0000
    48d0:	0bad0004 	.word	0x0bad0004

000048d4 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    48d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    48d6:	4604      	mov	r4, r0
    48d8:	b118      	cbz	r0, 48e2 <clock_stop+0xe>
    48da:	2801      	cmp	r0, #1
    48dc:	d022      	beq.n	4924 <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    48de:	b003      	add	sp, #12
    48e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    48e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    48e6:	2202      	movs	r2, #2
    48e8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    48ec:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    48f0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    48f4:	2201      	movs	r2, #1
    48f6:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    48f8:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    48fa:	2301      	movs	r3, #1
    48fc:	f88d 3007 	strb.w	r3, [sp, #7]
    4900:	f242 7510 	movw	r5, #10000	; 0x2710
    4904:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    4908:	b1cc      	cbz	r4, 493e <clock_stop+0x6a>
    490a:	2c01      	cmp	r4, #1
    490c:	d1e7      	bne.n	48de <clock_stop+0xa>
            if (p_clk_src != NULL)
    490e:	b3c7      	cbz	r7, 4982 <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4910:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4914:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4918:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    491a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    491e:	03da      	lsls	r2, r3, #15
    4920:	d521      	bpl.n	4966 <clock_stop+0x92>
    4922:	e016      	b.n	4952 <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
    4924:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4928:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    492a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    492e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4932:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4936:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4938:	f10d 0707 	add.w	r7, sp, #7
    493c:	e7dd      	b.n	48fa <clock_stop+0x26>
            if (p_clk_src != NULL)
    493e:	b1b7      	cbz	r7, 496e <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4940:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4944:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    4948:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    494a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    494e:	03d8      	lsls	r0, r3, #15
    4950:	d5c5      	bpl.n	48de <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    4952:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4956:	2801      	cmp	r0, #1
    4958:	d103      	bne.n	4962 <clock_stop+0x8e>
    495a:	f002 fe76 	bl	764a <nrfx_busy_wait>
    495e:	3d01      	subs	r5, #1
    4960:	d1d2      	bne.n	4908 <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    4962:	2c01      	cmp	r4, #1
    4964:	d1bb      	bne.n	48de <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    4966:	4b0c      	ldr	r3, [pc, #48]	; (4998 <clock_stop+0xc4>)
    4968:	2200      	movs	r2, #0
    496a:	715a      	strb	r2, [r3, #5]
    496c:	e7b7      	b.n	48de <clock_stop+0xa>
    496e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    4972:	03d9      	lsls	r1, r3, #15
    4974:	d5b3      	bpl.n	48de <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    4976:	2001      	movs	r0, #1
    4978:	f002 fe67 	bl	764a <nrfx_busy_wait>
    497c:	3d01      	subs	r5, #1
    497e:	d1f6      	bne.n	496e <clock_stop+0x9a>
    4980:	e7ad      	b.n	48de <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4982:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4986:	03db      	lsls	r3, r3, #15
    4988:	d5ed      	bpl.n	4966 <clock_stop+0x92>
    498a:	2001      	movs	r0, #1
    498c:	f002 fe5d 	bl	764a <nrfx_busy_wait>
    4990:	3d01      	subs	r5, #1
    4992:	d1f6      	bne.n	4982 <clock_stop+0xae>
    4994:	e7e7      	b.n	4966 <clock_stop+0x92>
    4996:	bf00      	nop
    4998:	20000ed0 	.word	0x20000ed0

0000499c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    499c:	4b04      	ldr	r3, [pc, #16]	; (49b0 <nrfx_clock_init+0x14>)
    499e:	791a      	ldrb	r2, [r3, #4]
    49a0:	b922      	cbnz	r2, 49ac <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    49a2:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    49a4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    49a6:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    49a8:	4802      	ldr	r0, [pc, #8]	; (49b4 <nrfx_clock_init+0x18>)
    49aa:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    49ac:	4802      	ldr	r0, [pc, #8]	; (49b8 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    49ae:	4770      	bx	lr
    49b0:	20000ed0 	.word	0x20000ed0
    49b4:	0bad0000 	.word	0x0bad0000
    49b8:	0bad000c 	.word	0x0bad000c

000049bc <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    49bc:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    49be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    49c2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    49c6:	b16a      	cbz	r2, 49e4 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    49c8:	2200      	movs	r2, #0
    49ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    49ce:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    49d2:	2201      	movs	r2, #1
    49d4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    49d8:	4b11      	ldr	r3, [pc, #68]	; (4a20 <nrfx_power_clock_irq_handler+0x64>)
    49da:	7958      	ldrb	r0, [r3, #5]
    49dc:	b910      	cbnz	r0, 49e4 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    49de:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    49e0:	681b      	ldr	r3, [r3, #0]
    49e2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    49e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    49e8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    49ec:	b172      	cbz	r2, 4a0c <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    49ee:	2200      	movs	r2, #0
    49f0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    49f4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    49f8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    49fc:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    4a00:	0792      	lsls	r2, r2, #30
    4a02:	d104      	bne.n	4a0e <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4a04:	2201      	movs	r2, #1
    4a06:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4a0a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4a0c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    4a0e:	2202      	movs	r2, #2
    4a10:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4a14:	4b02      	ldr	r3, [pc, #8]	; (4a20 <nrfx_power_clock_irq_handler+0x64>)
}
    4a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4a1a:	681b      	ldr	r3, [r3, #0]
    4a1c:	2001      	movs	r0, #1
    4a1e:	4718      	bx	r3
    4a20:	20000ed0 	.word	0x20000ed0

00004a24 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    4a24:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    4a26:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    4a2a:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    4a2c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    4a2e:	6002      	str	r2, [r0, #0]
}
    4a30:	4802      	ldr	r0, [pc, #8]	; (4a3c <nrf_gpio_pin_port_decode+0x18>)
    4a32:	bf18      	it	ne
    4a34:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    4a38:	4770      	bx	lr
    4a3a:	bf00      	nop
    4a3c:	50000300 	.word	0x50000300

00004a40 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4a40:	4b03      	ldr	r3, [pc, #12]	; (4a50 <pin_in_use_by_te+0x10>)
    4a42:	3008      	adds	r0, #8
    4a44:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4a48:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4a4c:	4770      	bx	lr
    4a4e:	bf00      	nop
    4a50:	2000004c 	.word	0x2000004c

00004a54 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    4a54:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4a56:	f100 0308 	add.w	r3, r0, #8
    4a5a:	4c0c      	ldr	r4, [pc, #48]	; (4a8c <call_handler+0x38>)
    4a5c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    4a60:	05da      	lsls	r2, r3, #23
{
    4a62:	4605      	mov	r5, r0
    4a64:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4a66:	d507      	bpl.n	4a78 <call_handler+0x24>
    4a68:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    4a6c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4a70:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    4a74:	6852      	ldr	r2, [r2, #4]
    4a76:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    4a78:	68a3      	ldr	r3, [r4, #8]
    4a7a:	b12b      	cbz	r3, 4a88 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4a7c:	68e2      	ldr	r2, [r4, #12]
    4a7e:	4631      	mov	r1, r6
    4a80:	4628      	mov	r0, r5
    }
}
    4a82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4a86:	4718      	bx	r3
}
    4a88:	bd70      	pop	{r4, r5, r6, pc}
    4a8a:	bf00      	nop
    4a8c:	2000004c 	.word	0x2000004c

00004a90 <release_handler>:
{
    4a90:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4a92:	4a12      	ldr	r2, [pc, #72]	; (4adc <release_handler+0x4c>)
    4a94:	3008      	adds	r0, #8
    4a96:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    4a9a:	05d9      	lsls	r1, r3, #23
    4a9c:	d51b      	bpl.n	4ad6 <release_handler+0x46>
    4a9e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    4aa2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4aa6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4aaa:	f102 040e 	add.w	r4, r2, #14
    4aae:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4ab0:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    4ab4:	f413 7f80 	tst.w	r3, #256	; 0x100
    4ab8:	d003      	beq.n	4ac2 <release_handler+0x32>
    4aba:	f3c3 2343 	ubfx	r3, r3, #9, #4
    4abe:	4299      	cmp	r1, r3
    4ac0:	d009      	beq.n	4ad6 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4ac2:	3001      	adds	r0, #1
    4ac4:	2830      	cmp	r0, #48	; 0x30
    4ac6:	d1f3      	bne.n	4ab0 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4ac8:	2300      	movs	r3, #0
    4aca:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4ace:	4804      	ldr	r0, [pc, #16]	; (4ae0 <release_handler+0x50>)
}
    4ad0:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4ad2:	f7ff bedf 	b.w	4894 <nrfx_flag32_free>
}
    4ad6:	bc10      	pop	{r4}
    4ad8:	4770      	bx	lr
    4ada:	bf00      	nop
    4adc:	2000004c 	.word	0x2000004c
    4ae0:	200000c0 	.word	0x200000c0

00004ae4 <pin_handler_trigger_uninit>:
{
    4ae4:	b538      	push	{r3, r4, r5, lr}
    4ae6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4ae8:	f7ff ffaa 	bl	4a40 <pin_in_use_by_te>
    4aec:	4c09      	ldr	r4, [pc, #36]	; (4b14 <pin_handler_trigger_uninit+0x30>)
    4aee:	f102 0508 	add.w	r5, r2, #8
    4af2:	b140      	cbz	r0, 4b06 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4af4:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4af8:	4907      	ldr	r1, [pc, #28]	; (4b18 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4afa:	0b5b      	lsrs	r3, r3, #13
    4afc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    4b00:	2000      	movs	r0, #0
    4b02:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    4b06:	4610      	mov	r0, r2
    4b08:	f7ff ffc2 	bl	4a90 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4b0c:	2300      	movs	r3, #0
    4b0e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    4b12:	bd38      	pop	{r3, r4, r5, pc}
    4b14:	2000004c 	.word	0x2000004c
    4b18:	40006000 	.word	0x40006000

00004b1c <nrfx_gpiote_input_configure>:
{
    4b1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    4b20:	4604      	mov	r4, r0
    4b22:	4616      	mov	r6, r2
    4b24:	461d      	mov	r5, r3
    if (p_input_config)
    4b26:	b301      	cbz	r1, 4b6a <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4b28:	4f4e      	ldr	r7, [pc, #312]	; (4c64 <nrfx_gpiote_input_configure+0x148>)
    4b2a:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    4b2e:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    4b32:	079b      	lsls	r3, r3, #30
    4b34:	d502      	bpl.n	4b3c <nrfx_gpiote_input_configure+0x20>
    4b36:	f7ff ff83 	bl	4a40 <pin_in_use_by_te>
    4b3a:	bb10      	cbnz	r0, 4b82 <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4b3c:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4b3e:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4b42:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    4b46:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4b4a:	f10d 020f 	add.w	r2, sp, #15
    4b4e:	460b      	mov	r3, r1
    4b50:	4620      	mov	r0, r4
    4b52:	f10d 010e 	add.w	r1, sp, #14
    4b56:	f002 fdc5 	bl	76e4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4b5a:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    4b5e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4b62:	f043 0301 	orr.w	r3, r3, #1
    4b66:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
    4b6a:	b346      	cbz	r6, 4bbe <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4b6c:	4b3d      	ldr	r3, [pc, #244]	; (4c64 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    4b6e:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    4b72:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4b74:	f104 0708 	add.w	r7, r4, #8
    4b78:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
    4b7c:	0788      	lsls	r0, r1, #30
    4b7e:	d502      	bpl.n	4b86 <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
    4b80:	b1aa      	cbz	r2, 4bae <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
    4b82:	4839      	ldr	r0, [pc, #228]	; (4c68 <nrfx_gpiote_input_configure+0x14c>)
    4b84:	e01d      	b.n	4bc2 <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4b86:	f021 0120 	bic.w	r1, r1, #32
    4b8a:	04c9      	lsls	r1, r1, #19
    4b8c:	0cc9      	lsrs	r1, r1, #19
    4b8e:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
    4b92:	b162      	cbz	r2, 4bae <nrfx_gpiote_input_configure+0x92>
                if (!edge)
    4b94:	f1bc 0f03 	cmp.w	ip, #3
    4b98:	d8f3      	bhi.n	4b82 <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4b9a:	6872      	ldr	r2, [r6, #4]
    4b9c:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4b9e:	f1bc 0f00 	cmp.w	ip, #0
    4ba2:	d111      	bne.n	4bc8 <nrfx_gpiote_input_configure+0xac>
    4ba4:	4a31      	ldr	r2, [pc, #196]	; (4c6c <nrfx_gpiote_input_configure+0x150>)
    4ba6:	f506 76a2 	add.w	r6, r6, #324	; 0x144
    4baa:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    4bae:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
    4bb2:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4bb6:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
    4bba:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
    4bbe:	bb45      	cbnz	r5, 4c12 <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
    4bc0:	482b      	ldr	r0, [pc, #172]	; (4c70 <nrfx_gpiote_input_configure+0x154>)
}
    4bc2:	b004      	add	sp, #16
    4bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4bc8:	00b2      	lsls	r2, r6, #2
    4bca:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4bce:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4bd2:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
    4bd6:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4bda:	f020 0003 	bic.w	r0, r0, #3
    4bde:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4be2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4be6:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    4bea:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    4bee:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4bf2:	0220      	lsls	r0, r4, #8
    4bf4:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4bf8:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    4bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    4c00:	ea40 000e 	orr.w	r0, r0, lr
    4c04:	f041 0120 	orr.w	r1, r1, #32
    4c08:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
    4c0c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    4c10:	e7cd      	b.n	4bae <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4c12:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    4c16:	4620      	mov	r0, r4
    4c18:	f7ff ff3a 	bl	4a90 <release_handler>
    if (!handler)
    4c1c:	2e00      	cmp	r6, #0
    4c1e:	d0cf      	beq.n	4bc0 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4c20:	4d10      	ldr	r5, [pc, #64]	; (4c64 <nrfx_gpiote_input_configure+0x148>)
    4c22:	e9d5 2300 	ldrd	r2, r3, [r5]
    4c26:	4296      	cmp	r6, r2
    4c28:	d101      	bne.n	4c2e <nrfx_gpiote_input_configure+0x112>
    4c2a:	429f      	cmp	r7, r3
    4c2c:	d018      	beq.n	4c60 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4c2e:	4811      	ldr	r0, [pc, #68]	; (4c74 <nrfx_gpiote_input_configure+0x158>)
    4c30:	f10d 010f 	add.w	r1, sp, #15
    4c34:	f7ff fe0e 	bl	4854 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    4c38:	4b0d      	ldr	r3, [pc, #52]	; (4c70 <nrfx_gpiote_input_configure+0x154>)
    4c3a:	4298      	cmp	r0, r3
    4c3c:	d1c1      	bne.n	4bc2 <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
    4c3e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    4c42:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    4c46:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4c4a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4c4c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4c4e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    4c52:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    4c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4c5a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    4c5e:	e7af      	b.n	4bc0 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4c60:	2200      	movs	r2, #0
    4c62:	e7ee      	b.n	4c42 <nrfx_gpiote_input_configure+0x126>
    4c64:	2000004c 	.word	0x2000004c
    4c68:	0bad0004 	.word	0x0bad0004
    4c6c:	40006000 	.word	0x40006000
    4c70:	0bad0000 	.word	0x0bad0000
    4c74:	200000c0 	.word	0x200000c0

00004c78 <nrfx_gpiote_output_configure>:
{
    4c78:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c7a:	4604      	mov	r4, r0
    4c7c:	b085      	sub	sp, #20
    4c7e:	4615      	mov	r5, r2
    if (p_config)
    4c80:	b319      	cbz	r1, 4cca <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4c82:	4e33      	ldr	r6, [pc, #204]	; (4d50 <nrfx_gpiote_output_configure+0xd8>)
    4c84:	f100 0708 	add.w	r7, r0, #8
    4c88:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4c8c:	0793      	lsls	r3, r2, #30
    4c8e:	d403      	bmi.n	4c98 <nrfx_gpiote_output_configure+0x20>
    4c90:	f7ff fed6 	bl	4a40 <pin_in_use_by_te>
    4c94:	2800      	cmp	r0, #0
    4c96:	d158      	bne.n	4d4a <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4c98:	f012 0f1c 	tst.w	r2, #28
    4c9c:	d002      	beq.n	4ca4 <nrfx_gpiote_output_configure+0x2c>
    4c9e:	784b      	ldrb	r3, [r1, #1]
    4ca0:	2b01      	cmp	r3, #1
    4ca2:	d052      	beq.n	4d4a <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    4ca4:	2301      	movs	r3, #1
    4ca6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    4caa:	2300      	movs	r3, #0
    4cac:	e9cd 1300 	strd	r1, r3, [sp]
    4cb0:	1c4a      	adds	r2, r1, #1
    4cb2:	1c8b      	adds	r3, r1, #2
    4cb4:	4620      	mov	r0, r4
    4cb6:	f10d 010f 	add.w	r1, sp, #15
    4cba:	f002 fd13 	bl	76e4 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    4cbe:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    4cc2:	f043 0303 	orr.w	r3, r3, #3
    4cc6:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    4cca:	b915      	cbnz	r5, 4cd2 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    4ccc:	4821      	ldr	r0, [pc, #132]	; (4d54 <nrfx_gpiote_output_configure+0xdc>)
}
    4cce:	b005      	add	sp, #20
    4cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4cd2:	4e1f      	ldr	r6, [pc, #124]	; (4d50 <nrfx_gpiote_output_configure+0xd8>)
    4cd4:	f104 0708 	add.w	r7, r4, #8
    4cd8:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4cdc:	0783      	lsls	r3, r0, #30
    4cde:	d534      	bpl.n	4d4a <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    4ce0:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    4ce4:	4661      	mov	r1, ip
    4ce6:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4ce8:	f020 0020 	bic.w	r0, r0, #32
    4cec:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    4cf0:	04c0      	lsls	r0, r0, #19
    4cf2:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    4cf6:	0cc0      	lsrs	r0, r0, #19
    4cf8:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4cfc:	2300      	movs	r3, #0
    4cfe:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    4d02:	786a      	ldrb	r2, [r5, #1]
    4d04:	2a00      	cmp	r2, #0
    4d06:	d0e1      	beq.n	4ccc <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4d08:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    4d0c:	78ad      	ldrb	r5, [r5, #2]
    4d0e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    4d12:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4d16:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4d1a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    4d1e:	0223      	lsls	r3, r4, #8
    4d20:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4d24:	0412      	lsls	r2, r2, #16
    4d26:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4d2a:	ea43 030e 	orr.w	r3, r3, lr
    4d2e:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4d30:	052a      	lsls	r2, r5, #20
    4d32:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4d36:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4d3a:	4313      	orrs	r3, r2
    4d3c:	f040 0020 	orr.w	r0, r0, #32
    4d40:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4d44:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4d48:	e7c0      	b.n	4ccc <nrfx_gpiote_output_configure+0x54>
{
    4d4a:	4803      	ldr	r0, [pc, #12]	; (4d58 <nrfx_gpiote_output_configure+0xe0>)
    4d4c:	e7bf      	b.n	4cce <nrfx_gpiote_output_configure+0x56>
    4d4e:	bf00      	nop
    4d50:	2000004c 	.word	0x2000004c
    4d54:	0bad0000 	.word	0x0bad0000
    4d58:	0bad0004 	.word	0x0bad0004

00004d5c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4d5c:	4b01      	ldr	r3, [pc, #4]	; (4d64 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    4d5e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    4d62:	4770      	bx	lr
    4d64:	2000004c 	.word	0x2000004c

00004d68 <nrfx_gpiote_channel_get>:
{
    4d68:	b508      	push	{r3, lr}
    4d6a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4d6c:	f7ff fe68 	bl	4a40 <pin_in_use_by_te>
    4d70:	b138      	cbz	r0, 4d82 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4d72:	4b05      	ldr	r3, [pc, #20]	; (4d88 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    4d74:	4805      	ldr	r0, [pc, #20]	; (4d8c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4d76:	3208      	adds	r2, #8
    4d78:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    4d7c:	0b5b      	lsrs	r3, r3, #13
    4d7e:	700b      	strb	r3, [r1, #0]
}
    4d80:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4d82:	4803      	ldr	r0, [pc, #12]	; (4d90 <nrfx_gpiote_channel_get+0x28>)
    4d84:	e7fc      	b.n	4d80 <nrfx_gpiote_channel_get+0x18>
    4d86:	bf00      	nop
    4d88:	2000004c 	.word	0x2000004c
    4d8c:	0bad0000 	.word	0x0bad0000
    4d90:	0bad0004 	.word	0x0bad0004

00004d94 <nrfx_gpiote_init>:
{
    4d94:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4d96:	4c0f      	ldr	r4, [pc, #60]	; (4dd4 <nrfx_gpiote_init+0x40>)
    4d98:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    4d9c:	b9bd      	cbnz	r5, 4dce <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    4d9e:	2260      	movs	r2, #96	; 0x60
    4da0:	4629      	mov	r1, r5
    4da2:	f104 0010 	add.w	r0, r4, #16
    4da6:	f002 faa5 	bl	72f4 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4daa:	2006      	movs	r0, #6
    4dac:	f7fd fea0 	bl	2af0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4db0:	4b09      	ldr	r3, [pc, #36]	; (4dd8 <nrfx_gpiote_init+0x44>)
    return err_code;
    4db2:	480a      	ldr	r0, [pc, #40]	; (4ddc <nrfx_gpiote_init+0x48>)
    4db4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    4db8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    4dbc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4dc0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4dc4:	2301      	movs	r3, #1
    4dc6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4dca:	6763      	str	r3, [r4, #116]	; 0x74
}
    4dcc:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    4dce:	4804      	ldr	r0, [pc, #16]	; (4de0 <nrfx_gpiote_init+0x4c>)
    4dd0:	e7fc      	b.n	4dcc <nrfx_gpiote_init+0x38>
    4dd2:	bf00      	nop
    4dd4:	2000004c 	.word	0x2000004c
    4dd8:	40006000 	.word	0x40006000
    4ddc:	0bad0000 	.word	0x0bad0000
    4de0:	0bad0005 	.word	0x0bad0005

00004de4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4de4:	4b03      	ldr	r3, [pc, #12]	; (4df4 <nrfx_gpiote_is_init+0x10>)
    4de6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    4dea:	3800      	subs	r0, #0
    4dec:	bf18      	it	ne
    4dee:	2001      	movne	r0, #1
    4df0:	4770      	bx	lr
    4df2:	bf00      	nop
    4df4:	2000004c 	.word	0x2000004c

00004df8 <nrfx_gpiote_channel_free>:
{
    4df8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4dfa:	4801      	ldr	r0, [pc, #4]	; (4e00 <nrfx_gpiote_channel_free+0x8>)
    4dfc:	f7ff bd4a 	b.w	4894 <nrfx_flag32_free>
    4e00:	200000bc 	.word	0x200000bc

00004e04 <nrfx_gpiote_channel_alloc>:
{
    4e04:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4e06:	4801      	ldr	r0, [pc, #4]	; (4e0c <nrfx_gpiote_channel_alloc+0x8>)
    4e08:	f7ff bd24 	b.w	4854 <nrfx_flag32_alloc>
    4e0c:	200000bc 	.word	0x200000bc

00004e10 <nrfx_gpiote_trigger_enable>:
{
    4e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4e12:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4e14:	f7ff fe14 	bl	4a40 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4e18:	f104 0208 	add.w	r2, r4, #8
    4e1c:	4b1e      	ldr	r3, [pc, #120]	; (4e98 <nrfx_gpiote_trigger_enable+0x88>)
    4e1e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4e22:	b1e8      	cbz	r0, 4e60 <nrfx_gpiote_trigger_enable+0x50>
    4e24:	f013 0502 	ands.w	r5, r3, #2
    4e28:	d11a      	bne.n	4e60 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4e2a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    4e2c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    4e2e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    4e32:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    4e36:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4e3a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4e3e:	6005      	str	r5, [r0, #0]
    4e40:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4e42:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4e46:	f040 0001 	orr.w	r0, r0, #1
    4e4a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    4e4e:	b129      	cbz	r1, 4e5c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    4e50:	2201      	movs	r2, #1
    4e52:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    4e56:	4a11      	ldr	r2, [pc, #68]	; (4e9c <nrfx_gpiote_trigger_enable+0x8c>)
    4e58:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4e5c:	b003      	add	sp, #12
    4e5e:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4e60:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    4e64:	2b04      	cmp	r3, #4
    4e66:	d012      	beq.n	4e8e <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4e68:	2b05      	cmp	r3, #5
    4e6a:	d012      	beq.n	4e92 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4e6c:	a801      	add	r0, sp, #4
    4e6e:	9401      	str	r4, [sp, #4]
    4e70:	f7ff fdd8 	bl	4a24 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4e74:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    4e76:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4e7a:	40d9      	lsrs	r1, r3
    4e7c:	f001 0101 	and.w	r1, r1, #1
    4e80:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4e82:	4620      	mov	r0, r4
}
    4e84:	b003      	add	sp, #12
    4e86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4e8a:	f002 bc74 	b.w	7776 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    4e8e:	2103      	movs	r1, #3
    4e90:	e7f7      	b.n	4e82 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    4e92:	2102      	movs	r1, #2
    4e94:	e7f5      	b.n	4e82 <nrfx_gpiote_trigger_enable+0x72>
    4e96:	bf00      	nop
    4e98:	2000004c 	.word	0x2000004c
    4e9c:	40006000 	.word	0x40006000

00004ea0 <nrfx_gpiote_trigger_disable>:
{
    4ea0:	b508      	push	{r3, lr}
    4ea2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4ea4:	f7ff fdcc 	bl	4a40 <pin_in_use_by_te>
    4ea8:	b1c0      	cbz	r0, 4edc <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4eaa:	f102 0108 	add.w	r1, r2, #8
    4eae:	4b0e      	ldr	r3, [pc, #56]	; (4ee8 <nrfx_gpiote_trigger_disable+0x48>)
    4eb0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4eb4:	0799      	lsls	r1, r3, #30
    4eb6:	d411      	bmi.n	4edc <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4eb8:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4eba:	2201      	movs	r2, #1
    4ebc:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    4ebe:	009b      	lsls	r3, r3, #2
    4ec0:	490a      	ldr	r1, [pc, #40]	; (4eec <nrfx_gpiote_trigger_disable+0x4c>)
    4ec2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4ec6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4eca:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4ece:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4ed2:	f022 0203 	bic.w	r2, r2, #3
    4ed6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4eda:	bd08      	pop	{r3, pc}
    4edc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4ee0:	2100      	movs	r1, #0
    4ee2:	4610      	mov	r0, r2
    4ee4:	f002 bc47 	b.w	7776 <nrf_gpio_cfg_sense_set>
    4ee8:	2000004c 	.word	0x2000004c
    4eec:	40006000 	.word	0x40006000

00004ef0 <nrfx_gpiote_pin_uninit>:
{
    4ef0:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4ef2:	4b0e      	ldr	r3, [pc, #56]	; (4f2c <nrfx_gpiote_pin_uninit+0x3c>)
    4ef4:	f100 0208 	add.w	r2, r0, #8
{
    4ef8:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4efa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    4efe:	07db      	lsls	r3, r3, #31
    4f00:	d511      	bpl.n	4f26 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    4f02:	f7ff ffcd 	bl	4ea0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4f06:	4620      	mov	r0, r4
    4f08:	f7ff fdec 	bl	4ae4 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4f0c:	a801      	add	r0, sp, #4
    4f0e:	9401      	str	r4, [sp, #4]
    4f10:	f7ff fd88 	bl	4a24 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4f14:	9b01      	ldr	r3, [sp, #4]
    4f16:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4f1a:	2202      	movs	r2, #2
    4f1c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    4f20:	4803      	ldr	r0, [pc, #12]	; (4f30 <nrfx_gpiote_pin_uninit+0x40>)
}
    4f22:	b002      	add	sp, #8
    4f24:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4f26:	4803      	ldr	r0, [pc, #12]	; (4f34 <nrfx_gpiote_pin_uninit+0x44>)
    4f28:	e7fb      	b.n	4f22 <nrfx_gpiote_pin_uninit+0x32>
    4f2a:	bf00      	nop
    4f2c:	2000004c 	.word	0x2000004c
    4f30:	0bad0000 	.word	0x0bad0000
    4f34:	0bad0004 	.word	0x0bad0004

00004f38 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    4f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f3c:	4b68      	ldr	r3, [pc, #416]	; (50e0 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
    4f3e:	4869      	ldr	r0, [pc, #420]	; (50e4 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4f40:	4969      	ldr	r1, [pc, #420]	; (50e8 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
    4f42:	2600      	movs	r6, #0
{
    4f44:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    4f46:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4f48:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4f4a:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4f4c:	b135      	cbz	r5, 4f5c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    4f4e:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    4f52:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4f54:	bf1e      	ittt	ne
    4f56:	601c      	strne	r4, [r3, #0]
    4f58:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    4f5a:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4f5c:	3304      	adds	r3, #4
    4f5e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    4f60:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4f64:	d1f1      	bne.n	4f4a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4f66:	f8df 917c 	ldr.w	r9, [pc, #380]	; 50e4 <nrfx_gpiote_irq_handler+0x1ac>
    4f6a:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    4f6e:	2b00      	cmp	r3, #0
    4f70:	f000 8099 	beq.w	50a6 <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
    4f74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4f78:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    4f7c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    4f7e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    4f82:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    4f86:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    4f88:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4f8c:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    4f90:	f10d 0a10 	add.w	sl, sp, #16
    4f94:	ea4f 1348 	mov.w	r3, r8, lsl #5
    4f98:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    4f9a:	f04f 0b01 	mov.w	fp, #1
    4f9e:	e049      	b.n	5034 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    4fa0:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4fa2:	4a52      	ldr	r2, [pc, #328]	; (50ec <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    4fa4:	fa94 f4a4 	rbit	r4, r4
    4fa8:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    4fac:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    4fae:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4fb0:	f104 0308 	add.w	r3, r4, #8
    4fb4:	9403      	str	r4, [sp, #12]
    4fb6:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    4fba:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
    4fbe:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4fc2:	fa0b f202 	lsl.w	r2, fp, r2
    4fc6:	ea23 0302 	bic.w	r3, r3, r2
    4fca:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4fce:	a803      	add	r0, sp, #12
    4fd0:	f7ff fd28 	bl	4a24 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4fd4:	9b03      	ldr	r3, [sp, #12]
    4fd6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4fda:	08b9      	lsrs	r1, r7, #2
    4fdc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    4fe0:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    4fe4:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4fe6:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4fe8:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    4fec:	d52c      	bpl.n	5048 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
    4fee:	4620      	mov	r0, r4
    4ff0:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4ff2:	b2dd      	uxtb	r5, r3
    4ff4:	f7ff fd2e 	bl	4a54 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4ff8:	a803      	add	r0, sp, #12
    4ffa:	9403      	str	r4, [sp, #12]
    4ffc:	f7ff fd12 	bl	4a24 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5000:	9b03      	ldr	r3, [sp, #12]
    5002:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5006:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    500a:	f3c3 4301 	ubfx	r3, r3, #16, #2
    500e:	429d      	cmp	r5, r3
    5010:	d107      	bne.n	5022 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5012:	2100      	movs	r1, #0
    5014:	4620      	mov	r0, r4
    5016:	f002 fbae 	bl	7776 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    501a:	4629      	mov	r1, r5
    501c:	4620      	mov	r0, r4
    501e:	f002 fbaa 	bl	7776 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5022:	a803      	add	r0, sp, #12
    5024:	9403      	str	r4, [sp, #12]
    5026:	f7ff fcfd 	bl	4a24 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    502a:	9b03      	ldr	r3, [sp, #12]
    502c:	fa0b f303 	lsl.w	r3, fp, r3
    5030:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    5034:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    5038:	2c00      	cmp	r4, #0
    503a:	d1b1      	bne.n	4fa0 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    503c:	f1b8 0f00 	cmp.w	r8, #0
    5040:	d11d      	bne.n	507e <nrfx_gpiote_irq_handler+0x146>
    5042:	f04f 0801 	mov.w	r8, #1
    5046:	e7a5      	b.n	4f94 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5048:	2b02      	cmp	r3, #2
    504a:	d10c      	bne.n	5066 <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    504c:	2103      	movs	r1, #3
    504e:	4620      	mov	r0, r4
    5050:	f002 fb91 	bl	7776 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5054:	f005 0305 	and.w	r3, r5, #5
    5058:	2b01      	cmp	r3, #1
    505a:	d1e2      	bne.n	5022 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    505c:	4639      	mov	r1, r7
    505e:	4620      	mov	r0, r4
    5060:	f7ff fcf8 	bl	4a54 <call_handler>
    5064:	e7dd      	b.n	5022 <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5066:	2102      	movs	r1, #2
    5068:	4620      	mov	r0, r4
    506a:	9301      	str	r3, [sp, #4]
    506c:	f002 fb83 	bl	7776 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5070:	2d03      	cmp	r5, #3
    5072:	d0f3      	beq.n	505c <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5074:	9b01      	ldr	r3, [sp, #4]
    5076:	2b03      	cmp	r3, #3
    5078:	d1d3      	bne.n	5022 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    507a:	2d02      	cmp	r5, #2
    507c:	e7ed      	b.n	505a <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
    507e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5082:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    5086:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    508a:	4919      	ldr	r1, [pc, #100]	; (50f0 <nrfx_gpiote_irq_handler+0x1b8>)
    508c:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    5090:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    5092:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    5096:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    509a:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    509c:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    509e:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    50a2:	f47f af73 	bne.w	4f8c <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    50a6:	2401      	movs	r4, #1
    while (mask)
    50a8:	b916      	cbnz	r6, 50b0 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    50aa:	b007      	add	sp, #28
    50ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    50b0:	fa96 f3a6 	rbit	r3, r6
    50b4:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    50b8:	fa04 f203 	lsl.w	r2, r4, r3
    50bc:	009b      	lsls	r3, r3, #2
    50be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    50c2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    50c6:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    50ca:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    50ce:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    50d2:	f3c0 2005 	ubfx	r0, r0, #8, #6
    50d6:	f3c1 4101 	ubfx	r1, r1, #16, #2
    50da:	f7ff fcbb 	bl	4a54 <call_handler>
    50de:	e7e3      	b.n	50a8 <nrfx_gpiote_irq_handler+0x170>
    50e0:	40006100 	.word	0x40006100
    50e4:	40006000 	.word	0x40006000
    50e8:	40006120 	.word	0x40006120
    50ec:	2000004c 	.word	0x2000004c
    50f0:	50000300 	.word	0x50000300

000050f4 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    50f4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    50f6:	4801      	ldr	r0, [pc, #4]	; (50fc <nrfx_ppi_channel_alloc+0x8>)
    50f8:	f7ff bbac 	b.w	4854 <nrfx_flag32_alloc>
    50fc:	200000c8 	.word	0x200000c8

00005100 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    5100:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    5102:	4c11      	ldr	r4, [pc, #68]	; (5148 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    5104:	4a11      	ldr	r2, [pc, #68]	; (514c <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    5106:	4912      	ldr	r1, [pc, #72]	; (5150 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    5108:	2303      	movs	r3, #3
    510a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    510c:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    510e:	4b11      	ldr	r3, [pc, #68]	; (5154 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    5110:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    5112:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    5114:	f44f 6380 	mov.w	r3, #1024	; 0x400
    5118:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    511a:	2300      	movs	r3, #0
    511c:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    511e:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    5120:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    5122:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    5124:	4a0c      	ldr	r2, [pc, #48]	; (5158 <_DoInit+0x58>)
    5126:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    5128:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    512a:	2210      	movs	r2, #16
    512c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    512e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    5130:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    5132:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    5134:	f002 f8b9 	bl	72aa <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    5138:	4908      	ldr	r1, [pc, #32]	; (515c <_DoInit+0x5c>)
    513a:	4620      	mov	r0, r4
    513c:	f002 f8b5 	bl	72aa <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    5140:	2320      	movs	r3, #32
    5142:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    5144:	bd10      	pop	{r4, pc}
    5146:	bf00      	nop
    5148:	20000ed8 	.word	0x20000ed8
    514c:	00008a22 	.word	0x00008a22
    5150:	00008a2b 	.word	0x00008a2b
    5154:	20001191 	.word	0x20001191
    5158:	20001181 	.word	0x20001181
    515c:	00008a2f 	.word	0x00008a2f

00005160 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5160:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    5164:	4f21      	ldr	r7, [pc, #132]	; (51ec <SEGGER_RTT_WriteSkipNoLock+0x8c>)
    5166:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    516a:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    516c:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5170:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    5172:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    5174:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    5176:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5178:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    517a:	d831      	bhi.n	51e0 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    517c:	f8d2 a020 	ldr.w	sl, [r2, #32]
    5180:	ebaa 0905 	sub.w	r9, sl, r5
    5184:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    5188:	4294      	cmp	r4, r2
    518a:	d811      	bhi.n	51b0 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    518c:	2318      	movs	r3, #24
    518e:	fb06 3303 	mla	r3, r6, r3, r3
    5192:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    5194:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5196:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    5198:	4641      	mov	r1, r8
    519a:	4428      	add	r0, r5
    519c:	f002 f89f 	bl	72de <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    51a0:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    51a2:	2318      	movs	r3, #24
    51a4:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
    51a8:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
    51aa:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    51ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    51b0:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    51b2:	429c      	cmp	r4, r3
    51b4:	d818      	bhi.n	51e8 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    51b6:	fb00 bb0b 	mla	fp, r0, fp, fp
    51ba:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    51bc:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    51be:	f8db 0004 	ldr.w	r0, [fp, #4]
    51c2:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    51c4:	4428      	add	r0, r5
    51c6:	f002 f88a 	bl	72de <memcpy>
      if (NumBytes) {
    51ca:	ebb4 040a 	subs.w	r4, r4, sl
    51ce:	d0e8      	beq.n	51a2 <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    51d0:	f8db 0004 	ldr.w	r0, [fp, #4]
    51d4:	4622      	mov	r2, r4
    51d6:	eb08 0109 	add.w	r1, r8, r9
    51da:	f002 f880 	bl	72de <memcpy>
      return 1;
    51de:	e7e0      	b.n	51a2 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
    51e0:	3b01      	subs	r3, #1
    51e2:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    51e4:	42a3      	cmp	r3, r4
    51e6:	d2d1      	bcs.n	518c <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    51e8:	2000      	movs	r0, #0
    51ea:	e7df      	b.n	51ac <SEGGER_RTT_WriteSkipNoLock+0x4c>
    51ec:	20000ed8 	.word	0x20000ed8

000051f0 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    51f0:	4b03      	ldr	r3, [pc, #12]	; (5200 <SEGGER_RTT_HasDataUp+0x10>)
    51f2:	2218      	movs	r2, #24
    51f4:	fb02 3300 	mla	r3, r2, r0, r3
    51f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    51fa:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    51fc:	1a80      	subs	r0, r0, r2
    51fe:	4770      	bx	lr
    5200:	20000ed8 	.word	0x20000ed8

00005204 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
    5204:	4803      	ldr	r0, [pc, #12]	; (5214 <zephyr_rtt_mutex_lock+0x10>)
    5206:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    520a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    520e:	f000 baeb 	b.w	57e8 <z_impl_k_mutex_lock>
    5212:	bf00      	nop
    5214:	200001b4 	.word	0x200001b4

00005218 <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
    5218:	4801      	ldr	r0, [pc, #4]	; (5220 <zephyr_rtt_mutex_unlock+0x8>)
    521a:	f000 bb5f 	b.w	58dc <z_impl_k_mutex_unlock>
    521e:	bf00      	nop
    5220:	200001b4 	.word	0x200001b4

00005224 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5228:	b086      	sub	sp, #24
    522a:	4605      	mov	r5, r0
    522c:	af00      	add	r7, sp, #0
    522e:	460e      	mov	r6, r1
	__asm__ volatile(
    5230:	f04f 0320 	mov.w	r3, #32
    5234:	f3ef 8811 	mrs	r8, BASEPRI
    5238:	f383 8812 	msr	BASEPRI_MAX, r3
    523c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    5240:	f000 feb0 	bl	5fa4 <z_impl_z_current_get>
    5244:	2d04      	cmp	r5, #4
    5246:	bf96      	itet	ls
    5248:	4b2c      	ldrls	r3, [pc, #176]	; (52fc <z_fatal_error+0xd8>)
    524a:	4b2d      	ldrhi	r3, [pc, #180]	; (5300 <z_fatal_error+0xdc>)
    524c:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    5250:	46e9      	mov	r9, sp
    5252:	b08a      	sub	sp, #40	; 0x28
    5254:	4604      	mov	r4, r0
    5256:	466a      	mov	r2, sp
    5258:	492a      	ldr	r1, [pc, #168]	; (5304 <z_fatal_error+0xe0>)
    525a:	61d3      	str	r3, [r2, #28]
    525c:	f240 3301 	movw	r3, #769	; 0x301
    5260:	8493      	strh	r3, [r2, #36]	; 0x24
    5262:	f04f 0a00 	mov.w	sl, #0
    5266:	4b28      	ldr	r3, [pc, #160]	; (5308 <z_fatal_error+0xe4>)
    5268:	f8c2 a020 	str.w	sl, [r2, #32]
    526c:	e9c2 1505 	strd	r1, r5, [r2, #20]
    5270:	f842 3f10 	str.w	r3, [r2, #16]!
    5274:	4825      	ldr	r0, [pc, #148]	; (530c <z_fatal_error+0xe8>)
    5276:	4653      	mov	r3, sl
    5278:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
    527c:	f7fc fe1c 	bl	1eb8 <z_impl_z_log_msg_static_create>
    5280:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    5282:	b17e      	cbz	r6, 52a4 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    5284:	69f3      	ldr	r3, [r6, #28]
    5286:	f3c3 0308 	ubfx	r3, r3, #0, #9
    528a:	b15b      	cbz	r3, 52a4 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
    528c:	4b20      	ldr	r3, [pc, #128]	; (5310 <z_fatal_error+0xec>)
    528e:	617b      	str	r3, [r7, #20]
    5290:	2302      	movs	r3, #2
    5292:	613b      	str	r3, [r7, #16]
    5294:	481d      	ldr	r0, [pc, #116]	; (530c <z_fatal_error+0xe8>)
    5296:	4653      	mov	r3, sl
    5298:	f107 0210 	add.w	r2, r7, #16
    529c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    52a0:	f7fc fe0a 	bl	1eb8 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    52a4:	b12c      	cbz	r4, 52b2 <z_fatal_error+0x8e>
    52a6:	4620      	mov	r0, r4
    52a8:	f002 fae2 	bl	7870 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    52ac:	b108      	cbz	r0, 52b2 <z_fatal_error+0x8e>
    52ae:	7803      	ldrb	r3, [r0, #0]
    52b0:	b903      	cbnz	r3, 52b4 <z_fatal_error+0x90>
		thread_name = "unknown";
    52b2:	4818      	ldr	r0, [pc, #96]	; (5314 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    52b4:	46e9      	mov	r9, sp
    52b6:	b08a      	sub	sp, #40	; 0x28
    52b8:	466a      	mov	r2, sp
    52ba:	4b17      	ldr	r3, [pc, #92]	; (5318 <z_fatal_error+0xf4>)
    52bc:	61d0      	str	r0, [r2, #28]
    52be:	e9c2 3405 	strd	r3, r4, [r2, #20]
    52c2:	f240 3301 	movw	r3, #769	; 0x301
    52c6:	8413      	strh	r3, [r2, #32]
    52c8:	4b14      	ldr	r3, [pc, #80]	; (531c <z_fatal_error+0xf8>)
    52ca:	f842 3f10 	str.w	r3, [r2, #16]!
    52ce:	2300      	movs	r3, #0
    52d0:	480e      	ldr	r0, [pc, #56]	; (530c <z_fatal_error+0xe8>)
    52d2:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    52d6:	f7fc fdef 	bl	1eb8 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    52da:	4631      	mov	r1, r6
    52dc:	46cd      	mov	sp, r9
    52de:	4628      	mov	r0, r5
    52e0:	f7ff f9aa 	bl	4638 <k_sys_fatal_error_handler>
	__asm__ volatile(
    52e4:	f388 8811 	msr	BASEPRI, r8
    52e8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    52ec:	4620      	mov	r0, r4
    52ee:	f7fe f8cd 	bl	348c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    52f2:	3718      	adds	r7, #24
    52f4:	46bd      	mov	sp, r7
    52f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    52fa:	bf00      	nop
    52fc:	00008034 	.word	0x00008034
    5300:	00008a36 	.word	0x00008a36
    5304:	00008a4c 	.word	0x00008a4c
    5308:	01000005 	.word	0x01000005
    530c:	00007ddc 	.word	0x00007ddc
    5310:	00008a74 	.word	0x00008a74
    5314:	00008a44 	.word	0x00008a44
    5318:	00008a95 	.word	0x00008a95
    531c:	01000004 	.word	0x01000004

00005320 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5320:	4b10      	ldr	r3, [pc, #64]	; (5364 <z_sys_init_run_level+0x44>)
{
    5322:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5324:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    5328:	3001      	adds	r0, #1
    532a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    532e:	42a6      	cmp	r6, r4
    5330:	d800      	bhi.n	5334 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    5332:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    5334:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    5338:	b18d      	cbz	r5, 535e <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    533a:	4628      	mov	r0, r5
    533c:	4798      	blx	r3
			if (rc != 0) {
    533e:	b138      	cbz	r0, 5350 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    5340:	2800      	cmp	r0, #0
    5342:	bfb8      	it	lt
    5344:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    5346:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    5348:	28ff      	cmp	r0, #255	; 0xff
    534a:	bfa8      	it	ge
    534c:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    534e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    5350:	68ea      	ldr	r2, [r5, #12]
    5352:	7853      	ldrb	r3, [r2, #1]
    5354:	f043 0301 	orr.w	r3, r3, #1
    5358:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    535a:	3408      	adds	r4, #8
    535c:	e7e7      	b.n	532e <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    535e:	4798      	blx	r3
    5360:	e7fb      	b.n	535a <z_sys_init_run_level+0x3a>
    5362:	bf00      	nop
    5364:	00008048 	.word	0x00008048

00005368 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    5368:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    536a:	4b0a      	ldr	r3, [pc, #40]	; (5394 <bg_thread_main+0x2c>)
    536c:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    536e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    5370:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    5372:	f7ff ffd5 	bl	5320 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    5376:	f001 f8b3 	bl	64e0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    537a:	2004      	movs	r0, #4
    537c:	f7ff ffd0 	bl	5320 <z_sys_init_run_level>

	z_init_static_threads();
    5380:	f000 f9b4 	bl	56ec <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    5384:	f7fb f826 	bl	3d4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5388:	4a03      	ldr	r2, [pc, #12]	; (5398 <bg_thread_main+0x30>)
    538a:	7b13      	ldrb	r3, [r2, #12]
    538c:	f023 0301 	bic.w	r3, r3, #1
    5390:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    5392:	bd08      	pop	{r3, pc}
    5394:	20001591 	.word	0x20001591
    5398:	20000790 	.word	0x20000790

0000539c <z_bss_zero>:
{
    539c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    539e:	4803      	ldr	r0, [pc, #12]	; (53ac <z_bss_zero+0x10>)
    53a0:	4a03      	ldr	r2, [pc, #12]	; (53b0 <z_bss_zero+0x14>)
    53a2:	2100      	movs	r1, #0
    53a4:	1a12      	subs	r2, r2, r0
    53a6:	f002 fa08 	bl	77ba <z_early_memset>
}
    53aa:	bd08      	pop	{r3, pc}
    53ac:	200001f0 	.word	0x200001f0
    53b0:	20001594 	.word	0x20001594

000053b4 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    53b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct k_thread *thread = &z_idle_threads[i];
    53b6:	4e17      	ldr	r6, [pc, #92]	; (5414 <z_init_cpu+0x60>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    53b8:	4c17      	ldr	r4, [pc, #92]	; (5418 <z_init_cpu+0x64>)
	z_setup_new_thread(thread, stack,
    53ba:	4918      	ldr	r1, [pc, #96]	; (541c <z_init_cpu+0x68>)
{
    53bc:	b087      	sub	sp, #28
	struct k_thread *thread = &z_idle_threads[i];
    53be:	23a0      	movs	r3, #160	; 0xa0
    53c0:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
    53c4:	2701      	movs	r7, #1
    53c6:	2300      	movs	r3, #0
    53c8:	220f      	movs	r2, #15
    53ca:	e9cd 3202 	strd	r3, r2, [sp, #8]
    53ce:	e9cd 7304 	strd	r7, r3, [sp, #16]
    53d2:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    53d4:	2328      	movs	r3, #40	; 0x28
    53d6:	fb03 4400 	mla	r4, r3, r0, r4
{
    53da:	4605      	mov	r5, r0
	z_setup_new_thread(thread, stack,
    53dc:	f44f 70c0 	mov.w	r0, #384	; 0x180
    53e0:	fb00 1105 	mla	r1, r0, r5, r1
    53e4:	4b0e      	ldr	r3, [pc, #56]	; (5420 <z_init_cpu+0x6c>)
    53e6:	9400      	str	r4, [sp, #0]
    53e8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    53ec:	4630      	mov	r0, r6
    53ee:	f000 f8ed 	bl	55cc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    53f2:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    53f4:	4a0b      	ldr	r2, [pc, #44]	; (5424 <z_init_cpu+0x70>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    53f6:	60e6      	str	r6, [r4, #12]
    53f8:	f023 0304 	bic.w	r3, r3, #4
    53fc:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    53fe:	f44f 6304 	mov.w	r3, #2112	; 0x840
    5402:	fb05 3303 	mla	r3, r5, r3, r3
    5406:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    5408:	7425      	strb	r5, [r4, #16]
	_kernel.cpus[id].irq_stack =
    540a:	6063      	str	r3, [r4, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
    540c:	f884 7020 	strb.w	r7, [r4, #32]
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    5410:	b007      	add	sp, #28
    5412:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5414:	200006f0 	.word	0x200006f0
    5418:	20000830 	.word	0x20000830
    541c:	20002140 	.word	0x20002140
    5420:	000057b1 	.word	0x000057b1
    5424:	20001900 	.word	0x20001900

00005428 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    5428:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    542a:	2000      	movs	r0, #0
{
    542c:	b0ae      	sub	sp, #184	; 0xb8
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    542e:	f7ff ff77 	bl	5320 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    5432:	4b2e      	ldr	r3, [pc, #184]	; (54ec <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5434:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    5438:	4d2d      	ldr	r5, [pc, #180]	; (54f0 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    543a:	4e2e      	ldr	r6, [pc, #184]	; (54f4 <z_cstart+0xcc>)
    543c:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    543e:	4f2e      	ldr	r7, [pc, #184]	; (54f8 <z_cstart+0xd0>)
    5440:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5444:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5446:	2400      	movs	r4, #0
    5448:	23e0      	movs	r3, #224	; 0xe0
    544a:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    544e:	77ec      	strb	r4, [r5, #31]
    5450:	762c      	strb	r4, [r5, #24]
    5452:	766c      	strb	r4, [r5, #25]
    5454:	76ac      	strb	r4, [r5, #26]
    5456:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    545a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    545c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    5460:	626b      	str	r3, [r5, #36]	; 0x24
    5462:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    5466:	f7fd ff7d 	bl	3364 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    546a:	f7fd fabb 	bl	29e4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    546e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5472:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    5474:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    5476:	f7fe f8db 	bl	3630 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    547a:	f7fe f81d 	bl	34b8 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    547e:	f7fc fba7 	bl	1bd0 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    5482:	f240 1301 	movw	r3, #257	; 0x101
    5486:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    548a:	ab06      	add	r3, sp, #24
    548c:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    548e:	e9cd 4428 	strd	r4, r4, [sp, #160]	; 0xa0
	dummy_thread->resource_pool = NULL;
    5492:	942b      	str	r4, [sp, #172]	; 0xac
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    5494:	f002 f985 	bl	77a2 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    5498:	2001      	movs	r0, #1
    549a:	f7ff ff41 	bl	5320 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    549e:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    54a0:	4d16      	ldr	r5, [pc, #88]	; (54fc <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    54a2:	f7ff ff3d 	bl	5320 <z_sys_init_run_level>
	z_sched_init();
    54a6:	f000 fcd9 	bl	5e5c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    54aa:	4b15      	ldr	r3, [pc, #84]	; (5500 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    54ac:	62f5      	str	r5, [r6, #44]	; 0x2c
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    54ae:	9305      	str	r3, [sp, #20]
    54b0:	2301      	movs	r3, #1
    54b2:	4914      	ldr	r1, [pc, #80]	; (5504 <z_cstart+0xdc>)
    54b4:	9400      	str	r4, [sp, #0]
    54b6:	e9cd 4303 	strd	r4, r3, [sp, #12]
    54ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
    54be:	463b      	mov	r3, r7
    54c0:	e9cd 4401 	strd	r4, r4, [sp, #4]
    54c4:	4628      	mov	r0, r5
    54c6:	f000 f881 	bl	55cc <z_setup_new_thread>
    54ca:	7b6a      	ldrb	r2, [r5, #13]
    54cc:	4606      	mov	r6, r0
    54ce:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    54d2:	4628      	mov	r0, r5
    54d4:	736a      	strb	r2, [r5, #13]
    54d6:	f002 fa2b 	bl	7930 <z_ready_thread>
	z_init_cpu(0);
    54da:	4620      	mov	r0, r4
    54dc:	f7ff ff6a 	bl	53b4 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    54e0:	463a      	mov	r2, r7
    54e2:	4631      	mov	r1, r6
    54e4:	4628      	mov	r0, r5
    54e6:	f7fd fc01 	bl	2cec <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    54ea:	bf00      	nop
    54ec:	20002140 	.word	0x20002140
    54f0:	e000ed00 	.word	0xe000ed00
    54f4:	20000830 	.word	0x20000830
    54f8:	00005369 	.word	0x00005369
    54fc:	20000790 	.word	0x20000790
    5500:	00008af7 	.word	0x00008af7
    5504:	200022c0 	.word	0x200022c0

00005508 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
    5508:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    550a:	4c06      	ldr	r4, [pc, #24]	; (5524 <init_mem_slab_module+0x1c>)
    550c:	4d06      	ldr	r5, [pc, #24]	; (5528 <init_mem_slab_module+0x20>)
	int rc = 0;
    550e:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5510:	42ac      	cmp	r4, r5
    5512:	d300      	bcc.n	5516 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    5514:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    5516:	4620      	mov	r0, r4
    5518:	f002 f953 	bl	77c2 <create_free_list>
		if (rc < 0) {
    551c:	2800      	cmp	r0, #0
    551e:	dbf9      	blt.n	5514 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5520:	341c      	adds	r4, #28
    5522:	e7f5      	b.n	5510 <init_mem_slab_module+0x8>
    5524:	20000178 	.word	0x20000178
    5528:	20000178 	.word	0x20000178

0000552c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    552c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    552e:	460c      	mov	r4, r1
	__asm__ volatile(
    5530:	f04f 0520 	mov.w	r5, #32
    5534:	f3ef 8111 	mrs	r1, BASEPRI
    5538:	f385 8812 	msr	BASEPRI_MAX, r5
    553c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    5540:	6945      	ldr	r5, [r0, #20]
    5542:	b15d      	cbz	r5, 555c <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    5544:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    5546:	682b      	ldr	r3, [r5, #0]
    5548:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    554a:	6983      	ldr	r3, [r0, #24]
    554c:	3301      	adds	r3, #1
    554e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    5550:	2000      	movs	r0, #0
	__asm__ volatile(
    5552:	f381 8811 	msr	BASEPRI, r1
    5556:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    555a:	e011      	b.n	5580 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    555c:	ea52 0603 	orrs.w	r6, r2, r3
    5560:	d103      	bne.n	556a <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    5562:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    5564:	f06f 000b 	mvn.w	r0, #11
    5568:	e7f3      	b.n	5552 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    556a:	e9cd 2300 	strd	r2, r3, [sp]
    556e:	4602      	mov	r2, r0
    5570:	3008      	adds	r0, #8
    5572:	f000 fb7d 	bl	5c70 <z_pend_curr>
		if (result == 0) {
    5576:	b918      	cbnz	r0, 5580 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    5578:	4b02      	ldr	r3, [pc, #8]	; (5584 <k_mem_slab_alloc+0x58>)
    557a:	689b      	ldr	r3, [r3, #8]
    557c:	695b      	ldr	r3, [r3, #20]
    557e:	6023      	str	r3, [r4, #0]
}
    5580:	b002      	add	sp, #8
    5582:	bd70      	pop	{r4, r5, r6, pc}
    5584:	20000830 	.word	0x20000830

00005588 <z_thread_monitor_exit>:
	__asm__ volatile(
    5588:	f04f 0320 	mov.w	r3, #32
    558c:	f3ef 8111 	mrs	r1, BASEPRI
    5590:	f383 8812 	msr	BASEPRI_MAX, r3
    5594:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    5598:	4a0b      	ldr	r2, [pc, #44]	; (55c8 <z_thread_monitor_exit+0x40>)
    559a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    559c:	4283      	cmp	r3, r0
    559e:	d108      	bne.n	55b2 <z_thread_monitor_exit+0x2a>
		_kernel.threads = _kernel.threads->next_thread;
    55a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    55a4:	6393      	str	r3, [r2, #56]	; 0x38
	__asm__ volatile(
    55a6:	f381 8811 	msr	BASEPRI, r1
    55aa:	f3bf 8f6f 	isb	sy
			prev_thread->next_thread = thread->next_thread;
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    55ae:	4770      	bx	lr
    55b0:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    55b2:	2b00      	cmp	r3, #0
    55b4:	d0f7      	beq.n	55a6 <z_thread_monitor_exit+0x1e>
			(thread != prev_thread->next_thread)) {
    55b6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
		while ((prev_thread != NULL) &&
    55ba:	4282      	cmp	r2, r0
    55bc:	d1f8      	bne.n	55b0 <z_thread_monitor_exit+0x28>
			prev_thread->next_thread = thread->next_thread;
    55be:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
    55c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    55c6:	e7ee      	b.n	55a6 <z_thread_monitor_exit+0x1e>
    55c8:	20000830 	.word	0x20000830

000055cc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    55cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    55d0:	b085      	sub	sp, #20
    55d2:	4698      	mov	r8, r3
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    55d4:	f100 0368 	add.w	r3, r0, #104	; 0x68
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    55d8:	e9c0 331a 	strd	r3, r3, [r0, #104]	; 0x68
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    55dc:	3207      	adds	r2, #7
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    55de:	9b12      	ldr	r3, [sp, #72]	; 0x48
    55e0:	7303      	strb	r3, [r0, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    55e2:	f022 0907 	bic.w	r9, r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
    55e6:	2304      	movs	r3, #4
	thread_base->pended_on = NULL;
    55e8:	2500      	movs	r5, #0

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    55ea:	f101 0a40 	add.w	sl, r1, #64	; 0x40
	thread_base->thread_state = (uint8_t)initial_state;
    55ee:	7343      	strb	r3, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    55f0:	f109 0740 	add.w	r7, r9, #64	; 0x40

	thread_base->prio = priority;
    55f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
	thread_base->pended_on = NULL;
    55f6:	6085      	str	r5, [r0, #8]
{
    55f8:	4604      	mov	r4, r0
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    55fa:	e9c0 5506 	strd	r5, r5, [r0, #24]
    55fe:	460e      	mov	r6, r1
	thread_base->prio = priority;
    5600:	7383      	strb	r3, [r0, #14]

	thread_base->sched_locked = 0U;
    5602:	73c5      	strb	r5, [r0, #15]
	stack_ptr = (char *)stack + stack_obj_size;
    5604:	440f      	add	r7, r1
	memset(stack_buf_start, 0xaa, stack_buf_size);
    5606:	464a      	mov	r2, r9
    5608:	21aa      	movs	r1, #170	; 0xaa
    560a:	4650      	mov	r0, sl
{
    560c:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
	memset(stack_buf_start, 0xaa, stack_buf_size);
    5610:	f001 fe70 	bl	72f4 <memset>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5614:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->stack_info.delta = delta;
    5616:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
	new_thread->stack_info.size = stack_buf_size;
    561a:	e9c4 a922 	strd	sl, r9, [r4, #136]	; 0x88
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    561e:	9302      	str	r3, [sp, #8]
    5620:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5622:	463a      	mov	r2, r7
    5624:	e9cd b300 	strd	fp, r3, [sp]
    5628:	4631      	mov	r1, r6
    562a:	4643      	mov	r3, r8
    562c:	4620      	mov	r0, r4
    562e:	f7fd fb29 	bl	2c84 <arch_new_thread>
	new_thread->entry.parameter2 = p2;
    5632:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5634:	67a3      	str	r3, [r4, #120]	; 0x78
	new_thread->entry.parameter3 = p3;
    5636:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->init_data = NULL;
    5638:	6665      	str	r5, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
    563a:	e9c4 8b1c 	strd	r8, fp, [r4, #112]	; 0x70
	new_thread->entry.parameter3 = p3;
    563e:	67e3      	str	r3, [r4, #124]	; 0x7c
	__asm__ volatile(
    5640:	f04f 0320 	mov.w	r3, #32
    5644:	f3ef 8211 	mrs	r2, BASEPRI
    5648:	f383 8812 	msr	BASEPRI_MAX, r3
    564c:	f3bf 8f6f 	isb	sy
	new_thread->next_thread = _kernel.threads;
    5650:	4b0f      	ldr	r3, [pc, #60]	; (5690 <z_setup_new_thread+0xc4>)
    5652:	6b99      	ldr	r1, [r3, #56]	; 0x38
    5654:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
	_kernel.threads = new_thread;
    5658:	639c      	str	r4, [r3, #56]	; 0x38
	__asm__ volatile(
    565a:	f382 8811 	msr	BASEPRI, r2
    565e:	f3bf 8f6f 	isb	sy
	if (!_current) {
    5662:	689b      	ldr	r3, [r3, #8]
    5664:	b92b      	cbnz	r3, 5672 <z_setup_new_thread+0xa6>
		new_thread->resource_pool = NULL;
    5666:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
    566a:	4638      	mov	r0, r7
    566c:	b005      	add	sp, #20
    566e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	new_thread->resource_pool = _current->resource_pool;
    5672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    5676:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	new_thread->base.usage = (struct k_cycle_stats) {};
    567a:	2210      	movs	r2, #16
    567c:	4629      	mov	r1, r5
    567e:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5682:	f001 fe37 	bl	72f4 <memset>
	new_thread->base.usage.track_usage =
    5686:	2301      	movs	r3, #1
    5688:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return stack_ptr;
    568c:	e7ed      	b.n	566a <z_setup_new_thread+0x9e>
    568e:	bf00      	nop
    5690:	20000830 	.word	0x20000830

00005694 <z_impl_k_thread_create>:
{
    5694:	b5f0      	push	{r4, r5, r6, r7, lr}
    5696:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5698:	2500      	movs	r5, #0
    569a:	9505      	str	r5, [sp, #20]
    569c:	9d10      	ldr	r5, [sp, #64]	; 0x40
    569e:	9504      	str	r5, [sp, #16]
    56a0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    56a2:	9503      	str	r5, [sp, #12]
    56a4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    56a6:	9502      	str	r5, [sp, #8]
{
    56a8:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    56ac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    56ae:	9501      	str	r5, [sp, #4]
    56b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    56b2:	9500      	str	r5, [sp, #0]
{
    56b4:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    56b6:	f7ff ff89 	bl	55cc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    56ba:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    56be:	bf08      	it	eq
    56c0:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    56c4:	d005      	beq.n	56d2 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    56c6:	ea56 0307 	orrs.w	r3, r6, r7
    56ca:	d105      	bne.n	56d8 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    56cc:	4620      	mov	r0, r4
    56ce:	f000 fb45 	bl	5d5c <z_sched_start>
}
    56d2:	4620      	mov	r0, r4
    56d4:	b007      	add	sp, #28
    56d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    56d8:	4903      	ldr	r1, [pc, #12]	; (56e8 <z_impl_k_thread_create+0x54>)
    56da:	463a      	mov	r2, r7
    56dc:	4633      	mov	r3, r6
    56de:	f104 0018 	add.w	r0, r4, #24
    56e2:	f000 fd29 	bl	6138 <z_add_timeout>
    56e6:	e7f4      	b.n	56d2 <z_impl_k_thread_create+0x3e>
    56e8:	000079b9 	.word	0x000079b9

000056ec <z_init_static_threads>:
{
    56ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    56f0:	4c29      	ldr	r4, [pc, #164]	; (5798 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    56f2:	4d2a      	ldr	r5, [pc, #168]	; (579c <z_init_static_threads+0xb0>)
{
    56f4:	b087      	sub	sp, #28
    56f6:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    56f8:	42ae      	cmp	r6, r5
    56fa:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    56fe:	d30f      	bcc.n	5720 <z_init_static_threads+0x34>
	k_sched_lock();
    5700:	f000 fb7c 	bl	5dfc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    5704:	4c24      	ldr	r4, [pc, #144]	; (5798 <z_init_static_threads+0xac>)
    5706:	f8df 9098 	ldr.w	r9, [pc, #152]	; 57a0 <z_init_static_threads+0xb4>
			return ((t * to_hz + off) / from_hz);
    570a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    570e:	f240 37e7 	movw	r7, #999	; 0x3e7
    5712:	42ac      	cmp	r4, r5
    5714:	d320      	bcc.n	5758 <z_init_static_threads+0x6c>
}
    5716:	b007      	add	sp, #28
    5718:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    571c:	f000 bb82 	b.w	5e24 <k_sched_unlock>
		z_setup_new_thread(
    5720:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5724:	9305      	str	r3, [sp, #20]
    5726:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    572a:	9304      	str	r3, [sp, #16]
    572c:	f854 3c10 	ldr.w	r3, [r4, #-16]
    5730:	9303      	str	r3, [sp, #12]
    5732:	f854 3c14 	ldr.w	r3, [r4, #-20]
    5736:	9302      	str	r3, [sp, #8]
    5738:	f854 3c18 	ldr.w	r3, [r4, #-24]
    573c:	9301      	str	r3, [sp, #4]
    573e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    5742:	9300      	str	r3, [sp, #0]
    5744:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    5748:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    574c:	f7ff ff3e 	bl	55cc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    5750:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    5754:	665e      	str	r6, [r3, #100]	; 0x64
	_FOREACH_STATIC_THREAD(thread_data) {
    5756:	e7ce      	b.n	56f6 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    5758:	6a63      	ldr	r3, [r4, #36]	; 0x24
    575a:	1c5a      	adds	r2, r3, #1
    575c:	d00d      	beq.n	577a <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    575e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5762:	2100      	movs	r1, #0
    5764:	4638      	mov	r0, r7
    5766:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    576a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    576e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5772:	d104      	bne.n	577e <z_init_static_threads+0x92>
	z_sched_start(thread);
    5774:	4640      	mov	r0, r8
    5776:	f000 faf1 	bl	5d5c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    577a:	342c      	adds	r4, #44	; 0x2c
    577c:	e7c9      	b.n	5712 <z_init_static_threads+0x26>
    577e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5782:	2300      	movs	r3, #0
    5784:	f7fa fcbc 	bl	100 <__aeabi_uldivmod>
    5788:	4602      	mov	r2, r0
    578a:	460b      	mov	r3, r1
    578c:	f108 0018 	add.w	r0, r8, #24
    5790:	4649      	mov	r1, r9
    5792:	f000 fcd1 	bl	6138 <z_add_timeout>
    5796:	e7f0      	b.n	577a <z_init_static_threads+0x8e>
    5798:	00007d6c 	.word	0x00007d6c
    579c:	00007d6c 	.word	0x00007d6c
    57a0:	000079b9 	.word	0x000079b9

000057a4 <z_thread_mark_switched_in>:

#ifdef CONFIG_INSTRUMENT_THREAD_SWITCHING
void z_thread_mark_switched_in(void)
{
#if defined(CONFIG_SCHED_THREAD_USAGE) && !defined(CONFIG_USE_SWITCH)
	z_sched_usage_start(_current);
    57a4:	4b01      	ldr	r3, [pc, #4]	; (57ac <z_thread_mark_switched_in+0x8>)
    57a6:	6898      	ldr	r0, [r3, #8]
    57a8:	f000 be62 	b.w	6470 <z_sched_usage_start>
    57ac:	20000830 	.word	0x20000830

000057b0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    57b0:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    57b2:	4c0b      	ldr	r4, [pc, #44]	; (57e0 <idle+0x30>)
	return !z_sys_post_kernel;
    57b4:	4d0b      	ldr	r5, [pc, #44]	; (57e4 <idle+0x34>)
	__asm__ volatile(
    57b6:	f04f 0220 	mov.w	r2, #32
    57ba:	f3ef 8311 	mrs	r3, BASEPRI
    57be:	f382 8812 	msr	BASEPRI_MAX, r2
    57c2:	f3bf 8f6f 	isb	sy
    57c6:	f002 f95a 	bl	7a7e <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    57ca:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    57cc:	62a0      	str	r0, [r4, #40]	; 0x28
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    57ce:	b913      	cbnz	r3, 57d6 <idle+0x26>
	arch_cpu_idle();
    57d0:	f7fd f90e 	bl	29f0 <arch_cpu_idle>
}
    57d4:	e7ef      	b.n	57b6 <idle+0x6>
    57d6:	f7fc ff4b 	bl	2670 <pm_system_suspend>
    57da:	2800      	cmp	r0, #0
    57dc:	d1eb      	bne.n	57b6 <idle+0x6>
    57de:	e7f7      	b.n	57d0 <idle+0x20>
    57e0:	20000830 	.word	0x20000830
    57e4:	20001591 	.word	0x20001591

000057e8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    57e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    57ec:	4604      	mov	r4, r0
    57ee:	4617      	mov	r7, r2
    57f0:	461e      	mov	r6, r3
    57f2:	f04f 0320 	mov.w	r3, #32
    57f6:	f3ef 8811 	mrs	r8, BASEPRI
    57fa:	f383 8812 	msr	BASEPRI_MAX, r3
    57fe:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    5802:	68c3      	ldr	r3, [r0, #12]
    5804:	4a33      	ldr	r2, [pc, #204]	; (58d4 <z_impl_k_mutex_lock+0xec>)
    5806:	b17b      	cbz	r3, 5828 <z_impl_k_mutex_lock+0x40>
    5808:	6880      	ldr	r0, [r0, #8]
    580a:	6891      	ldr	r1, [r2, #8]
    580c:	4288      	cmp	r0, r1
    580e:	d019      	beq.n	5844 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    5810:	ea57 0306 	orrs.w	r3, r7, r6
    5814:	d118      	bne.n	5848 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    5816:	f388 8811 	msr	BASEPRI, r8
    581a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    581e:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    5822:	b002      	add	sp, #8
    5824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    5828:	6891      	ldr	r1, [r2, #8]
    582a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    582e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    5830:	3301      	adds	r3, #1
    5832:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    5834:	6893      	ldr	r3, [r2, #8]
    5836:	60a3      	str	r3, [r4, #8]
    5838:	f388 8811 	msr	BASEPRI, r8
    583c:	f3bf 8f6f 	isb	sy
		return 0;
    5840:	2000      	movs	r0, #0
    5842:	e7ee      	b.n	5822 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    5844:	6921      	ldr	r1, [r4, #16]
    5846:	e7f2      	b.n	582e <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    5848:	f991 100e 	ldrsb.w	r1, [r1, #14]
    584c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    5850:	4299      	cmp	r1, r3
    5852:	bfa8      	it	ge
    5854:	4619      	movge	r1, r3
    5856:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    585a:	4291      	cmp	r1, r2
    585c:	bfb8      	it	lt
    585e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    5860:	428b      	cmp	r3, r1
    5862:	dd2e      	ble.n	58c2 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    5864:	f002 f80f 	bl	7886 <adjust_owner_prio.isra.0>
    5868:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    586a:	e9cd 7600 	strd	r7, r6, [sp]
    586e:	481a      	ldr	r0, [pc, #104]	; (58d8 <z_impl_k_mutex_lock+0xf0>)
    5870:	4622      	mov	r2, r4
    5872:	4641      	mov	r1, r8
    5874:	f000 f9fc 	bl	5c70 <z_pend_curr>
	if (got_mutex == 0) {
    5878:	2800      	cmp	r0, #0
    587a:	d0e1      	beq.n	5840 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    587c:	f04f 0320 	mov.w	r3, #32
    5880:	f3ef 8611 	mrs	r6, BASEPRI
    5884:	f383 8812 	msr	BASEPRI_MAX, r3
    5888:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    588c:	68a0      	ldr	r0, [r4, #8]
    588e:	b1d0      	cbz	r0, 58c6 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    5890:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    5892:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5894:	429c      	cmp	r4, r3
    5896:	d00a      	beq.n	58ae <z_impl_k_mutex_lock+0xc6>
    5898:	b14b      	cbz	r3, 58ae <z_impl_k_mutex_lock+0xc6>
    589a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    589e:	4299      	cmp	r1, r3
    58a0:	bfa8      	it	ge
    58a2:	4619      	movge	r1, r3
    58a4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    58a8:	4299      	cmp	r1, r3
    58aa:	bfb8      	it	lt
    58ac:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    58ae:	f001 ffea 	bl	7886 <adjust_owner_prio.isra.0>
    58b2:	b140      	cbz	r0, 58c6 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    58b4:	4808      	ldr	r0, [pc, #32]	; (58d8 <z_impl_k_mutex_lock+0xf0>)
    58b6:	4631      	mov	r1, r6
    58b8:	f000 fa3e 	bl	5d38 <z_reschedule>
	return -EAGAIN;
    58bc:	f06f 000a 	mvn.w	r0, #10
    58c0:	e7af      	b.n	5822 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    58c2:	2500      	movs	r5, #0
    58c4:	e7d1      	b.n	586a <z_impl_k_mutex_lock+0x82>
	if (resched) {
    58c6:	2d00      	cmp	r5, #0
    58c8:	d1f4      	bne.n	58b4 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    58ca:	f386 8811 	msr	BASEPRI, r6
    58ce:	f3bf 8f6f 	isb	sy
    58d2:	e7f3      	b.n	58bc <z_impl_k_mutex_lock+0xd4>
    58d4:	20000830 	.word	0x20000830
    58d8:	20001592 	.word	0x20001592

000058dc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    58dc:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    58de:	6883      	ldr	r3, [r0, #8]
{
    58e0:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    58e2:	b373      	cbz	r3, 5942 <z_impl_k_mutex_unlock+0x66>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    58e4:	4a1a      	ldr	r2, [pc, #104]	; (5950 <z_impl_k_mutex_unlock+0x74>)
    58e6:	6892      	ldr	r2, [r2, #8]
    58e8:	4293      	cmp	r3, r2
    58ea:	d12d      	bne.n	5948 <z_impl_k_mutex_unlock+0x6c>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    58ec:	68c3      	ldr	r3, [r0, #12]
    58ee:	2b01      	cmp	r3, #1
    58f0:	d903      	bls.n	58fa <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    58f2:	3b01      	subs	r3, #1
    58f4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    58f6:	2000      	movs	r0, #0
}
    58f8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    58fa:	f04f 0320 	mov.w	r3, #32
    58fe:	f3ef 8511 	mrs	r5, BASEPRI
    5902:	f383 8812 	msr	BASEPRI_MAX, r3
    5906:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    590a:	6901      	ldr	r1, [r0, #16]
    590c:	6880      	ldr	r0, [r0, #8]
    590e:	f001 ffba 	bl	7886 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5912:	4620      	mov	r0, r4
    5914:	f002 f86b 	bl	79ee <z_unpend_first_thread>
	mutex->owner = new_owner;
    5918:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    591a:	b160      	cbz	r0, 5936 <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
    591c:	f990 200e 	ldrsb.w	r2, [r0, #14]
    5920:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5922:	2200      	movs	r2, #0
    5924:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
		z_ready_thread(new_owner);
    5928:	f002 f802 	bl	7930 <z_ready_thread>
		z_reschedule(&lock, key);
    592c:	4809      	ldr	r0, [pc, #36]	; (5954 <z_impl_k_mutex_unlock+0x78>)
    592e:	4629      	mov	r1, r5
    5930:	f000 fa02 	bl	5d38 <z_reschedule>
    5934:	e7df      	b.n	58f6 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    5936:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    5938:	f385 8811 	msr	BASEPRI, r5
    593c:	f3bf 8f6f 	isb	sy
    5940:	e7d9      	b.n	58f6 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    5942:	f06f 0015 	mvn.w	r0, #21
    5946:	e7d7      	b.n	58f8 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    5948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    594c:	e7d4      	b.n	58f8 <z_impl_k_mutex_unlock+0x1c>
    594e:	bf00      	nop
    5950:	20000830 	.word	0x20000830
    5954:	20001592 	.word	0x20001592

00005958 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5958:	b538      	push	{r3, r4, r5, lr}
    595a:	4604      	mov	r4, r0
	__asm__ volatile(
    595c:	f04f 0320 	mov.w	r3, #32
    5960:	f3ef 8511 	mrs	r5, BASEPRI
    5964:	f383 8812 	msr	BASEPRI_MAX, r3
    5968:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    596c:	f002 f83f 	bl	79ee <z_unpend_first_thread>

	if (thread != NULL) {
    5970:	b150      	cbz	r0, 5988 <z_impl_k_sem_give+0x30>
    5972:	2200      	movs	r2, #0
    5974:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    5978:	f001 ffda 	bl	7930 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    597c:	4629      	mov	r1, r5
    597e:	4806      	ldr	r0, [pc, #24]	; (5998 <z_impl_k_sem_give+0x40>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    5980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    5984:	f000 b9d8 	b.w	5d38 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5988:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    598c:	429a      	cmp	r2, r3
    598e:	bf18      	it	ne
    5990:	3301      	addne	r3, #1
    5992:	60a3      	str	r3, [r4, #8]
}
    5994:	e7f2      	b.n	597c <z_impl_k_sem_give+0x24>
    5996:	bf00      	nop
    5998:	20001592 	.word	0x20001592

0000599c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    599c:	b513      	push	{r0, r1, r4, lr}
    599e:	f04f 0420 	mov.w	r4, #32
    59a2:	f3ef 8111 	mrs	r1, BASEPRI
    59a6:	f384 8812 	msr	BASEPRI_MAX, r4
    59aa:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    59ae:	6884      	ldr	r4, [r0, #8]
    59b0:	b144      	cbz	r4, 59c4 <z_impl_k_sem_take+0x28>
		sem->count--;
    59b2:	3c01      	subs	r4, #1
    59b4:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    59b6:	f381 8811 	msr	BASEPRI, r1
    59ba:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    59be:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    59c0:	b002      	add	sp, #8
    59c2:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    59c4:	ea52 0403 	orrs.w	r4, r2, r3
    59c8:	d106      	bne.n	59d8 <z_impl_k_sem_take+0x3c>
    59ca:	f381 8811 	msr	BASEPRI, r1
    59ce:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    59d2:	f06f 000f 	mvn.w	r0, #15
    59d6:	e7f3      	b.n	59c0 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    59d8:	e9cd 2300 	strd	r2, r3, [sp]
    59dc:	4602      	mov	r2, r0
    59de:	4802      	ldr	r0, [pc, #8]	; (59e8 <z_impl_k_sem_take+0x4c>)
    59e0:	f000 f946 	bl	5c70 <z_pend_curr>
	return ret;
    59e4:	e7ec      	b.n	59c0 <z_impl_k_sem_take+0x24>
    59e6:	bf00      	nop
    59e8:	20001592 	.word	0x20001592

000059ec <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    59ec:	89c3      	ldrh	r3, [r0, #14]
    59ee:	2b7f      	cmp	r3, #127	; 0x7f
    59f0:	d812      	bhi.n	5a18 <sliceable+0x2c>
	int ret = slice_ticks;
    59f2:	4b0a      	ldr	r3, [pc, #40]	; (5a1c <sliceable+0x30>)
    59f4:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    59f6:	b163      	cbz	r3, 5a12 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    59f8:	4b09      	ldr	r3, [pc, #36]	; (5a20 <sliceable+0x34>)
    59fa:	f990 200e 	ldrsb.w	r2, [r0, #14]
    59fe:	681b      	ldr	r3, [r3, #0]
    5a00:	429a      	cmp	r2, r3
    5a02:	db09      	blt.n	5a18 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    5a04:	7b43      	ldrb	r3, [r0, #13]
    5a06:	06db      	lsls	r3, r3, #27
    5a08:	d106      	bne.n	5a18 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    5a0a:	4b06      	ldr	r3, [pc, #24]	; (5a24 <sliceable+0x38>)
    5a0c:	1ac3      	subs	r3, r0, r3
    5a0e:	bf18      	it	ne
    5a10:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    5a12:	f003 0001 	and.w	r0, r3, #1
    5a16:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    5a18:	2300      	movs	r3, #0
    5a1a:	e7fa      	b.n	5a12 <sliceable+0x26>
    5a1c:	20000f88 	.word	0x20000f88
    5a20:	20000f84 	.word	0x20000f84
    5a24:	200006f0 	.word	0x200006f0

00005a28 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    5a28:	4b04      	ldr	r3, [pc, #16]	; (5a3c <slice_timeout+0x14>)
    5a2a:	1ac0      	subs	r0, r0, r3
    5a2c:	4b04      	ldr	r3, [pc, #16]	; (5a40 <slice_timeout+0x18>)
    5a2e:	10c0      	asrs	r0, r0, #3
    5a30:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
    5a32:	4b04      	ldr	r3, [pc, #16]	; (5a44 <slice_timeout+0x1c>)
    5a34:	2201      	movs	r2, #1
    5a36:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    5a38:	4770      	bx	lr
    5a3a:	bf00      	nop
    5a3c:	20000870 	.word	0x20000870
    5a40:	aaaaaaab 	.word	0xaaaaaaab
    5a44:	20001592 	.word	0x20001592

00005a48 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    5a48:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    5a4a:	4b0e      	ldr	r3, [pc, #56]	; (5a84 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    5a4c:	4c0e      	ldr	r4, [pc, #56]	; (5a88 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    5a4e:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    5a50:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    5a54:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
    5a58:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    5a5a:	4620      	mov	r0, r4
    5a5c:	f001 fff9 	bl	7a52 <z_abort_timeout>
	slice_expired[cpu] = false;
    5a60:	4b0a      	ldr	r3, [pc, #40]	; (5a8c <z_reset_time_slice+0x44>)
    5a62:	2200      	movs	r2, #0
	if (sliceable(curr)) {
    5a64:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    5a66:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    5a68:	f7ff ffc0 	bl	59ec <sliceable>
    5a6c:	b148      	cbz	r0, 5a82 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    5a6e:	4b08      	ldr	r3, [pc, #32]	; (5a90 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    5a70:	4908      	ldr	r1, [pc, #32]	; (5a94 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    5a72:	681a      	ldr	r2, [r3, #0]
    5a74:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    5a76:	4620      	mov	r0, r4
    5a78:	17d3      	asrs	r3, r2, #31
	}
}
    5a7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    5a7e:	f000 bb5b 	b.w	6138 <z_add_timeout>
}
    5a82:	bd70      	pop	{r4, r5, r6, pc}
    5a84:	20000830 	.word	0x20000830
    5a88:	20000870 	.word	0x20000870
    5a8c:	20001592 	.word	0x20001592
    5a90:	20000f88 	.word	0x20000f88
    5a94:	00005a29 	.word	0x00005a29

00005a98 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    5a98:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    5a9a:	4d0d      	ldr	r5, [pc, #52]	; (5ad0 <update_cache+0x38>)
    5a9c:	462b      	mov	r3, r5
    5a9e:	f853 4f30 	ldr.w	r4, [r3, #48]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5aa2:	429c      	cmp	r4, r3
    5aa4:	d000      	beq.n	5aa8 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5aa6:	b904      	cbnz	r4, 5aaa <update_cache+0x12>
    5aa8:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    5aaa:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    5aac:	b938      	cbnz	r0, 5abe <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    5aae:	7b5a      	ldrb	r2, [r3, #13]
    5ab0:	06d2      	lsls	r2, r2, #27
    5ab2:	d104      	bne.n	5abe <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5ab4:	69a2      	ldr	r2, [r4, #24]
    5ab6:	b912      	cbnz	r2, 5abe <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    5ab8:	89da      	ldrh	r2, [r3, #14]
    5aba:	2a7f      	cmp	r2, #127	; 0x7f
    5abc:	d805      	bhi.n	5aca <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    5abe:	429c      	cmp	r4, r3
    5ac0:	d002      	beq.n	5ac8 <update_cache+0x30>
			z_reset_time_slice(thread);
    5ac2:	4620      	mov	r0, r4
    5ac4:	f7ff ffc0 	bl	5a48 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    5ac8:	4623      	mov	r3, r4
    5aca:	62eb      	str	r3, [r5, #44]	; 0x2c
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    5acc:	bd38      	pop	{r3, r4, r5, pc}
    5ace:	bf00      	nop
    5ad0:	20000830 	.word	0x20000830

00005ad4 <move_thread_to_end_of_prio_q>:
{
    5ad4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    5ad6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    5ada:	7b43      	ldrb	r3, [r0, #13]
    5adc:	2a00      	cmp	r2, #0
{
    5ade:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5ae0:	da04      	bge.n	5aec <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5ae6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    5ae8:	f001 fee8 	bl	78bc <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5aec:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    5aee:	4a15      	ldr	r2, [pc, #84]	; (5b44 <move_thread_to_end_of_prio_q+0x70>)
    5af0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5af4:	4610      	mov	r0, r2
    5af6:	734b      	strb	r3, [r1, #13]
    5af8:	f850 3f30 	ldr.w	r3, [r0, #48]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    5afc:	6b54      	ldr	r4, [r2, #52]	; 0x34
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5afe:	4283      	cmp	r3, r0
    5b00:	bf08      	it	eq
    5b02:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5b04:	b923      	cbnz	r3, 5b10 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    5b06:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    5b0a:	6021      	str	r1, [r4, #0]
	list->tail = node;
    5b0c:	6351      	str	r1, [r2, #52]	; 0x34
}
    5b0e:	e00c      	b.n	5b2a <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    5b10:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    5b14:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    5b18:	42b5      	cmp	r5, r6
    5b1a:	d00e      	beq.n	5b3a <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5b1c:	42ae      	cmp	r6, r5
    5b1e:	dd0c      	ble.n	5b3a <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    5b20:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    5b22:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    5b26:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    5b28:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    5b2a:	6890      	ldr	r0, [r2, #8]
    5b2c:	1a43      	subs	r3, r0, r1
    5b2e:	4258      	negs	r0, r3
}
    5b30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    5b34:	4158      	adcs	r0, r3
    5b36:	f7ff bfaf 	b.w	5a98 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5b3a:	429c      	cmp	r4, r3
    5b3c:	d0e3      	beq.n	5b06 <move_thread_to_end_of_prio_q+0x32>
    5b3e:	681b      	ldr	r3, [r3, #0]
    5b40:	e7e0      	b.n	5b04 <move_thread_to_end_of_prio_q+0x30>
    5b42:	bf00      	nop
    5b44:	20000830 	.word	0x20000830

00005b48 <ready_thread>:
{
    5b48:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5b4a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    5b4e:	7b42      	ldrb	r2, [r0, #13]
    5b50:	2b00      	cmp	r3, #0
    5b52:	db29      	blt.n	5ba8 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5b54:	06d3      	lsls	r3, r2, #27
    5b56:	d127      	bne.n	5ba8 <ready_thread+0x60>
	return node->next != NULL;
    5b58:	6983      	ldr	r3, [r0, #24]
    5b5a:	bb2b      	cbnz	r3, 5ba8 <ready_thread+0x60>
	return list->head == list;
    5b5c:	4913      	ldr	r1, [pc, #76]	; (5bac <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    5b5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5b62:	7342      	strb	r2, [r0, #13]
    5b64:	460a      	mov	r2, r1
    5b66:	f852 4f30 	ldr.w	r4, [r2, #48]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5b6a:	4294      	cmp	r4, r2
    5b6c:	bf18      	it	ne
    5b6e:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    5b70:	6b4c      	ldr	r4, [r1, #52]	; 0x34
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5b72:	b923      	cbnz	r3, 5b7e <ready_thread+0x36>
	node->prev = tail;
    5b74:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    5b78:	6020      	str	r0, [r4, #0]
	list->tail = node;
    5b7a:	6348      	str	r0, [r1, #52]	; 0x34
}
    5b7c:	e00c      	b.n	5b98 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    5b7e:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    5b82:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    5b86:	42b5      	cmp	r5, r6
    5b88:	d00a      	beq.n	5ba0 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5b8a:	42ae      	cmp	r6, r5
    5b8c:	dd08      	ble.n	5ba0 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    5b8e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5b90:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    5b94:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    5b96:	6058      	str	r0, [r3, #4]
}
    5b98:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    5b9a:	2000      	movs	r0, #0
    5b9c:	f7ff bf7c 	b.w	5a98 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5ba0:	42a3      	cmp	r3, r4
    5ba2:	d0e7      	beq.n	5b74 <ready_thread+0x2c>
    5ba4:	681b      	ldr	r3, [r3, #0]
    5ba6:	e7e4      	b.n	5b72 <ready_thread+0x2a>
}
    5ba8:	bc70      	pop	{r4, r5, r6}
    5baa:	4770      	bx	lr
    5bac:	20000830 	.word	0x20000830

00005bb0 <unready_thread>:
{
    5bb0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    5bb2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    5bb6:	7b43      	ldrb	r3, [r0, #13]
    5bb8:	2a00      	cmp	r2, #0
{
    5bba:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5bbc:	da04      	bge.n	5bc8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5bc2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5bc4:	f001 fe7a 	bl	78bc <sys_dlist_remove>
	update_cache(thread == _current);
    5bc8:	4b04      	ldr	r3, [pc, #16]	; (5bdc <unready_thread+0x2c>)
    5bca:	6898      	ldr	r0, [r3, #8]
    5bcc:	1a43      	subs	r3, r0, r1
    5bce:	4258      	negs	r0, r3
    5bd0:	4158      	adcs	r0, r3
}
    5bd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    5bd6:	f7ff bf5f 	b.w	5a98 <update_cache>
    5bda:	bf00      	nop
    5bdc:	20000830 	.word	0x20000830

00005be0 <pend_locked>:
{
    5be0:	b570      	push	{r4, r5, r6, lr}
    5be2:	4615      	mov	r5, r2
    5be4:	461c      	mov	r4, r3
    5be6:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    5be8:	f001 fe7a 	bl	78e0 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5bec:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    5bf0:	bf08      	it	eq
    5bf2:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    5bf6:	d008      	beq.n	5c0a <pend_locked+0x2a>
    5bf8:	462a      	mov	r2, r5
    5bfa:	4623      	mov	r3, r4
    5bfc:	f106 0018 	add.w	r0, r6, #24
    5c00:	4902      	ldr	r1, [pc, #8]	; (5c0c <pend_locked+0x2c>)
}
    5c02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5c06:	f000 ba97 	b.w	6138 <z_add_timeout>
    5c0a:	bd70      	pop	{r4, r5, r6, pc}
    5c0c:	000079b9 	.word	0x000079b9

00005c10 <z_time_slice>:
{
    5c10:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5c12:	f04f 0320 	mov.w	r3, #32
    5c16:	f3ef 8511 	mrs	r5, BASEPRI
    5c1a:	f383 8812 	msr	BASEPRI_MAX, r3
    5c1e:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    5c22:	4b10      	ldr	r3, [pc, #64]	; (5c64 <z_time_slice+0x54>)
	if (pending_current == curr) {
    5c24:	4a10      	ldr	r2, [pc, #64]	; (5c68 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    5c26:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    5c28:	6810      	ldr	r0, [r2, #0]
    5c2a:	42a0      	cmp	r0, r4
    5c2c:	d106      	bne.n	5c3c <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    5c2e:	f7ff ff0b 	bl	5a48 <z_reset_time_slice>
	__asm__ volatile(
    5c32:	f385 8811 	msr	BASEPRI, r5
    5c36:	f3bf 8f6f 	isb	sy
}
    5c3a:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    5c3c:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    5c3e:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    5c40:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    5c42:	4a0a      	ldr	r2, [pc, #40]	; (5c6c <z_time_slice+0x5c>)
    5c44:	5cd3      	ldrb	r3, [r2, r3]
    5c46:	2b00      	cmp	r3, #0
    5c48:	d0f3      	beq.n	5c32 <z_time_slice+0x22>
    5c4a:	4620      	mov	r0, r4
    5c4c:	f7ff fece 	bl	59ec <sliceable>
    5c50:	2800      	cmp	r0, #0
    5c52:	d0ee      	beq.n	5c32 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    5c54:	7b63      	ldrb	r3, [r4, #13]
    5c56:	06db      	lsls	r3, r3, #27
    5c58:	d102      	bne.n	5c60 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    5c5a:	4620      	mov	r0, r4
    5c5c:	f7ff ff3a 	bl	5ad4 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    5c60:	4620      	mov	r0, r4
    5c62:	e7e4      	b.n	5c2e <z_time_slice+0x1e>
    5c64:	20000830 	.word	0x20000830
    5c68:	20000f80 	.word	0x20000f80
    5c6c:	20001592 	.word	0x20001592

00005c70 <z_pend_curr>:
{
    5c70:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    5c72:	480c      	ldr	r0, [pc, #48]	; (5ca4 <z_pend_curr+0x34>)
    5c74:	4d0c      	ldr	r5, [pc, #48]	; (5ca8 <z_pend_curr+0x38>)
    5c76:	6886      	ldr	r6, [r0, #8]
    5c78:	602e      	str	r6, [r5, #0]
{
    5c7a:	460c      	mov	r4, r1
    5c7c:	4611      	mov	r1, r2
    5c7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    5c82:	f04f 0620 	mov.w	r6, #32
    5c86:	f3ef 8511 	mrs	r5, BASEPRI
    5c8a:	f386 8812 	msr	BASEPRI_MAX, r6
    5c8e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    5c92:	6880      	ldr	r0, [r0, #8]
    5c94:	f7ff ffa4 	bl	5be0 <pend_locked>
	ret = arch_swap(key);
    5c98:	4620      	mov	r0, r4
}
    5c9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5c9e:	f7fc bf8f 	b.w	2bc0 <arch_swap>
    5ca2:	bf00      	nop
    5ca4:	20000830 	.word	0x20000830
    5ca8:	20000f80 	.word	0x20000f80

00005cac <z_set_prio>:
{
    5cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5cae:	4604      	mov	r4, r0
    5cb0:	f04f 0320 	mov.w	r3, #32
    5cb4:	f3ef 8611 	mrs	r6, BASEPRI
    5cb8:	f383 8812 	msr	BASEPRI_MAX, r3
    5cbc:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    5cc0:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5cc2:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    5cc4:	b249      	sxtb	r1, r1
    5cc6:	d119      	bne.n	5cfc <z_set_prio+0x50>
	return node->next != NULL;
    5cc8:	6985      	ldr	r5, [r0, #24]
    5cca:	b9bd      	cbnz	r5, 5cfc <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5cd0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5cd2:	f001 fdf3 	bl	78bc <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5cd6:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    5cd8:	4a16      	ldr	r2, [pc, #88]	; (5d34 <z_set_prio+0x88>)
				thread->base.prio = prio;
    5cda:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    5cdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5ce0:	7343      	strb	r3, [r0, #13]
    5ce2:	4613      	mov	r3, r2
    5ce4:	f853 0f30 	ldr.w	r0, [r3, #48]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5ce8:	4298      	cmp	r0, r3
    5cea:	bf18      	it	ne
    5cec:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    5cee:	6b50      	ldr	r0, [r2, #52]	; 0x34
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5cf0:	b95d      	cbnz	r5, 5d0a <z_set_prio+0x5e>
	node->prev = tail;
    5cf2:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    5cf6:	6004      	str	r4, [r0, #0]
	list->tail = node;
    5cf8:	6354      	str	r4, [r2, #52]	; 0x34
}
    5cfa:	e011      	b.n	5d20 <z_set_prio+0x74>
			thread->base.prio = prio;
    5cfc:	73a1      	strb	r1, [r4, #14]
    5cfe:	2000      	movs	r0, #0
	__asm__ volatile(
    5d00:	f386 8811 	msr	BASEPRI, r6
    5d04:	f3bf 8f6f 	isb	sy
}
    5d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    5d0a:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    5d0e:	42b9      	cmp	r1, r7
    5d10:	d00b      	beq.n	5d2a <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5d12:	428f      	cmp	r7, r1
    5d14:	dd09      	ble.n	5d2a <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    5d16:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    5d18:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    5d1c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    5d1e:	606c      	str	r4, [r5, #4]
			update_cache(1);
    5d20:	2001      	movs	r0, #1
    5d22:	f7ff feb9 	bl	5a98 <update_cache>
    5d26:	2001      	movs	r0, #1
    5d28:	e7ea      	b.n	5d00 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    5d2a:	42a8      	cmp	r0, r5
    5d2c:	d0e1      	beq.n	5cf2 <z_set_prio+0x46>
    5d2e:	682d      	ldr	r5, [r5, #0]
    5d30:	e7de      	b.n	5cf0 <z_set_prio+0x44>
    5d32:	bf00      	nop
    5d34:	20000830 	.word	0x20000830

00005d38 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5d38:	b949      	cbnz	r1, 5d4e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5d3a:	f3ef 8005 	mrs	r0, IPSR
    5d3e:	b930      	cbnz	r0, 5d4e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    5d40:	4b05      	ldr	r3, [pc, #20]	; (5d58 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    5d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5d44:	689b      	ldr	r3, [r3, #8]
    5d46:	429a      	cmp	r2, r3
    5d48:	d001      	beq.n	5d4e <z_reschedule+0x16>
    5d4a:	f7fc bf39 	b.w	2bc0 <arch_swap>
    5d4e:	f381 8811 	msr	BASEPRI, r1
    5d52:	f3bf 8f6f 	isb	sy
}
    5d56:	4770      	bx	lr
    5d58:	20000830 	.word	0x20000830

00005d5c <z_sched_start>:
{
    5d5c:	b510      	push	{r4, lr}
	__asm__ volatile(
    5d5e:	f04f 0220 	mov.w	r2, #32
    5d62:	f3ef 8411 	mrs	r4, BASEPRI
    5d66:	f382 8812 	msr	BASEPRI_MAX, r2
    5d6a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    5d6e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    5d70:	0751      	lsls	r1, r2, #29
    5d72:	d404      	bmi.n	5d7e <z_sched_start+0x22>
	__asm__ volatile(
    5d74:	f384 8811 	msr	BASEPRI, r4
    5d78:	f3bf 8f6f 	isb	sy
}
    5d7c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5d7e:	f022 0204 	bic.w	r2, r2, #4
    5d82:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    5d84:	f7ff fee0 	bl	5b48 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    5d88:	4621      	mov	r1, r4
    5d8a:	4802      	ldr	r0, [pc, #8]	; (5d94 <z_sched_start+0x38>)
}
    5d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    5d90:	f7ff bfd2 	b.w	5d38 <z_reschedule>
    5d94:	20001593 	.word	0x20001593

00005d98 <z_impl_k_thread_suspend>:
{
    5d98:	b570      	push	{r4, r5, r6, lr}
    5d9a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5d9c:	3018      	adds	r0, #24
    5d9e:	f001 fe58 	bl	7a52 <z_abort_timeout>
	__asm__ volatile(
    5da2:	f04f 0320 	mov.w	r3, #32
    5da6:	f3ef 8611 	mrs	r6, BASEPRI
    5daa:	f383 8812 	msr	BASEPRI_MAX, r3
    5dae:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    5db2:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    5db6:	7b63      	ldrb	r3, [r4, #13]
    5db8:	2a00      	cmp	r2, #0
    5dba:	da05      	bge.n	5dc8 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5dc0:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5dc2:	4620      	mov	r0, r4
    5dc4:	f001 fd7a 	bl	78bc <sys_dlist_remove>
		update_cache(thread == _current);
    5dc8:	4d0b      	ldr	r5, [pc, #44]	; (5df8 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5dca:	7b63      	ldrb	r3, [r4, #13]
    5dcc:	68a8      	ldr	r0, [r5, #8]
    5dce:	f043 0310 	orr.w	r3, r3, #16
    5dd2:	7363      	strb	r3, [r4, #13]
    5dd4:	1b03      	subs	r3, r0, r4
    5dd6:	4258      	negs	r0, r3
    5dd8:	4158      	adcs	r0, r3
    5dda:	f7ff fe5d 	bl	5a98 <update_cache>
	__asm__ volatile(
    5dde:	f386 8811 	msr	BASEPRI, r6
    5de2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    5de6:	68ab      	ldr	r3, [r5, #8]
    5de8:	42a3      	cmp	r3, r4
    5dea:	d103      	bne.n	5df4 <z_impl_k_thread_suspend+0x5c>
}
    5dec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    5df0:	f001 be25 	b.w	7a3e <z_reschedule_unlocked>
}
    5df4:	bd70      	pop	{r4, r5, r6, pc}
    5df6:	bf00      	nop
    5df8:	20000830 	.word	0x20000830

00005dfc <k_sched_lock>:
	__asm__ volatile(
    5dfc:	f04f 0320 	mov.w	r3, #32
    5e00:	f3ef 8111 	mrs	r1, BASEPRI
    5e04:	f383 8812 	msr	BASEPRI_MAX, r3
    5e08:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    5e0c:	4b04      	ldr	r3, [pc, #16]	; (5e20 <k_sched_lock+0x24>)
    5e0e:	689a      	ldr	r2, [r3, #8]
    5e10:	7bd3      	ldrb	r3, [r2, #15]
    5e12:	3b01      	subs	r3, #1
    5e14:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    5e16:	f381 8811 	msr	BASEPRI, r1
    5e1a:	f3bf 8f6f 	isb	sy
}
    5e1e:	4770      	bx	lr
    5e20:	20000830 	.word	0x20000830

00005e24 <k_sched_unlock>:
{
    5e24:	b510      	push	{r4, lr}
	__asm__ volatile(
    5e26:	f04f 0320 	mov.w	r3, #32
    5e2a:	f3ef 8411 	mrs	r4, BASEPRI
    5e2e:	f383 8812 	msr	BASEPRI_MAX, r3
    5e32:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    5e36:	4b08      	ldr	r3, [pc, #32]	; (5e58 <k_sched_unlock+0x34>)
    5e38:	689a      	ldr	r2, [r3, #8]
    5e3a:	7bd3      	ldrb	r3, [r2, #15]
    5e3c:	3301      	adds	r3, #1
    5e3e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    5e40:	2000      	movs	r0, #0
    5e42:	f7ff fe29 	bl	5a98 <update_cache>
	__asm__ volatile(
    5e46:	f384 8811 	msr	BASEPRI, r4
    5e4a:	f3bf 8f6f 	isb	sy
}
    5e4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    5e52:	f001 bdf4 	b.w	7a3e <z_reschedule_unlocked>
    5e56:	bf00      	nop
    5e58:	20000830 	.word	0x20000830

00005e5c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    5e5c:	4b02      	ldr	r3, [pc, #8]	; (5e68 <z_sched_init+0xc>)
    5e5e:	f103 0230 	add.w	r2, r3, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
    5e62:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    5e66:	4770      	bx	lr
    5e68:	20000830 	.word	0x20000830

00005e6c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    5e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    5e6e:	f04f 0320 	mov.w	r3, #32
    5e72:	f3ef 8511 	mrs	r5, BASEPRI
    5e76:	f383 8812 	msr	BASEPRI_MAX, r3
    5e7a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    5e7e:	4919      	ldr	r1, [pc, #100]	; (5ee4 <z_impl_k_yield+0x78>)
    5e80:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5e82:	7b43      	ldrb	r3, [r0, #13]
    5e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5e88:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5e8a:	f001 fd17 	bl	78bc <sys_dlist_remove>
	}
	queue_thread(_current);
    5e8e:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    5e90:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    5e92:	4608      	mov	r0, r1
    5e94:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5e98:	735a      	strb	r2, [r3, #13]
    5e9a:	f850 2f30 	ldr.w	r2, [r0, #48]!
	return (node == list->tail) ? NULL : node->next;
    5e9e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5ea0:	4282      	cmp	r2, r0
    5ea2:	bf08      	it	eq
    5ea4:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5ea6:	b922      	cbnz	r2, 5eb2 <z_impl_k_yield+0x46>
	node->prev = tail;
    5ea8:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    5eac:	6023      	str	r3, [r4, #0]
	list->tail = node;
    5eae:	634b      	str	r3, [r1, #52]	; 0x34
}
    5eb0:	e00c      	b.n	5ecc <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    5eb2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    5eb6:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    5eba:	42be      	cmp	r6, r7
    5ebc:	d00e      	beq.n	5edc <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5ebe:	42b7      	cmp	r7, r6
    5ec0:	dd0c      	ble.n	5edc <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    5ec2:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    5ec4:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    5ec8:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    5eca:	6053      	str	r3, [r2, #4]
	update_cache(1);
    5ecc:	2001      	movs	r0, #1
    5ece:	f7ff fde3 	bl	5a98 <update_cache>
    5ed2:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    5ed4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5ed8:	f7fc be72 	b.w	2bc0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    5edc:	42a2      	cmp	r2, r4
    5ede:	d0e3      	beq.n	5ea8 <z_impl_k_yield+0x3c>
    5ee0:	6812      	ldr	r2, [r2, #0]
    5ee2:	e7e0      	b.n	5ea6 <z_impl_k_yield+0x3a>
    5ee4:	20000830 	.word	0x20000830

00005ee8 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    5ee8:	ea50 0301 	orrs.w	r3, r0, r1
{
    5eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ef0:	4605      	mov	r5, r0
    5ef2:	460e      	mov	r6, r1
	if (ticks == 0) {
    5ef4:	d103      	bne.n	5efe <z_tick_sleep+0x16>
	z_impl_k_yield();
    5ef6:	f7ff ffb9 	bl	5e6c <z_impl_k_yield>
		k_yield();
		return 0;
    5efa:	2000      	movs	r0, #0
    5efc:	e02c      	b.n	5f58 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    5efe:	1c83      	adds	r3, r0, #2
    5f00:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    5f04:	db2a      	blt.n	5f5c <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    5f06:	f001 fdca 	bl	7a9e <sys_clock_tick_get_32>
    5f0a:	182c      	adds	r4, r5, r0
    5f0c:	f04f 0320 	mov.w	r3, #32
    5f10:	f3ef 8811 	mrs	r8, BASEPRI
    5f14:	f383 8812 	msr	BASEPRI_MAX, r3
    5f18:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    5f1c:	4f11      	ldr	r7, [pc, #68]	; (5f64 <z_tick_sleep+0x7c>)
    5f1e:	4b12      	ldr	r3, [pc, #72]	; (5f68 <z_tick_sleep+0x80>)
    5f20:	68b8      	ldr	r0, [r7, #8]
    5f22:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    5f24:	f7ff fe44 	bl	5bb0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    5f28:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5f2a:	4910      	ldr	r1, [pc, #64]	; (5f6c <z_tick_sleep+0x84>)
    5f2c:	462a      	mov	r2, r5
    5f2e:	4633      	mov	r3, r6
    5f30:	3018      	adds	r0, #24
    5f32:	f000 f901 	bl	6138 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    5f36:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5f38:	7b53      	ldrb	r3, [r2, #13]
    5f3a:	f043 0310 	orr.w	r3, r3, #16
    5f3e:	7353      	strb	r3, [r2, #13]
    5f40:	4640      	mov	r0, r8
    5f42:	f7fc fe3d 	bl	2bc0 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    5f46:	f001 fdaa 	bl	7a9e <sys_clock_tick_get_32>
    5f4a:	1a20      	subs	r0, r4, r0
    5f4c:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    5f50:	2801      	cmp	r0, #1
    5f52:	f173 0300 	sbcs.w	r3, r3, #0
    5f56:	dbd0      	blt.n	5efa <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    5f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    5f5c:	f06f 0401 	mvn.w	r4, #1
    5f60:	1a24      	subs	r4, r4, r0
    5f62:	e7d3      	b.n	5f0c <z_tick_sleep+0x24>
    5f64:	20000830 	.word	0x20000830
    5f68:	20000f80 	.word	0x20000f80
    5f6c:	000079b9 	.word	0x000079b9

00005f70 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5f70:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    5f74:	bf08      	it	eq
    5f76:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    5f7a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5f7c:	d106      	bne.n	5f8c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    5f7e:	4b08      	ldr	r3, [pc, #32]	; (5fa0 <z_impl_k_sleep+0x30>)
    5f80:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    5f82:	f7ff ff09 	bl	5d98 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    5f86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    5f8a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    5f8c:	f7ff ffac 	bl	5ee8 <z_tick_sleep>
    5f90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5f94:	fb80 0303 	smull	r0, r3, r0, r3
    5f98:	0bc0      	lsrs	r0, r0, #15
    5f9a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    5f9e:	e7f4      	b.n	5f8a <z_impl_k_sleep+0x1a>
    5fa0:	20000830 	.word	0x20000830

00005fa4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    5fa4:	4b01      	ldr	r3, [pc, #4]	; (5fac <z_impl_z_current_get+0x8>)
    5fa6:	6898      	ldr	r0, [r3, #8]
    5fa8:	4770      	bx	lr
    5faa:	bf00      	nop
    5fac:	20000830 	.word	0x20000830

00005fb0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    5fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5fb4:	4604      	mov	r4, r0
    5fb6:	f04f 0320 	mov.w	r3, #32
    5fba:	f3ef 8611 	mrs	r6, BASEPRI
    5fbe:	f383 8812 	msr	BASEPRI_MAX, r3
    5fc2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    5fc6:	7b03      	ldrb	r3, [r0, #12]
    5fc8:	07d9      	lsls	r1, r3, #31
    5fca:	d50b      	bpl.n	5fe4 <z_thread_abort+0x34>
	__asm__ volatile(
    5fcc:	f386 8811 	msr	BASEPRI, r6
    5fd0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    5fd4:	4040      	eors	r0, r0
    5fd6:	f380 8811 	msr	BASEPRI, r0
    5fda:	f04f 0004 	mov.w	r0, #4
    5fde:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    5fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    5fe4:	7b43      	ldrb	r3, [r0, #13]
    5fe6:	071a      	lsls	r2, r3, #28
    5fe8:	d504      	bpl.n	5ff4 <z_thread_abort+0x44>
    5fea:	f386 8811 	msr	BASEPRI, r6
    5fee:	f3bf 8f6f 	isb	sy
    5ff2:	e7f5      	b.n	5fe0 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5ff4:	f023 0220 	bic.w	r2, r3, #32
    5ff8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    5ffc:	09d2      	lsrs	r2, r2, #7
    5ffe:	d123      	bne.n	6048 <z_thread_abort+0x98>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6000:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    6002:	68a3      	ldr	r3, [r4, #8]
    6004:	b113      	cbz	r3, 600c <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    6006:	4620      	mov	r0, r4
    6008:	f001 fc60 	bl	78cc <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    600c:	f104 0018 	add.w	r0, r4, #24
    6010:	f001 fd1f 	bl	7a52 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    6014:	f104 0768 	add.w	r7, r4, #104	; 0x68
    6018:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    601c:	6ea5      	ldr	r5, [r4, #104]	; 0x68
	return sys_dlist_is_empty(list) ? NULL : list->head;
    601e:	42bd      	cmp	r5, r7
    6020:	d000      	beq.n	6024 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    6022:	b9cd      	cbnz	r5, 6058 <z_thread_abort+0xa8>
		update_cache(1);
    6024:	2001      	movs	r0, #1
    6026:	f7ff fd37 	bl	5a98 <update_cache>
		z_thread_monitor_exit(thread);
    602a:	4620      	mov	r0, r4
    602c:	f7ff faac 	bl	5588 <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
    6030:	4b10      	ldr	r3, [pc, #64]	; (6074 <z_thread_abort+0xc4>)
    6032:	689b      	ldr	r3, [r3, #8]
    6034:	42a3      	cmp	r3, r4
    6036:	d1d8      	bne.n	5fea <z_thread_abort+0x3a>
    6038:	f3ef 8305 	mrs	r3, IPSR
    603c:	2b00      	cmp	r3, #0
    603e:	d1d4      	bne.n	5fea <z_thread_abort+0x3a>
    6040:	4630      	mov	r0, r6
    6042:	f7fc fdbd 	bl	2bc0 <arch_swap>
	return ret;
    6046:	e7d0      	b.n	5fea <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6048:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    604c:	f043 0308 	orr.w	r3, r3, #8
    6050:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6052:	f001 fc33 	bl	78bc <sys_dlist_remove>
}
    6056:	e7d4      	b.n	6002 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    6058:	4628      	mov	r0, r5
    605a:	f001 fc37 	bl	78cc <unpend_thread_no_timeout>
    605e:	f105 0018 	add.w	r0, r5, #24
    6062:	f001 fcf6 	bl	7a52 <z_abort_timeout>
    6066:	f8c5 809c 	str.w	r8, [r5, #156]	; 0x9c
		ready_thread(thread);
    606a:	4628      	mov	r0, r5
    606c:	f7ff fd6c 	bl	5b48 <ready_thread>
    6070:	e7d4      	b.n	601c <z_thread_abort+0x6c>
    6072:	bf00      	nop
    6074:	20000830 	.word	0x20000830

00006078 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    6078:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    607a:	4806      	ldr	r0, [pc, #24]	; (6094 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    607c:	4a06      	ldr	r2, [pc, #24]	; (6098 <z_data_copy+0x20>)
    607e:	4907      	ldr	r1, [pc, #28]	; (609c <z_data_copy+0x24>)
    6080:	1a12      	subs	r2, r2, r0
    6082:	f001 fb9c 	bl	77be <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    6086:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    608a:	4a05      	ldr	r2, [pc, #20]	; (60a0 <z_data_copy+0x28>)
    608c:	4905      	ldr	r1, [pc, #20]	; (60a4 <z_data_copy+0x2c>)
    608e:	4806      	ldr	r0, [pc, #24]	; (60a8 <z_data_copy+0x30>)
    6090:	f001 bb95 	b.w	77be <z_early_memcpy>
    6094:	20000000 	.word	0x20000000
    6098:	200001ec 	.word	0x200001ec
    609c:	00008b30 	.word	0x00008b30
    60a0:	00000000 	.word	0x00000000
    60a4:	00008b30 	.word	0x00008b30
    60a8:	20000000 	.word	0x20000000

000060ac <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    60ac:	4b03      	ldr	r3, [pc, #12]	; (60bc <elapsed+0x10>)
    60ae:	681b      	ldr	r3, [r3, #0]
    60b0:	b90b      	cbnz	r3, 60b6 <elapsed+0xa>
    60b2:	f7fe ba9f 	b.w	45f4 <sys_clock_elapsed>
}
    60b6:	2000      	movs	r0, #0
    60b8:	4770      	bx	lr
    60ba:	bf00      	nop
    60bc:	20000f8c 	.word	0x20000f8c

000060c0 <next_timeout>:

static int32_t next_timeout(void)
{
    60c0:	b510      	push	{r4, lr}
	return list->head == list;
    60c2:	4b0e      	ldr	r3, [pc, #56]	; (60fc <next_timeout+0x3c>)
    60c4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    60c6:	429c      	cmp	r4, r3
    60c8:	d104      	bne.n	60d4 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    60ca:	f7ff ffef 	bl	60ac <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    60ce:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    60d2:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    60d4:	f7ff ffea 	bl	60ac <elapsed>
	if ((to == NULL) ||
    60d8:	2c00      	cmp	r4, #0
    60da:	d0f8      	beq.n	60ce <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    60dc:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    60e0:	1a1b      	subs	r3, r3, r0
    60e2:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    60e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    60ea:	f172 0100 	sbcs.w	r1, r2, #0
    60ee:	daee      	bge.n	60ce <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    60f0:	2a00      	cmp	r2, #0
    60f2:	bfac      	ite	ge
    60f4:	4618      	movge	r0, r3
    60f6:	2000      	movlt	r0, #0
	return ret;
    60f8:	e7eb      	b.n	60d2 <next_timeout+0x12>
    60fa:	bf00      	nop
    60fc:	200000cc 	.word	0x200000cc

00006100 <remove_timeout>:
{
    6100:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6102:	b170      	cbz	r0, 6122 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    6104:	4b0b      	ldr	r3, [pc, #44]	; (6134 <remove_timeout+0x34>)
    6106:	685b      	ldr	r3, [r3, #4]
    6108:	4298      	cmp	r0, r3
    610a:	d00a      	beq.n	6122 <remove_timeout+0x22>
    610c:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    610e:	b143      	cbz	r3, 6122 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    6110:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    6114:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    6118:	1912      	adds	r2, r2, r4
    611a:	eb41 0105 	adc.w	r1, r1, r5
    611e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    6122:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    6126:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6128:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    612a:	2300      	movs	r3, #0
	node->prev = NULL;
    612c:	e9c0 3300 	strd	r3, r3, [r0]
}
    6130:	bd30      	pop	{r4, r5, pc}
    6132:	bf00      	nop
    6134:	200000cc 	.word	0x200000cc

00006138 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6138:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    613c:	bf08      	it	eq
    613e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    6142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6144:	4604      	mov	r4, r0
    6146:	461d      	mov	r5, r3
    6148:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    614a:	d05c      	beq.n	6206 <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    614c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    614e:	f04f 0320 	mov.w	r3, #32
    6152:	f3ef 8711 	mrs	r7, BASEPRI
    6156:	f383 8812 	msr	BASEPRI_MAX, r3
    615a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    615e:	3201      	adds	r2, #1
    6160:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    6164:	da24      	bge.n	61b0 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    6166:	492d      	ldr	r1, [pc, #180]	; (621c <z_add_timeout+0xe4>)
    6168:	e9d1 2000 	ldrd	r2, r0, [r1]
    616c:	f06f 0301 	mvn.w	r3, #1
    6170:	1a9b      	subs	r3, r3, r2
    6172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6176:	eb62 0000 	sbc.w	r0, r2, r0
    617a:	1b9e      	subs	r6, r3, r6
    617c:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    6180:	2e01      	cmp	r6, #1
    6182:	f170 0300 	sbcs.w	r3, r0, #0
    6186:	da01      	bge.n	618c <z_add_timeout+0x54>
    6188:	2601      	movs	r6, #1
    618a:	2000      	movs	r0, #0
    618c:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    6190:	4e23      	ldr	r6, [pc, #140]	; (6220 <z_add_timeout+0xe8>)
    6192:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    6196:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6198:	45b4      	cmp	ip, r6
    619a:	bf08      	it	eq
    619c:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    61a0:	f1bc 0f00 	cmp.w	ip, #0
    61a4:	d10d      	bne.n	61c2 <z_add_timeout+0x8a>
	node->prev = tail;
    61a6:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    61aa:	602c      	str	r4, [r5, #0]
	list->tail = node;
    61ac:	6074      	str	r4, [r6, #4]
}
    61ae:	e01c      	b.n	61ea <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    61b0:	f7ff ff7c 	bl	60ac <elapsed>
    61b4:	3601      	adds	r6, #1
    61b6:	f145 0500 	adc.w	r5, r5, #0
    61ba:	1836      	adds	r6, r6, r0
    61bc:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    61c0:	e7e4      	b.n	618c <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    61c2:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    61c6:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    61ca:	4293      	cmp	r3, r2
    61cc:	eb71 0e00 	sbcs.w	lr, r1, r0
    61d0:	da1a      	bge.n	6208 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    61d2:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    61d4:	f8dc 3004 	ldr.w	r3, [ip, #4]
    61d8:	eb60 0001 	sbc.w	r0, r0, r1
    61dc:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    61e0:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    61e4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    61e6:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    61ea:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    61ec:	42b3      	cmp	r3, r6
    61ee:	d006      	beq.n	61fe <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    61f0:	429c      	cmp	r4, r3
    61f2:	d104      	bne.n	61fe <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    61f4:	f7ff ff64 	bl	60c0 <next_timeout>
    61f8:	2100      	movs	r1, #0
    61fa:	f7fe f9c9 	bl	4590 <sys_clock_set_timeout>
	__asm__ volatile(
    61fe:	f387 8811 	msr	BASEPRI, r7
    6202:	f3bf 8f6f 	isb	sy
		}
	}
}
    6206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    6208:	1a9b      	subs	r3, r3, r2
    620a:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    620e:	45ac      	cmp	ip, r5
    6210:	e9c4 3104 	strd	r3, r1, [r4, #16]
    6214:	d0c7      	beq.n	61a6 <z_add_timeout+0x6e>
    6216:	f8dc c000 	ldr.w	ip, [ip]
    621a:	e7c1      	b.n	61a0 <z_add_timeout+0x68>
    621c:	20000888 	.word	0x20000888
    6220:	200000cc 	.word	0x200000cc

00006224 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    6224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    6228:	f04f 0320 	mov.w	r3, #32
    622c:	f3ef 8c11 	mrs	ip, BASEPRI
    6230:	f383 8812 	msr	BASEPRI_MAX, r3
    6234:	f3bf 8f6f 	isb	sy
	return list->head == list;
    6238:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 62ec <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    623c:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 62f0 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    6240:	4f2c      	ldr	r7, [pc, #176]	; (62f4 <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
    6242:	f8c9 0000 	str.w	r0, [r9]
    6246:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    624a:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    624c:	4550      	cmp	r0, sl
    624e:	bf08      	it	eq
    6250:	2000      	moveq	r0, #0
    6252:	2500      	movs	r5, #0
		curr_tick += dt;
    6254:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    6258:	f8d9 3000 	ldr.w	r3, [r9]
    625c:	46e0      	mov	r8, ip
    625e:	b380      	cbz	r0, 62c2 <sys_clock_announce+0x9e>
    6260:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    6264:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    6268:	42b3      	cmp	r3, r6
    626a:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    626e:	da05      	bge.n	627c <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    6270:	1af6      	subs	r6, r6, r3
    6272:	eb6c 040e 	sbc.w	r4, ip, lr
    6276:	e9c0 6404 	strd	r6, r4, [r0, #16]
    627a:	e022      	b.n	62c2 <sys_clock_announce+0x9e>
		curr_tick += dt;
    627c:	18b2      	adds	r2, r6, r2
    627e:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    6282:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    6286:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    628a:	f7ff ff39 	bl	6100 <remove_timeout>
	__asm__ volatile(
    628e:	f388 8811 	msr	BASEPRI, r8
    6292:	f3bf 8f6f 	isb	sy
		t->fn(t);
    6296:	6883      	ldr	r3, [r0, #8]
    6298:	4798      	blx	r3
	__asm__ volatile(
    629a:	f04f 0320 	mov.w	r3, #32
    629e:	f3ef 8811 	mrs	r8, BASEPRI
    62a2:	f383 8812 	msr	BASEPRI_MAX, r3
    62a6:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    62aa:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    62ae:	f8da 0000 	ldr.w	r0, [sl]
    62b2:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    62b4:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    62b6:	46c4      	mov	ip, r8
    62b8:	f8c9 3000 	str.w	r3, [r9]
    62bc:	d1ca      	bne.n	6254 <sys_clock_announce+0x30>
		curr_tick += dt;
    62be:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
    62c2:	189a      	adds	r2, r3, r2
    62c4:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
    62c8:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    62ca:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    62ce:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    62d2:	f7ff fef5 	bl	60c0 <next_timeout>
    62d6:	4621      	mov	r1, r4
    62d8:	f7fe f95a 	bl	4590 <sys_clock_set_timeout>
	__asm__ volatile(
    62dc:	f388 8811 	msr	BASEPRI, r8
    62e0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    62e4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    62e8:	f7ff bc92 	b.w	5c10 <z_time_slice>
    62ec:	200000cc 	.word	0x200000cc
    62f0:	20000f8c 	.word	0x20000f8c
    62f4:	20000888 	.word	0x20000888

000062f8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    62f8:	b510      	push	{r4, lr}
	__asm__ volatile(
    62fa:	f04f 0320 	mov.w	r3, #32
    62fe:	f3ef 8411 	mrs	r4, BASEPRI
    6302:	f383 8812 	msr	BASEPRI_MAX, r3
    6306:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    630a:	f7ff fecf 	bl	60ac <elapsed>
    630e:	4a06      	ldr	r2, [pc, #24]	; (6328 <sys_clock_tick_get+0x30>)
    6310:	4603      	mov	r3, r0
    6312:	e9d2 0100 	ldrd	r0, r1, [r2]
    6316:	1818      	adds	r0, r3, r0
    6318:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    631c:	f384 8811 	msr	BASEPRI, r4
    6320:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    6324:	bd10      	pop	{r4, pc}
    6326:	bf00      	nop
    6328:	20000888 	.word	0x20000888

0000632c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    632c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    632e:	4604      	mov	r4, r0
	__asm__ volatile(
    6330:	f04f 0320 	mov.w	r3, #32
    6334:	f3ef 8711 	mrs	r7, BASEPRI
    6338:	f383 8812 	msr	BASEPRI_MAX, r3
    633c:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
    6340:	6802      	ldr	r2, [r0, #0]
    6342:	b122      	cbz	r2, 634e <z_timer_expiration_handler+0x22>
	__asm__ volatile(
    6344:	f387 8811 	msr	BASEPRI, r7
    6348:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    634c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    634e:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
    6352:	1c58      	adds	r0, r3, #1
    6354:	f146 0100 	adc.w	r1, r6, #0
    6358:	2802      	cmp	r0, #2
    635a:	f171 0100 	sbcs.w	r1, r1, #0
    635e:	d327      	bcc.n	63b0 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
    6360:	2b01      	cmp	r3, #1
    6362:	f176 0100 	sbcs.w	r1, r6, #0
    6366:	bfbc      	itt	lt
    6368:	2301      	movlt	r3, #1
    636a:	4616      	movlt	r6, r2
    636c:	1e5d      	subs	r5, r3, #1
    636e:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
	return z_impl_k_uptime_ticks();
    6372:	f001 fb98 	bl	7aa6 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    6376:	3001      	adds	r0, #1
    6378:	f141 0100 	adc.w	r1, r1, #0
    637c:	1940      	adds	r0, r0, r5
    637e:	eb46 0101 	adc.w	r1, r6, r1
    6382:	2801      	cmp	r0, #1
    6384:	f171 0100 	sbcs.w	r1, r1, #0
    6388:	db3b      	blt.n	6402 <z_timer_expiration_handler+0xd6>
    638a:	f001 fb8c 	bl	7aa6 <z_impl_k_uptime_ticks>
    638e:	3001      	adds	r0, #1
    6390:	f141 0100 	adc.w	r1, r1, #0
    6394:	f06f 0201 	mvn.w	r2, #1
    6398:	1940      	adds	r0, r0, r5
    639a:	eb46 0301 	adc.w	r3, r6, r1
    639e:	1a12      	subs	r2, r2, r0
    63a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    63a4:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    63a8:	4918      	ldr	r1, [pc, #96]	; (640c <z_timer_expiration_handler+0xe0>)
    63aa:	4620      	mov	r0, r4
    63ac:	f7ff fec4 	bl	6138 <z_add_timeout>
	timer->status += 1U;
    63b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    63b2:	3301      	adds	r3, #1
    63b4:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
    63b6:	6a23      	ldr	r3, [r4, #32]
    63b8:	b173      	cbz	r3, 63d8 <z_timer_expiration_handler+0xac>
    63ba:	f387 8811 	msr	BASEPRI, r7
    63be:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
    63c2:	6a23      	ldr	r3, [r4, #32]
    63c4:	4620      	mov	r0, r4
    63c6:	4798      	blx	r3
	__asm__ volatile(
    63c8:	f04f 0320 	mov.w	r3, #32
    63cc:	f3ef 8711 	mrs	r7, BASEPRI
    63d0:	f383 8812 	msr	BASEPRI_MAX, r3
    63d4:	f3bf 8f6f 	isb	sy
	return list->head == list;
    63d8:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    63dc:	42a5      	cmp	r5, r4
    63de:	d0b1      	beq.n	6344 <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
    63e0:	2d00      	cmp	r5, #0
    63e2:	d0af      	beq.n	6344 <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
    63e4:	4628      	mov	r0, r5
    63e6:	f001 fab3 	bl	7950 <z_unpend_thread_no_timeout>
    63ea:	2300      	movs	r3, #0
    63ec:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
	__asm__ volatile(
    63f0:	f387 8811 	msr	BASEPRI, r7
    63f4:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    63f8:	4628      	mov	r0, r5
}
    63fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    63fe:	f001 ba97 	b.w	7930 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    6402:	f06f 0201 	mvn.w	r2, #1
    6406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    640a:	e7cd      	b.n	63a8 <z_timer_expiration_handler+0x7c>
    640c:	0000632d 	.word	0x0000632d

00006410 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    6410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    6414:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    6418:	bf08      	it	eq
    641a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    641e:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    6422:	4605      	mov	r5, r0
    6424:	461c      	mov	r4, r3
    6426:	4691      	mov	r9, r2
    6428:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    642a:	d01c      	beq.n	6466 <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
    642c:	1c53      	adds	r3, r2, #1
    642e:	f174 33ff 	sbcs.w	r3, r4, #4294967295	; 0xffffffff
    6432:	db09      	blt.n	6448 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
    6434:	2a01      	cmp	r2, #1
    6436:	f174 0300 	sbcs.w	r3, r4, #0
    643a:	bfbc      	itt	lt
    643c:	2201      	movlt	r2, #1
    643e:	2400      	movlt	r4, #0
    6440:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
    6444:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    6448:	4628      	mov	r0, r5
    644a:	f001 fb02 	bl	7a52 <z_abort_timeout>
	timer->period = period;
    644e:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
    6452:	2300      	movs	r3, #0
    6454:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6456:	464a      	mov	r2, r9
    6458:	4643      	mov	r3, r8
    645a:	4628      	mov	r0, r5
    645c:	4903      	ldr	r1, [pc, #12]	; (646c <z_impl_k_timer_start+0x5c>)
		     duration);
}
    645e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6462:	f7ff be69 	b.w	6138 <z_add_timeout>
}
    6466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    646a:	bf00      	nop
    646c:	0000632d 	.word	0x0000632d

00006470 <z_sched_usage_start>:
	}
#endif
}

void z_sched_usage_start(struct k_thread *thread)
{
    6470:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    6472:	f001 f8da 	bl	762a <sys_clock_cycle_get_32>
	/* One write through a volatile pointer doesn't require
	 * synchronization as long as _usage() treats it as volatile
	 * (we can't race with _stop() by design).
	 */

	_current_cpu->usage0 = usage_now();
    6476:	4b03      	ldr	r3, [pc, #12]	; (6484 <z_sched_usage_start+0x14>)
    6478:	2801      	cmp	r0, #1
    647a:	bf38      	it	cc
    647c:	2001      	movcc	r0, #1
    647e:	6158      	str	r0, [r3, #20]
#endif
}
    6480:	bd08      	pop	{r3, pc}
    6482:	bf00      	nop
    6484:	20000830 	.word	0x20000830

00006488 <z_sched_usage_stop>:

void z_sched_usage_stop(void)
{
    6488:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
    648a:	f04f 0320 	mov.w	r3, #32
    648e:	f3ef 8611 	mrs	r6, BASEPRI
    6492:	f383 8812 	msr	BASEPRI_MAX, r3
    6496:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t k   = k_spin_lock(&usage_lock);

	struct _cpu     *cpu = _current_cpu;

	uint32_t u0 = cpu->usage0;
    649a:	4d10      	ldr	r5, [pc, #64]	; (64dc <z_sched_usage_stop+0x54>)
    649c:	696c      	ldr	r4, [r5, #20]

	if (u0 != 0) {
    649e:	b1ac      	cbz	r4, 64cc <z_sched_usage_stop+0x44>
    64a0:	f001 f8c3 	bl	762a <sys_clock_cycle_get_32>
		uint32_t cycles = usage_now() - u0;

		if (cpu->current->base.usage.track_usage) {
    64a4:	68ab      	ldr	r3, [r5, #8]
    64a6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		uint32_t cycles = usage_now() - u0;
    64aa:	2801      	cmp	r0, #1
    64ac:	bf2c      	ite	cs
    64ae:	ebc4 0100 	rsbcs	r1, r4, r0
    64b2:	f1c4 0101 	rsbcc	r1, r4, #1
		if (cpu->current->base.usage.track_usage) {
    64b6:	b132      	cbz	r2, 64c6 <z_sched_usage_stop+0x3e>
	thread->base.usage.total += cycles;
    64b8:	e9d3 200c 	ldrd	r2, r0, [r3, #48]	; 0x30
    64bc:	1852      	adds	r2, r2, r1
    64be:	f140 0000 	adc.w	r0, r0, #0
    64c2:	e9c3 200c 	strd	r2, r0, [r3, #48]	; 0x30
			sched_thread_update_usage(cpu->current, cycles);
		}

		sched_cpu_update_usage(cpu, cycles);
    64c6:	4805      	ldr	r0, [pc, #20]	; (64dc <z_sched_usage_stop+0x54>)
    64c8:	f001 fb1c 	bl	7b04 <sched_cpu_update_usage>
	}

	cpu->usage0 = 0;
    64cc:	2300      	movs	r3, #0
    64ce:	616b      	str	r3, [r5, #20]
	__asm__ volatile(
    64d0:	f386 8811 	msr	BASEPRI, r6
    64d4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&usage_lock, k);
}
    64d8:	bd70      	pop	{r4, r5, r6, pc}
    64da:	bf00      	nop
    64dc:	20000830 	.word	0x20000830

000064e0 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    64e0:	4801      	ldr	r0, [pc, #4]	; (64e8 <boot_banner+0x8>)
    64e2:	f000 ba6f 	b.w	69c4 <printk>
    64e6:	bf00      	nop
    64e8:	00008aff 	.word	0x00008aff

000064ec <nrf_cc3xx_platform_init_no_rng>:
    64ec:	b510      	push	{r4, lr}
    64ee:	4c0a      	ldr	r4, [pc, #40]	; (6518 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    64f0:	6823      	ldr	r3, [r4, #0]
    64f2:	b11b      	cbz	r3, 64fc <nrf_cc3xx_platform_init_no_rng+0x10>
    64f4:	2301      	movs	r3, #1
    64f6:	6023      	str	r3, [r4, #0]
    64f8:	2000      	movs	r0, #0
    64fa:	bd10      	pop	{r4, pc}
    64fc:	f000 f8ea 	bl	66d4 <CC_LibInitNoRng>
    6500:	2800      	cmp	r0, #0
    6502:	d0f7      	beq.n	64f4 <nrf_cc3xx_platform_init_no_rng+0x8>
    6504:	3801      	subs	r0, #1
    6506:	2806      	cmp	r0, #6
    6508:	d803      	bhi.n	6512 <nrf_cc3xx_platform_init_no_rng+0x26>
    650a:	4b04      	ldr	r3, [pc, #16]	; (651c <nrf_cc3xx_platform_init_no_rng+0x30>)
    650c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    6510:	bd10      	pop	{r4, pc}
    6512:	4803      	ldr	r0, [pc, #12]	; (6520 <nrf_cc3xx_platform_init_no_rng+0x34>)
    6514:	bd10      	pop	{r4, pc}
    6516:	bf00      	nop
    6518:	20000f90 	.word	0x20000f90
    651c:	00008060 	.word	0x00008060
    6520:	ffff8ffe 	.word	0xffff8ffe

00006524 <nrf_cc3xx_platform_abort>:
    6524:	f3bf 8f4f 	dsb	sy
    6528:	4905      	ldr	r1, [pc, #20]	; (6540 <nrf_cc3xx_platform_abort+0x1c>)
    652a:	4b06      	ldr	r3, [pc, #24]	; (6544 <nrf_cc3xx_platform_abort+0x20>)
    652c:	68ca      	ldr	r2, [r1, #12]
    652e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6532:	4313      	orrs	r3, r2
    6534:	60cb      	str	r3, [r1, #12]
    6536:	f3bf 8f4f 	dsb	sy
    653a:	bf00      	nop
    653c:	e7fd      	b.n	653a <nrf_cc3xx_platform_abort+0x16>
    653e:	bf00      	nop
    6540:	e000ed00 	.word	0xe000ed00
    6544:	05fa0004 	.word	0x05fa0004

00006548 <CC_PalAbort>:
    6548:	b410      	push	{r4}
    654a:	4b09      	ldr	r3, [pc, #36]	; (6570 <CC_PalAbort+0x28>)
    654c:	4909      	ldr	r1, [pc, #36]	; (6574 <CC_PalAbort+0x2c>)
    654e:	4c0a      	ldr	r4, [pc, #40]	; (6578 <CC_PalAbort+0x30>)
    6550:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    6554:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    6558:	6849      	ldr	r1, [r1, #4]
    655a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    655e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    6562:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    6566:	2300      	movs	r3, #0
    6568:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    656c:	bc10      	pop	{r4}
    656e:	4708      	bx	r1
    6570:	5002b000 	.word	0x5002b000
    6574:	200000d4 	.word	0x200000d4
    6578:	5002a000 	.word	0x5002a000

0000657c <nrf_cc3xx_platform_set_abort>:
    657c:	e9d0 1200 	ldrd	r1, r2, [r0]
    6580:	4b01      	ldr	r3, [pc, #4]	; (6588 <nrf_cc3xx_platform_set_abort+0xc>)
    6582:	e9c3 1200 	strd	r1, r2, [r3]
    6586:	4770      	bx	lr
    6588:	200000d4 	.word	0x200000d4

0000658c <mutex_free>:
    658c:	b510      	push	{r4, lr}
    658e:	4604      	mov	r4, r0
    6590:	b150      	cbz	r0, 65a8 <mutex_free+0x1c>
    6592:	6863      	ldr	r3, [r4, #4]
    6594:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    6598:	d005      	beq.n	65a6 <mutex_free+0x1a>
    659a:	4a06      	ldr	r2, [pc, #24]	; (65b4 <mutex_free+0x28>)
    659c:	4293      	cmp	r3, r2
    659e:	d002      	beq.n	65a6 <mutex_free+0x1a>
    65a0:	2300      	movs	r3, #0
    65a2:	6023      	str	r3, [r4, #0]
    65a4:	6062      	str	r2, [r4, #4]
    65a6:	bd10      	pop	{r4, pc}
    65a8:	4b03      	ldr	r3, [pc, #12]	; (65b8 <mutex_free+0x2c>)
    65aa:	4804      	ldr	r0, [pc, #16]	; (65bc <mutex_free+0x30>)
    65ac:	685b      	ldr	r3, [r3, #4]
    65ae:	4798      	blx	r3
    65b0:	e7ef      	b.n	6592 <mutex_free+0x6>
    65b2:	bf00      	nop
    65b4:	a95c5f2c 	.word	0xa95c5f2c
    65b8:	200000d4 	.word	0x200000d4
    65bc:	0000807c 	.word	0x0000807c

000065c0 <mutex_lock>:
    65c0:	b1c8      	cbz	r0, 65f6 <mutex_lock+0x36>
    65c2:	6843      	ldr	r3, [r0, #4]
    65c4:	4a0d      	ldr	r2, [pc, #52]	; (65fc <mutex_lock+0x3c>)
    65c6:	4293      	cmp	r3, r2
    65c8:	d013      	beq.n	65f2 <mutex_lock+0x32>
    65ca:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    65ce:	d00e      	beq.n	65ee <mutex_lock+0x2e>
    65d0:	2301      	movs	r3, #1
    65d2:	e850 2f00 	ldrex	r2, [r0]
    65d6:	4619      	mov	r1, r3
    65d8:	e840 1c00 	strex	ip, r1, [r0]
    65dc:	f09c 0f00 	teq	ip, #0
    65e0:	d1f7      	bne.n	65d2 <mutex_lock+0x12>
    65e2:	2a01      	cmp	r2, #1
    65e4:	d0f5      	beq.n	65d2 <mutex_lock+0x12>
    65e6:	f3bf 8f5f 	dmb	sy
    65ea:	2000      	movs	r0, #0
    65ec:	4770      	bx	lr
    65ee:	4804      	ldr	r0, [pc, #16]	; (6600 <mutex_lock+0x40>)
    65f0:	4770      	bx	lr
    65f2:	4804      	ldr	r0, [pc, #16]	; (6604 <mutex_lock+0x44>)
    65f4:	4770      	bx	lr
    65f6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    65fa:	4770      	bx	lr
    65fc:	a95c5f2c 	.word	0xa95c5f2c
    6600:	ffff8fe9 	.word	0xffff8fe9
    6604:	ffff8fea 	.word	0xffff8fea

00006608 <mutex_unlock>:
    6608:	b180      	cbz	r0, 662c <mutex_unlock+0x24>
    660a:	6843      	ldr	r3, [r0, #4]
    660c:	4a09      	ldr	r2, [pc, #36]	; (6634 <mutex_unlock+0x2c>)
    660e:	4293      	cmp	r3, r2
    6610:	d00a      	beq.n	6628 <mutex_unlock+0x20>
    6612:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    6616:	d005      	beq.n	6624 <mutex_unlock+0x1c>
    6618:	f3bf 8f5f 	dmb	sy
    661c:	2300      	movs	r3, #0
    661e:	6003      	str	r3, [r0, #0]
    6620:	4618      	mov	r0, r3
    6622:	4770      	bx	lr
    6624:	4804      	ldr	r0, [pc, #16]	; (6638 <mutex_unlock+0x30>)
    6626:	4770      	bx	lr
    6628:	4804      	ldr	r0, [pc, #16]	; (663c <mutex_unlock+0x34>)
    662a:	4770      	bx	lr
    662c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6630:	4770      	bx	lr
    6632:	bf00      	nop
    6634:	a95c5f2c 	.word	0xa95c5f2c
    6638:	ffff8fe9 	.word	0xffff8fe9
    663c:	ffff8fea 	.word	0xffff8fea

00006640 <mutex_init>:
    6640:	b510      	push	{r4, lr}
    6642:	4604      	mov	r4, r0
    6644:	b120      	cbz	r0, 6650 <mutex_init+0x10>
    6646:	4b04      	ldr	r3, [pc, #16]	; (6658 <mutex_init+0x18>)
    6648:	6063      	str	r3, [r4, #4]
    664a:	2200      	movs	r2, #0
    664c:	6022      	str	r2, [r4, #0]
    664e:	bd10      	pop	{r4, pc}
    6650:	4802      	ldr	r0, [pc, #8]	; (665c <mutex_init+0x1c>)
    6652:	f7ff ff79 	bl	6548 <CC_PalAbort>
    6656:	e7f6      	b.n	6646 <mutex_init+0x6>
    6658:	3a00003a 	.word	0x3a00003a
    665c:	000080a4 	.word	0x000080a4

00006660 <nrf_cc3xx_platform_set_mutexes>:
    6660:	b570      	push	{r4, r5, r6, lr}
    6662:	e9d0 2300 	ldrd	r2, r3, [r0]
    6666:	4c17      	ldr	r4, [pc, #92]	; (66c4 <nrf_cc3xx_platform_set_mutexes+0x64>)
    6668:	4d17      	ldr	r5, [pc, #92]	; (66c8 <nrf_cc3xx_platform_set_mutexes+0x68>)
    666a:	6063      	str	r3, [r4, #4]
    666c:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    6670:	e9c4 3002 	strd	r3, r0, [r4, #8]
    6674:	6022      	str	r2, [r4, #0]
    6676:	6848      	ldr	r0, [r1, #4]
    6678:	f8d1 c000 	ldr.w	ip, [r1]
    667c:	4b13      	ldr	r3, [pc, #76]	; (66cc <nrf_cc3xx_platform_set_mutexes+0x6c>)
    667e:	e9c3 c000 	strd	ip, r0, [r3]
    6682:	f8d5 0118 	ldr.w	r0, [r5, #280]	; 0x118
    6686:	f8d1 c008 	ldr.w	ip, [r1, #8]
    668a:	f8c3 c008 	str.w	ip, [r3, #8]
    668e:	f010 5f68 	tst.w	r0, #973078528	; 0x3a000000
    6692:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    6696:	6909      	ldr	r1, [r1, #16]
    6698:	f8c3 c00c 	str.w	ip, [r3, #12]
    669c:	6119      	str	r1, [r3, #16]
    669e:	d010      	beq.n	66c2 <nrf_cc3xx_platform_set_mutexes+0x62>
    66a0:	490b      	ldr	r1, [pc, #44]	; (66d0 <nrf_cc3xx_platform_set_mutexes+0x70>)
    66a2:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
    66a6:	2300      	movs	r3, #0
    66a8:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
    66ac:	f505 708a 	add.w	r0, r5, #276	; 0x114
    66b0:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    66b4:	4790      	blx	r2
    66b6:	6823      	ldr	r3, [r4, #0]
    66b8:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    66bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    66c0:	4718      	bx	r3
    66c2:	bd70      	pop	{r4, r5, r6, pc}
    66c4:	200000f0 	.word	0x200000f0
    66c8:	20000fa8 	.word	0x20000fa8
    66cc:	200000dc 	.word	0x200000dc
    66d0:	a95c5f2c 	.word	0xa95c5f2c

000066d4 <CC_LibInitNoRng>:
    66d4:	b538      	push	{r3, r4, r5, lr}
    66d6:	f000 f82f 	bl	6738 <CC_HalInit>
    66da:	b120      	cbz	r0, 66e6 <CC_LibInitNoRng+0x12>
    66dc:	2403      	movs	r4, #3
    66de:	f000 f863 	bl	67a8 <CC_PalTerminate>
    66e2:	4620      	mov	r0, r4
    66e4:	bd38      	pop	{r3, r4, r5, pc}
    66e6:	f000 f831 	bl	674c <CC_PalInit>
    66ea:	b998      	cbnz	r0, 6714 <CC_LibInitNoRng+0x40>
    66ec:	f000 f8ac 	bl	6848 <CC_PalPowerSaveModeSelect>
    66f0:	b998      	cbnz	r0, 671a <CC_LibInitNoRng+0x46>
    66f2:	4d0f      	ldr	r5, [pc, #60]	; (6730 <CC_LibInitNoRng+0x5c>)
    66f4:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    66f8:	0e1b      	lsrs	r3, r3, #24
    66fa:	2bf0      	cmp	r3, #240	; 0xf0
    66fc:	d108      	bne.n	6710 <CC_LibInitNoRng+0x3c>
    66fe:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    6702:	4b0c      	ldr	r3, [pc, #48]	; (6734 <CC_LibInitNoRng+0x60>)
    6704:	429a      	cmp	r2, r3
    6706:	d00a      	beq.n	671e <CC_LibInitNoRng+0x4a>
    6708:	2407      	movs	r4, #7
    670a:	f000 f817 	bl	673c <CC_HalTerminate>
    670e:	e7e6      	b.n	66de <CC_LibInitNoRng+0xa>
    6710:	2406      	movs	r4, #6
    6712:	e7fa      	b.n	670a <CC_LibInitNoRng+0x36>
    6714:	2404      	movs	r4, #4
    6716:	4620      	mov	r0, r4
    6718:	bd38      	pop	{r3, r4, r5, pc}
    671a:	2400      	movs	r4, #0
    671c:	e7f5      	b.n	670a <CC_LibInitNoRng+0x36>
    671e:	2001      	movs	r0, #1
    6720:	f000 f892 	bl	6848 <CC_PalPowerSaveModeSelect>
    6724:	4604      	mov	r4, r0
    6726:	2800      	cmp	r0, #0
    6728:	d1f7      	bne.n	671a <CC_LibInitNoRng+0x46>
    672a:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    672e:	e7d8      	b.n	66e2 <CC_LibInitNoRng+0xe>
    6730:	5002b000 	.word	0x5002b000
    6734:	20e00000 	.word	0x20e00000

00006738 <CC_HalInit>:
    6738:	2000      	movs	r0, #0
    673a:	4770      	bx	lr

0000673c <CC_HalTerminate>:
    673c:	2000      	movs	r0, #0
    673e:	4770      	bx	lr

00006740 <CC_HalMaskInterrupt>:
    6740:	4b01      	ldr	r3, [pc, #4]	; (6748 <CC_HalMaskInterrupt+0x8>)
    6742:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    6746:	4770      	bx	lr
    6748:	5002b000 	.word	0x5002b000

0000674c <CC_PalInit>:
    674c:	b510      	push	{r4, lr}
    674e:	4811      	ldr	r0, [pc, #68]	; (6794 <CC_PalInit+0x48>)
    6750:	f000 f848 	bl	67e4 <CC_PalMutexCreate>
    6754:	b100      	cbz	r0, 6758 <CC_PalInit+0xc>
    6756:	bd10      	pop	{r4, pc}
    6758:	480f      	ldr	r0, [pc, #60]	; (6798 <CC_PalInit+0x4c>)
    675a:	f000 f843 	bl	67e4 <CC_PalMutexCreate>
    675e:	2800      	cmp	r0, #0
    6760:	d1f9      	bne.n	6756 <CC_PalInit+0xa>
    6762:	4c0e      	ldr	r4, [pc, #56]	; (679c <CC_PalInit+0x50>)
    6764:	4620      	mov	r0, r4
    6766:	f000 f83d 	bl	67e4 <CC_PalMutexCreate>
    676a:	2800      	cmp	r0, #0
    676c:	d1f3      	bne.n	6756 <CC_PalInit+0xa>
    676e:	4b0c      	ldr	r3, [pc, #48]	; (67a0 <CC_PalInit+0x54>)
    6770:	480c      	ldr	r0, [pc, #48]	; (67a4 <CC_PalInit+0x58>)
    6772:	601c      	str	r4, [r3, #0]
    6774:	f000 f836 	bl	67e4 <CC_PalMutexCreate>
    6778:	4601      	mov	r1, r0
    677a:	2800      	cmp	r0, #0
    677c:	d1eb      	bne.n	6756 <CC_PalInit+0xa>
    677e:	f000 f82d 	bl	67dc <CC_PalDmaInit>
    6782:	4604      	mov	r4, r0
    6784:	b108      	cbz	r0, 678a <CC_PalInit+0x3e>
    6786:	4620      	mov	r0, r4
    6788:	bd10      	pop	{r4, pc}
    678a:	f000 f83f 	bl	680c <CC_PalPowerSaveModeInit>
    678e:	4620      	mov	r0, r4
    6790:	e7fa      	b.n	6788 <CC_PalInit+0x3c>
    6792:	bf00      	nop
    6794:	20000130 	.word	0x20000130
    6798:	2000012c 	.word	0x2000012c
    679c:	20000128 	.word	0x20000128
    67a0:	20000120 	.word	0x20000120
    67a4:	20000124 	.word	0x20000124

000067a8 <CC_PalTerminate>:
    67a8:	b508      	push	{r3, lr}
    67aa:	4808      	ldr	r0, [pc, #32]	; (67cc <CC_PalTerminate+0x24>)
    67ac:	f000 f824 	bl	67f8 <CC_PalMutexDestroy>
    67b0:	4807      	ldr	r0, [pc, #28]	; (67d0 <CC_PalTerminate+0x28>)
    67b2:	f000 f821 	bl	67f8 <CC_PalMutexDestroy>
    67b6:	4807      	ldr	r0, [pc, #28]	; (67d4 <CC_PalTerminate+0x2c>)
    67b8:	f000 f81e 	bl	67f8 <CC_PalMutexDestroy>
    67bc:	4806      	ldr	r0, [pc, #24]	; (67d8 <CC_PalTerminate+0x30>)
    67be:	f000 f81b 	bl	67f8 <CC_PalMutexDestroy>
    67c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    67c6:	f000 b80b 	b.w	67e0 <CC_PalDmaTerminate>
    67ca:	bf00      	nop
    67cc:	20000130 	.word	0x20000130
    67d0:	2000012c 	.word	0x2000012c
    67d4:	20000128 	.word	0x20000128
    67d8:	20000124 	.word	0x20000124

000067dc <CC_PalDmaInit>:
    67dc:	2000      	movs	r0, #0
    67de:	4770      	bx	lr

000067e0 <CC_PalDmaTerminate>:
    67e0:	4770      	bx	lr
    67e2:	bf00      	nop

000067e4 <CC_PalMutexCreate>:
    67e4:	b508      	push	{r3, lr}
    67e6:	4b03      	ldr	r3, [pc, #12]	; (67f4 <CC_PalMutexCreate+0x10>)
    67e8:	6802      	ldr	r2, [r0, #0]
    67ea:	681b      	ldr	r3, [r3, #0]
    67ec:	6810      	ldr	r0, [r2, #0]
    67ee:	4798      	blx	r3
    67f0:	2000      	movs	r0, #0
    67f2:	bd08      	pop	{r3, pc}
    67f4:	200000f0 	.word	0x200000f0

000067f8 <CC_PalMutexDestroy>:
    67f8:	b508      	push	{r3, lr}
    67fa:	4b03      	ldr	r3, [pc, #12]	; (6808 <CC_PalMutexDestroy+0x10>)
    67fc:	6802      	ldr	r2, [r0, #0]
    67fe:	685b      	ldr	r3, [r3, #4]
    6800:	6810      	ldr	r0, [r2, #0]
    6802:	4798      	blx	r3
    6804:	2000      	movs	r0, #0
    6806:	bd08      	pop	{r3, pc}
    6808:	200000f0 	.word	0x200000f0

0000680c <CC_PalPowerSaveModeInit>:
    680c:	b570      	push	{r4, r5, r6, lr}
    680e:	4c09      	ldr	r4, [pc, #36]	; (6834 <CC_PalPowerSaveModeInit+0x28>)
    6810:	4d09      	ldr	r5, [pc, #36]	; (6838 <CC_PalPowerSaveModeInit+0x2c>)
    6812:	6920      	ldr	r0, [r4, #16]
    6814:	68ab      	ldr	r3, [r5, #8]
    6816:	4798      	blx	r3
    6818:	b118      	cbz	r0, 6822 <CC_PalPowerSaveModeInit+0x16>
    681a:	4b08      	ldr	r3, [pc, #32]	; (683c <CC_PalPowerSaveModeInit+0x30>)
    681c:	4808      	ldr	r0, [pc, #32]	; (6840 <CC_PalPowerSaveModeInit+0x34>)
    681e:	685b      	ldr	r3, [r3, #4]
    6820:	4798      	blx	r3
    6822:	4a08      	ldr	r2, [pc, #32]	; (6844 <CC_PalPowerSaveModeInit+0x38>)
    6824:	68eb      	ldr	r3, [r5, #12]
    6826:	6920      	ldr	r0, [r4, #16]
    6828:	2100      	movs	r1, #0
    682a:	6011      	str	r1, [r2, #0]
    682c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6830:	4718      	bx	r3
    6832:	bf00      	nop
    6834:	200000dc 	.word	0x200000dc
    6838:	200000f0 	.word	0x200000f0
    683c:	200000d4 	.word	0x200000d4
    6840:	000080c8 	.word	0x000080c8
    6844:	20000fa4 	.word	0x20000fa4

00006848 <CC_PalPowerSaveModeSelect>:
    6848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    684a:	4d1a      	ldr	r5, [pc, #104]	; (68b4 <CC_PalPowerSaveModeSelect+0x6c>)
    684c:	4e1a      	ldr	r6, [pc, #104]	; (68b8 <CC_PalPowerSaveModeSelect+0x70>)
    684e:	4604      	mov	r4, r0
    6850:	68b2      	ldr	r2, [r6, #8]
    6852:	6928      	ldr	r0, [r5, #16]
    6854:	4790      	blx	r2
    6856:	b9e8      	cbnz	r0, 6894 <CC_PalPowerSaveModeSelect+0x4c>
    6858:	4f18      	ldr	r7, [pc, #96]	; (68bc <CC_PalPowerSaveModeSelect+0x74>)
    685a:	683b      	ldr	r3, [r7, #0]
    685c:	b14c      	cbz	r4, 6872 <CC_PalPowerSaveModeSelect+0x2a>
    685e:	b1a3      	cbz	r3, 688a <CC_PalPowerSaveModeSelect+0x42>
    6860:	2b01      	cmp	r3, #1
    6862:	d019      	beq.n	6898 <CC_PalPowerSaveModeSelect+0x50>
    6864:	3b01      	subs	r3, #1
    6866:	603b      	str	r3, [r7, #0]
    6868:	6928      	ldr	r0, [r5, #16]
    686a:	68f3      	ldr	r3, [r6, #12]
    686c:	4798      	blx	r3
    686e:	2000      	movs	r0, #0
    6870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6872:	b943      	cbnz	r3, 6886 <CC_PalPowerSaveModeSelect+0x3e>
    6874:	4a12      	ldr	r2, [pc, #72]	; (68c0 <CC_PalPowerSaveModeSelect+0x78>)
    6876:	2101      	movs	r1, #1
    6878:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    687c:	4911      	ldr	r1, [pc, #68]	; (68c4 <CC_PalPowerSaveModeSelect+0x7c>)
    687e:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    6882:	2a00      	cmp	r2, #0
    6884:	d1fb      	bne.n	687e <CC_PalPowerSaveModeSelect+0x36>
    6886:	3301      	adds	r3, #1
    6888:	603b      	str	r3, [r7, #0]
    688a:	68f3      	ldr	r3, [r6, #12]
    688c:	6928      	ldr	r0, [r5, #16]
    688e:	4798      	blx	r3
    6890:	2000      	movs	r0, #0
    6892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6894:	480c      	ldr	r0, [pc, #48]	; (68c8 <CC_PalPowerSaveModeSelect+0x80>)
    6896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6898:	4a0a      	ldr	r2, [pc, #40]	; (68c4 <CC_PalPowerSaveModeSelect+0x7c>)
    689a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    689e:	2b00      	cmp	r3, #0
    68a0:	d1fb      	bne.n	689a <CC_PalPowerSaveModeSelect+0x52>
    68a2:	4a07      	ldr	r2, [pc, #28]	; (68c0 <CC_PalPowerSaveModeSelect+0x78>)
    68a4:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    68a8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    68ac:	f7ff ff48 	bl	6740 <CC_HalMaskInterrupt>
    68b0:	683b      	ldr	r3, [r7, #0]
    68b2:	e7d7      	b.n	6864 <CC_PalPowerSaveModeSelect+0x1c>
    68b4:	200000dc 	.word	0x200000dc
    68b8:	200000f0 	.word	0x200000f0
    68bc:	20000fa4 	.word	0x20000fa4
    68c0:	5002a000 	.word	0x5002a000
    68c4:	5002b000 	.word	0x5002b000
    68c8:	ffff8fe9 	.word	0xffff8fe9

000068cc <_button_callback>:
}
    68cc:	4770      	bx	lr

000068ce <z_log_msg_static_create.constprop.0>:
    68ce:	2300      	movs	r3, #0
    68d0:	f7fb baf2 	b.w	1eb8 <z_impl_z_log_msg_static_create>

000068d4 <transition>:
void transition(StateMachine *sm, StatePtr new_state){
    68d4:	b570      	push	{r4, r5, r6, lr}
    68d6:	4604      	mov	r4, r0
    68d8:	460d      	mov	r5, r1
    sm->current_state(sm, EXIT);
    68da:	6803      	ldr	r3, [r0, #0]
    68dc:	2102      	movs	r1, #2
    68de:	4798      	blx	r3
    sm->current_state = new_state;
    68e0:	6025      	str	r5, [r4, #0]
    sm->current_state(sm, ENTRY);
    68e2:	4620      	mov	r0, r4
    68e4:	462b      	mov	r3, r5
    68e6:	2101      	movs	r1, #1
}
    68e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sm->current_state(sm, ENTRY);
    68ec:	4718      	bx	r3

000068ee <cbpprintf_external>:
{
    68ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    68f2:	4606      	mov	r6, r0
    68f4:	460d      	mov	r5, r1
    68f6:	4617      	mov	r7, r2
	if (buf == NULL) {
    68f8:	4698      	mov	r8, r3
    68fa:	b32b      	cbz	r3, 6948 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
    68fc:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
    6900:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    6904:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
    6906:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    6908:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    690c:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    6910:	441c      	add	r4, r3
    6912:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
    6914:	f04f 0a00 	mov.w	sl, #0
    6918:	45ca      	cmp	sl, r9
    691a:	d309      	bcc.n	6930 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
    691c:	f8d8 2004 	ldr.w	r2, [r8, #4]
    6920:	f108 0308 	add.w	r3, r8, #8
    6924:	4639      	mov	r1, r7
    6926:	4630      	mov	r0, r6
    6928:	46ac      	mov	ip, r5
}
    692a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    692e:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    6930:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    6934:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
    6938:	4620      	mov	r0, r4
    693a:	f000 fcc0 	bl	72be <strlen>
    693e:	3001      	adds	r0, #1
    6940:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    6942:	f10a 0a01 	add.w	sl, sl, #1
    6946:	e7e7      	b.n	6918 <cbpprintf_external+0x2a>
}
    6948:	f06f 0015 	mvn.w	r0, #21
    694c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00006950 <is_ptr>:
{
    6950:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
    6952:	2500      	movs	r5, #0
{
    6954:	4602      	mov	r2, r0
	bool mod = false;
    6956:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
    6958:	4614      	mov	r4, r2
    695a:	f814 3b01 	ldrb.w	r3, [r4], #1
    695e:	b90b      	cbnz	r3, 6964 <is_ptr+0x14>
					return false;
    6960:	4618      	mov	r0, r3
    6962:	e009      	b.n	6978 <is_ptr+0x28>
		if (mod) {
    6964:	b198      	cbz	r0, 698e <is_ptr+0x3e>
			if (cnt == n) {
    6966:	428d      	cmp	r5, r1
    6968:	d107      	bne.n	697a <is_ptr+0x2a>
				if (c == 'p') {
    696a:	2b70      	cmp	r3, #112	; 0x70
    696c:	d004      	beq.n	6978 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
    696e:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
    6972:	2a3a      	cmp	r2, #58	; 0x3a
    6974:	d80b      	bhi.n	698e <is_ptr+0x3e>
					return false;
    6976:	2000      	movs	r0, #0
}
    6978:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
    697a:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
    697e:	2e3a      	cmp	r6, #58	; 0x3a
    6980:	d805      	bhi.n	698e <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
    6982:	7853      	ldrb	r3, [r2, #1]
				cnt++;
    6984:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
    6986:	1c94      	adds	r4, r2, #2
    6988:	2b00      	cmp	r3, #0
    698a:	d0e9      	beq.n	6960 <is_ptr+0x10>
    698c:	2000      	movs	r0, #0
		if (c == '%') {
    698e:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
    6990:	bf08      	it	eq
    6992:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
    6996:	4622      	mov	r2, r4
    6998:	e7de      	b.n	6958 <is_ptr+0x8>

0000699a <arch_printk_char_out>:
}
    699a:	2000      	movs	r0, #0
    699c:	4770      	bx	lr

0000699e <str_out>:
{
    699e:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    69a0:	688a      	ldr	r2, [r1, #8]
    69a2:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    69a4:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    69a6:	b114      	cbz	r4, 69ae <str_out+0x10>
    69a8:	684b      	ldr	r3, [r1, #4]
    69aa:	4293      	cmp	r3, r2
    69ac:	dc01      	bgt.n	69b2 <str_out+0x14>
		ctx->count++;
    69ae:	608d      	str	r5, [r1, #8]
}
    69b0:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    69b2:	3b01      	subs	r3, #1
    69b4:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    69b6:	bf08      	it	eq
    69b8:	2200      	moveq	r2, #0
    69ba:	608d      	str	r5, [r1, #8]
    69bc:	bf0c      	ite	eq
    69be:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    69c0:	54a0      	strbne	r0, [r4, r2]
    69c2:	e7f5      	b.n	69b0 <str_out+0x12>

000069c4 <printk>:
{
    69c4:	b40f      	push	{r0, r1, r2, r3}
    69c6:	b507      	push	{r0, r1, r2, lr}
    69c8:	a904      	add	r1, sp, #16
    69ca:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    69ce:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    69d0:	f000 fbc8 	bl	7164 <z_log_vprintk>
}
    69d4:	b003      	add	sp, #12
    69d6:	f85d eb04 	ldr.w	lr, [sp], #4
    69da:	b004      	add	sp, #16
    69dc:	4770      	bx	lr

000069de <snprintk>:
{
    69de:	b40c      	push	{r2, r3}
    69e0:	b507      	push	{r0, r1, r2, lr}
    69e2:	ab04      	add	r3, sp, #16
    69e4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    69e8:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    69ea:	f7fa fadf 	bl	fac <vsnprintk>
}
    69ee:	b003      	add	sp, #12
    69f0:	f85d eb04 	ldr.w	lr, [sp], #4
    69f4:	b002      	add	sp, #8
    69f6:	4770      	bx	lr

000069f8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    69f8:	4604      	mov	r4, r0
    69fa:	b508      	push	{r3, lr}
    69fc:	4608      	mov	r0, r1
    69fe:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    6a00:	461a      	mov	r2, r3
    6a02:	47a0      	blx	r4
	return z_impl_z_current_get();
    6a04:	f7ff face 	bl	5fa4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    6a08:	f7fc fd40 	bl	348c <z_impl_k_thread_abort>

00006a0c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6a0c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    6a0e:	f013 0307 	ands.w	r3, r3, #7
    6a12:	d105      	bne.n	6a20 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    6a14:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    6a16:	2b00      	cmp	r3, #0
    6a18:	bf0c      	ite	eq
    6a1a:	2000      	moveq	r0, #0
    6a1c:	2003      	movne	r0, #3
    6a1e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    6a20:	2b02      	cmp	r3, #2
    6a22:	d105      	bne.n	6a30 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    6a24:	8b40      	ldrh	r0, [r0, #26]
    6a26:	fab0 f080 	clz	r0, r0
    6a2a:	0940      	lsrs	r0, r0, #5
    6a2c:	0080      	lsls	r0, r0, #2
    6a2e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    6a30:	2b01      	cmp	r3, #1
    6a32:	d105      	bne.n	6a40 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    6a34:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    6a36:	2b00      	cmp	r3, #0
    6a38:	bf0c      	ite	eq
    6a3a:	2000      	moveq	r0, #0
    6a3c:	2005      	movne	r0, #5
    6a3e:	4770      	bx	lr
	int evt = EVT_NOP;
    6a40:	2000      	movs	r0, #0
}
    6a42:	4770      	bx	lr

00006a44 <validate_args>:
{
    6a44:	b510      	push	{r4, lr}
    6a46:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    6a48:	b100      	cbz	r0, 6a4c <validate_args+0x8>
    6a4a:	b911      	cbnz	r1, 6a52 <validate_args+0xe>
		return -EINVAL;
    6a4c:	f06f 0015 	mvn.w	r0, #21
}
    6a50:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    6a52:	1d08      	adds	r0, r1, #4
    6a54:	f000 f895 	bl	6b82 <sys_notify_validate>
	if ((rv == 0)
    6a58:	2800      	cmp	r0, #0
    6a5a:	d1f9      	bne.n	6a50 <validate_args+0xc>
	    && ((cli->notify.flags
    6a5c:	68a3      	ldr	r3, [r4, #8]
    6a5e:	2b03      	cmp	r3, #3
    6a60:	d9f6      	bls.n	6a50 <validate_args+0xc>
    6a62:	e7f3      	b.n	6a4c <validate_args+0x8>

00006a64 <notify_one>:
{
    6a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a68:	460d      	mov	r5, r1
    6a6a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6a6c:	4619      	mov	r1, r3
    6a6e:	1d28      	adds	r0, r5, #4
{
    6a70:	4690      	mov	r8, r2
    6a72:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6a74:	f000 f896 	bl	6ba4 <sys_notify_finalize>
	if (cb) {
    6a78:	4604      	mov	r4, r0
    6a7a:	b138      	cbz	r0, 6a8c <notify_one+0x28>
		cb(mgr, cli, state, res);
    6a7c:	4633      	mov	r3, r6
    6a7e:	4642      	mov	r2, r8
    6a80:	4629      	mov	r1, r5
    6a82:	4638      	mov	r0, r7
    6a84:	46a4      	mov	ip, r4
}
    6a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    6a8a:	4760      	bx	ip
}
    6a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006a90 <transition_complete>:
{
    6a90:	b410      	push	{r4}
	__asm__ volatile(
    6a92:	f04f 0420 	mov.w	r4, #32
    6a96:	f3ef 8211 	mrs	r2, BASEPRI
    6a9a:	f384 8812 	msr	BASEPRI_MAX, r4
    6a9e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    6aa2:	6141      	str	r1, [r0, #20]
}
    6aa4:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    6aa6:	2101      	movs	r1, #1
    6aa8:	f7fa ba96 	b.w	fd8 <process_event>

00006aac <onoff_manager_init>:
{
    6aac:	b538      	push	{r3, r4, r5, lr}
    6aae:	460c      	mov	r4, r1
	if ((mgr == NULL)
    6ab0:	4605      	mov	r5, r0
    6ab2:	b158      	cbz	r0, 6acc <onoff_manager_init+0x20>
	    || (transitions == NULL)
    6ab4:	b151      	cbz	r1, 6acc <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    6ab6:	680b      	ldr	r3, [r1, #0]
    6ab8:	b143      	cbz	r3, 6acc <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    6aba:	684b      	ldr	r3, [r1, #4]
    6abc:	b133      	cbz	r3, 6acc <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    6abe:	221c      	movs	r2, #28
    6ac0:	2100      	movs	r1, #0
    6ac2:	f000 fc17 	bl	72f4 <memset>
    6ac6:	612c      	str	r4, [r5, #16]
	return 0;
    6ac8:	2000      	movs	r0, #0
}
    6aca:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    6acc:	f06f 0015 	mvn.w	r0, #21
    6ad0:	e7fb      	b.n	6aca <onoff_manager_init+0x1e>

00006ad2 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    6ad2:	b570      	push	{r4, r5, r6, lr}
    6ad4:	4605      	mov	r5, r0
    6ad6:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    6ad8:	f7ff ffb4 	bl	6a44 <validate_args>

	if (rv < 0) {
    6adc:	1e04      	subs	r4, r0, #0
    6ade:	db15      	blt.n	6b0c <onoff_request+0x3a>
    6ae0:	f04f 0320 	mov.w	r3, #32
    6ae4:	f3ef 8211 	mrs	r2, BASEPRI
    6ae8:	f383 8812 	msr	BASEPRI_MAX, r3
    6aec:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    6af0:	8b6b      	ldrh	r3, [r5, #26]
    6af2:	8b2c      	ldrh	r4, [r5, #24]
    6af4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6af8:	428b      	cmp	r3, r1
    6afa:	f004 0407 	and.w	r4, r4, #7
    6afe:	d107      	bne.n	6b10 <onoff_request+0x3e>
	__asm__ volatile(
    6b00:	f382 8811 	msr	BASEPRI, r2
    6b04:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    6b08:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    6b0c:	4620      	mov	r0, r4
    6b0e:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    6b10:	2c02      	cmp	r4, #2
    6b12:	d10c      	bne.n	6b2e <onoff_request+0x5c>
		mgr->refs += 1U;
    6b14:	3301      	adds	r3, #1
    6b16:	836b      	strh	r3, [r5, #26]
    6b18:	f382 8811 	msr	BASEPRI, r2
    6b1c:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    6b20:	2300      	movs	r3, #0
    6b22:	4622      	mov	r2, r4
    6b24:	4631      	mov	r1, r6
    6b26:	4628      	mov	r0, r5
    6b28:	f7ff ff9c 	bl	6a64 <notify_one>
    6b2c:	e7ee      	b.n	6b0c <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    6b2e:	2c06      	cmp	r4, #6
    6b30:	d814      	bhi.n	6b5c <onoff_request+0x8a>
    6b32:	e8df f004 	tbb	[pc, r4]
    6b36:	1304      	.short	0x1304
    6b38:	1a041313 	.word	0x1a041313
    6b3c:	04          	.byte	0x04
    6b3d:	00          	.byte	0x00
	parent->next = child;
    6b3e:	2300      	movs	r3, #0
    6b40:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    6b42:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    6b44:	b93b      	cbnz	r3, 6b56 <onoff_request+0x84>
	list->head = node;
    6b46:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    6b4a:	b9ac      	cbnz	r4, 6b78 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    6b4c:	2102      	movs	r1, #2
    6b4e:	4628      	mov	r0, r5
    6b50:	f7fa fa42 	bl	fd8 <process_event>
    6b54:	e7da      	b.n	6b0c <onoff_request+0x3a>
	parent->next = child;
    6b56:	601e      	str	r6, [r3, #0]
	list->tail = node;
    6b58:	606e      	str	r6, [r5, #4]
}
    6b5a:	e7f6      	b.n	6b4a <onoff_request+0x78>
    6b5c:	f382 8811 	msr	BASEPRI, r2
    6b60:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    6b64:	f06f 0404 	mvn.w	r4, #4
    6b68:	e7d0      	b.n	6b0c <onoff_request+0x3a>
    6b6a:	f382 8811 	msr	BASEPRI, r2
    6b6e:	f3bf 8f6f 	isb	sy
    6b72:	f06f 0485 	mvn.w	r4, #133	; 0x85
    6b76:	e7c9      	b.n	6b0c <onoff_request+0x3a>
    6b78:	f382 8811 	msr	BASEPRI, r2
    6b7c:	f3bf 8f6f 	isb	sy
		if (notify) {
    6b80:	e7c4      	b.n	6b0c <onoff_request+0x3a>

00006b82 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    6b82:	4603      	mov	r3, r0
    6b84:	b158      	cbz	r0, 6b9e <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6b86:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    6b88:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    6b8c:	2a01      	cmp	r2, #1
    6b8e:	d003      	beq.n	6b98 <sys_notify_validate+0x16>
    6b90:	2a03      	cmp	r2, #3
    6b92:	d104      	bne.n	6b9e <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    6b94:	6802      	ldr	r2, [r0, #0]
    6b96:	b112      	cbz	r2, 6b9e <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    6b98:	2000      	movs	r0, #0
    6b9a:	6098      	str	r0, [r3, #8]
    6b9c:	4770      	bx	lr
    6b9e:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    6ba2:	4770      	bx	lr

00006ba4 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6ba4:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    6ba6:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    6ba8:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    6bac:	2a03      	cmp	r2, #3
    6bae:	f04f 0200 	mov.w	r2, #0
{
    6bb2:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    6bb4:	bf0c      	ite	eq
    6bb6:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    6bb8:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    6bba:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    6bbc:	4770      	bx	lr

00006bbe <encode_uint>:
{
    6bbe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6bc2:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    6bc4:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    6bc6:	2b6f      	cmp	r3, #111	; 0x6f
{
    6bc8:	4680      	mov	r8, r0
    6bca:	460f      	mov	r7, r1
    6bcc:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    6bce:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    6bd2:	d029      	beq.n	6c28 <encode_uint+0x6a>
    6bd4:	d824      	bhi.n	6c20 <encode_uint+0x62>
		return 10;
    6bd6:	2b58      	cmp	r3, #88	; 0x58
    6bd8:	bf0c      	ite	eq
    6bda:	2610      	moveq	r6, #16
    6bdc:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    6bde:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    6be2:	4632      	mov	r2, r6
    6be4:	2300      	movs	r3, #0
    6be6:	4640      	mov	r0, r8
    6be8:	4639      	mov	r1, r7
    6bea:	f7f9 fa89 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6bee:	2a09      	cmp	r2, #9
    6bf0:	b2d4      	uxtb	r4, r2
    6bf2:	d81e      	bhi.n	6c32 <encode_uint+0x74>
    6bf4:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    6bf6:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6bf8:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    6bfa:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6bfe:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    6c02:	d301      	bcc.n	6c08 <encode_uint+0x4a>
    6c04:	45d1      	cmp	r9, sl
    6c06:	d811      	bhi.n	6c2c <encode_uint+0x6e>
	if (conv->flag_hash) {
    6c08:	782b      	ldrb	r3, [r5, #0]
    6c0a:	069b      	lsls	r3, r3, #26
    6c0c:	d505      	bpl.n	6c1a <encode_uint+0x5c>
		if (radix == 8) {
    6c0e:	2e08      	cmp	r6, #8
    6c10:	d115      	bne.n	6c3e <encode_uint+0x80>
			conv->altform_0 = true;
    6c12:	78ab      	ldrb	r3, [r5, #2]
    6c14:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    6c18:	70ab      	strb	r3, [r5, #2]
}
    6c1a:	4648      	mov	r0, r9
    6c1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    6c20:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    6c24:	2b70      	cmp	r3, #112	; 0x70
    6c26:	e7d7      	b.n	6bd8 <encode_uint+0x1a>
	switch (specifier) {
    6c28:	2608      	movs	r6, #8
    6c2a:	e7d8      	b.n	6bde <encode_uint+0x20>
		value /= radix;
    6c2c:	4680      	mov	r8, r0
    6c2e:	460f      	mov	r7, r1
    6c30:	e7d7      	b.n	6be2 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6c32:	f1bb 0f19 	cmp.w	fp, #25
    6c36:	bf94      	ite	ls
    6c38:	3437      	addls	r4, #55	; 0x37
    6c3a:	3457      	addhi	r4, #87	; 0x57
    6c3c:	e7db      	b.n	6bf6 <encode_uint+0x38>
		} else if (radix == 16) {
    6c3e:	2e10      	cmp	r6, #16
    6c40:	d1eb      	bne.n	6c1a <encode_uint+0x5c>
			conv->altform_0c = true;
    6c42:	78ab      	ldrb	r3, [r5, #2]
    6c44:	f043 0310 	orr.w	r3, r3, #16
    6c48:	e7e6      	b.n	6c18 <encode_uint+0x5a>

00006c4a <outs>:
{
    6c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c4e:	4607      	mov	r7, r0
    6c50:	4688      	mov	r8, r1
    6c52:	4615      	mov	r5, r2
    6c54:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    6c56:	4614      	mov	r4, r2
    6c58:	42b4      	cmp	r4, r6
    6c5a:	d305      	bcc.n	6c68 <outs+0x1e>
    6c5c:	b10e      	cbz	r6, 6c62 <outs+0x18>
	return (int)count;
    6c5e:	1b60      	subs	r0, r4, r5
    6c60:	e008      	b.n	6c74 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    6c62:	7823      	ldrb	r3, [r4, #0]
    6c64:	2b00      	cmp	r3, #0
    6c66:	d0fa      	beq.n	6c5e <outs+0x14>
		int rc = out((int)*sp++, ctx);
    6c68:	f814 0b01 	ldrb.w	r0, [r4], #1
    6c6c:	4641      	mov	r1, r8
    6c6e:	47b8      	blx	r7
		if (rc < 0) {
    6c70:	2800      	cmp	r0, #0
    6c72:	daf1      	bge.n	6c58 <outs+0xe>
}
    6c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006c78 <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    6c78:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
    6c7a:	6903      	ldr	r3, [r0, #16]
{
    6c7c:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
    6c7e:	f013 0008 	ands.w	r0, r3, #8
    6c82:	d109      	bne.n	6c98 <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    6c84:	6813      	ldr	r3, [r2, #0]
    6c86:	68d4      	ldr	r4, [r2, #12]
    6c88:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
    6c8a:	bf97      	itett	ls
    6c8c:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    6c8e:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
    6c90:	1ad3      	subls	r3, r2, r3

	return true;
    6c92:	2001      	movls	r0, #1
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    6c94:	600b      	str	r3, [r1, #0]
}
    6c96:	bd10      	pop	{r4, pc}
    6c98:	2300      	movs	r3, #0
		return false;
    6c9a:	4618      	mov	r0, r3
    6c9c:	e7fa      	b.n	6c94 <free_space+0x1c>

00006c9e <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    6c9e:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    6ca0:	a901      	add	r1, sp, #4
{
    6ca2:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    6ca4:	f7ff ffe8 	bl	6c78 <free_space>
    6ca8:	b120      	cbz	r0, 6cb4 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    6caa:	9b01      	ldr	r3, [sp, #4]
    6cac:	68e2      	ldr	r2, [r4, #12]
    6cae:	3b01      	subs	r3, #1
    6cb0:	4413      	add	r3, r2
    6cb2:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    6cb4:	6a20      	ldr	r0, [r4, #32]
    6cb6:	9b01      	ldr	r3, [sp, #4]
    6cb8:	1ac0      	subs	r0, r0, r3
}
    6cba:	3801      	subs	r0, #1
    6cbc:	b002      	add	sp, #8
    6cbe:	bd10      	pop	{r4, pc}

00006cc0 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
    6cc0:	b510      	push	{r4, lr}
    6cc2:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    6cc4:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    6cc6:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    6cc8:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    6cca:	07d2      	lsls	r2, r2, #31
    6ccc:	d502      	bpl.n	6cd4 <idx_inc+0x14>
		return i & (buffer->size - 1);
    6cce:	3b01      	subs	r3, #1
    6cd0:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    6cd2:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    6cd4:	4298      	cmp	r0, r3
    6cd6:	bf28      	it	cs
    6cd8:	1ac0      	subcs	r0, r0, r3
    6cda:	e7fa      	b.n	6cd2 <idx_inc+0x12>

00006cdc <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
    6cdc:	b510      	push	{r4, lr}
    6cde:	4604      	mov	r4, r0
    6ce0:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    6ce2:	68c1      	ldr	r1, [r0, #12]
    6ce4:	f7ff ffec 	bl	6cc0 <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
    6ce8:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    6cea:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
    6cec:	f023 0308 	bic.w	r3, r3, #8
    6cf0:	6123      	str	r3, [r4, #16]
}
    6cf2:	bd10      	pop	{r4, pc}

00006cf4 <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    6cf4:	b538      	push	{r3, r4, r5, lr}
    6cf6:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    6cf8:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
    6cfa:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    6cfc:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    6cfe:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    6d02:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
{
    6d06:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    6d08:	6801      	ldr	r1, [r0, #0]
    6d0a:	462a      	mov	r2, r5
    6d0c:	f7ff ffd8 	bl	6cc0 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    6d10:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    6d12:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    6d14:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    6d16:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
    6d18:	bf02      	ittt	eq
    6d1a:	6923      	ldreq	r3, [r4, #16]
    6d1c:	f043 0308 	orreq.w	r3, r3, #8
    6d20:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    6d22:	462a      	mov	r2, r5
    6d24:	4620      	mov	r0, r4
    6d26:	f7ff ffcb 	bl	6cc0 <idx_inc>
    6d2a:	6060      	str	r0, [r4, #4]
}
    6d2c:	bd38      	pop	{r3, r4, r5, pc}

00006d2e <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
    6d2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    6d32:	68c7      	ldr	r7, [r0, #12]
    6d34:	69c6      	ldr	r6, [r0, #28]
{
    6d36:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
    6d38:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
    6d3c:	f003 0303 	and.w	r3, r3, #3
    6d40:	2b02      	cmp	r3, #2
{
    6d42:	4604      	mov	r4, r0
    6d44:	4688      	mov	r8, r1
    6d46:	4691      	mov	r9, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    6d48:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    6d4c:	f04f 0300 	mov.w	r3, #0
    6d50:	d009      	beq.n	6d66 <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
    6d52:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
    6d54:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
    6d58:	6923      	ldr	r3, [r4, #16]
    6d5a:	0799      	lsls	r1, r3, #30
    6d5c:	d410      	bmi.n	6d80 <drop_item_locked+0x52>
		return false;
    6d5e:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
    6d60:	b003      	add	sp, #12
    6d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
    6d66:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
    6d6a:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
    6d6c:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
    6d6e:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
    6d72:	d0f1      	beq.n	6d58 <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
    6d74:	f7ff ffb2 	bl	6cdc <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    6d78:	68e3      	ldr	r3, [r4, #12]
    6d7a:	60a3      	str	r3, [r4, #8]
		return true;
    6d7c:	2001      	movs	r0, #1
    6d7e:	e7ef      	b.n	6d60 <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
    6d80:	69a3      	ldr	r3, [r4, #24]
    6d82:	4650      	mov	r0, sl
    6d84:	4798      	blx	r3
	return item->hdr.valid;
    6d86:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	if (!is_valid(item)) {
    6d8a:	07da      	lsls	r2, r3, #31
	uint32_t rd_wlen = buffer->get_wlen(item);
    6d8c:	4605      	mov	r5, r0
	if (!is_valid(item)) {
    6d8e:	d5e6      	bpl.n	6d5e <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
    6d90:	f013 0302 	ands.w	r3, r3, #2
    6d94:	d01d      	beq.n	6dd2 <drop_item_locked+0xa4>
		if (free_wlen) {
    6d96:	f1b8 0f00 	cmp.w	r8, #0
    6d9a:	d003      	beq.n	6da4 <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
    6d9c:	4641      	mov	r1, r8
    6d9e:	4620      	mov	r0, r4
    6da0:	f7ff ffa8 	bl	6cf4 <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    6da4:	6861      	ldr	r1, [r4, #4]
    6da6:	462a      	mov	r2, r5
    6da8:	4620      	mov	r0, r4
    6daa:	f7ff ff89 	bl	6cc0 <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    6dae:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    6db2:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    6db4:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    6db6:	d104      	bne.n	6dc2 <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
    6db8:	462a      	mov	r2, r5
    6dba:	4620      	mov	r0, r4
    6dbc:	f7ff ff80 	bl	6cc0 <idx_inc>
    6dc0:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
    6dc2:	68a3      	ldr	r3, [r4, #8]
    6dc4:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
    6dc6:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
    6dc8:	6923      	ldr	r3, [r4, #16]
    6dca:	f043 0308 	orr.w	r3, r3, #8
    6dce:	6123      	str	r3, [r4, #16]
    6dd0:	e7d4      	b.n	6d7c <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
    6dd2:	4601      	mov	r1, r0
    6dd4:	4620      	mov	r0, r4
    6dd6:	9301      	str	r3, [sp, #4]
    6dd8:	f7ff ff80 	bl	6cdc <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    6ddc:	68e2      	ldr	r2, [r4, #12]
    6dde:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
    6de0:	f1b8 0f00 	cmp.w	r8, #0
    6de4:	d004      	beq.n	6df0 <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
    6de6:	6821      	ldr	r1, [r4, #0]
    6de8:	69e2      	ldr	r2, [r4, #28]
    6dea:	9b01      	ldr	r3, [sp, #4]
    6dec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
    6df0:	eb05 0208 	add.w	r2, r5, r8
    6df4:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    6df8:	6821      	ldr	r1, [r4, #0]
    6dfa:	4620      	mov	r0, r4
    6dfc:	f7ff ff60 	bl	6cc0 <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
    6e00:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    6e02:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
    6e04:	f043 0308 	orr.w	r3, r3, #8
    6e08:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
    6e0a:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
    6e0e:	f36f 0300 	bfc	r3, #0, #1
    6e12:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
    6e16:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
    6e1a:	e7af      	b.n	6d7c <drop_item_locked+0x4e>

00006e1c <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
    6e1c:	b570      	push	{r4, r5, r6, lr}
    6e1e:	4604      	mov	r4, r0
    6e20:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
    6e22:	f7ff ff4d 	bl	6cc0 <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
    6e26:	6823      	ldr	r3, [r4, #0]
    6e28:	4283      	cmp	r3, r0
    6e2a:	d105      	bne.n	6e38 <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
    6e2c:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
    6e2e:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
    6e30:	f023 0308 	bic.w	r3, r3, #8
    6e34:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
    6e36:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    6e38:	69e2      	ldr	r2, [r4, #28]
	union mpsc_pbuf_generic skip = {
    6e3a:	00ab      	lsls	r3, r5, #2
    6e3c:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    6e40:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
    6e44:	4620      	mov	r0, r4
    6e46:	6861      	ldr	r1, [r4, #4]
    6e48:	462a      	mov	r2, r5
    6e4a:	f7ff ff39 	bl	6cc0 <idx_inc>
    6e4e:	6060      	str	r0, [r4, #4]
    6e50:	e7f1      	b.n	6e36 <post_drop_action+0x1a>

00006e52 <max_utilization_update>:
{
    6e52:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    6e54:	6903      	ldr	r3, [r0, #16]
    6e56:	075b      	lsls	r3, r3, #29
{
    6e58:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    6e5a:	d506      	bpl.n	6e6a <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    6e5c:	6a45      	ldr	r5, [r0, #36]	; 0x24
    6e5e:	f7ff ff1e 	bl	6c9e <get_usage>
    6e62:	4285      	cmp	r5, r0
    6e64:	bf2c      	ite	cs
    6e66:	6265      	strcs	r5, [r4, #36]	; 0x24
    6e68:	6260      	strcc	r0, [r4, #36]	; 0x24
}
    6e6a:	bd38      	pop	{r3, r4, r5, pc}

00006e6c <mpsc_pbuf_init>:
{
    6e6c:	b538      	push	{r3, r4, r5, lr}
    6e6e:	460d      	mov	r5, r1
    6e70:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    6e72:	221c      	movs	r2, #28
    6e74:	2100      	movs	r1, #0
    6e76:	f000 fa3d 	bl	72f4 <memset>
	buffer->get_wlen = cfg->get_wlen;
    6e7a:	68eb      	ldr	r3, [r5, #12]
    6e7c:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    6e7e:	68ab      	ldr	r3, [r5, #8]
    6e80:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    6e82:	682b      	ldr	r3, [r5, #0]
    6e84:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
    6e86:	686b      	ldr	r3, [r5, #4]
    6e88:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
    6e8a:	2200      	movs	r2, #0
    6e8c:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    6e8e:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
    6e90:	b123      	cbz	r3, 6e9c <mpsc_pbuf_init+0x30>
    6e92:	1e59      	subs	r1, r3, #1
    6e94:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    6e96:	bf08      	it	eq
    6e98:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    6e9c:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    6e9e:	2201      	movs	r2, #1
    6ea0:	f104 0028 	add.w	r0, r4, #40	; 0x28
    6ea4:	2100      	movs	r1, #0
}
    6ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6eaa:	f000 bcfb 	b.w	78a4 <z_impl_k_sem_init>

00006eae <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    6eae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6eb2:	b087      	sub	sp, #28
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
    6eb4:	2500      	movs	r5, #0
{
    6eb6:	9300      	str	r3, [sp, #0]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
    6eb8:	6a03      	ldr	r3, [r0, #32]
	union mpsc_pbuf_generic *dropped_item = NULL;
    6eba:	9503      	str	r5, [sp, #12]
	if (wlen > (buffer->size)) {
    6ebc:	428b      	cmp	r3, r1
{
    6ebe:	4604      	mov	r4, r0
    6ec0:	460e      	mov	r6, r1
    6ec2:	4692      	mov	sl, r2
	uint32_t tmp_wr_idx_shift = 0;
    6ec4:	9505      	str	r5, [sp, #20]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
    6ec6:	46a9      	mov	r9, r5
	if (wlen > (buffer->size)) {
    6ec8:	d33a      	bcc.n	6f40 <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
    6eca:	f04f 0320 	mov.w	r3, #32
    6ece:	f3ef 8b11 	mrs	fp, BASEPRI
    6ed2:	f383 8812 	msr	BASEPRI_MAX, r3
    6ed6:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
    6eda:	9a05      	ldr	r2, [sp, #20]
    6edc:	46d8      	mov	r8, fp
    6ede:	b12a      	cbz	r2, 6eec <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
    6ee0:	4629      	mov	r1, r5
    6ee2:	4620      	mov	r0, r4
    6ee4:	f7ff ff9a 	bl	6e1c <post_drop_action>
			tmp_wr_idx_shift = 0;
    6ee8:	2300      	movs	r3, #0
    6eea:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
    6eec:	a904      	add	r1, sp, #16
    6eee:	4620      	mov	r0, r4
    6ef0:	f7ff fec2 	bl	6c78 <free_space>

		if (free_wlen >= wlen) {
    6ef4:	9904      	ldr	r1, [sp, #16]
    6ef6:	42b1      	cmp	r1, r6
		wrap = free_space(buffer, &free_wlen);
    6ef8:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
    6efa:	d32a      	bcc.n	6f52 <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    6efc:	6822      	ldr	r2, [r4, #0]
			item =
    6efe:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
    6f00:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    6f04:	f021 0103 	bic.w	r1, r1, #3
    6f08:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
    6f0c:	eb03 0982 	add.w	r9, r3, r2, lsl #2
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    6f10:	6821      	ldr	r1, [r4, #0]
    6f12:	4632      	mov	r2, r6
    6f14:	4620      	mov	r0, r4
    6f16:	f7ff fed3 	bl	6cc0 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    6f1a:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    6f1c:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    6f1e:	4298      	cmp	r0, r3
    6f20:	d012      	beq.n	6f48 <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
    6f22:	2700      	movs	r7, #0
	__asm__ volatile(
    6f24:	f388 8811 	msr	BASEPRI, r8
    6f28:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
    6f2c:	9903      	ldr	r1, [sp, #12]
    6f2e:	b129      	cbz	r1, 6f3c <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    6f30:	6962      	ldr	r2, [r4, #20]
    6f32:	b10a      	cbz	r2, 6f38 <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
    6f34:	4620      	mov	r0, r4
    6f36:	4790      	blx	r2
			}
			dropped_item = NULL;
    6f38:	2300      	movs	r3, #0
    6f3a:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
    6f3c:	2f00      	cmp	r7, #0
    6f3e:	d1c4      	bne.n	6eca <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    6f40:	4648      	mov	r0, r9
    6f42:	b007      	add	sp, #28
    6f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
    6f48:	6923      	ldr	r3, [r4, #16]
    6f4a:	f043 0308 	orr.w	r3, r3, #8
    6f4e:	6123      	str	r3, [r4, #16]
    6f50:	e7e7      	b.n	6f22 <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
    6f52:	b118      	cbz	r0, 6f5c <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
    6f54:	4620      	mov	r0, r4
    6f56:	f7ff fecd 	bl	6cf4 <add_skip_item>
			cont = true;
    6f5a:	e7e3      	b.n	6f24 <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    6f5c:	9b00      	ldr	r3, [sp, #0]
    6f5e:	ea5a 0303 	orrs.w	r3, sl, r3
    6f62:	d01a      	beq.n	6f9a <mpsc_pbuf_alloc+0xec>
    6f64:	9101      	str	r1, [sp, #4]
    6f66:	f000 fc7a 	bl	785e <k_is_in_isr>
    6f6a:	9901      	ldr	r1, [sp, #4]
    6f6c:	b9a8      	cbnz	r0, 6f9a <mpsc_pbuf_alloc+0xec>
    6f6e:	f38b 8811 	msr	BASEPRI, fp
    6f72:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    6f76:	9b00      	ldr	r3, [sp, #0]
    6f78:	4652      	mov	r2, sl
    6f7a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    6f7e:	f7fe fd0d 	bl	599c <z_impl_k_sem_take>
	__asm__ volatile(
    6f82:	f04f 0320 	mov.w	r3, #32
    6f86:	f3ef 8811 	mrs	r8, BASEPRI
    6f8a:	f383 8812 	msr	BASEPRI_MAX, r3
    6f8e:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
    6f92:	fab0 f780 	clz	r7, r0
    6f96:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    6f98:	e7c4      	b.n	6f24 <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
    6f9a:	ab05      	add	r3, sp, #20
    6f9c:	aa03      	add	r2, sp, #12
    6f9e:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
    6fa0:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
    6fa2:	f7ff fec4 	bl	6d2e <drop_item_locked>
    6fa6:	4607      	mov	r7, r0
    6fa8:	e7bc      	b.n	6f24 <mpsc_pbuf_alloc+0x76>

00006faa <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    6faa:	b570      	push	{r4, r5, r6, lr}
    6fac:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    6fae:	6983      	ldr	r3, [r0, #24]
    6fb0:	4608      	mov	r0, r1
{
    6fb2:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    6fb4:	4798      	blx	r3
    6fb6:	4602      	mov	r2, r0
    6fb8:	f04f 0320 	mov.w	r3, #32
    6fbc:	f3ef 8611 	mrs	r6, BASEPRI
    6fc0:	f383 8812 	msr	BASEPRI_MAX, r3
    6fc4:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    6fc8:	782b      	ldrb	r3, [r5, #0]
    6fca:	f043 0301 	orr.w	r3, r3, #1
    6fce:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    6fd0:	6861      	ldr	r1, [r4, #4]
    6fd2:	4620      	mov	r0, r4
    6fd4:	f7ff fe74 	bl	6cc0 <idx_inc>
    6fd8:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    6fda:	4620      	mov	r0, r4
    6fdc:	f7ff ff39 	bl	6e52 <max_utilization_update>
	__asm__ volatile(
    6fe0:	f386 8811 	msr	BASEPRI, r6
    6fe4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
    6fe8:	bd70      	pop	{r4, r5, r6, pc}

00006fea <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    6fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6fec:	4604      	mov	r4, r0
	__asm__ volatile(
    6fee:	f04f 0320 	mov.w	r3, #32
    6ff2:	f3ef 8611 	mrs	r6, BASEPRI
    6ff6:	f383 8812 	msr	BASEPRI_MAX, r3
    6ffa:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    6ffe:	6923      	ldr	r3, [r4, #16]
    7000:	f013 0f08 	tst.w	r3, #8
    7004:	68a3      	ldr	r3, [r4, #8]
    7006:	d102      	bne.n	700e <mpsc_pbuf_claim+0x24>
    7008:	6862      	ldr	r2, [r4, #4]
    700a:	4293      	cmp	r3, r2
    700c:	d900      	bls.n	7010 <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
    700e:	6a22      	ldr	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
    7010:	69e1      	ldr	r1, [r4, #28]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    7012:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
    7014:	b92a      	cbnz	r2, 7022 <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
    7016:	f386 8811 	msr	BASEPRI, r6
    701a:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
    701e:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
    7020:	e033      	b.n	708a <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
    7022:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
    7026:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
    702a:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
    702e:	d0f2      	beq.n	7016 <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
    7030:	2802      	cmp	r0, #2
    7032:	d103      	bne.n	703c <mpsc_pbuf_claim+0x52>
		return item->skip.len;
    7034:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
    7038:	08ad      	lsrs	r5, r5, #2
    703a:	d105      	bne.n	7048 <mpsc_pbuf_claim+0x5e>
    703c:	07d0      	lsls	r0, r2, #31
    703e:	d412      	bmi.n	7066 <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
    7040:	69a3      	ldr	r3, [r4, #24]
    7042:	4638      	mov	r0, r7
    7044:	4798      	blx	r3
    7046:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    7048:	68a1      	ldr	r1, [r4, #8]
    704a:	462a      	mov	r2, r5
    704c:	4620      	mov	r0, r4
    704e:	f7ff fe37 	bl	6cc0 <idx_inc>
				rd_idx_inc(buffer, inc);
    7052:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
    7054:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
    7056:	4620      	mov	r0, r4
    7058:	f7ff fe40 	bl	6cdc <rd_idx_inc>
    705c:	f386 8811 	msr	BASEPRI, r6
    7060:	f3bf 8f6f 	isb	sy
	} while (cont);
    7064:	e7c3      	b.n	6fee <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
    7066:	f042 0202 	orr.w	r2, r2, #2
    706a:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
						buffer->get_wlen(item));
    706e:	4638      	mov	r0, r7
    7070:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
    7072:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
    7074:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
    7076:	4629      	mov	r1, r5
						buffer->get_wlen(item));
    7078:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
    707a:	4620      	mov	r0, r4
    707c:	f7ff fe20 	bl	6cc0 <idx_inc>
				buffer->tmp_rd_idx =
    7080:	60a0      	str	r0, [r4, #8]
    7082:	f386 8811 	msr	BASEPRI, r6
    7086:	f3bf 8f6f 	isb	sy
}
    708a:	4638      	mov	r0, r7
    708c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000708e <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    708e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7090:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    7092:	6983      	ldr	r3, [r0, #24]
    7094:	4608      	mov	r0, r1
{
    7096:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    7098:	4798      	blx	r3
    709a:	4606      	mov	r6, r0
	__asm__ volatile(
    709c:	f04f 0320 	mov.w	r3, #32
    70a0:	f3ef 8711 	mrs	r7, BASEPRI
    70a4:	f383 8812 	msr	BASEPRI_MAX, r3
    70a8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    70ac:	782b      	ldrb	r3, [r5, #0]
    70ae:	f36f 0300 	bfc	r3, #0, #1
    70b2:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    70b4:	6923      	ldr	r3, [r4, #16]
    70b6:	079b      	lsls	r3, r3, #30
    70b8:	d505      	bpl.n	70c6 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    70ba:	68e2      	ldr	r2, [r4, #12]
    70bc:	69e3      	ldr	r3, [r4, #28]
    70be:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    70c2:	429d      	cmp	r5, r3
    70c4:	d11a      	bne.n	70fc <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
    70c6:	782b      	ldrb	r3, [r5, #0]
    70c8:	f36f 0341 	bfc	r3, #1, #1
    70cc:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    70ce:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    70d2:	4299      	cmp	r1, r3
    70d4:	d104      	bne.n	70e0 <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
    70d6:	4632      	mov	r2, r6
    70d8:	4620      	mov	r0, r4
    70da:	f7ff fdf1 	bl	6cc0 <idx_inc>
    70de:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
    70e0:	4631      	mov	r1, r6
    70e2:	4620      	mov	r0, r4
    70e4:	f7ff fdfa 	bl	6cdc <rd_idx_inc>
	__asm__ volatile(
    70e8:	f387 8811 	msr	BASEPRI, r7
    70ec:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    70f0:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    70f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    70f8:	f7fe bc2e 	b.w	5958 <z_impl_k_sem_give>
		witem->skip.len = wlen;
    70fc:	682b      	ldr	r3, [r5, #0]
    70fe:	f360 039f 	bfi	r3, r0, #2, #30
    7102:	602b      	str	r3, [r5, #0]
    7104:	e7f0      	b.n	70e8 <mpsc_pbuf_free+0x5a>

00007106 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    7106:	6902      	ldr	r2, [r0, #16]
    7108:	6883      	ldr	r3, [r0, #8]
    710a:	0712      	lsls	r2, r2, #28
    710c:	d402      	bmi.n	7114 <mpsc_pbuf_is_pending+0xe>
    710e:	6842      	ldr	r2, [r0, #4]
    7110:	429a      	cmp	r2, r3
    7112:	d200      	bcs.n	7116 <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
    7114:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    7116:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    7118:	1e18      	subs	r0, r3, #0
    711a:	bf18      	it	ne
    711c:	2001      	movne	r0, #1
    711e:	4770      	bx	lr

00007120 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    7120:	4770      	bx	lr

00007122 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
    7122:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    7124:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    7126:	bf5f      	itttt	pl
    7128:	6803      	ldrpl	r3, [r0, #0]
    712a:	8842      	ldrhpl	r2, [r0, #2]
    712c:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
    7130:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
    7134:	bf5d      	ittte	pl
    7136:	3017      	addpl	r0, #23
    7138:	f020 0007 	bicpl.w	r0, r0, #7
    713c:	0880      	lsrpl	r0, r0, #2
	return 0;
    713e:	2000      	movmi	r0, #0
}
    7140:	4770      	bx	lr

00007142 <dummy_timestamp>:
}
    7142:	2000      	movs	r0, #0
    7144:	4770      	bx	lr

00007146 <default_get_timestamp>:
    7146:	f000 ba70 	b.w	762a <sys_clock_cycle_get_32>

0000714a <atomic_inc>:
{
    714a:	4603      	mov	r3, r0
}
    714c:	f3bf 8f5b 	dmb	ish
    7150:	e853 0f00 	ldrex	r0, [r3]
    7154:	1c42      	adds	r2, r0, #1
    7156:	e843 2100 	strex	r1, r2, [r3]
    715a:	2900      	cmp	r1, #0
    715c:	d1f8      	bne.n	7150 <atomic_inc+0x6>
    715e:	f3bf 8f5b 	dmb	ish
    7162:	4770      	bx	lr

00007164 <z_log_vprintk>:
{
    7164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    7166:	2300      	movs	r3, #0
    7168:	e9cd 0102 	strd	r0, r1, [sp, #8]
    716c:	e9cd 3300 	strd	r3, r3, [sp]
    7170:	461a      	mov	r2, r3
    7172:	4619      	mov	r1, r3
    7174:	4618      	mov	r0, r3
    7176:	f7fa ff23 	bl	1fc0 <z_impl_z_log_msg_runtime_vcreate>
}
    717a:	b005      	add	sp, #20
    717c:	f85d fb04 	ldr.w	pc, [sp], #4

00007180 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
    7180:	2001      	movs	r0, #1
    7182:	f7fa bcd5 	b.w	1b30 <z_log_dropped>

00007186 <z_log_get_tag>:
}
    7186:	2000      	movs	r0, #0
    7188:	4770      	bx	lr

0000718a <z_cbprintf_cpy>:
{
    718a:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
    718c:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
    7190:	1b9b      	subs	r3, r3, r6
    7192:	428b      	cmp	r3, r1
{
    7194:	460c      	mov	r4, r1
    7196:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
    7198:	d30a      	bcc.n	71b0 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
    719a:	6813      	ldr	r3, [r2, #0]
    719c:	460a      	mov	r2, r1
    719e:	4601      	mov	r1, r0
    71a0:	1998      	adds	r0, r3, r6
    71a2:	f000 f89c 	bl	72de <memcpy>
	desc->off += len;
    71a6:	68ab      	ldr	r3, [r5, #8]
    71a8:	4423      	add	r3, r4
    71aa:	60ab      	str	r3, [r5, #8]
	return len;
    71ac:	4620      	mov	r0, r4
}
    71ae:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
    71b0:	f06f 001b 	mvn.w	r0, #27
    71b4:	e7fb      	b.n	71ae <z_cbprintf_cpy+0x24>

000071b6 <z_log_msg_finalize>:
{
    71b6:	b570      	push	{r4, r5, r6, lr}
    71b8:	460e      	mov	r6, r1
    71ba:	4615      	mov	r5, r2
    71bc:	4619      	mov	r1, r3
	if (!msg) {
    71be:	4604      	mov	r4, r0
    71c0:	b918      	cbnz	r0, 71ca <z_log_msg_finalize+0x14>
}
    71c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    71c6:	f7fa bcb3 	b.w	1b30 <z_log_dropped>
	if (data) {
    71ca:	b133      	cbz	r3, 71da <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
    71cc:	f3c2 234a 	ubfx	r3, r2, #9, #11
    71d0:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
    71d2:	0d12      	lsrs	r2, r2, #20
    71d4:	4418      	add	r0, r3
    71d6:	f000 f882 	bl	72de <memcpy>
	msg->hdr.source = source;
    71da:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
    71de:	4620      	mov	r0, r4
}
    71e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
    71e4:	f7fa be34 	b.w	1e50 <z_log_msg_commit>

000071e8 <buffer_write>:
{
    71e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    71ea:	4606      	mov	r6, r0
    71ec:	460d      	mov	r5, r1
    71ee:	4614      	mov	r4, r2
    71f0:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    71f2:	4621      	mov	r1, r4
    71f4:	4628      	mov	r0, r5
    71f6:	463a      	mov	r2, r7
    71f8:	47b0      	blx	r6
	} while (len != 0);
    71fa:	1a24      	subs	r4, r4, r0
		buf += processed;
    71fc:	4405      	add	r5, r0
	} while (len != 0);
    71fe:	d1f8      	bne.n	71f2 <buffer_write+0xa>
}
    7200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007202 <cbvprintf>:
{
    7202:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    7204:	2400      	movs	r4, #0
    7206:	9400      	str	r4, [sp, #0]
    7208:	f7f9 fff4 	bl	11f4 <z_cbvprintf_impl>
}
    720c:	b002      	add	sp, #8
    720e:	bd10      	pop	{r4, pc}

00007210 <log_output_flush>:
{
    7210:	b510      	push	{r4, lr}
		     output->control_block->offset,
    7212:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    7214:	6881      	ldr	r1, [r0, #8]
{
    7216:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    7218:	e9d2 2300 	ldrd	r2, r3, [r2]
    721c:	6800      	ldr	r0, [r0, #0]
    721e:	f7ff ffe3 	bl	71e8 <buffer_write>
	output->control_block->offset = 0;
    7222:	6863      	ldr	r3, [r4, #4]
    7224:	2200      	movs	r2, #0
    7226:	601a      	str	r2, [r3, #0]
}
    7228:	bd10      	pop	{r4, pc}

0000722a <out_func>:
{
    722a:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    722c:	684b      	ldr	r3, [r1, #4]
    722e:	681a      	ldr	r2, [r3, #0]
    7230:	68cb      	ldr	r3, [r1, #12]
    7232:	429a      	cmp	r2, r3
{
    7234:	4605      	mov	r5, r0
    7236:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    7238:	d102      	bne.n	7240 <out_func+0x16>
		log_output_flush(out_ctx);
    723a:	4608      	mov	r0, r1
    723c:	f7ff ffe8 	bl	7210 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    7240:	6863      	ldr	r3, [r4, #4]
    7242:	f3bf 8f5b 	dmb	ish
    7246:	e853 2f00 	ldrex	r2, [r3]
    724a:	1c51      	adds	r1, r2, #1
    724c:	e843 1000 	strex	r0, r1, [r3]
    7250:	2800      	cmp	r0, #0
    7252:	d1f8      	bne.n	7246 <out_func+0x1c>
    7254:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    7258:	68a3      	ldr	r3, [r4, #8]
    725a:	549d      	strb	r5, [r3, r2]
}
    725c:	2000      	movs	r0, #0
    725e:	bd38      	pop	{r3, r4, r5, pc}

00007260 <cr_out_func>:
	if (c == '\n') {
    7260:	280a      	cmp	r0, #10
{
    7262:	b538      	push	{r3, r4, r5, lr}
    7264:	4604      	mov	r4, r0
    7266:	460d      	mov	r5, r1
	if (c == '\n') {
    7268:	d102      	bne.n	7270 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
    726a:	200d      	movs	r0, #13
    726c:	f7ff ffdd 	bl	722a <out_func>
	out_func(c, ctx);
    7270:	4629      	mov	r1, r5
    7272:	4620      	mov	r0, r4
    7274:	f7ff ffd9 	bl	722a <out_func>
}
    7278:	2000      	movs	r0, #0
    727a:	bd38      	pop	{r3, r4, r5, pc}

0000727c <log_backend_uart_init>:
}
    727c:	4770      	bx	lr

0000727e <abort_function>:
{
    727e:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    7280:	2000      	movs	r0, #0
    7282:	f7fa fb69 	bl	1958 <sys_reboot>

00007286 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    7286:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    7288:	6800      	ldr	r0, [r0, #0]
    728a:	f7fb bbcb 	b.w	2a24 <z_arm_fatal_error>

0000728e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    728e:	2100      	movs	r1, #0
    7290:	2001      	movs	r0, #1
    7292:	f7fb bbc7 	b.w	2a24 <z_arm_fatal_error>

00007296 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    7296:	b508      	push	{r3, lr}
	handler();
    7298:	f7fb fc72 	bl	2b80 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    729c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    72a0:	f7fb bd5e 	b.w	2d60 <z_arm_exc_exit>

000072a4 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
    72a4:	2300      	movs	r3, #0
    72a6:	f7fa be07 	b.w	1eb8 <z_impl_z_log_msg_static_create>

000072aa <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    72aa:	3901      	subs	r1, #1
    72ac:	4603      	mov	r3, r0
    72ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    72b2:	b90a      	cbnz	r2, 72b8 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    72b4:	701a      	strb	r2, [r3, #0]

	return dest;
}
    72b6:	4770      	bx	lr
		*d = *s;
    72b8:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    72bc:	e7f7      	b.n	72ae <strcpy+0x4>

000072be <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    72be:	4603      	mov	r3, r0
	size_t n = 0;
    72c0:	2000      	movs	r0, #0

	while (*s != '\0') {
    72c2:	5c1a      	ldrb	r2, [r3, r0]
    72c4:	b902      	cbnz	r2, 72c8 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    72c6:	4770      	bx	lr
		n++;
    72c8:	3001      	adds	r0, #1
    72ca:	e7fa      	b.n	72c2 <strlen+0x4>

000072cc <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    72cc:	4603      	mov	r3, r0
	size_t n = 0;
    72ce:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    72d0:	5c1a      	ldrb	r2, [r3, r0]
    72d2:	b10a      	cbz	r2, 72d8 <strnlen+0xc>
    72d4:	4288      	cmp	r0, r1
    72d6:	d100      	bne.n	72da <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    72d8:	4770      	bx	lr
		n++;
    72da:	3001      	adds	r0, #1
    72dc:	e7f8      	b.n	72d0 <strnlen+0x4>

000072de <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    72de:	b510      	push	{r4, lr}
    72e0:	1e43      	subs	r3, r0, #1
    72e2:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    72e4:	4291      	cmp	r1, r2
    72e6:	d100      	bne.n	72ea <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    72e8:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    72ea:	f811 4b01 	ldrb.w	r4, [r1], #1
    72ee:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    72f2:	e7f7      	b.n	72e4 <memcpy+0x6>

000072f4 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    72f4:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    72f6:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    72f8:	4603      	mov	r3, r0
	while (n > 0) {
    72fa:	4293      	cmp	r3, r2
    72fc:	d100      	bne.n	7300 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    72fe:	4770      	bx	lr
		*(d_byte++) = c_byte;
    7300:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    7304:	e7f9      	b.n	72fa <memset+0x6>

00007306 <_stdout_hook_default>:
}
    7306:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    730a:	4770      	bx	lr

0000730c <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
    730c:	684b      	ldr	r3, [r1, #4]
    730e:	2b01      	cmp	r3, #1
    7310:	dd07      	ble.n	7322 <sprintf_out+0x16>
		*(p->ptr) = c;
    7312:	680b      	ldr	r3, [r1, #0]
    7314:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    7316:	680b      	ldr	r3, [r1, #0]
    7318:	3301      	adds	r3, #1
    731a:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    731c:	684b      	ldr	r3, [r1, #4]
    731e:	3b01      	subs	r3, #1
    7320:	604b      	str	r3, [r1, #4]
}
    7322:	2000      	movs	r0, #0
    7324:	4770      	bx	lr

00007326 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    7326:	2806      	cmp	r0, #6
    7328:	d108      	bne.n	733c <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    732a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    732e:	2201      	movs	r2, #1
    7330:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    7334:	f3bf 8f4f 	dsb	sy
        __WFE();
    7338:	bf20      	wfe
    while (true)
    733a:	e7fd      	b.n	7338 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    733c:	4770      	bx	lr

0000733e <pm_state_exit_post_ops>:
    733e:	2300      	movs	r3, #0
    7340:	f383 8811 	msr	BASEPRI, r3
    7344:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    7348:	4770      	bx	lr

0000734a <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    734a:	6903      	ldr	r3, [r0, #16]
    734c:	b2c9      	uxtb	r1, r1
    734e:	220c      	movs	r2, #12
    7350:	fb01 3302 	mla	r3, r1, r2, r3
    7354:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    7356:	f000 0007 	and.w	r0, r0, #7
    735a:	4770      	bx	lr

0000735c <set_on_state>:
	__asm__ volatile(
    735c:	f04f 0320 	mov.w	r3, #32
    7360:	f3ef 8211 	mrs	r2, BASEPRI
    7364:	f383 8812 	msr	BASEPRI_MAX, r3
    7368:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    736c:	6803      	ldr	r3, [r0, #0]
    736e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    7372:	f043 0302 	orr.w	r3, r3, #2
    7376:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    7378:	f382 8811 	msr	BASEPRI, r2
    737c:	f3bf 8f6f 	isb	sy
}
    7380:	4770      	bx	lr

00007382 <stop>:
{
    7382:	b570      	push	{r4, r5, r6, lr}
    7384:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    7386:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    7388:	f04f 0420 	mov.w	r4, #32
    738c:	f3ef 8511 	mrs	r5, BASEPRI
    7390:	f384 8812 	msr	BASEPRI_MAX, r4
    7394:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    7398:	260c      	movs	r6, #12
    739a:	fb06 3401 	mla	r4, r6, r1, r3
    739e:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    73a0:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    73a4:	d008      	beq.n	73b8 <stop+0x36>
    73a6:	42a2      	cmp	r2, r4
    73a8:	d006      	beq.n	73b8 <stop+0x36>
	__asm__ volatile(
    73aa:	f385 8811 	msr	BASEPRI, r5
    73ae:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    73b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    73b6:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    73b8:	4371      	muls	r1, r6
    73ba:	440b      	add	r3, r1
    73bc:	2201      	movs	r2, #1
    73be:	641a      	str	r2, [r3, #64]	; 0x40
    73c0:	f385 8811 	msr	BASEPRI, r5
    73c4:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    73c8:	6843      	ldr	r3, [r0, #4]
    73ca:	440b      	add	r3, r1
    73cc:	685b      	ldr	r3, [r3, #4]
    73ce:	4798      	blx	r3
	return 0;
    73d0:	2000      	movs	r0, #0
    73d2:	e7f0      	b.n	73b6 <stop+0x34>

000073d4 <api_stop>:
	return stop(dev, subsys, CTX_API);
    73d4:	2280      	movs	r2, #128	; 0x80
    73d6:	f7ff bfd4 	b.w	7382 <stop>

000073da <async_start>:
{
    73da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    73dc:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    73de:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    73e0:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    73e2:	f04f 0520 	mov.w	r5, #32
    73e6:	f3ef 8611 	mrs	r6, BASEPRI
    73ea:	f385 8812 	msr	BASEPRI_MAX, r5
    73ee:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    73f2:	250c      	movs	r5, #12
    73f4:	4369      	muls	r1, r5
    73f6:	440c      	add	r4, r1
    73f8:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    73fa:	f005 0c07 	and.w	ip, r5, #7
    73fe:	f1bc 0f01 	cmp.w	ip, #1
    7402:	d10b      	bne.n	741c <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    7404:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    7406:	f386 8811 	msr	BASEPRI, r6
    740a:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    740e:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    7412:	6843      	ldr	r3, [r0, #4]
    7414:	585b      	ldr	r3, [r3, r1]
    7416:	4798      	blx	r3
	return 0;
    7418:	2000      	movs	r0, #0
}
    741a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    741c:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    7420:	42af      	cmp	r7, r5
    7422:	f386 8811 	msr	BASEPRI, r6
    7426:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    742a:	bf0c      	ite	eq
    742c:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    7430:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    7434:	e7f1      	b.n	741a <async_start+0x40>

00007436 <api_start>:
{
    7436:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    7438:	2480      	movs	r4, #128	; 0x80
    743a:	9400      	str	r4, [sp, #0]
    743c:	f7ff ffcd 	bl	73da <async_start>
}
    7440:	b002      	add	sp, #8
    7442:	bd10      	pop	{r4, pc}

00007444 <onoff_started_callback>:
{
    7444:	b410      	push	{r4}
	return &data->mgr[type];
    7446:	6900      	ldr	r0, [r0, #16]
    7448:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    744a:	241c      	movs	r4, #28
    744c:	fb03 0004 	mla	r0, r3, r4, r0
    7450:	2100      	movs	r1, #0
}
    7452:	bc10      	pop	{r4}
	notify(mgr, 0);
    7454:	4710      	bx	r2

00007456 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    7456:	2000      	movs	r0, #0
    7458:	f000 b906 	b.w	7668 <nrfx_clock_start>

0000745c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    745c:	2000      	movs	r0, #0
    745e:	f000 b93f 	b.w	76e0 <nrfx_clock_stop>

00007462 <blocking_start_callback>:
{
    7462:	4610      	mov	r0, r2
    7464:	f7fe ba78 	b.w	5958 <z_impl_k_sem_give>

00007468 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7468:	6843      	ldr	r3, [r0, #4]
    746a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    746c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    7470:	600b      	str	r3, [r1, #0]
}
    7472:	2000      	movs	r0, #0
    7474:	4770      	bx	lr

00007476 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7476:	6843      	ldr	r3, [r0, #4]
    7478:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    747a:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    747e:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    7482:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    7486:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    748a:	2000      	movs	r0, #0
    748c:	4770      	bx	lr

0000748e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    748e:	6843      	ldr	r3, [r0, #4]
    7490:	685b      	ldr	r3, [r3, #4]
}
    7492:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    7494:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    7498:	4770      	bx	lr

0000749a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    749a:	6843      	ldr	r3, [r0, #4]
    749c:	685b      	ldr	r3, [r3, #4]
}
    749e:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    74a0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    74a4:	4770      	bx	lr

000074a6 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    74a6:	6843      	ldr	r3, [r0, #4]
    74a8:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    74aa:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    74ae:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    74b2:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    74b4:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    74b8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    74bc:	2000      	movs	r0, #0
    74be:	4770      	bx	lr

000074c0 <gpio_nrfx_manage_callback>:
{
    74c0:	b510      	push	{r4, lr}
	return port->data;
    74c2:	6903      	ldr	r3, [r0, #16]
	return list->head;
    74c4:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    74c6:	b1f8      	cbz	r0, 7508 <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    74c8:	4288      	cmp	r0, r1
    74ca:	d119      	bne.n	7500 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    74cc:	689c      	ldr	r4, [r3, #8]
	return node->next;
    74ce:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    74d0:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    74d2:	42a1      	cmp	r1, r4
    74d4:	d100      	bne.n	74d8 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    74d6:	6098      	str	r0, [r3, #8]
	parent->next = child;
    74d8:	2000      	movs	r0, #0
    74da:	6008      	str	r0, [r1, #0]
	if (set) {
    74dc:	b12a      	cbz	r2, 74ea <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    74de:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    74e0:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    74e2:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    74e4:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    74e6:	b902      	cbnz	r2, 74ea <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    74e8:	6099      	str	r1, [r3, #8]
	return 0;
    74ea:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    74ec:	e010      	b.n	7510 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    74ee:	4281      	cmp	r1, r0
    74f0:	d106      	bne.n	7500 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    74f2:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    74f4:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    74f6:	6898      	ldr	r0, [r3, #8]
    74f8:	4281      	cmp	r1, r0
    74fa:	d1ed      	bne.n	74d8 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    74fc:	609c      	str	r4, [r3, #8]
}
    74fe:	e7eb      	b.n	74d8 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    7500:	4604      	mov	r4, r0
    7502:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7504:	2800      	cmp	r0, #0
    7506:	d1f2      	bne.n	74ee <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    7508:	2a00      	cmp	r2, #0
    750a:	d1e8      	bne.n	74de <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    750c:	f06f 0015 	mvn.w	r0, #21
}
    7510:	bd10      	pop	{r4, pc}

00007512 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    7512:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    7514:	6843      	ldr	r3, [r0, #4]
    7516:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    7518:	7a05      	ldrb	r5, [r0, #8]
    751a:	6844      	ldr	r4, [r0, #4]
    751c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    7520:	42a3      	cmp	r3, r4
    7522:	d302      	bcc.n	752a <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    7524:	f06f 0001 	mvn.w	r0, #1
}
    7528:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    752a:	795c      	ldrb	r4, [r3, #5]
    752c:	428c      	cmp	r4, r1
    752e:	d001      	beq.n	7534 <pinctrl_lookup_state+0x22>
		(*state)++;
    7530:	3308      	adds	r3, #8
    7532:	e7f0      	b.n	7516 <pinctrl_lookup_state+0x4>
			return 0;
    7534:	2000      	movs	r0, #0
    7536:	e7f7      	b.n	7528 <pinctrl_lookup_state+0x16>

00007538 <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
    7538:	6902      	ldr	r2, [r0, #16]
{
    753a:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    753c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    7540:	e883 0003 	stmia.w	r3, {r0, r1}
}
    7544:	2000      	movs	r0, #0
    7546:	4770      	bx	lr

00007548 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    7548:	6843      	ldr	r3, [r0, #4]
    754a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    754c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    7550:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    7554:	4770      	bx	lr

00007556 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    7556:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    7558:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    755a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    755c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    7560:	b150      	cbz	r0, 7578 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
    7562:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7564:	2000      	movs	r0, #0
    7566:	7812      	ldrb	r2, [r2, #0]
    7568:	700a      	strb	r2, [r1, #0]
    756a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    756e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7572:	2201      	movs	r2, #1
    7574:	601a      	str	r2, [r3, #0]
	return 0;
    7576:	4770      	bx	lr
		return -1;
    7578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    757c:	4770      	bx	lr

0000757e <is_tx_ready.isra.0>:
	return config->uarte_regs;
    757e:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    7580:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7582:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    7586:	b940      	cbnz	r0, 759a <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    7588:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    758a:	079b      	lsls	r3, r3, #30
    758c:	d406      	bmi.n	759c <is_tx_ready.isra.0+0x1e>
    758e:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    7592:	3800      	subs	r0, #0
    7594:	bf18      	it	ne
    7596:	2001      	movne	r0, #1
    7598:	4770      	bx	lr
    759a:	2001      	movs	r0, #1
}
    759c:	4770      	bx	lr

0000759e <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    759e:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    75a0:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    75a2:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    75a6:	05c9      	lsls	r1, r1, #23
    75a8:	d518      	bpl.n	75dc <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    75aa:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    75ae:	b1a9      	cbz	r1, 75dc <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    75b0:	f04f 0020 	mov.w	r0, #32
    75b4:	f3ef 8111 	mrs	r1, BASEPRI
    75b8:	f380 8812 	msr	BASEPRI_MAX, r0
    75bc:	f3bf 8f6f 	isb	sy
    75c0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    75c4:	b130      	cbz	r0, 75d4 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    75c6:	2000      	movs	r0, #0
    75c8:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    75cc:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    75d0:	2001      	movs	r0, #1
    75d2:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    75d4:	f381 8811 	msr	BASEPRI, r1
    75d8:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    75dc:	6852      	ldr	r2, [r2, #4]
    75de:	06d2      	lsls	r2, r2, #27
    75e0:	d515      	bpl.n	760e <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    75e2:	f04f 0120 	mov.w	r1, #32
    75e6:	f3ef 8211 	mrs	r2, BASEPRI
    75ea:	f381 8812 	msr	BASEPRI_MAX, r1
    75ee:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    75f2:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    75f6:	b111      	cbz	r1, 75fe <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    75f8:	2100      	movs	r1, #0
    75fa:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    75fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    7602:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    7606:	f382 8811 	msr	BASEPRI, r2
    760a:	f3bf 8f6f 	isb	sy
}
    760e:	4770      	bx	lr

00007610 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    7610:	4770      	bx	lr

00007612 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    7612:	f100 0350 	add.w	r3, r0, #80	; 0x50
    7616:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    7618:	b29b      	uxth	r3, r3
    761a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    761e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    7622:	2200      	movs	r2, #0
    7624:	601a      	str	r2, [r3, #0]
    7626:	681b      	ldr	r3, [r3, #0]
}
    7628:	4770      	bx	lr

0000762a <sys_clock_cycle_get_32>:
{
    762a:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    762c:	f7fc fe50 	bl	42d0 <z_nrf_rtc_timer_read>
}
    7630:	bd08      	pop	{r3, pc}

00007632 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    7632:	f7fe bf5b 	b.w	64ec <nrf_cc3xx_platform_init_no_rng>

00007636 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
    7636:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    7638:	f7fb f8e8 	bl	280c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    763c:	f7fb f9bc 	bl	29b8 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
    7640:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    7644:	f7fe bf52 	b.w	64ec <nrf_cc3xx_platform_init_no_rng>

00007648 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    7648:	4700      	bx	r0

0000764a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    764a:	f000 ba2e 	b.w	7aaa <z_impl_k_busy_wait>

0000764e <nrfx_clock_enable>:
{
    764e:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    7650:	2000      	movs	r0, #0
    7652:	f7fb fa6f 	bl	2b34 <arch_irq_is_enabled>
    7656:	b908      	cbnz	r0, 765c <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    7658:	f7fb fa4a 	bl	2af0 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    765c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7660:	2200      	movs	r2, #0
    7662:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    7666:	bd08      	pop	{r3, pc}

00007668 <nrfx_clock_start>:
{
    7668:	b508      	push	{r3, lr}
    switch (domain)
    766a:	b110      	cbz	r0, 7672 <nrfx_clock_start+0xa>
    766c:	2801      	cmp	r0, #1
    766e:	d02c      	beq.n	76ca <nrfx_clock_start+0x62>
}
    7670:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7672:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7676:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    767a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    767e:	03c8      	lsls	r0, r1, #15
    7680:	d40b      	bmi.n	769a <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    7682:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    7686:	07d9      	lsls	r1, r3, #31
    7688:	d50f      	bpl.n	76aa <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    768a:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    768e:	079b      	lsls	r3, r3, #30
    7690:	d408      	bmi.n	76a4 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    7692:	2302      	movs	r3, #2
    7694:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    7698:	e7ea      	b.n	7670 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    769a:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    769e:	2b01      	cmp	r3, #1
    76a0:	d004      	beq.n	76ac <nrfx_clock_start+0x44>
    76a2:	b113      	cbz	r3, 76aa <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    76a4:	2000      	movs	r0, #0
    76a6:	f7fd f915 	bl	48d4 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    76aa:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    76ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    76b0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    76b4:	2300      	movs	r3, #0
    76b6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    76ba:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    76be:	2302      	movs	r3, #2
    76c0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    76c4:	2301      	movs	r3, #1
    76c6:	6093      	str	r3, [r2, #8]
}
    76c8:	e7d2      	b.n	7670 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    76ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    76ce:	2200      	movs	r2, #0
    76d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    76d4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    76d8:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    76dc:	6018      	str	r0, [r3, #0]
}
    76de:	e7c7      	b.n	7670 <nrfx_clock_start+0x8>

000076e0 <nrfx_clock_stop>:
    clock_stop(domain);
    76e0:	f7fd b8f8 	b.w	48d4 <clock_stop>

000076e4 <nrf_gpio_reconfigure>:
{
    76e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    76e6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    76e8:	a801      	add	r0, sp, #4
{
    76ea:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    76ee:	4616      	mov	r6, r2
    76f0:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    76f2:	f7fd f997 	bl	4a24 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    76f6:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    76f8:	f1b6 0c00 	subs.w	ip, r6, #0
    76fc:	bf18      	it	ne
    76fe:	f04f 0c01 	movne.w	ip, #1
    7702:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7706:	1e0b      	subs	r3, r1, #0
    7708:	bf18      	it	ne
    770a:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    770c:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    770e:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7712:	bf14      	ite	ne
    7714:	f04f 0c0c 	movne.w	ip, #12
    7718:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    771c:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    771e:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7722:	bf14      	ite	ne
    7724:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    7728:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    772c:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    772e:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7732:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    7736:	bf14      	ite	ne
    7738:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    773c:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7740:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    7744:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7748:	b101      	cbz	r1, 774c <nrf_gpio_reconfigure+0x68>
    774a:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    774c:	b10e      	cbz	r6, 7752 <nrf_gpio_reconfigure+0x6e>
    774e:	7836      	ldrb	r6, [r6, #0]
    7750:	0076      	lsls	r6, r6, #1
    7752:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7754:	b10d      	cbz	r5, 775a <nrf_gpio_reconfigure+0x76>
    7756:	782d      	ldrb	r5, [r5, #0]
    7758:	00ad      	lsls	r5, r5, #2
    775a:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    775c:	b10c      	cbz	r4, 7762 <nrf_gpio_reconfigure+0x7e>
    775e:	7824      	ldrb	r4, [r4, #0]
    7760:	0224      	lsls	r4, r4, #8
    7762:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    7764:	b10f      	cbz	r7, 776a <nrf_gpio_reconfigure+0x86>
    7766:	783f      	ldrb	r7, [r7, #0]
    7768:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    776a:	430c      	orrs	r4, r1
    776c:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    776e:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    7772:	b003      	add	sp, #12
    7774:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007776 <nrf_gpio_cfg_sense_set>:
{
    7776:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    7778:	f10d 030f 	add.w	r3, sp, #15
    777c:	9301      	str	r3, [sp, #4]
    777e:	2300      	movs	r3, #0
{
    7780:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    7784:	9300      	str	r3, [sp, #0]
    7786:	461a      	mov	r2, r3
    7788:	4619      	mov	r1, r3
    778a:	f7ff ffab 	bl	76e4 <nrf_gpio_reconfigure>
}
    778e:	b005      	add	sp, #20
    7790:	f85d fb04 	ldr.w	pc, [sp], #4

00007794 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    7794:	f7fd bcb4 	b.w	5100 <_DoInit>

00007798 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
    7798:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
    779a:	f7ff fffb 	bl	7794 <SEGGER_RTT_Init>

	return 0;
}
    779e:	2000      	movs	r0, #0
    77a0:	bd08      	pop	{r3, pc}

000077a2 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    77a2:	4770      	bx	lr

000077a4 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    77a4:	b140      	cbz	r0, 77b8 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    77a6:	68c3      	ldr	r3, [r0, #12]
    77a8:	7858      	ldrb	r0, [r3, #1]
    77aa:	f010 0001 	ands.w	r0, r0, #1
    77ae:	bf1e      	ittt	ne
    77b0:	7818      	ldrbne	r0, [r3, #0]
    77b2:	fab0 f080 	clzne	r0, r0
    77b6:	0940      	lsrne	r0, r0, #5
}
    77b8:	4770      	bx	lr

000077ba <z_early_memset>:
	(void) memset(dst, c, n);
    77ba:	f7ff bd9b 	b.w	72f4 <memset>

000077be <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    77be:	f7ff bd8e 	b.w	72de <memcpy>

000077c2 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    77c2:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    77c6:	4313      	orrs	r3, r2
    77c8:	f013 0303 	ands.w	r3, r3, #3
    77cc:	d10c      	bne.n	77e8 <create_free_list+0x26>
	slab->free_list = NULL;
    77ce:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    77d0:	6881      	ldr	r1, [r0, #8]
    77d2:	4299      	cmp	r1, r3
    77d4:	d801      	bhi.n	77da <create_free_list+0x18>
	return 0;
    77d6:	2000      	movs	r0, #0
    77d8:	4770      	bx	lr
		*(char **)p = slab->free_list;
    77da:	6941      	ldr	r1, [r0, #20]
    77dc:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    77de:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    77e0:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    77e2:	3301      	adds	r3, #1
		p += slab->block_size;
    77e4:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    77e6:	e7f3      	b.n	77d0 <create_free_list+0xe>
		return -EINVAL;
    77e8:	f06f 0015 	mvn.w	r0, #21
}
    77ec:	4770      	bx	lr

000077ee <k_mem_slab_init>:
{
    77ee:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    77f0:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    77f4:	2300      	movs	r3, #0
	slab->buffer = buffer;
    77f6:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    77f8:	6183      	str	r3, [r0, #24]
{
    77fa:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    77fc:	f7ff ffe1 	bl	77c2 <create_free_list>
	if (rc < 0) {
    7800:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
    7802:	bfa8      	it	ge
    7804:	e9c4 4400 	strdge	r4, r4, [r4]
}
    7808:	bd10      	pop	{r4, pc}

0000780a <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    780a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    780c:	4604      	mov	r4, r0
    780e:	460d      	mov	r5, r1
	__asm__ volatile(
    7810:	f04f 0320 	mov.w	r3, #32
    7814:	f3ef 8611 	mrs	r6, BASEPRI
    7818:	f383 8812 	msr	BASEPRI_MAX, r3
    781c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    7820:	6947      	ldr	r7, [r0, #20]
    7822:	b97f      	cbnz	r7, 7844 <k_mem_slab_free+0x3a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    7824:	f000 f8e3 	bl	79ee <z_unpend_first_thread>

		if (pending_thread != NULL) {
    7828:	b160      	cbz	r0, 7844 <k_mem_slab_free+0x3a>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    782a:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    782c:	6142      	str	r2, [r0, #20]
    782e:	f8c0 709c 	str.w	r7, [r0, #156]	; 0x9c
			z_ready_thread(pending_thread);
    7832:	f000 f87d 	bl	7930 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    7836:	4631      	mov	r1, r6
    7838:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    783c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    7840:	f7fe ba7a 	b.w	5d38 <z_reschedule>
	**(char ***) mem = slab->free_list;
    7844:	682b      	ldr	r3, [r5, #0]
    7846:	6962      	ldr	r2, [r4, #20]
    7848:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    784a:	682b      	ldr	r3, [r5, #0]
    784c:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    784e:	69a3      	ldr	r3, [r4, #24]
    7850:	3b01      	subs	r3, #1
    7852:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    7854:	f386 8811 	msr	BASEPRI, r6
    7858:	f3bf 8f6f 	isb	sy
}
    785c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000785e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    785e:	f3ef 8005 	mrs	r0, IPSR
}
    7862:	3800      	subs	r0, #0
    7864:	bf18      	it	ne
    7866:	2001      	movne	r0, #1
    7868:	4770      	bx	lr

0000786a <z_impl_k_thread_name_set>:
}
    786a:	f06f 0057 	mvn.w	r0, #87	; 0x57
    786e:	4770      	bx	lr

00007870 <k_thread_name_get>:
}
    7870:	2000      	movs	r0, #0
    7872:	4770      	bx	lr

00007874 <z_thread_mark_switched_out>:
}

void z_thread_mark_switched_out(void)
{
#if defined(CONFIG_SCHED_THREAD_USAGE) && !defined(CONFIG_USE_SWITCH)
	z_sched_usage_stop();
    7874:	f7fe be08 	b.w	6488 <z_sched_usage_stop>

00007878 <z_pm_save_idle_exit>:
{
    7878:	b508      	push	{r3, lr}
	pm_system_resume();
    787a:	f7fa febd 	bl	25f8 <pm_system_resume>
}
    787e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    7882:	f7ff bec5 	b.w	7610 <sys_clock_idle_exit>

00007886 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    7886:	f990 300e 	ldrsb.w	r3, [r0, #14]
    788a:	428b      	cmp	r3, r1
    788c:	d001      	beq.n	7892 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    788e:	f7fe ba0d 	b.w	5cac <z_set_prio>
}
    7892:	2000      	movs	r0, #0
    7894:	4770      	bx	lr

00007896 <z_impl_k_mutex_init>:
{
    7896:	4603      	mov	r3, r0
	mutex->owner = NULL;
    7898:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    789a:	e9c3 0002 	strd	r0, r0, [r3, #8]
    789e:	e9c3 3300 	strd	r3, r3, [r3]
}
    78a2:	4770      	bx	lr

000078a4 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    78a4:	b13a      	cbz	r2, 78b6 <z_impl_k_sem_init+0x12>
    78a6:	428a      	cmp	r2, r1
    78a8:	d305      	bcc.n	78b6 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    78aa:	e9c0 1202 	strd	r1, r2, [r0, #8]
    78ae:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    78b2:	2000      	movs	r0, #0
    78b4:	4770      	bx	lr
		return -EINVAL;
    78b6:	f06f 0015 	mvn.w	r0, #21
}
    78ba:	4770      	bx	lr

000078bc <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    78bc:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    78c0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    78c2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    78c4:	2300      	movs	r3, #0
	node->prev = NULL;
    78c6:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    78ca:	4770      	bx	lr

000078cc <unpend_thread_no_timeout>:
{
    78cc:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    78ce:	f7ff fff5 	bl	78bc <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    78d2:	7b43      	ldrb	r3, [r0, #13]
    78d4:	f023 0302 	bic.w	r3, r3, #2
    78d8:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    78da:	2300      	movs	r3, #0
    78dc:	6083      	str	r3, [r0, #8]
}
    78de:	bd08      	pop	{r3, pc}

000078e0 <add_to_waitq_locked>:
{
    78e0:	b538      	push	{r3, r4, r5, lr}
    78e2:	4604      	mov	r4, r0
    78e4:	460d      	mov	r5, r1
	unready_thread(thread);
    78e6:	f7fe f963 	bl	5bb0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    78ea:	7b63      	ldrb	r3, [r4, #13]
    78ec:	f043 0302 	orr.w	r3, r3, #2
    78f0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    78f2:	b1e5      	cbz	r5, 792e <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    78f4:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    78f6:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    78f8:	429d      	cmp	r5, r3
    78fa:	d109      	bne.n	7910 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    78fc:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    78fe:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    7902:	601c      	str	r4, [r3, #0]
	list->tail = node;
    7904:	606c      	str	r4, [r5, #4]
}
    7906:	e012      	b.n	792e <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    7908:	686a      	ldr	r2, [r5, #4]
    790a:	4293      	cmp	r3, r2
    790c:	d0f6      	beq.n	78fc <add_to_waitq_locked+0x1c>
    790e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7910:	2b00      	cmp	r3, #0
    7912:	d0f3      	beq.n	78fc <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    7914:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    7918:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    791c:	428a      	cmp	r2, r1
    791e:	d0f3      	beq.n	7908 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7920:	4291      	cmp	r1, r2
    7922:	ddf1      	ble.n	7908 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    7924:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7926:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    792a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    792c:	605c      	str	r4, [r3, #4]
}
    792e:	bd38      	pop	{r3, r4, r5, pc}

00007930 <z_ready_thread>:
{
    7930:	b510      	push	{r4, lr}
	__asm__ volatile(
    7932:	f04f 0320 	mov.w	r3, #32
    7936:	f3ef 8411 	mrs	r4, BASEPRI
    793a:	f383 8812 	msr	BASEPRI_MAX, r3
    793e:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    7942:	f7fe f901 	bl	5b48 <ready_thread>
	__asm__ volatile(
    7946:	f384 8811 	msr	BASEPRI, r4
    794a:	f3bf 8f6f 	isb	sy
}
    794e:	bd10      	pop	{r4, pc}

00007950 <z_unpend_thread_no_timeout>:
{
    7950:	b508      	push	{r3, lr}
	__asm__ volatile(
    7952:	f04f 0220 	mov.w	r2, #32
    7956:	f3ef 8111 	mrs	r1, BASEPRI
    795a:	f382 8812 	msr	BASEPRI_MAX, r2
    795e:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    7962:	6883      	ldr	r3, [r0, #8]
    7964:	b10b      	cbz	r3, 796a <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
    7966:	f7ff ffb1 	bl	78cc <unpend_thread_no_timeout>
	__asm__ volatile(
    796a:	f381 8811 	msr	BASEPRI, r1
    796e:	f3bf 8f6f 	isb	sy
}
    7972:	bd08      	pop	{r3, pc}

00007974 <z_sched_wake_thread>:
{
    7974:	b538      	push	{r3, r4, r5, lr}
    7976:	4604      	mov	r4, r0
	__asm__ volatile(
    7978:	f04f 0320 	mov.w	r3, #32
    797c:	f3ef 8511 	mrs	r5, BASEPRI
    7980:	f383 8812 	msr	BASEPRI_MAX, r3
    7984:	f3bf 8f6f 	isb	sy
		if (!killed) {
    7988:	7b43      	ldrb	r3, [r0, #13]
    798a:	f013 0f28 	tst.w	r3, #40	; 0x28
    798e:	d10b      	bne.n	79a8 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    7990:	6883      	ldr	r3, [r0, #8]
    7992:	b10b      	cbz	r3, 7998 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    7994:	f7ff ff9a 	bl	78cc <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7998:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    799a:	b951      	cbnz	r1, 79b2 <z_sched_wake_thread+0x3e>
    799c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    79a0:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
    79a2:	4620      	mov	r0, r4
    79a4:	f7fe f8d0 	bl	5b48 <ready_thread>
	__asm__ volatile(
    79a8:	f385 8811 	msr	BASEPRI, r5
    79ac:	f3bf 8f6f 	isb	sy
}
    79b0:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    79b2:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    79b6:	e7f3      	b.n	79a0 <z_sched_wake_thread+0x2c>

000079b8 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    79b8:	2101      	movs	r1, #1
    79ba:	3818      	subs	r0, #24
    79bc:	f7ff bfda 	b.w	7974 <z_sched_wake_thread>

000079c0 <z_unpend1_no_timeout>:
{
    79c0:	b508      	push	{r3, lr}
    79c2:	4603      	mov	r3, r0
	__asm__ volatile(
    79c4:	f04f 0220 	mov.w	r2, #32
    79c8:	f3ef 8111 	mrs	r1, BASEPRI
    79cc:	f382 8812 	msr	BASEPRI_MAX, r2
    79d0:	f3bf 8f6f 	isb	sy
	return list->head == list;
    79d4:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    79d6:	4283      	cmp	r3, r0
    79d8:	d007      	beq.n	79ea <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
    79da:	b108      	cbz	r0, 79e0 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
    79dc:	f7ff ff76 	bl	78cc <unpend_thread_no_timeout>
	__asm__ volatile(
    79e0:	f381 8811 	msr	BASEPRI, r1
    79e4:	f3bf 8f6f 	isb	sy
}
    79e8:	bd08      	pop	{r3, pc}
    79ea:	2000      	movs	r0, #0
    79ec:	e7f8      	b.n	79e0 <z_unpend1_no_timeout+0x20>

000079ee <z_unpend_first_thread>:
{
    79ee:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    79f0:	f04f 0320 	mov.w	r3, #32
    79f4:	f3ef 8511 	mrs	r5, BASEPRI
    79f8:	f383 8812 	msr	BASEPRI_MAX, r3
    79fc:	f3bf 8f6f 	isb	sy
	return list->head == list;
    7a00:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7a02:	42a0      	cmp	r0, r4
    7a04:	d00d      	beq.n	7a22 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    7a06:	b134      	cbz	r4, 7a16 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    7a08:	4620      	mov	r0, r4
    7a0a:	f7ff ff5f 	bl	78cc <unpend_thread_no_timeout>
    7a0e:	f104 0018 	add.w	r0, r4, #24
    7a12:	f000 f81e 	bl	7a52 <z_abort_timeout>
	__asm__ volatile(
    7a16:	f385 8811 	msr	BASEPRI, r5
    7a1a:	f3bf 8f6f 	isb	sy
}
    7a1e:	4620      	mov	r0, r4
    7a20:	bd38      	pop	{r3, r4, r5, pc}
    7a22:	2400      	movs	r4, #0
    7a24:	e7f7      	b.n	7a16 <z_unpend_first_thread+0x28>

00007a26 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7a26:	4603      	mov	r3, r0
    7a28:	b920      	cbnz	r0, 7a34 <z_reschedule_irqlock+0xe>
    7a2a:	f3ef 8205 	mrs	r2, IPSR
    7a2e:	b90a      	cbnz	r2, 7a34 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    7a30:	f7fb b8c6 	b.w	2bc0 <arch_swap>
    7a34:	f383 8811 	msr	BASEPRI, r3
    7a38:	f3bf 8f6f 	isb	sy
}
    7a3c:	4770      	bx	lr

00007a3e <z_reschedule_unlocked>:
	__asm__ volatile(
    7a3e:	f04f 0320 	mov.w	r3, #32
    7a42:	f3ef 8011 	mrs	r0, BASEPRI
    7a46:	f383 8812 	msr	BASEPRI_MAX, r3
    7a4a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    7a4e:	f7ff bfea 	b.w	7a26 <z_reschedule_irqlock>

00007a52 <z_abort_timeout>:
{
    7a52:	b510      	push	{r4, lr}
    7a54:	f04f 0220 	mov.w	r2, #32
    7a58:	f3ef 8411 	mrs	r4, BASEPRI
    7a5c:	f382 8812 	msr	BASEPRI_MAX, r2
    7a60:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    7a64:	6803      	ldr	r3, [r0, #0]
    7a66:	b13b      	cbz	r3, 7a78 <z_abort_timeout+0x26>
			remove_timeout(to);
    7a68:	f7fe fb4a 	bl	6100 <remove_timeout>
			ret = 0;
    7a6c:	2000      	movs	r0, #0
	__asm__ volatile(
    7a6e:	f384 8811 	msr	BASEPRI, r4
    7a72:	f3bf 8f6f 	isb	sy
}
    7a76:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    7a78:	f06f 0015 	mvn.w	r0, #21
    7a7c:	e7f7      	b.n	7a6e <z_abort_timeout+0x1c>

00007a7e <z_get_next_timeout_expiry>:
{
    7a7e:	b510      	push	{r4, lr}
	__asm__ volatile(
    7a80:	f04f 0320 	mov.w	r3, #32
    7a84:	f3ef 8411 	mrs	r4, BASEPRI
    7a88:	f383 8812 	msr	BASEPRI_MAX, r3
    7a8c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    7a90:	f7fe fb16 	bl	60c0 <next_timeout>
	__asm__ volatile(
    7a94:	f384 8811 	msr	BASEPRI, r4
    7a98:	f3bf 8f6f 	isb	sy
}
    7a9c:	bd10      	pop	{r4, pc}

00007a9e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    7a9e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    7aa0:	f7fe fc2a 	bl	62f8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    7aa4:	bd08      	pop	{r3, pc}

00007aa6 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    7aa6:	f7fe bc27 	b.w	62f8 <sys_clock_tick_get>

00007aaa <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    7aaa:	b108      	cbz	r0, 7ab0 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    7aac:	f7fb be56 	b.w	375c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    7ab0:	4770      	bx	lr

00007ab2 <k_timer_init>:
	timer->status = 0U;
    7ab2:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    7ab4:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    7ab8:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    7abc:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    7ac0:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    7ac4:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    7ac6:	6343      	str	r3, [r0, #52]	; 0x34
}
    7ac8:	4770      	bx	lr

00007aca <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    7aca:	b510      	push	{r4, lr}
    7acc:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    7ace:	f7ff ffc0 	bl	7a52 <z_abort_timeout>

	if (inactive) {
    7ad2:	b9b0      	cbnz	r0, 7b02 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    7ad4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7ad6:	b10b      	cbz	r3, 7adc <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    7ad8:	4620      	mov	r0, r4
    7ada:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    7adc:	f104 0018 	add.w	r0, r4, #24
    7ae0:	f7ff ff6e 	bl	79c0 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    7ae4:	b168      	cbz	r0, 7b02 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    7ae6:	f7ff ff23 	bl	7930 <z_ready_thread>
	__asm__ volatile(
    7aea:	f04f 0320 	mov.w	r3, #32
    7aee:	f3ef 8011 	mrs	r0, BASEPRI
    7af2:	f383 8812 	msr	BASEPRI_MAX, r3
    7af6:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    7afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7afe:	f7ff bf92 	b.w	7a26 <z_reschedule_irqlock>
    7b02:	bd10      	pop	{r4, pc}

00007b04 <sched_cpu_update_usage>:
	if (!cpu->usage.track_usage) {
    7b04:	f890 3020 	ldrb.w	r3, [r0, #32]
    7b08:	b153      	cbz	r3, 7b20 <sched_cpu_update_usage+0x1c>
	if (cpu->current != cpu->idle_thread) {
    7b0a:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    7b0e:	429a      	cmp	r2, r3
    7b10:	d006      	beq.n	7b20 <sched_cpu_update_usage+0x1c>
		cpu->usage.total += cycles;
    7b12:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
    7b16:	185b      	adds	r3, r3, r1
    7b18:	f142 0200 	adc.w	r2, r2, #0
    7b1c:	e9c0 3206 	strd	r3, r2, [r0, #24]
}
    7b20:	4770      	bx	lr

00007b22 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    7b22:	4770      	bx	lr
